
DMX_controllerv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005c20  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005c20  00005c20  00015c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000080  20000000  00005c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001db8  20000080  00005ca8  00020080  2**2
                  ALLOC
  4 .stack        00002000  20001e38  00007a60  00020080  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  7 .debug_info   0004cd4c  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006642  00000000  00000000  0006ce4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008b83  00000000  00000000  0007348f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ac8  00000000  00000000  0007c012  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d28  00000000  00000000  0007cada  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00025476  00000000  00000000  0007d802  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00017eea  00000000  00000000  000a2c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a3b74  00000000  00000000  000bab62  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001fb0  00000000  00000000  0015e6d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:


struct usart_module DMX_instance;
volatile uint16_t c;

void configure_DMX(void) {
       0:	38 3e 00 20 81 2b 00 00 2d 2c 00 00 31 2c 00 00     8>. .+..-,..1,..
	...
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
      2c:	35 2c 00 00 00 00 00 00 00 00 00 00 39 2c 00 00     5,..........9,..
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
      3c:	3d 2c 00 00 7d 2b 00 00 7d 2b 00 00 7d 2b 00 00     =,..}+..}+..}+..
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
      4c:	d5 07 00 00 7d 2b 00 00 7d 2b 00 00 7d 2b 00 00     ....}+..}+..}+..
    config_usart.baudrate    =					250000;
    config_usart.transfer_mode =				USART_TRANSFER_ASYNCHRONOUSLY;
    config_usart.mux_setting =					USART_RX_1_TX_0_XCK_1;
    config_usart.character_size =				USART_CHARACTER_SIZE_8BIT;
    config_usart.pinmux_pad0 =					PINMUX_PB16C_SERCOM5_PAD0;
    config_usart.pinmux_pad1 =					PINMUX_PB17C_SERCOM5_PAD1;
      5c:	7d 2b 00 00 7d 2b 00 00 29 1b 00 00 39 1b 00 00     }+..}+..)...9...
    config_usart.pinmux_pad2 =					PINMUX_UNUSED;
    config_usart.pinmux_pad3 =					PINMUX_UNUSED;
    config_usart.stopbits =						USART_STOPBITS_2;
    config_usart.parity =						USART_PARITY_NONE;
    config_usart.generator_source =				GCLK_GENERATOR_3;
      6c:	49 1b 00 00 59 1b 00 00 69 1b 00 00 79 1b 00 00     I...Y...i...y...
    config_usart.start_frame_detection_enable = true;
    while (usart_init(&DMX_instance, DMX_MODULE, &config_usart) != STATUS_OK);
      7c:	7d 2b 00 00 7d 2b 00 00 51 14 00 00 61 14 00 00     }+..}+..Q...a...
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      8c:	71 14 00 00 7d 2b 00 00 7d 2b 00 00 7d 2b 00 00     q...}+..}+..}+..
	SercomUsart *const usart_hw = &(module->hw->USART);
      9c:	7d 2b 00 00 7d 2b 00 00 b5 07 00 00 c5 07 00 00     }+..}+..........
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
      ac:	11 1c 00 00 29 0a 00 00 7d 2b 00 00 7d 2b 00 00     ....)...}+..}+..

000000bc <__do_global_dtors_aux>:
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
			module->transmitter_enabled = true;
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
	return (usart_hw->SYNCBUSY.reg);
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
	while (usart_is_syncing(module)) {
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
	return (usart_hw->SYNCBUSY.reg);
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
	while (usart_is_syncing(module)) {
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000080 	.word	0x20000080
			module->receiver_enabled = true;
      dc:	00000000 	.word	0x00000000
      e0:	00005c28 	.word	0x00005c28

000000e4 <frame_dummy>:
	while (usart_is_syncing(module)) {
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}

    usart_enable(&DMX_instance);
    usart_enable_transceiver(&DMX_instance, USART_TRANSCEIVER_TX);
    usart_enable_transceiver(&DMX_instance, USART_TRANSCEIVER_RX);
    delay_ms(1);
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
}
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000084 	.word	0x20000084
     110:	00005c28 	.word	0x00005c28
     114:	00005c28 	.word	0x00005c28
     118:	00000000 	.word	0x00000000

0000011c <lcd_pulseEnable>:
}



void lcd_pulseEnable(void)
{
     11c:	b5f0      	push	{r4, r5, r6, r7, lr}
     11e:	46d6      	mov	lr, sl
     120:	464f      	mov	r7, r9
     122:	4646      	mov	r6, r8
     124:	b5c0      	push	{r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     126:	2480      	movs	r4, #128	; 0x80
     128:	2382      	movs	r3, #130	; 0x82
     12a:	05db      	lsls	r3, r3, #23
     12c:	469a      	mov	sl, r3
     12e:	44a2      	add	sl, r4
     130:	4653      	mov	r3, sl
     132:	615c      	str	r4, [r3, #20]
    port_pin_set_output_level(PIN_LCD_EN, 0);
    delay_us(1);
     134:	2000      	movs	r0, #0
     136:	4b1a      	ldr	r3, [pc, #104]	; (1a0 <lcd_pulseEnable+0x84>)
     138:	4699      	mov	r9, r3
     13a:	4798      	blx	r3
     13c:	0002      	movs	r2, r0
     13e:	2300      	movs	r3, #0
     140:	4e18      	ldr	r6, [pc, #96]	; (1a4 <lcd_pulseEnable+0x88>)
     142:	2700      	movs	r7, #0
     144:	1992      	adds	r2, r2, r6
     146:	417b      	adcs	r3, r7
     148:	0010      	movs	r0, r2
     14a:	0019      	movs	r1, r3
     14c:	4b16      	ldr	r3, [pc, #88]	; (1a8 <lcd_pulseEnable+0x8c>)
     14e:	4698      	mov	r8, r3
     150:	4a16      	ldr	r2, [pc, #88]	; (1ac <lcd_pulseEnable+0x90>)
     152:	2300      	movs	r3, #0
     154:	47c0      	blx	r8
     156:	4d16      	ldr	r5, [pc, #88]	; (1b0 <lcd_pulseEnable+0x94>)
     158:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     15a:	4653      	mov	r3, sl
     15c:	619c      	str	r4, [r3, #24]
    port_pin_set_output_level(PIN_LCD_EN, 1);
    delay_us(1);
     15e:	2000      	movs	r0, #0
     160:	47c8      	blx	r9
     162:	0002      	movs	r2, r0
     164:	2300      	movs	r3, #0
     166:	1992      	adds	r2, r2, r6
     168:	417b      	adcs	r3, r7
     16a:	0010      	movs	r0, r2
     16c:	0019      	movs	r1, r3
     16e:	4a0f      	ldr	r2, [pc, #60]	; (1ac <lcd_pulseEnable+0x90>)
     170:	2300      	movs	r3, #0
     172:	47c0      	blx	r8
     174:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
     176:	4653      	mov	r3, sl
     178:	615c      	str	r4, [r3, #20]
    port_pin_set_output_level(PIN_LCD_EN, 0);
    delay_us(100);
     17a:	2000      	movs	r0, #0
     17c:	47c8      	blx	r9
     17e:	2264      	movs	r2, #100	; 0x64
     180:	2300      	movs	r3, #0
     182:	2100      	movs	r1, #0
     184:	4c0b      	ldr	r4, [pc, #44]	; (1b4 <lcd_pulseEnable+0x98>)
     186:	47a0      	blx	r4
     188:	1980      	adds	r0, r0, r6
     18a:	4179      	adcs	r1, r7
     18c:	4a07      	ldr	r2, [pc, #28]	; (1ac <lcd_pulseEnable+0x90>)
     18e:	2300      	movs	r3, #0
     190:	47c0      	blx	r8
     192:	47a8      	blx	r5
}
     194:	bc1c      	pop	{r2, r3, r4}
     196:	4690      	mov	r8, r2
     198:	4699      	mov	r9, r3
     19a:	46a2      	mov	sl, r4
     19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     19e:	46c0      	nop			; (mov r8, r8)
     1a0:	00002949 	.word	0x00002949
     1a4:	006acfbf 	.word	0x006acfbf
     1a8:	000037bd 	.word	0x000037bd
     1ac:	006acfc0 	.word	0x006acfc0
     1b0:	20000001 	.word	0x20000001
     1b4:	000037fd 	.word	0x000037fd

000001b8 <lcd_write8bits>:
{
     1b8:	b510      	push	{r4, lr}
	if (level) {
     1ba:	07c3      	lsls	r3, r0, #31
     1bc:	d538      	bpl.n	230 <lcd_write8bits+0x78>
		port_base->OUTSET.reg = pin_mask;
     1be:	2240      	movs	r2, #64	; 0x40
     1c0:	4b2c      	ldr	r3, [pc, #176]	; (274 <lcd_write8bits+0xbc>)
     1c2:	619a      	str	r2, [r3, #24]
	if (level) {
     1c4:	0783      	lsls	r3, r0, #30
     1c6:	d537      	bpl.n	238 <lcd_write8bits+0x80>
		port_base->OUTSET.reg = pin_mask;
     1c8:	2220      	movs	r2, #32
     1ca:	4b2a      	ldr	r3, [pc, #168]	; (274 <lcd_write8bits+0xbc>)
     1cc:	619a      	str	r2, [r3, #24]
	if (level) {
     1ce:	0743      	lsls	r3, r0, #29
     1d0:	d536      	bpl.n	240 <lcd_write8bits+0x88>
		port_base->OUTSET.reg = pin_mask;
     1d2:	2210      	movs	r2, #16
     1d4:	4b27      	ldr	r3, [pc, #156]	; (274 <lcd_write8bits+0xbc>)
     1d6:	619a      	str	r2, [r3, #24]
	if (level) {
     1d8:	0703      	lsls	r3, r0, #28
     1da:	d535      	bpl.n	248 <lcd_write8bits+0x90>
		port_base->OUTSET.reg = pin_mask;
     1dc:	2208      	movs	r2, #8
     1de:	4b25      	ldr	r3, [pc, #148]	; (274 <lcd_write8bits+0xbc>)
     1e0:	619a      	str	r2, [r3, #24]
	if (level) {
     1e2:	06c3      	lsls	r3, r0, #27
     1e4:	d534      	bpl.n	250 <lcd_write8bits+0x98>
		port_base->OUTSET.reg = pin_mask;
     1e6:	2204      	movs	r2, #4
     1e8:	4b22      	ldr	r3, [pc, #136]	; (274 <lcd_write8bits+0xbc>)
     1ea:	619a      	str	r2, [r3, #24]
	if (level) {
     1ec:	0683      	lsls	r3, r0, #26
     1ee:	d533      	bpl.n	258 <lcd_write8bits+0xa0>
		port_base->OUTSET.reg = pin_mask;
     1f0:	2202      	movs	r2, #2
     1f2:	4b20      	ldr	r3, [pc, #128]	; (274 <lcd_write8bits+0xbc>)
     1f4:	619a      	str	r2, [r3, #24]
	if (level) {
     1f6:	0643      	lsls	r3, r0, #25
     1f8:	d532      	bpl.n	260 <lcd_write8bits+0xa8>
		port_base->OUTSET.reg = pin_mask;
     1fa:	2201      	movs	r2, #1
     1fc:	4b1d      	ldr	r3, [pc, #116]	; (274 <lcd_write8bits+0xbc>)
     1fe:	619a      	str	r2, [r3, #24]
	if (level) {
     200:	09c0      	lsrs	r0, r0, #7
     202:	d131      	bne.n	268 <lcd_write8bits+0xb0>
		port_base->OUTCLR.reg = pin_mask;
     204:	2280      	movs	r2, #128	; 0x80
     206:	0612      	lsls	r2, r2, #24
     208:	4b1a      	ldr	r3, [pc, #104]	; (274 <lcd_write8bits+0xbc>)
     20a:	615a      	str	r2, [r3, #20]
    delay_us(1);
     20c:	2000      	movs	r0, #0
     20e:	4b1a      	ldr	r3, [pc, #104]	; (278 <lcd_write8bits+0xc0>)
     210:	4798      	blx	r3
     212:	0002      	movs	r2, r0
     214:	2300      	movs	r3, #0
     216:	4819      	ldr	r0, [pc, #100]	; (27c <lcd_write8bits+0xc4>)
     218:	2100      	movs	r1, #0
     21a:	1880      	adds	r0, r0, r2
     21c:	4159      	adcs	r1, r3
     21e:	4a18      	ldr	r2, [pc, #96]	; (280 <lcd_write8bits+0xc8>)
     220:	2300      	movs	r3, #0
     222:	4c18      	ldr	r4, [pc, #96]	; (284 <lcd_write8bits+0xcc>)
     224:	47a0      	blx	r4
     226:	4b18      	ldr	r3, [pc, #96]	; (288 <lcd_write8bits+0xd0>)
     228:	4798      	blx	r3
    lcd_pulseEnable();
     22a:	4b18      	ldr	r3, [pc, #96]	; (28c <lcd_write8bits+0xd4>)
     22c:	4798      	blx	r3
}
     22e:	bd10      	pop	{r4, pc}
     230:	2240      	movs	r2, #64	; 0x40
     232:	4b10      	ldr	r3, [pc, #64]	; (274 <lcd_write8bits+0xbc>)
     234:	615a      	str	r2, [r3, #20]
     236:	e7c5      	b.n	1c4 <lcd_write8bits+0xc>
     238:	2220      	movs	r2, #32
     23a:	4b0e      	ldr	r3, [pc, #56]	; (274 <lcd_write8bits+0xbc>)
     23c:	615a      	str	r2, [r3, #20]
     23e:	e7c6      	b.n	1ce <lcd_write8bits+0x16>
     240:	2210      	movs	r2, #16
     242:	4b0c      	ldr	r3, [pc, #48]	; (274 <lcd_write8bits+0xbc>)
     244:	615a      	str	r2, [r3, #20]
     246:	e7c7      	b.n	1d8 <lcd_write8bits+0x20>
     248:	2208      	movs	r2, #8
     24a:	4b0a      	ldr	r3, [pc, #40]	; (274 <lcd_write8bits+0xbc>)
     24c:	615a      	str	r2, [r3, #20]
     24e:	e7c8      	b.n	1e2 <lcd_write8bits+0x2a>
     250:	2204      	movs	r2, #4
     252:	4b08      	ldr	r3, [pc, #32]	; (274 <lcd_write8bits+0xbc>)
     254:	615a      	str	r2, [r3, #20]
     256:	e7c9      	b.n	1ec <lcd_write8bits+0x34>
     258:	2202      	movs	r2, #2
     25a:	4b06      	ldr	r3, [pc, #24]	; (274 <lcd_write8bits+0xbc>)
     25c:	615a      	str	r2, [r3, #20]
     25e:	e7ca      	b.n	1f6 <lcd_write8bits+0x3e>
     260:	2201      	movs	r2, #1
     262:	4b04      	ldr	r3, [pc, #16]	; (274 <lcd_write8bits+0xbc>)
     264:	615a      	str	r2, [r3, #20]
     266:	e7cb      	b.n	200 <lcd_write8bits+0x48>
		port_base->OUTSET.reg = pin_mask;
     268:	2280      	movs	r2, #128	; 0x80
     26a:	0612      	lsls	r2, r2, #24
     26c:	4b01      	ldr	r3, [pc, #4]	; (274 <lcd_write8bits+0xbc>)
     26e:	619a      	str	r2, [r3, #24]
     270:	e7cc      	b.n	20c <lcd_write8bits+0x54>
     272:	46c0      	nop			; (mov r8, r8)
     274:	41000080 	.word	0x41000080
     278:	00002949 	.word	0x00002949
     27c:	006acfbf 	.word	0x006acfbf
     280:	006acfc0 	.word	0x006acfc0
     284:	000037bd 	.word	0x000037bd
     288:	20000001 	.word	0x20000001
     28c:	0000011d 	.word	0x0000011d

00000290 <lcd_send>:
{
     290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     292:	46ce      	mov	lr, r9
     294:	4647      	mov	r7, r8
     296:	b580      	push	{r7, lr}
     298:	0006      	movs	r6, r0
	if (level) {
     29a:	2900      	cmp	r1, #0
     29c:	d12a      	bne.n	2f4 <lcd_send+0x64>
		port_base->OUTCLR.reg = pin_mask;
     29e:	2280      	movs	r2, #128	; 0x80
     2a0:	0092      	lsls	r2, r2, #2
     2a2:	4b17      	ldr	r3, [pc, #92]	; (300 <lcd_send+0x70>)
     2a4:	615a      	str	r2, [r3, #20]
    delay_us(1);
     2a6:	2000      	movs	r0, #0
     2a8:	4f16      	ldr	r7, [pc, #88]	; (304 <lcd_send+0x74>)
     2aa:	47b8      	blx	r7
     2ac:	0002      	movs	r2, r0
     2ae:	2300      	movs	r3, #0
     2b0:	4c15      	ldr	r4, [pc, #84]	; (308 <lcd_send+0x78>)
     2b2:	2500      	movs	r5, #0
     2b4:	1912      	adds	r2, r2, r4
     2b6:	416b      	adcs	r3, r5
     2b8:	0010      	movs	r0, r2
     2ba:	0019      	movs	r1, r3
     2bc:	4b13      	ldr	r3, [pc, #76]	; (30c <lcd_send+0x7c>)
     2be:	4698      	mov	r8, r3
     2c0:	4a13      	ldr	r2, [pc, #76]	; (310 <lcd_send+0x80>)
     2c2:	2300      	movs	r3, #0
     2c4:	47c0      	blx	r8
     2c6:	4b13      	ldr	r3, [pc, #76]	; (314 <lcd_send+0x84>)
     2c8:	4699      	mov	r9, r3
     2ca:	4798      	blx	r3
    lcd_write8bits(value);
     2cc:	0030      	movs	r0, r6
     2ce:	4b12      	ldr	r3, [pc, #72]	; (318 <lcd_send+0x88>)
     2d0:	4798      	blx	r3
    delay_us(100);
     2d2:	2000      	movs	r0, #0
     2d4:	47b8      	blx	r7
     2d6:	2264      	movs	r2, #100	; 0x64
     2d8:	2300      	movs	r3, #0
     2da:	2100      	movs	r1, #0
     2dc:	4e0f      	ldr	r6, [pc, #60]	; (31c <lcd_send+0x8c>)
     2de:	47b0      	blx	r6
     2e0:	1900      	adds	r0, r0, r4
     2e2:	4169      	adcs	r1, r5
     2e4:	4a0a      	ldr	r2, [pc, #40]	; (310 <lcd_send+0x80>)
     2e6:	2300      	movs	r3, #0
     2e8:	47c0      	blx	r8
     2ea:	47c8      	blx	r9
}
     2ec:	bc0c      	pop	{r2, r3}
     2ee:	4690      	mov	r8, r2
     2f0:	4699      	mov	r9, r3
     2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		port_base->OUTSET.reg = pin_mask;
     2f4:	2280      	movs	r2, #128	; 0x80
     2f6:	0092      	lsls	r2, r2, #2
     2f8:	4b01      	ldr	r3, [pc, #4]	; (300 <lcd_send+0x70>)
     2fa:	619a      	str	r2, [r3, #24]
     2fc:	e7d3      	b.n	2a6 <lcd_send+0x16>
     2fe:	46c0      	nop			; (mov r8, r8)
     300:	41000080 	.word	0x41000080
     304:	00002949 	.word	0x00002949
     308:	006acfbf 	.word	0x006acfbf
     30c:	000037bd 	.word	0x000037bd
     310:	006acfc0 	.word	0x006acfc0
     314:	20000001 	.word	0x20000001
     318:	000001b9 	.word	0x000001b9
     31c:	000037fd 	.word	0x000037fd

00000320 <lcd_command>:
{
     320:	b510      	push	{r4, lr}
    lcd_send(value, 0);
     322:	2100      	movs	r1, #0
     324:	4b01      	ldr	r3, [pc, #4]	; (32c <lcd_command+0xc>)
     326:	4798      	blx	r3
}
     328:	bd10      	pop	{r4, pc}
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	00000291 	.word	0x00000291

00000330 <lcd_clear>:
{
     330:	b510      	push	{r4, lr}
    lcd_command(LCD_CLEARDISPLAY);
     332:	2001      	movs	r0, #1
     334:	4b0b      	ldr	r3, [pc, #44]	; (364 <lcd_clear+0x34>)
     336:	4798      	blx	r3
    delay_us(3);
     338:	2000      	movs	r0, #0
     33a:	4b0b      	ldr	r3, [pc, #44]	; (368 <lcd_clear+0x38>)
     33c:	4798      	blx	r3
     33e:	0002      	movs	r2, r0
     340:	2300      	movs	r3, #0
     342:	0019      	movs	r1, r3
     344:	1880      	adds	r0, r0, r2
     346:	4159      	adcs	r1, r3
     348:	1880      	adds	r0, r0, r2
     34a:	4159      	adcs	r1, r3
     34c:	4a07      	ldr	r2, [pc, #28]	; (36c <lcd_clear+0x3c>)
     34e:	2300      	movs	r3, #0
     350:	1880      	adds	r0, r0, r2
     352:	4159      	adcs	r1, r3
     354:	4a06      	ldr	r2, [pc, #24]	; (370 <lcd_clear+0x40>)
     356:	2300      	movs	r3, #0
     358:	4c06      	ldr	r4, [pc, #24]	; (374 <lcd_clear+0x44>)
     35a:	47a0      	blx	r4
     35c:	4b06      	ldr	r3, [pc, #24]	; (378 <lcd_clear+0x48>)
     35e:	4798      	blx	r3
}
     360:	bd10      	pop	{r4, pc}
     362:	46c0      	nop			; (mov r8, r8)
     364:	00000321 	.word	0x00000321
     368:	00002949 	.word	0x00002949
     36c:	006acfbf 	.word	0x006acfbf
     370:	006acfc0 	.word	0x006acfc0
     374:	000037bd 	.word	0x000037bd
     378:	20000001 	.word	0x20000001

0000037c <lcd_home>:
{
     37c:	b510      	push	{r4, lr}
    lcd_command(LCD_RETURNHOME);
     37e:	2002      	movs	r0, #2
     380:	4b0b      	ldr	r3, [pc, #44]	; (3b0 <lcd_home+0x34>)
     382:	4798      	blx	r3
    delay_us(3);
     384:	2000      	movs	r0, #0
     386:	4b0b      	ldr	r3, [pc, #44]	; (3b4 <lcd_home+0x38>)
     388:	4798      	blx	r3
     38a:	0002      	movs	r2, r0
     38c:	2300      	movs	r3, #0
     38e:	0019      	movs	r1, r3
     390:	1880      	adds	r0, r0, r2
     392:	4159      	adcs	r1, r3
     394:	1880      	adds	r0, r0, r2
     396:	4159      	adcs	r1, r3
     398:	4a07      	ldr	r2, [pc, #28]	; (3b8 <lcd_home+0x3c>)
     39a:	2300      	movs	r3, #0
     39c:	1880      	adds	r0, r0, r2
     39e:	4159      	adcs	r1, r3
     3a0:	4a06      	ldr	r2, [pc, #24]	; (3bc <lcd_home+0x40>)
     3a2:	2300      	movs	r3, #0
     3a4:	4c06      	ldr	r4, [pc, #24]	; (3c0 <lcd_home+0x44>)
     3a6:	47a0      	blx	r4
     3a8:	4b06      	ldr	r3, [pc, #24]	; (3c4 <lcd_home+0x48>)
     3aa:	4798      	blx	r3
}
     3ac:	bd10      	pop	{r4, pc}
     3ae:	46c0      	nop			; (mov r8, r8)
     3b0:	00000321 	.word	0x00000321
     3b4:	00002949 	.word	0x00002949
     3b8:	006acfbf 	.word	0x006acfbf
     3bc:	006acfc0 	.word	0x006acfc0
     3c0:	000037bd 	.word	0x000037bd
     3c4:	20000001 	.word	0x20000001

000003c8 <lcd_begin>:
{
     3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3ca:	46de      	mov	lr, fp
     3cc:	4657      	mov	r7, sl
     3ce:	464e      	mov	r6, r9
     3d0:	4645      	mov	r5, r8
     3d2:	b5e0      	push	{r5, r6, r7, lr}
    _displayfunction = LCD_2LINE| LCD_8BITMODE | LCD_5x8DOTS;
     3d4:	4d3a      	ldr	r5, [pc, #232]	; (4c0 <lcd_begin+0xf8>)
     3d6:	2318      	movs	r3, #24
     3d8:	702b      	strb	r3, [r5, #0]
    delay_ms(50);
     3da:	2000      	movs	r0, #0
     3dc:	4b39      	ldr	r3, [pc, #228]	; (4c4 <lcd_begin+0xfc>)
     3de:	469b      	mov	fp, r3
     3e0:	4798      	blx	r3
     3e2:	4b39      	ldr	r3, [pc, #228]	; (4c8 <lcd_begin+0x100>)
     3e4:	469a      	mov	sl, r3
     3e6:	2232      	movs	r2, #50	; 0x32
     3e8:	2300      	movs	r3, #0
     3ea:	2100      	movs	r1, #0
     3ec:	47d0      	blx	sl
     3ee:	4e37      	ldr	r6, [pc, #220]	; (4cc <lcd_begin+0x104>)
     3f0:	2700      	movs	r7, #0
     3f2:	1980      	adds	r0, r0, r6
     3f4:	4179      	adcs	r1, r7
     3f6:	4b36      	ldr	r3, [pc, #216]	; (4d0 <lcd_begin+0x108>)
     3f8:	4699      	mov	r9, r3
     3fa:	4a36      	ldr	r2, [pc, #216]	; (4d4 <lcd_begin+0x10c>)
     3fc:	2300      	movs	r3, #0
     3fe:	47c8      	blx	r9
     400:	4b35      	ldr	r3, [pc, #212]	; (4d8 <lcd_begin+0x110>)
     402:	4698      	mov	r8, r3
     404:	4798      	blx	r3
     406:	2280      	movs	r2, #128	; 0x80
     408:	2382      	movs	r3, #130	; 0x82
     40a:	05db      	lsls	r3, r3, #23
     40c:	18d3      	adds	r3, r2, r3
     40e:	2180      	movs	r1, #128	; 0x80
     410:	0109      	lsls	r1, r1, #4
     412:	6199      	str	r1, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
     414:	2180      	movs	r1, #128	; 0x80
     416:	0089      	lsls	r1, r1, #2
     418:	6159      	str	r1, [r3, #20]
     41a:	3901      	subs	r1, #1
     41c:	39ff      	subs	r1, #255	; 0xff
     41e:	6159      	str	r1, [r3, #20]
     420:	615a      	str	r2, [r3, #20]
    delay_ms(50);
     422:	2000      	movs	r0, #0
     424:	47d8      	blx	fp
     426:	2232      	movs	r2, #50	; 0x32
     428:	2300      	movs	r3, #0
     42a:	2100      	movs	r1, #0
     42c:	47d0      	blx	sl
     42e:	1980      	adds	r0, r0, r6
     430:	4179      	adcs	r1, r7
     432:	4a28      	ldr	r2, [pc, #160]	; (4d4 <lcd_begin+0x10c>)
     434:	2300      	movs	r3, #0
     436:	47c8      	blx	r9
     438:	47c0      	blx	r8
    lcd_command(LCD_FUNCTIONSET | _displayfunction);
     43a:	2620      	movs	r6, #32
     43c:	7828      	ldrb	r0, [r5, #0]
     43e:	4330      	orrs	r0, r6
     440:	b2c0      	uxtb	r0, r0
     442:	4c26      	ldr	r4, [pc, #152]	; (4dc <lcd_begin+0x114>)
     444:	47a0      	blx	r4
    delay_us(4500);
     446:	2000      	movs	r0, #0
     448:	47d8      	blx	fp
     44a:	4a25      	ldr	r2, [pc, #148]	; (4e0 <lcd_begin+0x118>)
     44c:	2300      	movs	r3, #0
     44e:	2100      	movs	r1, #0
     450:	47d0      	blx	sl
     452:	4a24      	ldr	r2, [pc, #144]	; (4e4 <lcd_begin+0x11c>)
     454:	2300      	movs	r3, #0
     456:	1880      	adds	r0, r0, r2
     458:	4159      	adcs	r1, r3
     45a:	4a23      	ldr	r2, [pc, #140]	; (4e8 <lcd_begin+0x120>)
     45c:	2300      	movs	r3, #0
     45e:	47c8      	blx	r9
     460:	47c0      	blx	r8
    lcd_command(LCD_FUNCTIONSET | _displayfunction);
     462:	7828      	ldrb	r0, [r5, #0]
     464:	4330      	orrs	r0, r6
     466:	b2c0      	uxtb	r0, r0
     468:	47a0      	blx	r4
    delay_us(150);
     46a:	2000      	movs	r0, #0
     46c:	47d8      	blx	fp
     46e:	2296      	movs	r2, #150	; 0x96
     470:	2300      	movs	r3, #0
     472:	2100      	movs	r1, #0
     474:	47d0      	blx	sl
     476:	4a1b      	ldr	r2, [pc, #108]	; (4e4 <lcd_begin+0x11c>)
     478:	2300      	movs	r3, #0
     47a:	1880      	adds	r0, r0, r2
     47c:	4159      	adcs	r1, r3
     47e:	4a1a      	ldr	r2, [pc, #104]	; (4e8 <lcd_begin+0x120>)
     480:	2300      	movs	r3, #0
     482:	47c8      	blx	r9
     484:	47c0      	blx	r8
    lcd_command(LCD_FUNCTIONSET | _displayfunction);
     486:	7828      	ldrb	r0, [r5, #0]
     488:	4330      	orrs	r0, r6
     48a:	b2c0      	uxtb	r0, r0
     48c:	47a0      	blx	r4
    lcd_command(LCD_FUNCTIONSET | _displayfunction);
     48e:	7828      	ldrb	r0, [r5, #0]
     490:	4330      	orrs	r0, r6
     492:	b2c0      	uxtb	r0, r0
     494:	47a0      	blx	r4
    _displaycontrol = LCD_DISPLAYON | LCD_CURSORON | LCD_BLINKOFF;
     496:	2206      	movs	r2, #6
     498:	4b14      	ldr	r3, [pc, #80]	; (4ec <lcd_begin+0x124>)
     49a:	701a      	strb	r2, [r3, #0]
    lcd_command(LCD_DISPLAYCONTROL | _displaycontrol);
     49c:	200e      	movs	r0, #14
     49e:	47a0      	blx	r4
    lcd_clear();
     4a0:	4b13      	ldr	r3, [pc, #76]	; (4f0 <lcd_begin+0x128>)
     4a2:	4798      	blx	r3
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     4a4:	2202      	movs	r2, #2
     4a6:	4b13      	ldr	r3, [pc, #76]	; (4f4 <lcd_begin+0x12c>)
     4a8:	701a      	strb	r2, [r3, #0]
    lcd_command(LCD_ENTRYMODESET | _displaymode);
     4aa:	2006      	movs	r0, #6
     4ac:	47a0      	blx	r4
    lcd_home();
     4ae:	4b12      	ldr	r3, [pc, #72]	; (4f8 <lcd_begin+0x130>)
     4b0:	4798      	blx	r3
}
     4b2:	bc3c      	pop	{r2, r3, r4, r5}
     4b4:	4690      	mov	r8, r2
     4b6:	4699      	mov	r9, r3
     4b8:	46a2      	mov	sl, r4
     4ba:	46ab      	mov	fp, r5
     4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	2000009d 	.word	0x2000009d
     4c4:	00002949 	.word	0x00002949
     4c8:	000037fd 	.word	0x000037fd
     4cc:	00001b57 	.word	0x00001b57
     4d0:	000037bd 	.word	0x000037bd
     4d4:	00001b58 	.word	0x00001b58
     4d8:	20000001 	.word	0x20000001
     4dc:	00000321 	.word	0x00000321
     4e0:	00001194 	.word	0x00001194
     4e4:	006acfbf 	.word	0x006acfbf
     4e8:	006acfc0 	.word	0x006acfc0
     4ec:	2000009c 	.word	0x2000009c
     4f0:	00000331 	.word	0x00000331
     4f4:	2000009e 	.word	0x2000009e
     4f8:	0000037d 	.word	0x0000037d

000004fc <lcd_setCursor>:
{
     4fc:	b570      	push	{r4, r5, r6, lr}
     4fe:	b084      	sub	sp, #16
    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
     500:	466a      	mov	r2, sp
     502:	4b0b      	ldr	r3, [pc, #44]	; (530 <lcd_setCursor+0x34>)
     504:	cb70      	ldmia	r3!, {r4, r5, r6}
     506:	c270      	stmia	r2!, {r4, r5, r6}
     508:	681b      	ldr	r3, [r3, #0]
     50a:	6013      	str	r3, [r2, #0]
    if(row>3||col>19)
     50c:	2903      	cmp	r1, #3
     50e:	d801      	bhi.n	514 <lcd_setCursor+0x18>
     510:	2813      	cmp	r0, #19
     512:	d901      	bls.n	518 <lcd_setCursor+0x1c>
}
     514:	b004      	add	sp, #16
     516:	bd70      	pop	{r4, r5, r6, pc}
    lcd_command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
     518:	0089      	lsls	r1, r1, #2
     51a:	466b      	mov	r3, sp
     51c:	58cb      	ldr	r3, [r1, r3]
     51e:	18c0      	adds	r0, r0, r3
     520:	2380      	movs	r3, #128	; 0x80
     522:	425b      	negs	r3, r3
     524:	4318      	orrs	r0, r3
     526:	b2c0      	uxtb	r0, r0
     528:	4b02      	ldr	r3, [pc, #8]	; (534 <lcd_setCursor+0x38>)
     52a:	4798      	blx	r3
     52c:	e7f2      	b.n	514 <lcd_setCursor+0x18>
     52e:	46c0      	nop			; (mov r8, r8)
     530:	0000595c 	.word	0x0000595c
     534:	00000321 	.word	0x00000321

00000538 <lcd_noCursor>:
{
     538:	b510      	push	{r4, lr}
    _displaycontrol &= ~LCD_CURSORON;
     53a:	4b05      	ldr	r3, [pc, #20]	; (550 <lcd_noCursor+0x18>)
     53c:	7818      	ldrb	r0, [r3, #0]
     53e:	2202      	movs	r2, #2
     540:	4390      	bics	r0, r2
     542:	7018      	strb	r0, [r3, #0]
    lcd_command(LCD_DISPLAYCONTROL | _displaycontrol);
     544:	2308      	movs	r3, #8
     546:	4318      	orrs	r0, r3
     548:	4b02      	ldr	r3, [pc, #8]	; (554 <lcd_noCursor+0x1c>)
     54a:	4798      	blx	r3
}
     54c:	bd10      	pop	{r4, pc}
     54e:	46c0      	nop			; (mov r8, r8)
     550:	2000009c 	.word	0x2000009c
     554:	00000321 	.word	0x00000321

00000558 <lcd_write>:
{
     558:	b510      	push	{r4, lr}
    lcd_send(value, 1);
     55a:	2101      	movs	r1, #1
     55c:	4b01      	ldr	r3, [pc, #4]	; (564 <lcd_write+0xc>)
     55e:	4798      	blx	r3
}
     560:	bd10      	pop	{r4, pc}
     562:	46c0      	nop			; (mov r8, r8)
     564:	00000291 	.word	0x00000291

00000568 <lcd_printstr>:
{
    /*manka*/
}

void lcd_printstr(char *str)
{
     568:	b570      	push	{r4, r5, r6, lr}
     56a:	0004      	movs	r4, r0
    while(*str) {
     56c:	7800      	ldrb	r0, [r0, #0]
     56e:	2800      	cmp	r0, #0
     570:	d005      	beq.n	57e <lcd_printstr+0x16>
        lcd_write(*str++);
     572:	4d03      	ldr	r5, [pc, #12]	; (580 <lcd_printstr+0x18>)
     574:	3401      	adds	r4, #1
     576:	47a8      	blx	r5
    while(*str) {
     578:	7820      	ldrb	r0, [r4, #0]
     57a:	2800      	cmp	r0, #0
     57c:	d1fa      	bne.n	574 <lcd_printstr+0xc>
    }
     57e:	bd70      	pop	{r4, r5, r6, pc}
     580:	00000559 	.word	0x00000559

00000584 <process_ADSR>:
#include "adsr.h"
#include "config.h"

#define MAX_32BIT_VALUE 0xFFFFFFFF

void process_ADSR(ADSR *adsr) {
     584:	b570      	push	{r4, r5, r6, lr}
     586:	0004      	movs	r4, r0
    switch(adsr->state) {
     588:	2330      	movs	r3, #48	; 0x30
     58a:	5cc2      	ldrb	r2, [r0, r3]
     58c:	2a05      	cmp	r2, #5
     58e:	d80b      	bhi.n	5a8 <process_ADSR+0x24>
     590:	0093      	lsls	r3, r2, #2
     592:	4a34      	ldr	r2, [pc, #208]	; (664 <process_ADSR+0xe0>)
     594:	58d3      	ldr	r3, [r2, r3]
     596:	469f      	mov	pc, r3
        case START:
            adsr->attack_counter = 0;
     598:	2300      	movs	r3, #0
     59a:	6103      	str	r3, [r0, #16]
            adsr->sustain_counter = 0;
     59c:	6243      	str	r3, [r0, #36]	; 0x24
            adsr->decay_counter = 0;
     59e:	6183      	str	r3, [r0, #24]
            adsr->release_counter = 0;
     5a0:	62c3      	str	r3, [r0, #44]	; 0x2c
            //adsr->value = 0;
            adsr->state = ATTACK;
     5a2:	2201      	movs	r2, #1
     5a4:	3330      	adds	r3, #48	; 0x30
     5a6:	54c2      	strb	r2, [r0, r3]
            break;
        case END:
            adsr->value = 0;
            break;
    }
}
     5a8:	bd70      	pop	{r4, r5, r6, pc}
            adsr->attack_counter += adsr->interval;
     5aa:	6903      	ldr	r3, [r0, #16]
     5ac:	6882      	ldr	r2, [r0, #8]
     5ae:	4694      	mov	ip, r2
     5b0:	4463      	add	r3, ip
     5b2:	001d      	movs	r5, r3
     5b4:	6123      	str	r3, [r4, #16]
            adsr->value = MAX_32BIT_VALUE / adsr->attack  * adsr->attack_counter;
     5b6:	68c1      	ldr	r1, [r0, #12]
            if(adsr->attack_counter > adsr->attack) {
     5b8:	428b      	cmp	r3, r1
     5ba:	d806      	bhi.n	5ca <process_ADSR+0x46>
            adsr->value = MAX_32BIT_VALUE / adsr->attack  * adsr->attack_counter;
     5bc:	2001      	movs	r0, #1
     5be:	4240      	negs	r0, r0
     5c0:	4b29      	ldr	r3, [pc, #164]	; (668 <process_ADSR+0xe4>)
     5c2:	4798      	blx	r3
     5c4:	4345      	muls	r5, r0
     5c6:	6065      	str	r5, [r4, #4]
     5c8:	e7ee      	b.n	5a8 <process_ADSR+0x24>
                adsr->value = MAX_32BIT_VALUE; //max value
     5ca:	2301      	movs	r3, #1
     5cc:	425b      	negs	r3, r3
     5ce:	6043      	str	r3, [r0, #4]
                adsr->state = DECAY;
     5d0:	2202      	movs	r2, #2
     5d2:	3331      	adds	r3, #49	; 0x31
     5d4:	54c2      	strb	r2, [r0, r3]
                adsr->attack_counter = 0;
     5d6:	2300      	movs	r3, #0
     5d8:	6103      	str	r3, [r0, #16]
     5da:	e7e5      	b.n	5a8 <process_ADSR+0x24>
            adsr->decay_counter += adsr->interval;
     5dc:	6983      	ldr	r3, [r0, #24]
     5de:	6882      	ldr	r2, [r0, #8]
     5e0:	4694      	mov	ip, r2
     5e2:	4463      	add	r3, ip
     5e4:	001d      	movs	r5, r3
     5e6:	61a3      	str	r3, [r4, #24]
            adsr->value =  MAX_32BIT_VALUE - (MAX_32BIT_VALUE - adsr->sustain_level) / adsr->decay * adsr->decay_counter ;
     5e8:	6a00      	ldr	r0, [r0, #32]
     5ea:	6961      	ldr	r1, [r4, #20]
            if(adsr->decay_counter > adsr->decay) {
     5ec:	428b      	cmp	r3, r1
     5ee:	d806      	bhi.n	5fe <process_ADSR+0x7a>
            adsr->value =  MAX_32BIT_VALUE - (MAX_32BIT_VALUE - adsr->sustain_level) / adsr->decay * adsr->decay_counter ;
     5f0:	43c0      	mvns	r0, r0
     5f2:	4b1d      	ldr	r3, [pc, #116]	; (668 <process_ADSR+0xe4>)
     5f4:	4798      	blx	r3
     5f6:	4345      	muls	r5, r0
     5f8:	43ed      	mvns	r5, r5
     5fa:	6065      	str	r5, [r4, #4]
     5fc:	e7d4      	b.n	5a8 <process_ADSR+0x24>
                adsr->value = adsr->sustain_level;
     5fe:	6060      	str	r0, [r4, #4]
                adsr->state = SUSTAIN;
     600:	2203      	movs	r2, #3
     602:	2330      	movs	r3, #48	; 0x30
     604:	54e2      	strb	r2, [r4, r3]
                adsr->decay_counter = 0;
     606:	2300      	movs	r3, #0
     608:	61a3      	str	r3, [r4, #24]
     60a:	e7cd      	b.n	5a8 <process_ADSR+0x24>
            adsr->sustain_counter += adsr->interval;
     60c:	6a43      	ldr	r3, [r0, #36]	; 0x24
     60e:	6882      	ldr	r2, [r0, #8]
     610:	4694      	mov	ip, r2
     612:	4463      	add	r3, ip
     614:	6243      	str	r3, [r0, #36]	; 0x24
            adsr->value = adsr->sustain_level;
     616:	6a02      	ldr	r2, [r0, #32]
     618:	6042      	str	r2, [r0, #4]
            if(adsr->sustain_counter > adsr->sustain) {
     61a:	69c2      	ldr	r2, [r0, #28]
     61c:	4293      	cmp	r3, r2
     61e:	d9c3      	bls.n	5a8 <process_ADSR+0x24>
                adsr->state = RELEASE;
     620:	2204      	movs	r2, #4
     622:	2330      	movs	r3, #48	; 0x30
     624:	54c2      	strb	r2, [r0, r3]
                adsr->sustain_counter = 0;
     626:	2300      	movs	r3, #0
     628:	6243      	str	r3, [r0, #36]	; 0x24
     62a:	e7bd      	b.n	5a8 <process_ADSR+0x24>
            adsr->release_counter += adsr->interval;
     62c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     62e:	6882      	ldr	r2, [r0, #8]
     630:	4694      	mov	ip, r2
     632:	4463      	add	r3, ip
     634:	001d      	movs	r5, r3
     636:	62e3      	str	r3, [r4, #44]	; 0x2c
            adsr->value = adsr->sustain_level - adsr->sustain_level / adsr->release * adsr->release_counter ;
     638:	6a81      	ldr	r1, [r0, #40]	; 0x28
            if(adsr->release_counter > adsr->release) {
     63a:	428b      	cmp	r3, r1
     63c:	d807      	bhi.n	64e <process_ADSR+0xca>
            adsr->value = adsr->sustain_level - adsr->sustain_level / adsr->release * adsr->release_counter ;
     63e:	6a06      	ldr	r6, [r0, #32]
     640:	0030      	movs	r0, r6
     642:	4b09      	ldr	r3, [pc, #36]	; (668 <process_ADSR+0xe4>)
     644:	4798      	blx	r3
     646:	4345      	muls	r5, r0
     648:	1b75      	subs	r5, r6, r5
     64a:	6065      	str	r5, [r4, #4]
     64c:	e7ac      	b.n	5a8 <process_ADSR+0x24>
                adsr->value = 0;
     64e:	2300      	movs	r3, #0
     650:	6043      	str	r3, [r0, #4]
                adsr->state = END;
     652:	2105      	movs	r1, #5
     654:	2230      	movs	r2, #48	; 0x30
     656:	5481      	strb	r1, [r0, r2]
                adsr->release_counter = 0;
     658:	62c3      	str	r3, [r0, #44]	; 0x2c
     65a:	e7a5      	b.n	5a8 <process_ADSR+0x24>
            adsr->value = 0;
     65c:	2300      	movs	r3, #0
     65e:	6043      	str	r3, [r0, #4]
}
     660:	e7a2      	b.n	5a8 <process_ADSR+0x24>
     662:	46c0      	nop			; (mov r8, r8)
     664:	0000596c 	.word	0x0000596c
     668:	00003631 	.word	0x00003631

0000066c <get_ADSR_value>:
uint8_t get_ADSR_value(ADSR *adsr) {
    return adsr->value >> 24;
     66c:	79c0      	ldrb	r0, [r0, #7]
     66e:	4770      	bx	lr

00000670 <configure_extint_channel>:
     config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
     config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;

     extint_chan_set_config(PIN_SW2_EIC_LINE, &config_extint_chan);
     configure_extint_callbacks();*/
}
     670:	4770      	bx	lr
	...

00000674 <button_read>:
{
    //button_state |= (port_pin_get_input_level(PIN_SW2)<<1)|(!port_pin_get_input_level(PIN_SW1)<<0);
}

TIPKA button_read(void)
{
     674:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
     676:	2282      	movs	r2, #130	; 0x82
     678:	05d2      	lsls	r2, r2, #23
     67a:	6a13      	ldr	r3, [r2, #32]
     67c:	6a12      	ldr	r2, [r2, #32]
     67e:	0b5b      	lsrs	r3, r3, #13
     680:	2101      	movs	r1, #1
     682:	400b      	ands	r3, r1
    button_state = (port_pin_get_input_level(PIN_SW2)<<1) | (!port_pin_get_input_level(PIN_SW1)<<0);
     684:	005b      	lsls	r3, r3, #1
     686:	0b12      	lsrs	r2, r2, #12
     688:	404a      	eors	r2, r1
     68a:	400a      	ands	r2, r1
     68c:	4313      	orrs	r3, r2
     68e:	4a06      	ldr	r2, [pc, #24]	; (6a8 <button_read+0x34>)
     690:	7013      	strb	r3, [r2, #0]

    uint8_t pressed_keys = (button_state ^ previous_button_state) & button_state;
     692:	4806      	ldr	r0, [pc, #24]	; (6ac <button_read+0x38>)
     694:	7802      	ldrb	r2, [r0, #0]
     696:	001c      	movs	r4, r3
     698:	4394      	bics	r4, r2
    uint8_t released_keys = (button_state ^ previous_button_state) & previous_button_state;
    previous_button_state=button_state;
     69a:	7003      	strb	r3, [r0, #0]
    if(pressed_keys & (1<<0)) {
        return BUTTON_1;
     69c:	2001      	movs	r0, #1
    if(pressed_keys & (1<<0)) {
     69e:	4221      	tst	r1, r4
     6a0:	d101      	bne.n	6a6 <button_read+0x32>
    if(pressed_keys & (1<<1)) {
        return BUTTON_2;
    }

    pressed_keys &=~(released_keys);
    return BUTTON_NONE;
     6a2:	0862      	lsrs	r2, r4, #1
     6a4:	0050      	lsls	r0, r2, #1
    if((button_state>>1)&1) {
        button_state &=~(1<<1);
        return BUTTON_2;
    }
    return BUTTON_NONE;*/
     6a6:	bd10      	pop	{r4, pc}
     6a8:	2000009f 	.word	0x2000009f
     6ac:	200000a0 	.word	0x200000a0

000006b0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     6b0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     6b2:	2000      	movs	r0, #0
     6b4:	4b08      	ldr	r3, [pc, #32]	; (6d8 <delay_init+0x28>)
     6b6:	4798      	blx	r3
     6b8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     6ba:	4c08      	ldr	r4, [pc, #32]	; (6dc <delay_init+0x2c>)
     6bc:	21fa      	movs	r1, #250	; 0xfa
     6be:	0089      	lsls	r1, r1, #2
     6c0:	47a0      	blx	r4
     6c2:	4b07      	ldr	r3, [pc, #28]	; (6e0 <delay_init+0x30>)
     6c4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     6c6:	4907      	ldr	r1, [pc, #28]	; (6e4 <delay_init+0x34>)
     6c8:	0028      	movs	r0, r5
     6ca:	47a0      	blx	r4
     6cc:	4b06      	ldr	r3, [pc, #24]	; (6e8 <delay_init+0x38>)
     6ce:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     6d0:	2205      	movs	r2, #5
     6d2:	4b06      	ldr	r3, [pc, #24]	; (6ec <delay_init+0x3c>)
     6d4:	601a      	str	r2, [r3, #0]
}
     6d6:	bd70      	pop	{r4, r5, r6, pc}
     6d8:	00002949 	.word	0x00002949
     6dc:	00003631 	.word	0x00003631
     6e0:	2000000c 	.word	0x2000000c
     6e4:	000f4240 	.word	0x000f4240
     6e8:	20000010 	.word	0x20000010
     6ec:	e000e010 	.word	0xe000e010

000006f0 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     6f0:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     6f2:	0080      	lsls	r0, r0, #2
     6f4:	4b2e      	ldr	r3, [pc, #184]	; (7b0 <_adc_interrupt_handler+0xc0>)
     6f6:	58c4      	ldr	r4, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     6f8:	6823      	ldr	r3, [r4, #0]
     6fa:	799a      	ldrb	r2, [r3, #6]
     6fc:	795d      	ldrb	r5, [r3, #5]
     6fe:	4015      	ands	r5, r2

	if (flags & ADC_INTFLAG_RESRDY) {
     700:	07ea      	lsls	r2, r5, #31
     702:	d52a      	bpl.n	75a <_adc_interrupt_handler+0x6a>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     704:	2201      	movs	r2, #1
     706:	719a      	strb	r2, [r3, #6]

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
     708:	6962      	ldr	r2, [r4, #20]
     70a:	1c93      	adds	r3, r2, #2
     70c:	6163      	str	r3, [r4, #20]
     70e:	6823      	ldr	r3, [r4, #0]
     710:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     712:	b29b      	uxth	r3, r3
     714:	8013      	strh	r3, [r2, #0]

		if (--module->remaining_conversions > 0) {
     716:	8b23      	ldrh	r3, [r4, #24]
     718:	3b01      	subs	r3, #1
     71a:	b29b      	uxth	r3, r3
     71c:	8323      	strh	r3, [r4, #24]
     71e:	2b00      	cmp	r3, #0
     720:	d015      	beq.n	74e <_adc_interrupt_handler+0x5e>
			if (module->software_trigger == true
     722:	7f63      	ldrb	r3, [r4, #29]
     724:	2b00      	cmp	r3, #0
     726:	d018      	beq.n	75a <_adc_interrupt_handler+0x6a>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     728:	6822      	ldr	r2, [r4, #0]
     72a:	79d3      	ldrb	r3, [r2, #7]
     72c:	b25b      	sxtb	r3, r3
     72e:	2b00      	cmp	r3, #0
     730:	db13      	blt.n	75a <_adc_interrupt_handler+0x6a>
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
     732:	8c13      	ldrh	r3, [r2, #32]
     734:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     736:	2b00      	cmp	r3, #0
     738:	d1fb      	bne.n	732 <_adc_interrupt_handler+0x42>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     73a:	7e13      	ldrb	r3, [r2, #24]
     73c:	2102      	movs	r1, #2
     73e:	430b      	orrs	r3, r1
     740:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     742:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
     744:	8c13      	ldrh	r3, [r2, #32]
     746:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     748:	2b00      	cmp	r3, #0
     74a:	d1fb      	bne.n	744 <_adc_interrupt_handler+0x54>
     74c:	e005      	b.n	75a <_adc_interrupt_handler+0x6a>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     74e:	2301      	movs	r3, #1
     750:	6822      	ldr	r2, [r4, #0]
     752:	7113      	strb	r3, [r2, #4]
				adc_start_conversion(module);
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
			if (module->job_status == STATUS_BUSY) {
     754:	7f23      	ldrb	r3, [r4, #28]
     756:	2b05      	cmp	r3, #5
     758:	d016      	beq.n	788 <_adc_interrupt_handler+0x98>
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     75a:	076b      	lsls	r3, r5, #29
     75c:	d508      	bpl.n	770 <_adc_interrupt_handler+0x80>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     75e:	2304      	movs	r3, #4
     760:	6822      	ldr	r2, [r4, #0]
     762:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     764:	7ee3      	ldrb	r3, [r4, #27]
     766:	079b      	lsls	r3, r3, #30
     768:	d502      	bpl.n	770 <_adc_interrupt_handler+0x80>
     76a:	7ea3      	ldrb	r3, [r4, #26]
     76c:	079b      	lsls	r3, r3, #30
     76e:	d417      	bmi.n	7a0 <_adc_interrupt_handler+0xb0>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     770:	07ab      	lsls	r3, r5, #30
     772:	d508      	bpl.n	786 <_adc_interrupt_handler+0x96>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     774:	2302      	movs	r3, #2
     776:	6822      	ldr	r2, [r4, #0]
     778:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     77a:	7ee3      	ldrb	r3, [r4, #27]
     77c:	075b      	lsls	r3, r3, #29
     77e:	d502      	bpl.n	786 <_adc_interrupt_handler+0x96>
     780:	7ea3      	ldrb	r3, [r4, #26]
     782:	075b      	lsls	r3, r3, #29
     784:	d410      	bmi.n	7a8 <_adc_interrupt_handler+0xb8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
		}
	}
}
     786:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
     788:	2300      	movs	r3, #0
     78a:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
     78c:	7ee3      	ldrb	r3, [r4, #27]
     78e:	07db      	lsls	r3, r3, #31
     790:	d5e3      	bpl.n	75a <_adc_interrupt_handler+0x6a>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     792:	7ea3      	ldrb	r3, [r4, #26]
     794:	07db      	lsls	r3, r3, #31
     796:	d5e0      	bpl.n	75a <_adc_interrupt_handler+0x6a>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     798:	0020      	movs	r0, r4
     79a:	68a3      	ldr	r3, [r4, #8]
     79c:	4798      	blx	r3
     79e:	e7dc      	b.n	75a <_adc_interrupt_handler+0x6a>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     7a0:	0020      	movs	r0, r4
     7a2:	68e3      	ldr	r3, [r4, #12]
     7a4:	4798      	blx	r3
     7a6:	e7e3      	b.n	770 <_adc_interrupt_handler+0x80>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     7a8:	6923      	ldr	r3, [r4, #16]
     7aa:	0020      	movs	r0, r4
     7ac:	4798      	blx	r3
}
     7ae:	e7ea      	b.n	786 <_adc_interrupt_handler+0x96>
     7b0:	20001430 	.word	0x20001430

000007b4 <ADC0_Handler>:
		void ADC##n##_Handler(void) \
		{ \
			_adc_interrupt_handler(n); \
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
     7b4:	b510      	push	{r4, lr}
     7b6:	2000      	movs	r0, #0
     7b8:	4b01      	ldr	r3, [pc, #4]	; (7c0 <ADC0_Handler+0xc>)
     7ba:	4798      	blx	r3
     7bc:	bd10      	pop	{r4, pc}
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	000006f1 	.word	0x000006f1

000007c4 <ADC1_Handler>:
     7c4:	b510      	push	{r4, lr}
     7c6:	2001      	movs	r0, #1
     7c8:	4b01      	ldr	r3, [pc, #4]	; (7d0 <ADC1_Handler+0xc>)
     7ca:	4798      	blx	r3
     7cc:	bd10      	pop	{r4, pc}
     7ce:	46c0      	nop			; (mov r8, r8)
     7d0:	000006f1 	.word	0x000006f1

000007d4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     7d4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     7d6:	2200      	movs	r2, #0
     7d8:	4b10      	ldr	r3, [pc, #64]	; (81c <EIC_Handler+0x48>)
     7da:	701a      	strb	r2, [r3, #0]
     7dc:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     7de:	4910      	ldr	r1, [pc, #64]	; (820 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     7e0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     7e2:	4e10      	ldr	r6, [pc, #64]	; (824 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     7e4:	4c0d      	ldr	r4, [pc, #52]	; (81c <EIC_Handler+0x48>)
     7e6:	e00a      	b.n	7fe <EIC_Handler+0x2a>
		return eics[eic_index];
     7e8:	490d      	ldr	r1, [pc, #52]	; (820 <EIC_Handler+0x4c>)
     7ea:	e008      	b.n	7fe <EIC_Handler+0x2a>
     7ec:	7823      	ldrb	r3, [r4, #0]
     7ee:	3301      	adds	r3, #1
     7f0:	b2db      	uxtb	r3, r3
     7f2:	7023      	strb	r3, [r4, #0]
     7f4:	2b0f      	cmp	r3, #15
     7f6:	d810      	bhi.n	81a <EIC_Handler+0x46>
		return NULL;
     7f8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     7fa:	2b1f      	cmp	r3, #31
     7fc:	d9f4      	bls.n	7e8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     7fe:	0028      	movs	r0, r5
     800:	4018      	ands	r0, r3
     802:	2201      	movs	r2, #1
     804:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     806:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     808:	4210      	tst	r0, r2
     80a:	d0ef      	beq.n	7ec <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     80c:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     80e:	009b      	lsls	r3, r3, #2
     810:	599b      	ldr	r3, [r3, r6]
     812:	2b00      	cmp	r3, #0
     814:	d0ea      	beq.n	7ec <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     816:	4798      	blx	r3
     818:	e7e8      	b.n	7ec <EIC_Handler+0x18>
			}
		}
	}
}
     81a:	bd70      	pop	{r4, r5, r6, pc}
     81c:	20001438 	.word	0x20001438
     820:	40002800 	.word	0x40002800
     824:	2000143c 	.word	0x2000143c

00000828 <_extint_enable>:
{
    Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

    /* Enable all EIC hardware modules. */
    for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
        eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     828:	4a06      	ldr	r2, [pc, #24]	; (844 <_extint_enable+0x1c>)
     82a:	7813      	ldrb	r3, [r2, #0]
     82c:	2102      	movs	r1, #2
     82e:	430b      	orrs	r3, r1
     830:	7013      	strb	r3, [r2, #0]
                || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)) {
     832:	2001      	movs	r0, #1
        if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     834:	6853      	ldr	r3, [r2, #4]
     836:	4219      	tst	r1, r3
     838:	d1fc      	bne.n	834 <_extint_enable+0xc>
                || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)) {
     83a:	6853      	ldr	r3, [r2, #4]
     83c:	4218      	tst	r0, r3
     83e:	d1f9      	bne.n	834 <_extint_enable+0xc>
    }

    while (extint_is_syncing()) {
        /* Wait for all hardware modules to complete synchronization */
    }
}
     840:	4770      	bx	lr
     842:	46c0      	nop			; (mov r8, r8)
     844:	40002800 	.word	0x40002800

00000848 <_system_extint_init>:
{
     848:	b500      	push	{lr}
     84a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     84c:	4a17      	ldr	r2, [pc, #92]	; (8ac <_system_extint_init+0x64>)
     84e:	6951      	ldr	r1, [r2, #20]
     850:	2380      	movs	r3, #128	; 0x80
     852:	00db      	lsls	r3, r3, #3
     854:	430b      	orrs	r3, r1
     856:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     858:	a901      	add	r1, sp, #4
     85a:	2300      	movs	r3, #0
     85c:	700b      	strb	r3, [r1, #0]
    system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     85e:	2002      	movs	r0, #2
     860:	4b13      	ldr	r3, [pc, #76]	; (8b0 <_system_extint_init+0x68>)
     862:	4798      	blx	r3
    system_gclk_chan_enable(EIC_GCLK_ID);
     864:	2002      	movs	r0, #2
     866:	4b13      	ldr	r3, [pc, #76]	; (8b4 <_system_extint_init+0x6c>)
     868:	4798      	blx	r3
        eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     86a:	4a13      	ldr	r2, [pc, #76]	; (8b8 <_system_extint_init+0x70>)
     86c:	7813      	ldrb	r3, [r2, #0]
     86e:	2101      	movs	r1, #1
     870:	430b      	orrs	r3, r1
     872:	7013      	strb	r3, [r2, #0]
        if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     874:	3101      	adds	r1, #1
                || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)) {
     876:	2001      	movs	r0, #1
        if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     878:	6853      	ldr	r3, [r2, #4]
     87a:	4219      	tst	r1, r3
     87c:	d1fc      	bne.n	878 <_system_extint_init+0x30>
                || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)) {
     87e:	6853      	ldr	r3, [r2, #4]
     880:	4218      	tst	r0, r3
     882:	d1f9      	bne.n	878 <_system_extint_init+0x30>
        eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     884:	4a0c      	ldr	r2, [pc, #48]	; (8b8 <_system_extint_init+0x70>)
     886:	7813      	ldrb	r3, [r2, #0]
     888:	2110      	movs	r1, #16
     88a:	438b      	bics	r3, r1
     88c:	7013      	strb	r3, [r2, #0]
     88e:	4b0b      	ldr	r3, [pc, #44]	; (8bc <_system_extint_init+0x74>)
     890:	0019      	movs	r1, r3
     892:	3140      	adds	r1, #64	; 0x40
        _extint_dev.callbacks[j] = NULL;
     894:	2200      	movs	r2, #0
     896:	c304      	stmia	r3!, {r2}
    for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     898:	428b      	cmp	r3, r1
     89a:	d1fc      	bne.n	896 <_system_extint_init+0x4e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     89c:	2208      	movs	r2, #8
     89e:	4b08      	ldr	r3, [pc, #32]	; (8c0 <_system_extint_init+0x78>)
     8a0:	601a      	str	r2, [r3, #0]
    _extint_enable();
     8a2:	4b08      	ldr	r3, [pc, #32]	; (8c4 <_system_extint_init+0x7c>)
     8a4:	4798      	blx	r3
}
     8a6:	b003      	add	sp, #12
     8a8:	bd00      	pop	{pc}
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	40000800 	.word	0x40000800
     8b0:	00002a25 	.word	0x00002a25
     8b4:	000029b5 	.word	0x000029b5
     8b8:	40002800 	.word	0x40002800
     8bc:	2000143c 	.word	0x2000143c
     8c0:	e000e100 	.word	0xe000e100
     8c4:	00000829 	.word	0x00000829

000008c8 <dac_is_syncing>:
		struct dac_module *const dev_inst)
{
	/* Sanity check arguments */
	Assert(dev_inst);

	Dac *const dac_module = dev_inst->hw;
     8c8:	6803      	ldr	r3, [r0, #0]

#if (SAMC21)
	if (dac_module->SYNCBUSY.reg) {
     8ca:	6918      	ldr	r0, [r3, #16]
     8cc:	1e43      	subs	r3, r0, #1
     8ce:	4198      	sbcs	r0, r3
     8d0:	b2c0      	uxtb	r0, r0
#endif
		return true;
	}

	return false;
}
     8d2:	4770      	bx	lr

000008d4 <dac_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->reference      = DAC_REFERENCE_INT1V;
     8d4:	2300      	movs	r3, #0
     8d6:	7003      	strb	r3, [r0, #0]
	config->output         = DAC_OUTPUT_EXTERNAL;
     8d8:	2201      	movs	r2, #1
     8da:	7042      	strb	r2, [r0, #1]
	config->left_adjust    = false;
     8dc:	7083      	strb	r3, [r0, #2]
#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	config->databuf_protection_bypass = false;
#endif
	config->voltage_pump_disable = false;
     8de:	7103      	strb	r3, [r0, #4]
	config->clock_source   = GCLK_GENERATOR_0;
     8e0:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby = false;
     8e2:	7143      	strb	r3, [r0, #5]
#if (SAMC21)
	config->dither_mode    = false;
     8e4:	7183      	strb	r3, [r0, #6]
#endif
}
     8e6:	4770      	bx	lr

000008e8 <dac_init>:
 */
enum status_code dac_init(
		struct dac_module *const module_inst,
		Dac *const module,
		struct dac_config *const config)
{
     8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ea:	46c6      	mov	lr, r8
     8ec:	b500      	push	{lr}
     8ee:	b082      	sub	sp, #8
     8f0:	0005      	movs	r5, r0
     8f2:	0014      	movs	r4, r2
	Assert(module_inst);
	Assert(module);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = module;
     8f4:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     8f6:	4a28      	ldr	r2, [pc, #160]	; (998 <dac_init+0xb0>)
     8f8:	69d0      	ldr	r0, [r2, #28]
     8fa:	2380      	movs	r3, #128	; 0x80
     8fc:	039b      	lsls	r3, r3, #14
     8fe:	4303      	orrs	r3, r0
     900:	61d3      	str	r3, [r2, #28]
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_DAC);
#endif

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
     902:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     904:	201c      	movs	r0, #28
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
     906:	079b      	lsls	r3, r3, #30
     908:	d503      	bpl.n	912 <dac_init+0x2a>

	_dac_instances[0] = module_inst;
#endif

	return STATUS_OK;
}
     90a:	b002      	add	sp, #8
     90c:	bc04      	pop	{r2}
     90e:	4690      	mov	r8, r2
     910:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
     912:	780b      	ldrb	r3, [r1, #0]
		return STATUS_BUSY;
     914:	3817      	subs	r0, #23
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
     916:	07db      	lsls	r3, r3, #31
     918:	d4f7      	bmi.n	90a <dac_init+0x22>
	gclk_chan_conf.source_generator = config->clock_source;
     91a:	a901      	add	r1, sp, #4
     91c:	78e3      	ldrb	r3, [r4, #3]
     91e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(DAC_GCLK_ID, &gclk_chan_conf);
     920:	301f      	adds	r0, #31
     922:	4b1e      	ldr	r3, [pc, #120]	; (99c <dac_init+0xb4>)
     924:	4798      	blx	r3
	system_gclk_chan_enable(DAC_GCLK_ID);
     926:	2024      	movs	r0, #36	; 0x24
     928:	4b1d      	ldr	r3, [pc, #116]	; (9a0 <dac_init+0xb8>)
     92a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     92c:	2600      	movs	r6, #0
     92e:	466b      	mov	r3, sp
     930:	705e      	strb	r6, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     932:	70de      	strb	r6, [r3, #3]
	pin_conf.mux_position = MUX_PA02B_DAC_VOUT;
     934:	2301      	movs	r3, #1
     936:	466a      	mov	r2, sp
     938:	7013      	strb	r3, [r2, #0]
	pin_conf.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     93a:	7096      	strb	r6, [r2, #2]
	system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT, &pin_conf);
     93c:	4669      	mov	r1, sp
     93e:	2002      	movs	r0, #2
     940:	4b18      	ldr	r3, [pc, #96]	; (9a4 <dac_init+0xbc>)
     942:	4798      	blx	r3
	Dac *const dac_module = module_inst->hw;
     944:	682f      	ldr	r7, [r5, #0]
	module_inst->output = config->output;
     946:	7863      	ldrb	r3, [r4, #1]
     948:	712b      	strb	r3, [r5, #4]
	module_inst->start_on_event = false;
     94a:	71ae      	strb	r6, [r5, #6]
	if (config->run_in_standby) {
     94c:	7963      	ldrb	r3, [r4, #5]
		new_ctrla |= DAC_CTRLA_RUNSTDBY;
     94e:	1e5a      	subs	r2, r3, #1
     950:	4193      	sbcs	r3, r2
     952:	019b      	lsls	r3, r3, #6
	new_ctrlb |= config->reference;
     954:	7822      	ldrb	r2, [r4, #0]
     956:	4690      	mov	r8, r2
	if (config->left_adjust) {
     958:	78a2      	ldrb	r2, [r4, #2]
     95a:	2a00      	cmp	r2, #0
     95c:	d003      	beq.n	966 <dac_init+0x7e>
     95e:	2204      	movs	r2, #4
     960:	4641      	mov	r1, r8
     962:	4311      	orrs	r1, r2
     964:	4688      	mov	r8, r1
	if (config->voltage_pump_disable) {
     966:	7922      	ldrb	r2, [r4, #4]
     968:	2a00      	cmp	r2, #0
     96a:	d003      	beq.n	974 <dac_init+0x8c>
     96c:	2208      	movs	r2, #8
     96e:	4641      	mov	r1, r8
     970:	4311      	orrs	r1, r2
     972:	4688      	mov	r8, r1
	dac_module->CTRLA.reg = new_ctrla;
     974:	b2db      	uxtb	r3, r3
     976:	703b      	strb	r3, [r7, #0]
	while (dac_is_syncing(module_inst)) {
     978:	4e0b      	ldr	r6, [pc, #44]	; (9a8 <dac_init+0xc0>)
     97a:	0028      	movs	r0, r5
     97c:	47b0      	blx	r6
     97e:	2800      	cmp	r0, #0
     980:	d1fb      	bne.n	97a <dac_init+0x92>
	dac_module->CTRLB.reg = new_ctrlb;
     982:	4643      	mov	r3, r8
     984:	707b      	strb	r3, [r7, #1]
	module_inst->reference = config->reference;
     986:	7823      	ldrb	r3, [r4, #0]
     988:	716b      	strb	r3, [r5, #5]
		module_inst->callback[i] = NULL;
     98a:	2300      	movs	r3, #0
     98c:	616b      	str	r3, [r5, #20]
     98e:	61ab      	str	r3, [r5, #24]
     990:	61eb      	str	r3, [r5, #28]
	_dac_instances[0] = module_inst;
     992:	4b06      	ldr	r3, [pc, #24]	; (9ac <dac_init+0xc4>)
     994:	601d      	str	r5, [r3, #0]
	return STATUS_OK;
     996:	e7b8      	b.n	90a <dac_init+0x22>
     998:	40000800 	.word	0x40000800
     99c:	00002a25 	.word	0x00002a25
     9a0:	000029b5 	.word	0x000029b5
     9a4:	00002b21 	.word	0x00002b21
     9a8:	000008c9 	.word	0x000008c9
     9ac:	200018c4 	.word	0x200018c4

000009b0 <dac_enable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_enable(
		struct dac_module *const module_inst)
{
     9b0:	b570      	push	{r4, r5, r6, lr}
     9b2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
     9b4:	6805      	ldr	r5, [r0, #0]

	/* Enable selected output */
	dac_module->CTRLB.reg |= module_inst->output;
     9b6:	786b      	ldrb	r3, [r5, #1]
     9b8:	7902      	ldrb	r2, [r0, #4]
     9ba:	4313      	orrs	r3, r2
     9bc:	706b      	strb	r3, [r5, #1]

	while (dac_is_syncing(module_inst)) {
     9be:	4e0c      	ldr	r6, [pc, #48]	; (9f0 <dac_enable+0x40>)
     9c0:	0020      	movs	r0, r4
     9c2:	47b0      	blx	r6
     9c4:	2800      	cmp	r0, #0
     9c6:	d1fb      	bne.n	9c0 <dac_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	dac_module->CTRLA.reg |= DAC_CTRLA_ENABLE;
     9c8:	782b      	ldrb	r3, [r5, #0]
     9ca:	2202      	movs	r2, #2
     9cc:	4313      	orrs	r3, r2
     9ce:	702b      	strb	r3, [r5, #0]

	/* Enable internal bandgap reference if selected in the configuration */
	if (module_inst->reference == DAC_REFERENCE_INT1V) {
     9d0:	7963      	ldrb	r3, [r4, #5]
     9d2:	2b00      	cmp	r3, #0
     9d4:	d104      	bne.n	9e0 <dac_enable+0x30>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     9d6:	4a07      	ldr	r2, [pc, #28]	; (9f4 <dac_enable+0x44>)
     9d8:	69d3      	ldr	r3, [r2, #28]
     9da:	2104      	movs	r1, #4
     9dc:	430b      	orrs	r3, r1
     9de:	61d3      	str	r3, [r2, #28]
#if (SAMC21)
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
	}

	if(dac_module->CTRLA.reg & DAC_CTRLA_ENABLE) {
     9e0:	782b      	ldrb	r3, [r5, #0]
     9e2:	079b      	lsls	r3, r3, #30
     9e4:	d503      	bpl.n	9ee <dac_enable+0x3e>
		while(! (dac_module->STATUS.reg & DAC_STATUS_READY)) {
     9e6:	2201      	movs	r2, #1
     9e8:	79eb      	ldrb	r3, [r5, #7]
     9ea:	4213      	tst	r3, r2
     9ec:	d0fc      	beq.n	9e8 <dac_enable+0x38>
#else
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#endif
}
     9ee:	bd70      	pop	{r4, r5, r6, pc}
     9f0:	000008c9 	.word	0x000008c9
     9f4:	40001800 	.word	0x40001800

000009f8 <dac_chan_get_config_defaults>:
void dac_chan_get_config_defaults(
		struct dac_chan_config *const config)
{
	/* Sanity check arguments */
	Assert(config);
}
     9f8:	4770      	bx	lr

000009fa <dac_chan_set_config>:
		const enum dac_channel channel,
		struct dac_chan_config *const config)
{
	/* No channel support yet */
	UNUSED(channel);
}
     9fa:	4770      	bx	lr

000009fc <dac_chan_enable>:
		struct dac_module *const module_inst,
		enum dac_channel channel)
{
	/* No channel support yet */
	UNUSED(channel);
}
     9fc:	4770      	bx	lr
	...

00000a00 <dac_chan_write>:
 */
enum status_code dac_chan_write(
		struct dac_module *const module_inst,
		enum dac_channel channel,
		const uint16_t data)
{
     a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a02:	0004      	movs	r4, r0
     a04:	0017      	movs	r7, r2
	Assert(module_inst->hw);

	/* No channel support yet */
	UNUSED(channel);

	Dac *const dac_module = module_inst->hw;
     a06:	6806      	ldr	r6, [r0, #0]

	/* Wait until the synchronization is complete */
	while (dac_is_syncing(module_inst)) {
     a08:	4d06      	ldr	r5, [pc, #24]	; (a24 <dac_chan_write+0x24>)
     a0a:	0020      	movs	r0, r4
     a0c:	47a8      	blx	r5
     a0e:	2800      	cmp	r0, #0
     a10:	d1fb      	bne.n	a0a <dac_chan_write+0xa>
	};

	if (module_inst->start_on_event) {
     a12:	79a3      	ldrb	r3, [r4, #6]
     a14:	2b00      	cmp	r3, #0
     a16:	d102      	bne.n	a1e <dac_chan_write+0x1e>
		/* Write the new value to the buffered DAC data register */
		dac_module->DATABUF.reg = data;
	} else {
		/* Write the new value to the DAC data register */
		dac_module->DATA.reg = data;
     a18:	8137      	strh	r7, [r6, #8]
	}

	return STATUS_OK;
}
     a1a:	2000      	movs	r0, #0
     a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dac_module->DATABUF.reg = data;
     a1e:	81b7      	strh	r7, [r6, #12]
     a20:	e7fb      	b.n	a1a <dac_chan_write+0x1a>
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	000008c9 	.word	0x000008c9

00000a28 <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
     a28:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
     a2a:	4b27      	ldr	r3, [pc, #156]	; (ac8 <DAC_Handler+0xa0>)
     a2c:	681c      	ldr	r4, [r3, #0]
	Dac *const dac_hw = module->hw;
     a2e:	6825      	ldr	r5, [r4, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
     a30:	79ab      	ldrb	r3, [r5, #6]
     a32:	07db      	lsls	r3, r3, #31
     a34:	d507      	bpl.n	a46 <DAC_Handler+0x1e>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
     a36:	2301      	movs	r3, #1
     a38:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
     a3a:	0023      	movs	r3, r4
     a3c:	3314      	adds	r3, #20
     a3e:	d002      	beq.n	a46 <DAC_Handler+0x1e>
     a40:	7c63      	ldrb	r3, [r4, #17]
     a42:	2b00      	cmp	r3, #0
     a44:	d131      	bne.n	aaa <DAC_Handler+0x82>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
     a46:	79ab      	ldrb	r3, [r5, #6]
     a48:	079b      	lsls	r3, r3, #30
     a4a:	d538      	bpl.n	abe <DAC_Handler+0x96>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     a4c:	2302      	movs	r3, #2
     a4e:	71ab      	strb	r3, [r5, #6]
		if (module->remaining_conversions) {
     a50:	89a3      	ldrh	r3, [r4, #12]
     a52:	b29b      	uxth	r3, r3
     a54:	2b00      	cmp	r3, #0
     a56:	d02c      	beq.n	ab2 <DAC_Handler+0x8a>
				module->job_buffer[module->transferred_conversions++];
     a58:	89e3      	ldrh	r3, [r4, #14]
     a5a:	b29b      	uxth	r3, r3
     a5c:	1c5a      	adds	r2, r3, #1
     a5e:	b292      	uxth	r2, r2
     a60:	81e2      	strh	r2, [r4, #14]
     a62:	005b      	lsls	r3, r3, #1
     a64:	68a2      	ldr	r2, [r4, #8]
     a66:	4694      	mov	ip, r2
     a68:	4463      	add	r3, ip
     a6a:	881b      	ldrh	r3, [r3, #0]
     a6c:	b29b      	uxth	r3, r3
			dac_hw->DATABUF.reg =
     a6e:	81ab      	strh	r3, [r5, #12]
			module->remaining_conversions --;
     a70:	89a3      	ldrh	r3, [r4, #12]
     a72:	3b01      	subs	r3, #1
     a74:	b29b      	uxth	r3, r3
     a76:	81a3      	strh	r3, [r4, #12]
			if (module->remaining_conversions == 0) {
     a78:	89a3      	ldrh	r3, [r4, #12]
     a7a:	b29b      	uxth	r3, r3
     a7c:	2b00      	cmp	r3, #0
     a7e:	d118      	bne.n	ab2 <DAC_Handler+0x8a>
				module->job_status = STATUS_OK;
     a80:	2200      	movs	r2, #0
     a82:	3320      	adds	r3, #32
     a84:	54e2      	strb	r2, [r4, r3]
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
     a86:	3b1e      	subs	r3, #30
     a88:	712b      	strb	r3, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     a8a:	71ab      	strb	r3, [r5, #6]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     a8c:	2180      	movs	r1, #128	; 0x80
     a8e:	0549      	lsls	r1, r1, #21
     a90:	337e      	adds	r3, #126	; 0x7e
     a92:	4a0e      	ldr	r2, [pc, #56]	; (acc <DAC_Handler+0xa4>)
     a94:	50d1      	str	r1, [r2, r3]
				if ((module->callback) &&
     a96:	0023      	movs	r3, r4
     a98:	3314      	adds	r3, #20
     a9a:	d010      	beq.n	abe <DAC_Handler+0x96>
     a9c:	7ca3      	ldrb	r3, [r4, #18]
     a9e:	2b00      	cmp	r3, #0
     aa0:	d00a      	beq.n	ab8 <DAC_Handler+0x90>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
     aa2:	2000      	movs	r0, #0
     aa4:	69e3      	ldr	r3, [r4, #28]
     aa6:	4798      	blx	r3
     aa8:	e006      	b.n	ab8 <DAC_Handler+0x90>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
     aaa:	2000      	movs	r0, #0
     aac:	69a3      	ldr	r3, [r4, #24]
     aae:	4798      	blx	r3
     ab0:	e7c9      	b.n	a46 <DAC_Handler+0x1e>
		if ((module->callback) &&
     ab2:	0023      	movs	r3, r4
     ab4:	3314      	adds	r3, #20
     ab6:	d002      	beq.n	abe <DAC_Handler+0x96>
     ab8:	7c23      	ldrb	r3, [r4, #16]
     aba:	2b00      	cmp	r3, #0
     abc:	d100      	bne.n	ac0 <DAC_Handler+0x98>
	_dac_interrupt_handler(0);
}
     abe:	bd70      	pop	{r4, r5, r6, pc}
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
     ac0:	6963      	ldr	r3, [r4, #20]
     ac2:	2000      	movs	r0, #0
     ac4:	4798      	blx	r3
}
     ac6:	e7fa      	b.n	abe <DAC_Handler+0x96>
     ac8:	200018c4 	.word	0x200018c4
     acc:	e000e100 	.word	0xe000e100

00000ad0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ad2:	46de      	mov	lr, fp
     ad4:	4657      	mov	r7, sl
     ad6:	464e      	mov	r6, r9
     ad8:	4645      	mov	r5, r8
     ada:	b5e0      	push	{r5, r6, r7, lr}
     adc:	b087      	sub	sp, #28
     ade:	4680      	mov	r8, r0
     ae0:	9104      	str	r1, [sp, #16]
     ae2:	0016      	movs	r6, r2
     ae4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     ae6:	2200      	movs	r2, #0
     ae8:	2300      	movs	r3, #0
     aea:	2100      	movs	r1, #0
     aec:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     aee:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     af0:	2001      	movs	r0, #1
     af2:	0021      	movs	r1, r4
     af4:	9600      	str	r6, [sp, #0]
     af6:	9701      	str	r7, [sp, #4]
     af8:	465c      	mov	r4, fp
     afa:	9403      	str	r4, [sp, #12]
     afc:	4644      	mov	r4, r8
     afe:	9405      	str	r4, [sp, #20]
     b00:	e013      	b.n	b2a <long_division+0x5a>
     b02:	2420      	movs	r4, #32
     b04:	1a64      	subs	r4, r4, r1
     b06:	0005      	movs	r5, r0
     b08:	40e5      	lsrs	r5, r4
     b0a:	46a8      	mov	r8, r5
     b0c:	e014      	b.n	b38 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     b0e:	9c00      	ldr	r4, [sp, #0]
     b10:	9d01      	ldr	r5, [sp, #4]
     b12:	1b12      	subs	r2, r2, r4
     b14:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     b16:	465c      	mov	r4, fp
     b18:	464d      	mov	r5, r9
     b1a:	432c      	orrs	r4, r5
     b1c:	46a3      	mov	fp, r4
     b1e:	9c03      	ldr	r4, [sp, #12]
     b20:	4645      	mov	r5, r8
     b22:	432c      	orrs	r4, r5
     b24:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     b26:	3901      	subs	r1, #1
     b28:	d325      	bcc.n	b76 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     b2a:	2420      	movs	r4, #32
     b2c:	4264      	negs	r4, r4
     b2e:	190c      	adds	r4, r1, r4
     b30:	d4e7      	bmi.n	b02 <long_division+0x32>
     b32:	0005      	movs	r5, r0
     b34:	40a5      	lsls	r5, r4
     b36:	46a8      	mov	r8, r5
     b38:	0004      	movs	r4, r0
     b3a:	408c      	lsls	r4, r1
     b3c:	46a1      	mov	r9, r4
		r = r << 1;
     b3e:	1892      	adds	r2, r2, r2
     b40:	415b      	adcs	r3, r3
     b42:	0014      	movs	r4, r2
     b44:	001d      	movs	r5, r3
		if (n & bit_shift) {
     b46:	9e05      	ldr	r6, [sp, #20]
     b48:	464f      	mov	r7, r9
     b4a:	403e      	ands	r6, r7
     b4c:	46b4      	mov	ip, r6
     b4e:	9e04      	ldr	r6, [sp, #16]
     b50:	4647      	mov	r7, r8
     b52:	403e      	ands	r6, r7
     b54:	46b2      	mov	sl, r6
     b56:	4666      	mov	r6, ip
     b58:	4657      	mov	r7, sl
     b5a:	433e      	orrs	r6, r7
     b5c:	d003      	beq.n	b66 <long_division+0x96>
			r |= 0x01;
     b5e:	0006      	movs	r6, r0
     b60:	4326      	orrs	r6, r4
     b62:	0032      	movs	r2, r6
     b64:	002b      	movs	r3, r5
		if (r >= d) {
     b66:	9c00      	ldr	r4, [sp, #0]
     b68:	9d01      	ldr	r5, [sp, #4]
     b6a:	429d      	cmp	r5, r3
     b6c:	d8db      	bhi.n	b26 <long_division+0x56>
     b6e:	d1ce      	bne.n	b0e <long_division+0x3e>
     b70:	4294      	cmp	r4, r2
     b72:	d8d8      	bhi.n	b26 <long_division+0x56>
     b74:	e7cb      	b.n	b0e <long_division+0x3e>
     b76:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     b78:	4658      	mov	r0, fp
     b7a:	0019      	movs	r1, r3
     b7c:	b007      	add	sp, #28
     b7e:	bc3c      	pop	{r2, r3, r4, r5}
     b80:	4690      	mov	r8, r2
     b82:	4699      	mov	r9, r3
     b84:	46a2      	mov	sl, r4
     b86:	46ab      	mov	fp, r5
     b88:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000b8a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     b8a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     b8c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b8e:	2340      	movs	r3, #64	; 0x40
     b90:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     b92:	4281      	cmp	r1, r0
     b94:	d202      	bcs.n	b9c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     b96:	0018      	movs	r0, r3
     b98:	bd10      	pop	{r4, pc}
		baud_calculated++;
     b9a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     b9c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     b9e:	1c63      	adds	r3, r4, #1
     ba0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     ba2:	4288      	cmp	r0, r1
     ba4:	d9f9      	bls.n	b9a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ba6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     ba8:	2cff      	cmp	r4, #255	; 0xff
     baa:	d8f4      	bhi.n	b96 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     bac:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     bae:	2300      	movs	r3, #0
     bb0:	e7f1      	b.n	b96 <_sercom_get_sync_baud_val+0xc>
	...

00000bb4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
     bb6:	b083      	sub	sp, #12
     bb8:	000f      	movs	r7, r1
     bba:	0016      	movs	r6, r2
     bbc:	aa08      	add	r2, sp, #32
     bbe:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     bc0:	0004      	movs	r4, r0
     bc2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     bc4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     bc6:	42bc      	cmp	r4, r7
     bc8:	d902      	bls.n	bd0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     bca:	0010      	movs	r0, r2
     bcc:	b003      	add	sp, #12
     bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     bd0:	2b00      	cmp	r3, #0
     bd2:	d114      	bne.n	bfe <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     bd4:	0002      	movs	r2, r0
     bd6:	0008      	movs	r0, r1
     bd8:	2100      	movs	r1, #0
     bda:	4c19      	ldr	r4, [pc, #100]	; (c40 <_sercom_get_async_baud_val+0x8c>)
     bdc:	47a0      	blx	r4
     bde:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     be0:	003a      	movs	r2, r7
     be2:	2300      	movs	r3, #0
     be4:	2000      	movs	r0, #0
     be6:	4c17      	ldr	r4, [pc, #92]	; (c44 <_sercom_get_async_baud_val+0x90>)
     be8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     bea:	2200      	movs	r2, #0
     bec:	2301      	movs	r3, #1
     bee:	1a12      	subs	r2, r2, r0
     bf0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     bf2:	0c12      	lsrs	r2, r2, #16
     bf4:	041b      	lsls	r3, r3, #16
     bf6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     bf8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     bfa:	2200      	movs	r2, #0
     bfc:	e7e5      	b.n	bca <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     bfe:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     c00:	2b01      	cmp	r3, #1
     c02:	d1f9      	bne.n	bf8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     c04:	000a      	movs	r2, r1
     c06:	2300      	movs	r3, #0
     c08:	2100      	movs	r1, #0
     c0a:	4c0d      	ldr	r4, [pc, #52]	; (c40 <_sercom_get_async_baud_val+0x8c>)
     c0c:	47a0      	blx	r4
     c0e:	0002      	movs	r2, r0
     c10:	000b      	movs	r3, r1
     c12:	9200      	str	r2, [sp, #0]
     c14:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     c16:	0038      	movs	r0, r7
     c18:	2100      	movs	r1, #0
     c1a:	4c0a      	ldr	r4, [pc, #40]	; (c44 <_sercom_get_async_baud_val+0x90>)
     c1c:	47a0      	blx	r4
     c1e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     c20:	2380      	movs	r3, #128	; 0x80
     c22:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c24:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     c26:	4298      	cmp	r0, r3
     c28:	d8cf      	bhi.n	bca <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     c2a:	0f79      	lsrs	r1, r7, #29
     c2c:	00f8      	lsls	r0, r7, #3
     c2e:	9a00      	ldr	r2, [sp, #0]
     c30:	9b01      	ldr	r3, [sp, #4]
     c32:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     c34:	00ea      	lsls	r2, r5, #3
     c36:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     c38:	b2d2      	uxtb	r2, r2
     c3a:	0352      	lsls	r2, r2, #13
     c3c:	432a      	orrs	r2, r5
     c3e:	e7db      	b.n	bf8 <_sercom_get_async_baud_val+0x44>
     c40:	000037fd 	.word	0x000037fd
     c44:	00000ad1 	.word	0x00000ad1

00000c48 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     c48:	b510      	push	{r4, lr}
     c4a:	b082      	sub	sp, #8
     c4c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     c4e:	4b0e      	ldr	r3, [pc, #56]	; (c88 <sercom_set_gclk_generator+0x40>)
     c50:	781b      	ldrb	r3, [r3, #0]
     c52:	2b00      	cmp	r3, #0
     c54:	d007      	beq.n	c66 <sercom_set_gclk_generator+0x1e>
     c56:	2900      	cmp	r1, #0
     c58:	d105      	bne.n	c66 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     c5a:	4b0b      	ldr	r3, [pc, #44]	; (c88 <sercom_set_gclk_generator+0x40>)
     c5c:	785b      	ldrb	r3, [r3, #1]
     c5e:	4283      	cmp	r3, r0
     c60:	d010      	beq.n	c84 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     c62:	201d      	movs	r0, #29
     c64:	e00c      	b.n	c80 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     c66:	a901      	add	r1, sp, #4
     c68:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     c6a:	2012      	movs	r0, #18
     c6c:	4b07      	ldr	r3, [pc, #28]	; (c8c <sercom_set_gclk_generator+0x44>)
     c6e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     c70:	2012      	movs	r0, #18
     c72:	4b07      	ldr	r3, [pc, #28]	; (c90 <sercom_set_gclk_generator+0x48>)
     c74:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     c76:	4b04      	ldr	r3, [pc, #16]	; (c88 <sercom_set_gclk_generator+0x40>)
     c78:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     c7a:	2201      	movs	r2, #1
     c7c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     c7e:	2000      	movs	r0, #0
}
     c80:	b002      	add	sp, #8
     c82:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     c84:	2000      	movs	r0, #0
     c86:	e7fb      	b.n	c80 <sercom_set_gclk_generator+0x38>
     c88:	200000a4 	.word	0x200000a4
     c8c:	00002a25 	.word	0x00002a25
     c90:	000029b5 	.word	0x000029b5

00000c94 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     c94:	4b40      	ldr	r3, [pc, #256]	; (d98 <_sercom_get_default_pad+0x104>)
     c96:	4298      	cmp	r0, r3
     c98:	d031      	beq.n	cfe <_sercom_get_default_pad+0x6a>
     c9a:	d90a      	bls.n	cb2 <_sercom_get_default_pad+0x1e>
     c9c:	4b3f      	ldr	r3, [pc, #252]	; (d9c <_sercom_get_default_pad+0x108>)
     c9e:	4298      	cmp	r0, r3
     ca0:	d04d      	beq.n	d3e <_sercom_get_default_pad+0xaa>
     ca2:	4b3f      	ldr	r3, [pc, #252]	; (da0 <_sercom_get_default_pad+0x10c>)
     ca4:	4298      	cmp	r0, r3
     ca6:	d05a      	beq.n	d5e <_sercom_get_default_pad+0xca>
     ca8:	4b3e      	ldr	r3, [pc, #248]	; (da4 <_sercom_get_default_pad+0x110>)
     caa:	4298      	cmp	r0, r3
     cac:	d037      	beq.n	d1e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     cae:	2000      	movs	r0, #0
}
     cb0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     cb2:	4b3d      	ldr	r3, [pc, #244]	; (da8 <_sercom_get_default_pad+0x114>)
     cb4:	4298      	cmp	r0, r3
     cb6:	d00c      	beq.n	cd2 <_sercom_get_default_pad+0x3e>
     cb8:	4b3c      	ldr	r3, [pc, #240]	; (dac <_sercom_get_default_pad+0x118>)
     cba:	4298      	cmp	r0, r3
     cbc:	d1f7      	bne.n	cae <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cbe:	2901      	cmp	r1, #1
     cc0:	d017      	beq.n	cf2 <_sercom_get_default_pad+0x5e>
     cc2:	2900      	cmp	r1, #0
     cc4:	d05d      	beq.n	d82 <_sercom_get_default_pad+0xee>
     cc6:	2902      	cmp	r1, #2
     cc8:	d015      	beq.n	cf6 <_sercom_get_default_pad+0x62>
     cca:	2903      	cmp	r1, #3
     ccc:	d015      	beq.n	cfa <_sercom_get_default_pad+0x66>
	return 0;
     cce:	2000      	movs	r0, #0
     cd0:	e7ee      	b.n	cb0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cd2:	2901      	cmp	r1, #1
     cd4:	d007      	beq.n	ce6 <_sercom_get_default_pad+0x52>
     cd6:	2900      	cmp	r1, #0
     cd8:	d051      	beq.n	d7e <_sercom_get_default_pad+0xea>
     cda:	2902      	cmp	r1, #2
     cdc:	d005      	beq.n	cea <_sercom_get_default_pad+0x56>
     cde:	2903      	cmp	r1, #3
     ce0:	d005      	beq.n	cee <_sercom_get_default_pad+0x5a>
	return 0;
     ce2:	2000      	movs	r0, #0
     ce4:	e7e4      	b.n	cb0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ce6:	4832      	ldr	r0, [pc, #200]	; (db0 <_sercom_get_default_pad+0x11c>)
     ce8:	e7e2      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     cea:	4832      	ldr	r0, [pc, #200]	; (db4 <_sercom_get_default_pad+0x120>)
     cec:	e7e0      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     cee:	4832      	ldr	r0, [pc, #200]	; (db8 <_sercom_get_default_pad+0x124>)
     cf0:	e7de      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     cf2:	4832      	ldr	r0, [pc, #200]	; (dbc <_sercom_get_default_pad+0x128>)
     cf4:	e7dc      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     cf6:	4832      	ldr	r0, [pc, #200]	; (dc0 <_sercom_get_default_pad+0x12c>)
     cf8:	e7da      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     cfa:	4832      	ldr	r0, [pc, #200]	; (dc4 <_sercom_get_default_pad+0x130>)
     cfc:	e7d8      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     cfe:	2901      	cmp	r1, #1
     d00:	d007      	beq.n	d12 <_sercom_get_default_pad+0x7e>
     d02:	2900      	cmp	r1, #0
     d04:	d03f      	beq.n	d86 <_sercom_get_default_pad+0xf2>
     d06:	2902      	cmp	r1, #2
     d08:	d005      	beq.n	d16 <_sercom_get_default_pad+0x82>
     d0a:	2903      	cmp	r1, #3
     d0c:	d005      	beq.n	d1a <_sercom_get_default_pad+0x86>
	return 0;
     d0e:	2000      	movs	r0, #0
     d10:	e7ce      	b.n	cb0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d12:	482d      	ldr	r0, [pc, #180]	; (dc8 <_sercom_get_default_pad+0x134>)
     d14:	e7cc      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d16:	482d      	ldr	r0, [pc, #180]	; (dcc <_sercom_get_default_pad+0x138>)
     d18:	e7ca      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d1a:	482d      	ldr	r0, [pc, #180]	; (dd0 <_sercom_get_default_pad+0x13c>)
     d1c:	e7c8      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d1e:	2901      	cmp	r1, #1
     d20:	d007      	beq.n	d32 <_sercom_get_default_pad+0x9e>
     d22:	2900      	cmp	r1, #0
     d24:	d031      	beq.n	d8a <_sercom_get_default_pad+0xf6>
     d26:	2902      	cmp	r1, #2
     d28:	d005      	beq.n	d36 <_sercom_get_default_pad+0xa2>
     d2a:	2903      	cmp	r1, #3
     d2c:	d005      	beq.n	d3a <_sercom_get_default_pad+0xa6>
	return 0;
     d2e:	2000      	movs	r0, #0
     d30:	e7be      	b.n	cb0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d32:	4828      	ldr	r0, [pc, #160]	; (dd4 <_sercom_get_default_pad+0x140>)
     d34:	e7bc      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d36:	4828      	ldr	r0, [pc, #160]	; (dd8 <_sercom_get_default_pad+0x144>)
     d38:	e7ba      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d3a:	4828      	ldr	r0, [pc, #160]	; (ddc <_sercom_get_default_pad+0x148>)
     d3c:	e7b8      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d3e:	2901      	cmp	r1, #1
     d40:	d007      	beq.n	d52 <_sercom_get_default_pad+0xbe>
     d42:	2900      	cmp	r1, #0
     d44:	d023      	beq.n	d8e <_sercom_get_default_pad+0xfa>
     d46:	2902      	cmp	r1, #2
     d48:	d005      	beq.n	d56 <_sercom_get_default_pad+0xc2>
     d4a:	2903      	cmp	r1, #3
     d4c:	d005      	beq.n	d5a <_sercom_get_default_pad+0xc6>
	return 0;
     d4e:	2000      	movs	r0, #0
     d50:	e7ae      	b.n	cb0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d52:	4823      	ldr	r0, [pc, #140]	; (de0 <_sercom_get_default_pad+0x14c>)
     d54:	e7ac      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d56:	4823      	ldr	r0, [pc, #140]	; (de4 <_sercom_get_default_pad+0x150>)
     d58:	e7aa      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d5a:	4823      	ldr	r0, [pc, #140]	; (de8 <_sercom_get_default_pad+0x154>)
     d5c:	e7a8      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d5e:	2901      	cmp	r1, #1
     d60:	d007      	beq.n	d72 <_sercom_get_default_pad+0xde>
     d62:	2900      	cmp	r1, #0
     d64:	d015      	beq.n	d92 <_sercom_get_default_pad+0xfe>
     d66:	2902      	cmp	r1, #2
     d68:	d005      	beq.n	d76 <_sercom_get_default_pad+0xe2>
     d6a:	2903      	cmp	r1, #3
     d6c:	d005      	beq.n	d7a <_sercom_get_default_pad+0xe6>
	return 0;
     d6e:	2000      	movs	r0, #0
     d70:	e79e      	b.n	cb0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d72:	481e      	ldr	r0, [pc, #120]	; (dec <_sercom_get_default_pad+0x158>)
     d74:	e79c      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d76:	481e      	ldr	r0, [pc, #120]	; (df0 <_sercom_get_default_pad+0x15c>)
     d78:	e79a      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d7a:	481e      	ldr	r0, [pc, #120]	; (df4 <_sercom_get_default_pad+0x160>)
     d7c:	e798      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d7e:	481e      	ldr	r0, [pc, #120]	; (df8 <_sercom_get_default_pad+0x164>)
     d80:	e796      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d82:	481e      	ldr	r0, [pc, #120]	; (dfc <_sercom_get_default_pad+0x168>)
     d84:	e794      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d86:	481e      	ldr	r0, [pc, #120]	; (e00 <_sercom_get_default_pad+0x16c>)
     d88:	e792      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d8a:	481e      	ldr	r0, [pc, #120]	; (e04 <_sercom_get_default_pad+0x170>)
     d8c:	e790      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d8e:	481e      	ldr	r0, [pc, #120]	; (e08 <_sercom_get_default_pad+0x174>)
     d90:	e78e      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d92:	481e      	ldr	r0, [pc, #120]	; (e0c <_sercom_get_default_pad+0x178>)
     d94:	e78c      	b.n	cb0 <_sercom_get_default_pad+0x1c>
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	42000c00 	.word	0x42000c00
     d9c:	42001400 	.word	0x42001400
     da0:	42001800 	.word	0x42001800
     da4:	42001000 	.word	0x42001000
     da8:	42000400 	.word	0x42000400
     dac:	42000800 	.word	0x42000800
     db0:	00050003 	.word	0x00050003
     db4:	00060003 	.word	0x00060003
     db8:	00070003 	.word	0x00070003
     dbc:	00110002 	.word	0x00110002
     dc0:	00120002 	.word	0x00120002
     dc4:	00130002 	.word	0x00130002
     dc8:	000d0002 	.word	0x000d0002
     dcc:	000e0002 	.word	0x000e0002
     dd0:	000f0002 	.word	0x000f0002
     dd4:	00170002 	.word	0x00170002
     dd8:	00180002 	.word	0x00180002
     ddc:	00190002 	.word	0x00190002
     de0:	00290003 	.word	0x00290003
     de4:	002a0003 	.word	0x002a0003
     de8:	002b0003 	.word	0x002b0003
     dec:	00230003 	.word	0x00230003
     df0:	00200003 	.word	0x00200003
     df4:	00210003 	.word	0x00210003
     df8:	00040003 	.word	0x00040003
     dfc:	00100002 	.word	0x00100002
     e00:	000c0002 	.word	0x000c0002
     e04:	00160002 	.word	0x00160002
     e08:	00280003 	.word	0x00280003
     e0c:	00220003 	.word	0x00220003

00000e10 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     e10:	b530      	push	{r4, r5, lr}
     e12:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     e14:	4b0b      	ldr	r3, [pc, #44]	; (e44 <_sercom_get_sercom_inst_index+0x34>)
     e16:	466a      	mov	r2, sp
     e18:	cb32      	ldmia	r3!, {r1, r4, r5}
     e1a:	c232      	stmia	r2!, {r1, r4, r5}
     e1c:	cb32      	ldmia	r3!, {r1, r4, r5}
     e1e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     e20:	9b00      	ldr	r3, [sp, #0]
     e22:	4283      	cmp	r3, r0
     e24:	d00b      	beq.n	e3e <_sercom_get_sercom_inst_index+0x2e>
     e26:	2301      	movs	r3, #1
     e28:	009a      	lsls	r2, r3, #2
     e2a:	4669      	mov	r1, sp
     e2c:	5852      	ldr	r2, [r2, r1]
     e2e:	4282      	cmp	r2, r0
     e30:	d006      	beq.n	e40 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e32:	3301      	adds	r3, #1
     e34:	2b06      	cmp	r3, #6
     e36:	d1f7      	bne.n	e28 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     e38:	2000      	movs	r0, #0
}
     e3a:	b007      	add	sp, #28
     e3c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e3e:	2300      	movs	r3, #0
			return i;
     e40:	b2d8      	uxtb	r0, r3
     e42:	e7fa      	b.n	e3a <_sercom_get_sercom_inst_index+0x2a>
     e44:	00005984 	.word	0x00005984

00000e48 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
     e48:	4b09      	ldr	r3, [pc, #36]	; (e70 <_tcc_get_inst_index+0x28>)
     e4a:	4298      	cmp	r0, r3
     e4c:	d00c      	beq.n	e68 <_tcc_get_inst_index+0x20>
     e4e:	4b09      	ldr	r3, [pc, #36]	; (e74 <_tcc_get_inst_index+0x2c>)
     e50:	4298      	cmp	r0, r3
     e52:	d007      	beq.n	e64 <_tcc_get_inst_index+0x1c>
     e54:	4a08      	ldr	r2, [pc, #32]	; (e78 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     e56:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
     e58:	4290      	cmp	r0, r2
     e5a:	d001      	beq.n	e60 <_tcc_get_inst_index+0x18>
}
     e5c:	0018      	movs	r0, r3
     e5e:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
     e60:	3302      	adds	r3, #2
     e62:	e002      	b.n	e6a <_tcc_get_inst_index+0x22>
     e64:	2301      	movs	r3, #1
     e66:	e000      	b.n	e6a <_tcc_get_inst_index+0x22>
     e68:	2300      	movs	r3, #0
			return i;
     e6a:	b2db      	uxtb	r3, r3
     e6c:	e7f6      	b.n	e5c <_tcc_get_inst_index+0x14>
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	42002400 	.word	0x42002400
     e74:	42002800 	.word	0x42002800
     e78:	42002c00 	.word	0x42002c00

00000e7c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
     e7c:	b510      	push	{r4, lr}
     e7e:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     e80:	0008      	movs	r0, r1
     e82:	4b4f      	ldr	r3, [pc, #316]	; (fc0 <tcc_get_config_defaults+0x144>)
     e84:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
     e86:	2300      	movs	r3, #0
     e88:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
     e8a:	0080      	lsls	r0, r0, #2
     e8c:	4a4d      	ldr	r2, [pc, #308]	; (fc4 <tcc_get_config_defaults+0x148>)
     e8e:	5882      	ldr	r2, [r0, r2]
     e90:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
     e92:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     e94:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     e96:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     e98:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     e9a:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     e9c:	61e3      	str	r3, [r4, #28]
     e9e:	6223      	str	r3, [r4, #32]
     ea0:	6263      	str	r3, [r4, #36]	; 0x24
     ea2:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     ea4:	7523      	strb	r3, [r4, #20]
     ea6:	7563      	strb	r3, [r4, #21]
     ea8:	75a3      	strb	r3, [r4, #22]
     eaa:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     eac:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     eae:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     eb0:	7423      	strb	r3, [r4, #16]
     eb2:	7463      	strb	r3, [r4, #17]
     eb4:	74a3      	strb	r3, [r4, #18]
     eb6:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     eb8:	222c      	movs	r2, #44	; 0x2c
     eba:	54a3      	strb	r3, [r4, r2]
     ebc:	3201      	adds	r2, #1
     ebe:	54a3      	strb	r3, [r4, r2]
     ec0:	3201      	adds	r2, #1
     ec2:	54a3      	strb	r3, [r4, r2]
     ec4:	3201      	adds	r2, #1
     ec6:	54a3      	strb	r3, [r4, r2]
     ec8:	3201      	adds	r2, #1
     eca:	54a3      	strb	r3, [r4, r2]
     ecc:	3201      	adds	r2, #1
     ece:	54a3      	strb	r3, [r4, r2]
     ed0:	3201      	adds	r2, #1
     ed2:	54a3      	strb	r3, [r4, r2]
     ed4:	3201      	adds	r2, #1
     ed6:	54a3      	strb	r3, [r4, r2]
     ed8:	3201      	adds	r2, #1
     eda:	54a3      	strb	r3, [r4, r2]
     edc:	3201      	adds	r2, #1
     ede:	54a3      	strb	r3, [r4, r2]
     ee0:	3201      	adds	r2, #1
     ee2:	54a3      	strb	r3, [r4, r2]
     ee4:	3201      	adds	r2, #1
     ee6:	54a3      	strb	r3, [r4, r2]
     ee8:	3201      	adds	r2, #1
     eea:	54a3      	strb	r3, [r4, r2]
     eec:	3201      	adds	r2, #1
     eee:	54a3      	strb	r3, [r4, r2]
     ef0:	3201      	adds	r2, #1
     ef2:	54a3      	strb	r3, [r4, r2]
     ef4:	3201      	adds	r2, #1
     ef6:	54a3      	strb	r3, [r4, r2]
     ef8:	3201      	adds	r2, #1
     efa:	54a3      	strb	r3, [r4, r2]
     efc:	3201      	adds	r2, #1
     efe:	54a3      	strb	r3, [r4, r2]
     f00:	3201      	adds	r2, #1
     f02:	54a3      	strb	r3, [r4, r2]
     f04:	3201      	adds	r2, #1
     f06:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     f08:	3201      	adds	r2, #1
     f0a:	54a3      	strb	r3, [r4, r2]
     f0c:	3201      	adds	r2, #1
     f0e:	54a3      	strb	r3, [r4, r2]
     f10:	3201      	adds	r2, #1
     f12:	54a3      	strb	r3, [r4, r2]
     f14:	3201      	adds	r2, #1
     f16:	54a3      	strb	r3, [r4, r2]
     f18:	3201      	adds	r2, #1
     f1a:	54a3      	strb	r3, [r4, r2]
     f1c:	3201      	adds	r2, #1
     f1e:	54a3      	strb	r3, [r4, r2]
     f20:	3201      	adds	r2, #1
     f22:	54a3      	strb	r3, [r4, r2]
     f24:	3201      	adds	r2, #1
     f26:	54a3      	strb	r3, [r4, r2]
     f28:	3201      	adds	r2, #1
     f2a:	54a3      	strb	r3, [r4, r2]
     f2c:	3201      	adds	r2, #1
     f2e:	54a3      	strb	r3, [r4, r2]
     f30:	3201      	adds	r2, #1
     f32:	54a3      	strb	r3, [r4, r2]
     f34:	3201      	adds	r2, #1
     f36:	54a3      	strb	r3, [r4, r2]
     f38:	3201      	adds	r2, #1
     f3a:	54a3      	strb	r3, [r4, r2]
     f3c:	3201      	adds	r2, #1
     f3e:	54a3      	strb	r3, [r4, r2]
     f40:	3201      	adds	r2, #1
     f42:	54a3      	strb	r3, [r4, r2]
     f44:	3201      	adds	r2, #1
     f46:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     f48:	3201      	adds	r2, #1
     f4a:	54a3      	strb	r3, [r4, r2]
     f4c:	3201      	adds	r2, #1
     f4e:	54a3      	strb	r3, [r4, r2]
     f50:	3201      	adds	r2, #1
     f52:	54a3      	strb	r3, [r4, r2]
     f54:	3201      	adds	r2, #1
     f56:	54a3      	strb	r3, [r4, r2]
     f58:	3201      	adds	r2, #1
     f5a:	54a3      	strb	r3, [r4, r2]
     f5c:	3201      	adds	r2, #1
     f5e:	54a3      	strb	r3, [r4, r2]
     f60:	3201      	adds	r2, #1
     f62:	54a3      	strb	r3, [r4, r2]
     f64:	3201      	adds	r2, #1
     f66:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     f68:	3241      	adds	r2, #65	; 0x41
     f6a:	54a3      	strb	r3, [r4, r2]
     f6c:	65a3      	str	r3, [r4, #88]	; 0x58
     f6e:	67a3      	str	r3, [r4, #120]	; 0x78
     f70:	3201      	adds	r2, #1
     f72:	54a3      	strb	r3, [r4, r2]
     f74:	65e3      	str	r3, [r4, #92]	; 0x5c
     f76:	67e3      	str	r3, [r4, #124]	; 0x7c
     f78:	3201      	adds	r2, #1
     f7a:	54a3      	strb	r3, [r4, r2]
     f7c:	6623      	str	r3, [r4, #96]	; 0x60
     f7e:	3a1a      	subs	r2, #26
     f80:	50a3      	str	r3, [r4, r2]
     f82:	321b      	adds	r2, #27
     f84:	54a3      	strb	r3, [r4, r2]
     f86:	6663      	str	r3, [r4, #100]	; 0x64
     f88:	3a17      	subs	r2, #23
     f8a:	50a3      	str	r3, [r4, r2]
     f8c:	3218      	adds	r2, #24
     f8e:	54a3      	strb	r3, [r4, r2]
     f90:	66a3      	str	r3, [r4, #104]	; 0x68
     f92:	3a14      	subs	r2, #20
     f94:	50a3      	str	r3, [r4, r2]
     f96:	3215      	adds	r2, #21
     f98:	54a3      	strb	r3, [r4, r2]
     f9a:	66e3      	str	r3, [r4, #108]	; 0x6c
     f9c:	3a11      	subs	r2, #17
     f9e:	50a3      	str	r3, [r4, r2]
     fa0:	3212      	adds	r2, #18
     fa2:	54a3      	strb	r3, [r4, r2]
     fa4:	6723      	str	r3, [r4, #112]	; 0x70
     fa6:	3a0e      	subs	r2, #14
     fa8:	50a3      	str	r3, [r4, r2]
     faa:	320f      	adds	r2, #15
     fac:	54a3      	strb	r3, [r4, r2]
     fae:	6763      	str	r3, [r4, #116]	; 0x74
     fb0:	3a0b      	subs	r2, #11
     fb2:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
     fb4:	2101      	movs	r1, #1
     fb6:	320c      	adds	r2, #12
     fb8:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     fba:	3201      	adds	r2, #1
     fbc:	54a3      	strb	r3, [r4, r2]
}
     fbe:	bd10      	pop	{r4, pc}
     fc0:	00000e49 	.word	0x00000e49
     fc4:	000059b0 	.word	0x000059b0

00000fc8 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
     fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     fca:	46de      	mov	lr, fp
     fcc:	4657      	mov	r7, sl
     fce:	464e      	mov	r6, r9
     fd0:	4645      	mov	r5, r8
     fd2:	b5e0      	push	{r5, r6, r7, lr}
     fd4:	b091      	sub	sp, #68	; 0x44
     fd6:	9001      	str	r0, [sp, #4]
     fd8:	000c      	movs	r4, r1
     fda:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     fdc:	0008      	movs	r0, r1
     fde:	4bc3      	ldr	r3, [pc, #780]	; (12ec <tcc_init+0x324>)
     fe0:	4798      	blx	r3
     fe2:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     fe4:	0001      	movs	r1, r0
     fe6:	48c2      	ldr	r0, [pc, #776]	; (12f0 <tcc_init+0x328>)
     fe8:	69c2      	ldr	r2, [r0, #28]
     fea:	009e      	lsls	r6, r3, #2
     fec:	4fc1      	ldr	r7, [pc, #772]	; (12f4 <tcc_init+0x32c>)
     fee:	59f7      	ldr	r7, [r6, r7]
     ff0:	433a      	orrs	r2, r7
     ff2:	61c2      	str	r2, [r0, #28]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     ff4:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     ff6:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     ff8:	0792      	lsls	r2, r2, #30
     ffa:	d506      	bpl.n	100a <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
     ffc:	b011      	add	sp, #68	; 0x44
     ffe:	bc3c      	pop	{r2, r3, r4, r5}
    1000:	4690      	mov	r8, r2
    1002:	4699      	mov	r9, r3
    1004:	46a2      	mov	sl, r4
    1006:	46ab      	mov	fp, r5
    1008:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    100a:	6822      	ldr	r2, [r4, #0]
    100c:	2701      	movs	r7, #1
    100e:	4017      	ands	r7, r2
    1010:	d1f4      	bne.n	ffc <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    1012:	48b9      	ldr	r0, [pc, #740]	; (12f8 <tcc_init+0x330>)
    1014:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    1016:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    1018:	682e      	ldr	r6, [r5, #0]
    101a:	42b2      	cmp	r2, r6
    101c:	d3ee      	bcc.n	ffc <tcc_init+0x34>
		|| (config->counter.period > count_max)
    101e:	686e      	ldr	r6, [r5, #4]
    1020:	42b2      	cmp	r2, r6
    1022:	d3eb      	bcc.n	ffc <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    1024:	69e8      	ldr	r0, [r5, #28]
    1026:	4282      	cmp	r2, r0
    1028:	d200      	bcs.n	102c <tcc_init+0x64>
    102a:	e1ab      	b.n	1384 <tcc_init+0x3bc>
    102c:	6a28      	ldr	r0, [r5, #32]
    102e:	4282      	cmp	r2, r0
    1030:	d200      	bcs.n	1034 <tcc_init+0x6c>
    1032:	e1a9      	b.n	1388 <tcc_init+0x3c0>
    1034:	6a68      	ldr	r0, [r5, #36]	; 0x24
    1036:	4282      	cmp	r2, r0
    1038:	d200      	bcs.n	103c <tcc_init+0x74>
    103a:	e1a7      	b.n	138c <tcc_init+0x3c4>
    103c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    103e:	4282      	cmp	r2, r0
    1040:	d200      	bcs.n	1044 <tcc_init+0x7c>
    1042:	e1a5      	b.n	1390 <tcc_init+0x3c8>
    1044:	2298      	movs	r2, #152	; 0x98
    1046:	4694      	mov	ip, r2
    1048:	44ac      	add	ip, r5
    104a:	4662      	mov	r2, ip
    104c:	9208      	str	r2, [sp, #32]
    104e:	2000      	movs	r0, #0
    1050:	e003      	b.n	105a <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    1052:	3001      	adds	r0, #1
    1054:	3201      	adds	r2, #1
    1056:	2808      	cmp	r0, #8
    1058:	d008      	beq.n	106c <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    105a:	7816      	ldrb	r6, [r2, #0]
    105c:	2e00      	cmp	r6, #0
    105e:	d0f8      	beq.n	1052 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    1060:	4ea6      	ldr	r6, [pc, #664]	; (12fc <tcc_init+0x334>)
    1062:	5c76      	ldrb	r6, [r6, r1]
    1064:	4286      	cmp	r6, r0
    1066:	dcf4      	bgt.n	1052 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    1068:	2017      	movs	r0, #23
    106a:	e7c7      	b.n	ffc <tcc_init+0x34>
    106c:	2200      	movs	r2, #0
    106e:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    1070:	2080      	movs	r0, #128	; 0x80
    1072:	0440      	lsls	r0, r0, #17
    1074:	4684      	mov	ip, r0
    1076:	e002      	b.n	107e <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    1078:	3201      	adds	r2, #1
    107a:	2a04      	cmp	r2, #4
    107c:	d00e      	beq.n	109c <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    107e:	18a8      	adds	r0, r5, r2
    1080:	7c00      	ldrb	r0, [r0, #16]
    1082:	2801      	cmp	r0, #1
    1084:	d1f8      	bne.n	1078 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    1086:	489e      	ldr	r0, [pc, #632]	; (1300 <tcc_init+0x338>)
    1088:	5c40      	ldrb	r0, [r0, r1]
    108a:	4290      	cmp	r0, r2
    108c:	da00      	bge.n	1090 <tcc_init+0xc8>
    108e:	e181      	b.n	1394 <tcc_init+0x3cc>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    1090:	4660      	mov	r0, ip
    1092:	4090      	lsls	r0, r2
    1094:	9e02      	ldr	r6, [sp, #8]
    1096:	4306      	orrs	r6, r0
    1098:	9602      	str	r6, [sp, #8]
    109a:	e7ed      	b.n	1078 <tcc_init+0xb0>
	if (config->run_in_standby) {
    109c:	329d      	adds	r2, #157	; 0x9d
    109e:	5caa      	ldrb	r2, [r5, r2]
    10a0:	2a00      	cmp	r2, #0
    10a2:	d004      	beq.n	10ae <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    10a4:	2280      	movs	r2, #128	; 0x80
    10a6:	0112      	lsls	r2, r2, #4
    10a8:	9902      	ldr	r1, [sp, #8]
    10aa:	4311      	orrs	r1, r2
    10ac:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    10ae:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    10b0:	1e51      	subs	r1, r2, #1
    10b2:	418a      	sbcs	r2, r1
    10b4:	0092      	lsls	r2, r2, #2
    10b6:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    10b8:	7a6a      	ldrb	r2, [r5, #9]
    10ba:	2a01      	cmp	r2, #1
    10bc:	d022      	beq.n	1104 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    10be:	4a90      	ldr	r2, [pc, #576]	; (1300 <tcc_init+0x338>)
    10c0:	5cd2      	ldrb	r2, [r2, r3]
    10c2:	0011      	movs	r1, r2
    10c4:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    10c6:	2235      	movs	r2, #53	; 0x35
    10c8:	5caa      	ldrb	r2, [r5, r2]
    10ca:	428a      	cmp	r2, r1
    10cc:	d300      	bcc.n	10d0 <tcc_init+0x108>
    10ce:	e16b      	b.n	13a8 <tcc_init+0x3e0>
		if (cfg->filter_value > 0xF) {
    10d0:	212c      	movs	r1, #44	; 0x2c
    10d2:	5c69      	ldrb	r1, [r5, r1]
    10d4:	290f      	cmp	r1, #15
    10d6:	d900      	bls.n	10da <tcc_init+0x112>
    10d8:	e166      	b.n	13a8 <tcc_init+0x3e0>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    10da:	7b28      	ldrb	r0, [r5, #12]
    10dc:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    10de:	7ae8      	ldrb	r0, [r5, #11]
    10e0:	900b      	str	r0, [sp, #44]	; 0x2c
    10e2:	202d      	movs	r0, #45	; 0x2d
    10e4:	4682      	mov	sl, r0
    10e6:	44aa      	add	sl, r5
    10e8:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    10ea:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    10ec:	ae0e      	add	r6, sp, #56	; 0x38
    10ee:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    10f0:	26c0      	movs	r6, #192	; 0xc0
    10f2:	0136      	lsls	r6, r6, #4
    10f4:	46b1      	mov	r9, r6
    10f6:	4684      	mov	ip, r0
    10f8:	46a0      	mov	r8, r4
    10fa:	0028      	movs	r0, r5
    10fc:	4655      	mov	r5, sl
    10fe:	9309      	str	r3, [sp, #36]	; 0x24
    1100:	4682      	mov	sl, r0
    1102:	e035      	b.n	1170 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    1104:	9906      	ldr	r1, [sp, #24]
    1106:	4311      	orrs	r1, r2
    1108:	9106      	str	r1, [sp, #24]
    110a:	e7d8      	b.n	10be <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    110c:	0292      	lsls	r2, r2, #10
    110e:	464f      	mov	r7, r9
    1110:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1112:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    1114:	7919      	ldrb	r1, [r3, #4]
    1116:	468b      	mov	fp, r1
    1118:	2103      	movs	r1, #3
    111a:	465f      	mov	r7, fp
    111c:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    111e:	430a      	orrs	r2, r1
    1120:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    1122:	795a      	ldrb	r2, [r3, #5]
    1124:	0152      	lsls	r2, r2, #5
    1126:	2160      	movs	r1, #96	; 0x60
    1128:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    112a:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    112c:	7999      	ldrb	r1, [r3, #6]
    112e:	0209      	lsls	r1, r1, #8
    1130:	26c0      	movs	r6, #192	; 0xc0
    1132:	00b6      	lsls	r6, r6, #2
    1134:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1136:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    1138:	79da      	ldrb	r2, [r3, #7]
    113a:	0312      	lsls	r2, r2, #12
    113c:	21e0      	movs	r1, #224	; 0xe0
    113e:	01c9      	lsls	r1, r1, #7
    1140:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1142:	4316      	orrs	r6, r2
    1144:	4334      	orrs	r4, r6
    1146:	9a03      	ldr	r2, [sp, #12]
    1148:	4314      	orrs	r4, r2
    114a:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    114c:	4662      	mov	r2, ip
    114e:	9907      	ldr	r1, [sp, #28]
    1150:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1152:	2a04      	cmp	r2, #4
    1154:	d02a      	beq.n	11ac <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    1156:	7c9a      	ldrb	r2, [r3, #18]
    1158:	9905      	ldr	r1, [sp, #20]
    115a:	4291      	cmp	r1, r2
    115c:	d800      	bhi.n	1160 <tcc_init+0x198>
    115e:	e123      	b.n	13a8 <tcc_init+0x3e0>
		if (cfg->filter_value > 0xF) {
    1160:	7a59      	ldrb	r1, [r3, #9]
    1162:	350a      	adds	r5, #10
    1164:	2304      	movs	r3, #4
    1166:	469b      	mov	fp, r3
    1168:	44dc      	add	ip, fp
    116a:	290f      	cmp	r1, #15
    116c:	d900      	bls.n	1170 <tcc_init+0x1a8>
    116e:	e11b      	b.n	13a8 <tcc_init+0x3e0>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1170:	0609      	lsls	r1, r1, #24
    1172:	23f0      	movs	r3, #240	; 0xf0
    1174:	051b      	lsls	r3, r3, #20
    1176:	4019      	ands	r1, r3
    1178:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    117a:	782e      	ldrb	r6, [r5, #0]
    117c:	0436      	lsls	r6, r6, #16
    117e:	20ff      	movs	r0, #255	; 0xff
    1180:	0400      	lsls	r0, r0, #16
    1182:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    1184:	7868      	ldrb	r0, [r5, #1]
    1186:	2480      	movs	r4, #128	; 0x80
    1188:	2800      	cmp	r0, #0
    118a:	d100      	bne.n	118e <tcc_init+0x1c6>
    118c:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    118e:	7898      	ldrb	r0, [r3, #2]
    1190:	2708      	movs	r7, #8
    1192:	9703      	str	r7, [sp, #12]
    1194:	2800      	cmp	r0, #0
    1196:	d101      	bne.n	119c <tcc_init+0x1d4>
    1198:	9804      	ldr	r0, [sp, #16]
    119a:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    119c:	78d8      	ldrb	r0, [r3, #3]
    119e:	4683      	mov	fp, r0
    11a0:	2010      	movs	r0, #16
    11a2:	465f      	mov	r7, fp
    11a4:	2f00      	cmp	r7, #0
    11a6:	d1b1      	bne.n	110c <tcc_init+0x144>
    11a8:	9804      	ldr	r0, [sp, #16]
    11aa:	e7af      	b.n	110c <tcc_init+0x144>
    11ac:	4644      	mov	r4, r8
    11ae:	4655      	mov	r5, sl
    11b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    11b2:	4a52      	ldr	r2, [pc, #328]	; (12fc <tcc_init+0x334>)
    11b4:	5cd2      	ldrb	r2, [r2, r3]
    11b6:	4691      	mov	r9, r2
    11b8:	4651      	mov	r1, sl
    11ba:	3150      	adds	r1, #80	; 0x50
    11bc:	4650      	mov	r0, sl
    11be:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    11c0:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    11c2:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    11c4:	2601      	movs	r6, #1
    11c6:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    11c8:	2602      	movs	r6, #2
    11ca:	36ff      	adds	r6, #255	; 0xff
    11cc:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    11ce:	2680      	movs	r6, #128	; 0x80
    11d0:	0276      	lsls	r6, r6, #9
    11d2:	46b0      	mov	r8, r6
    11d4:	46a4      	mov	ip, r4
    11d6:	001c      	movs	r4, r3
    11d8:	464b      	mov	r3, r9
    11da:	e00f      	b.n	11fc <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    11dc:	7806      	ldrb	r6, [r0, #0]
    11de:	2e00      	cmp	r6, #0
    11e0:	d007      	beq.n	11f2 <tcc_init+0x22a>
			if (i >= ow_num) {
    11e2:	4293      	cmp	r3, r2
    11e4:	d800      	bhi.n	11e8 <tcc_init+0x220>
    11e6:	e0d9      	b.n	139c <tcc_init+0x3d4>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    11e8:	2e02      	cmp	r6, #2
    11ea:	d014      	beq.n	1216 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    11ec:	4656      	mov	r6, sl
    11ee:	4096      	lsls	r6, r2
    11f0:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    11f2:	3201      	adds	r2, #1
    11f4:	3101      	adds	r1, #1
    11f6:	3002      	adds	r0, #2
    11f8:	2a08      	cmp	r2, #8
    11fa:	d010      	beq.n	121e <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    11fc:	780e      	ldrb	r6, [r1, #0]
    11fe:	2e00      	cmp	r6, #0
    1200:	d0ec      	beq.n	11dc <tcc_init+0x214>
			if (i >= ow_num) {
    1202:	4293      	cmp	r3, r2
    1204:	d800      	bhi.n	1208 <tcc_init+0x240>
    1206:	e0c7      	b.n	1398 <tcc_init+0x3d0>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1208:	4646      	mov	r6, r8
    120a:	4096      	lsls	r6, r2
    120c:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    120e:	7806      	ldrb	r6, [r0, #0]
    1210:	2e00      	cmp	r6, #0
    1212:	d1e9      	bne.n	11e8 <tcc_init+0x220>
    1214:	e7ed      	b.n	11f2 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1216:	465e      	mov	r6, fp
    1218:	4096      	lsls	r6, r2
    121a:	4337      	orrs	r7, r6
    121c:	e7e9      	b.n	11f2 <tcc_init+0x22a>
    121e:	4699      	mov	r9, r3
    1220:	0023      	movs	r3, r4
    1222:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1224:	7e6a      	ldrb	r2, [r5, #25]
    1226:	0112      	lsls	r2, r2, #4
    1228:	2130      	movs	r1, #48	; 0x30
    122a:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    122c:	7e28      	ldrb	r0, [r5, #24]
    122e:	2207      	movs	r2, #7
    1230:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1232:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1234:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    1236:	2080      	movs	r0, #128	; 0x80
    1238:	0240      	lsls	r0, r0, #9
    123a:	000e      	movs	r6, r1
    123c:	e002      	b.n	1244 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    123e:	3201      	adds	r2, #1
    1240:	2a04      	cmp	r2, #4
    1242:	d00b      	beq.n	125c <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    1244:	18a9      	adds	r1, r5, r2
    1246:	7d09      	ldrb	r1, [r1, #20]
    1248:	2900      	cmp	r1, #0
    124a:	d0f8      	beq.n	123e <tcc_init+0x276>
			if (n >= cc_num) {
    124c:	9905      	ldr	r1, [sp, #20]
    124e:	4291      	cmp	r1, r2
    1250:	dc00      	bgt.n	1254 <tcc_init+0x28c>
    1252:	e0a5      	b.n	13a0 <tcc_init+0x3d8>
			wave |= (TCC_WAVE_POL0 << n);
    1254:	0001      	movs	r1, r0
    1256:	4091      	lsls	r1, r2
    1258:	430e      	orrs	r6, r1
    125a:	e7f0      	b.n	123e <tcc_init+0x276>
    125c:	46b2      	mov	sl, r6
    125e:	9801      	ldr	r0, [sp, #4]
    1260:	0002      	movs	r2, r0
    1262:	3204      	adds	r2, #4
    1264:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    1266:	2100      	movs	r1, #0
    1268:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    126a:	4282      	cmp	r2, r0
    126c:	d1fc      	bne.n	1268 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    126e:	2200      	movs	r2, #0
    1270:	9801      	ldr	r0, [sp, #4]
    1272:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    1274:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    1276:	0099      	lsls	r1, r3, #2
    1278:	4a22      	ldr	r2, [pc, #136]	; (1304 <tcc_init+0x33c>)
    127a:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    127c:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    127e:	22a0      	movs	r2, #160	; 0xa0
    1280:	5ca9      	ldrb	r1, [r5, r2]
    1282:	3a64      	subs	r2, #100	; 0x64
    1284:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    1286:	a90d      	add	r1, sp, #52	; 0x34
    1288:	7aaa      	ldrb	r2, [r5, #10]
    128a:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    128c:	4a1e      	ldr	r2, [pc, #120]	; (1308 <tcc_init+0x340>)
    128e:	5cd6      	ldrb	r6, [r2, r3]
    1290:	0030      	movs	r0, r6
    1292:	4b1e      	ldr	r3, [pc, #120]	; (130c <tcc_init+0x344>)
    1294:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    1296:	0030      	movs	r0, r6
    1298:	4b1d      	ldr	r3, [pc, #116]	; (1310 <tcc_init+0x348>)
    129a:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    129c:	464b      	mov	r3, r9
    129e:	2b00      	cmp	r3, #0
    12a0:	dd3c      	ble.n	131c <tcc_init+0x354>
    12a2:	002e      	movs	r6, r5
    12a4:	3658      	adds	r6, #88	; 0x58
    12a6:	3398      	adds	r3, #152	; 0x98
    12a8:	4698      	mov	r8, r3
    12aa:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    12ac:	2301      	movs	r3, #1
    12ae:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    12b0:	46ab      	mov	fp, r5
    12b2:	4645      	mov	r5, r8
    12b4:	46a0      	mov	r8, r4
    12b6:	9c08      	ldr	r4, [sp, #32]
    12b8:	e003      	b.n	12c2 <tcc_init+0x2fa>
    12ba:	3401      	adds	r4, #1
    12bc:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    12be:	42ac      	cmp	r4, r5
    12c0:	d02a      	beq.n	1318 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    12c2:	7823      	ldrb	r3, [r4, #0]
    12c4:	2b00      	cmp	r3, #0
    12c6:	d0f8      	beq.n	12ba <tcc_init+0x2f2>
    12c8:	ab0c      	add	r3, sp, #48	; 0x30
    12ca:	464a      	mov	r2, r9
    12cc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    12ce:	2300      	movs	r3, #0
    12d0:	aa0c      	add	r2, sp, #48	; 0x30
    12d2:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    12d4:	0013      	movs	r3, r2
    12d6:	2220      	movs	r2, #32
    12d8:	18b2      	adds	r2, r6, r2
    12da:	7812      	ldrb	r2, [r2, #0]
    12dc:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    12de:	464a      	mov	r2, r9
    12e0:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    12e2:	7830      	ldrb	r0, [r6, #0]
    12e4:	0019      	movs	r1, r3
    12e6:	4b0b      	ldr	r3, [pc, #44]	; (1314 <tcc_init+0x34c>)
    12e8:	4798      	blx	r3
    12ea:	e7e6      	b.n	12ba <tcc_init+0x2f2>
    12ec:	00000e49 	.word	0x00000e49
    12f0:	40000800 	.word	0x40000800
    12f4:	0000599c 	.word	0x0000599c
    12f8:	000059b0 	.word	0x000059b0
    12fc:	000059bc 	.word	0x000059bc
    1300:	000059a8 	.word	0x000059a8
    1304:	200018c8 	.word	0x200018c8
    1308:	000059ac 	.word	0x000059ac
    130c:	00002a25 	.word	0x00002a25
    1310:	000029b5 	.word	0x000029b5
    1314:	00002b21 	.word	0x00002b21
    1318:	4644      	mov	r4, r8
    131a:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    131c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    131e:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1320:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1322:	0212      	lsls	r2, r2, #8
    1324:	4313      	orrs	r3, r2
    1326:	9a02      	ldr	r2, [sp, #8]
    1328:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    132a:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    132c:	2204      	movs	r2, #4
    132e:	68a3      	ldr	r3, [r4, #8]
    1330:	421a      	tst	r2, r3
    1332:	d1fc      	bne.n	132e <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    1334:	23ff      	movs	r3, #255	; 0xff
    1336:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1338:	2204      	movs	r2, #4
    133a:	68a3      	ldr	r3, [r4, #8]
    133c:	421a      	tst	r2, r3
    133e:	d1fc      	bne.n	133a <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    1340:	466b      	mov	r3, sp
    1342:	7e1b      	ldrb	r3, [r3, #24]
    1344:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    1346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1348:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    134a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    134c:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    134e:	61a7      	str	r7, [r4, #24]
	hw->WAVE.reg = waves[0];
    1350:	4653      	mov	r3, sl
    1352:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    1354:	2210      	movs	r2, #16
    1356:	68a3      	ldr	r3, [r4, #8]
    1358:	421a      	tst	r2, r3
    135a:	d1fc      	bne.n	1356 <tcc_init+0x38e>
	hw->COUNT.reg = config->counter.count;
    135c:	682b      	ldr	r3, [r5, #0]
    135e:	6363      	str	r3, [r4, #52]	; 0x34
	hw->PER.reg = (config->counter.period);
    1360:	686b      	ldr	r3, [r5, #4]
    1362:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1364:	9805      	ldr	r0, [sp, #20]
    1366:	2800      	cmp	r0, #0
    1368:	dd1c      	ble.n	13a4 <tcc_init+0x3dc>
    136a:	351c      	adds	r5, #28
    136c:	2200      	movs	r2, #0
		hw->CC[i].reg = (config->compare.match[i]);
    136e:	cd02      	ldmia	r5!, {r1}
    1370:	0013      	movs	r3, r2
    1372:	3310      	adds	r3, #16
    1374:	009b      	lsls	r3, r3, #2
    1376:	18e3      	adds	r3, r4, r3
    1378:	6059      	str	r1, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    137a:	3201      	adds	r2, #1
    137c:	4290      	cmp	r0, r2
    137e:	dcf6      	bgt.n	136e <tcc_init+0x3a6>
	return STATUS_OK;
    1380:	2000      	movs	r0, #0
    1382:	e63b      	b.n	ffc <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    1384:	2017      	movs	r0, #23
    1386:	e639      	b.n	ffc <tcc_init+0x34>
    1388:	2017      	movs	r0, #23
    138a:	e637      	b.n	ffc <tcc_init+0x34>
    138c:	2017      	movs	r0, #23
    138e:	e635      	b.n	ffc <tcc_init+0x34>
    1390:	2017      	movs	r0, #23
    1392:	e633      	b.n	ffc <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    1394:	2017      	movs	r0, #23
    1396:	e631      	b.n	ffc <tcc_init+0x34>
			if (i >= ow_num) {
    1398:	2017      	movs	r0, #23
    139a:	e62f      	b.n	ffc <tcc_init+0x34>
			if (i >= ow_num) {
    139c:	2017      	movs	r0, #23
    139e:	e62d      	b.n	ffc <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    13a0:	2017      	movs	r0, #23
    13a2:	e62b      	b.n	ffc <tcc_init+0x34>
	return STATUS_OK;
    13a4:	2000      	movs	r0, #0
    13a6:	e629      	b.n	ffc <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    13a8:	2017      	movs	r0, #23
    13aa:	e627      	b.n	ffc <tcc_init+0x34>

000013ac <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    13ac:	0092      	lsls	r2, r2, #2
    13ae:	1883      	adds	r3, r0, r2
    13b0:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    13b2:	4b03      	ldr	r3, [pc, #12]	; (13c0 <tcc_register_callback+0x14>)
    13b4:	58d3      	ldr	r3, [r2, r3]
    13b6:	6b42      	ldr	r2, [r0, #52]	; 0x34
    13b8:	4313      	orrs	r3, r2
    13ba:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    13bc:	2000      	movs	r0, #0
    13be:	4770      	bx	lr
    13c0:	000059c0 	.word	0x000059c0

000013c4 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    13c4:	b570      	push	{r4, r5, r6, lr}
    13c6:	0004      	movs	r4, r0
    13c8:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    13ca:	6800      	ldr	r0, [r0, #0]
    13cc:	4b09      	ldr	r3, [pc, #36]	; (13f4 <tcc_enable_callback+0x30>)
    13ce:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    13d0:	4b09      	ldr	r3, [pc, #36]	; (13f8 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    13d2:	5c1b      	ldrb	r3, [r3, r0]
    13d4:	221f      	movs	r2, #31
    13d6:	401a      	ands	r2, r3
    13d8:	2301      	movs	r3, #1
    13da:	4093      	lsls	r3, r2
    13dc:	4a07      	ldr	r2, [pc, #28]	; (13fc <tcc_enable_callback+0x38>)
    13de:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    13e0:	00ad      	lsls	r5, r5, #2
    13e2:	4b07      	ldr	r3, [pc, #28]	; (1400 <tcc_enable_callback+0x3c>)
    13e4:	58ea      	ldr	r2, [r5, r3]
    13e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    13e8:	4313      	orrs	r3, r2
    13ea:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    13ec:	6823      	ldr	r3, [r4, #0]
    13ee:	629a      	str	r2, [r3, #40]	; 0x28
}
    13f0:	bd70      	pop	{r4, r5, r6, pc}
    13f2:	46c0      	nop			; (mov r8, r8)
    13f4:	00000e49 	.word	0x00000e49
    13f8:	000059f0 	.word	0x000059f0
    13fc:	e000e100 	.word	0xe000e100
    1400:	000059c0 	.word	0x000059c0

00001404 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1404:	b5f0      	push	{r4, r5, r6, r7, lr}
    1406:	46c6      	mov	lr, r8
    1408:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    140a:	0080      	lsls	r0, r0, #2
    140c:	4b0e      	ldr	r3, [pc, #56]	; (1448 <_tcc_interrupt_handler+0x44>)
    140e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1410:	683b      	ldr	r3, [r7, #0]
    1412:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    1414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1418:	4013      	ands	r3, r2
    141a:	401e      	ands	r6, r3
    141c:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    141e:	4b0b      	ldr	r3, [pc, #44]	; (144c <_tcc_interrupt_handler+0x48>)
    1420:	4698      	mov	r8, r3
    1422:	e002      	b.n	142a <_tcc_interrupt_handler+0x26>
    1424:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1426:	2c30      	cmp	r4, #48	; 0x30
    1428:	d00a      	beq.n	1440 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    142a:	4643      	mov	r3, r8
    142c:	58e5      	ldr	r5, [r4, r3]
    142e:	4235      	tst	r5, r6
    1430:	d0f8      	beq.n	1424 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    1432:	193b      	adds	r3, r7, r4
    1434:	685b      	ldr	r3, [r3, #4]
    1436:	0038      	movs	r0, r7
    1438:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    143a:	683b      	ldr	r3, [r7, #0]
    143c:	62dd      	str	r5, [r3, #44]	; 0x2c
    143e:	e7f1      	b.n	1424 <_tcc_interrupt_handler+0x20>
		}
	}
}
    1440:	bc04      	pop	{r2}
    1442:	4690      	mov	r8, r2
    1444:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1446:	46c0      	nop			; (mov r8, r8)
    1448:	200018c8 	.word	0x200018c8
    144c:	000059c0 	.word	0x000059c0

00001450 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1450:	b510      	push	{r4, lr}
    1452:	2000      	movs	r0, #0
    1454:	4b01      	ldr	r3, [pc, #4]	; (145c <TCC0_Handler+0xc>)
    1456:	4798      	blx	r3
    1458:	bd10      	pop	{r4, pc}
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	00001405 	.word	0x00001405

00001460 <TCC1_Handler>:
    1460:	b510      	push	{r4, lr}
    1462:	2001      	movs	r0, #1
    1464:	4b01      	ldr	r3, [pc, #4]	; (146c <TCC1_Handler+0xc>)
    1466:	4798      	blx	r3
    1468:	bd10      	pop	{r4, pc}
    146a:	46c0      	nop			; (mov r8, r8)
    146c:	00001405 	.word	0x00001405

00001470 <TCC2_Handler>:
    1470:	b510      	push	{r4, lr}
    1472:	2002      	movs	r0, #2
    1474:	4b01      	ldr	r3, [pc, #4]	; (147c <TCC2_Handler+0xc>)
    1476:	4798      	blx	r3
    1478:	bd10      	pop	{r4, pc}
    147a:	46c0      	nop			; (mov r8, r8)
    147c:	00001405 	.word	0x00001405

00001480 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1480:	b5f0      	push	{r4, r5, r6, r7, lr}
    1482:	46de      	mov	lr, fp
    1484:	4657      	mov	r7, sl
    1486:	464e      	mov	r6, r9
    1488:	4645      	mov	r5, r8
    148a:	b5e0      	push	{r5, r6, r7, lr}
    148c:	b091      	sub	sp, #68	; 0x44
    148e:	0005      	movs	r5, r0
    1490:	000c      	movs	r4, r1
    1492:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1494:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1496:	0008      	movs	r0, r1
    1498:	4bd2      	ldr	r3, [pc, #840]	; (17e4 <usart_init+0x364>)
    149a:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
    149c:	2805      	cmp	r0, #5
    149e:	d00d      	beq.n	14bc <usart_init+0x3c>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    14a0:	0007      	movs	r7, r0
    14a2:	3713      	adds	r7, #19
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    14a4:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    14a6:	2305      	movs	r3, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    14a8:	07d2      	lsls	r2, r2, #31
    14aa:	d509      	bpl.n	14c0 <usart_init+0x40>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    14ac:	0018      	movs	r0, r3
    14ae:	b011      	add	sp, #68	; 0x44
    14b0:	bc3c      	pop	{r2, r3, r4, r5}
    14b2:	4690      	mov	r8, r2
    14b4:	4699      	mov	r9, r3
    14b6:	46a2      	mov	sl, r4
    14b8:	46ab      	mov	fp, r5
    14ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    14bc:	2719      	movs	r7, #25
    14be:	e7f1      	b.n	14a4 <usart_init+0x24>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    14c0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    14c2:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    14c4:	0792      	lsls	r2, r2, #30
    14c6:	d4f1      	bmi.n	14ac <usart_init+0x2c>
    14c8:	4ac7      	ldr	r2, [pc, #796]	; (17e8 <usart_init+0x368>)
    14ca:	69d1      	ldr	r1, [r2, #28]
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    14cc:	3001      	adds	r0, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    14ce:	3b1b      	subs	r3, #27
    14d0:	4083      	lsls	r3, r0
    14d2:	430b      	orrs	r3, r1
    14d4:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    14d6:	a90f      	add	r1, sp, #60	; 0x3c
    14d8:	2335      	movs	r3, #53	; 0x35
    14da:	4698      	mov	r8, r3
    14dc:	5cf3      	ldrb	r3, [r6, r3]
    14de:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    14e0:	b2ff      	uxtb	r7, r7
    14e2:	0038      	movs	r0, r7
    14e4:	4bc1      	ldr	r3, [pc, #772]	; (17ec <usart_init+0x36c>)
    14e6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    14e8:	0038      	movs	r0, r7
    14ea:	4bc1      	ldr	r3, [pc, #772]	; (17f0 <usart_init+0x370>)
    14ec:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    14ee:	4643      	mov	r3, r8
    14f0:	5cf0      	ldrb	r0, [r6, r3]
    14f2:	2100      	movs	r1, #0
    14f4:	4bbf      	ldr	r3, [pc, #764]	; (17f4 <usart_init+0x374>)
    14f6:	4798      	blx	r3
	module->character_size = config->character_size;
    14f8:	7af3      	ldrb	r3, [r6, #11]
    14fa:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    14fc:	232c      	movs	r3, #44	; 0x2c
    14fe:	5cf3      	ldrb	r3, [r6, r3]
    1500:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1502:	232d      	movs	r3, #45	; 0x2d
    1504:	5cf3      	ldrb	r3, [r6, r3]
    1506:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1508:	7ef3      	ldrb	r3, [r6, #27]
    150a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    150c:	2324      	movs	r3, #36	; 0x24
    150e:	5cf3      	ldrb	r3, [r6, r3]
    1510:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1512:	682b      	ldr	r3, [r5, #0]
    1514:	9302      	str	r3, [sp, #8]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1516:	0018      	movs	r0, r3
    1518:	4bb2      	ldr	r3, [pc, #712]	; (17e4 <usart_init+0x364>)
    151a:	4798      	blx	r3
	if (sercom_index == 5) {
    151c:	2805      	cmp	r0, #5
    151e:	d01d      	beq.n	155c <usart_init+0xdc>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1520:	3013      	adds	r0, #19
	uint16_t baud  = 0;
    1522:	2200      	movs	r2, #0
    1524:	230e      	movs	r3, #14
    1526:	a906      	add	r1, sp, #24
    1528:	468c      	mov	ip, r1
    152a:	4463      	add	r3, ip
    152c:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    152e:	8a33      	ldrh	r3, [r6, #16]
    1530:	4698      	mov	r8, r3
    1532:	2380      	movs	r3, #128	; 0x80
    1534:	01db      	lsls	r3, r3, #7
    1536:	4598      	cmp	r8, r3
    1538:	d100      	bne.n	153c <usart_init+0xbc>
    153a:	e0c3      	b.n	16c4 <usart_init+0x244>
    153c:	d910      	bls.n	1560 <usart_init+0xe0>
    153e:	23c0      	movs	r3, #192	; 0xc0
    1540:	01db      	lsls	r3, r3, #7
    1542:	4598      	cmp	r8, r3
    1544:	d100      	bne.n	1548 <usart_init+0xc8>
    1546:	e0b8      	b.n	16ba <usart_init+0x23a>
    1548:	2380      	movs	r3, #128	; 0x80
    154a:	021b      	lsls	r3, r3, #8
    154c:	4598      	cmp	r8, r3
    154e:	d000      	beq.n	1552 <usart_init+0xd2>
    1550:	e166      	b.n	1820 <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1552:	2303      	movs	r3, #3
    1554:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1556:	2300      	movs	r3, #0
    1558:	9307      	str	r3, [sp, #28]
    155a:	e00a      	b.n	1572 <usart_init+0xf2>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    155c:	2019      	movs	r0, #25
    155e:	e7e0      	b.n	1522 <usart_init+0xa2>
	switch (config->sample_rate) {
    1560:	2380      	movs	r3, #128	; 0x80
    1562:	019b      	lsls	r3, r3, #6
    1564:	4598      	cmp	r8, r3
    1566:	d000      	beq.n	156a <usart_init+0xea>
    1568:	e15a      	b.n	1820 <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    156a:	2310      	movs	r3, #16
    156c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    156e:	3b0f      	subs	r3, #15
    1570:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1572:	6833      	ldr	r3, [r6, #0]
    1574:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1576:	68f3      	ldr	r3, [r6, #12]
    1578:	469b      	mov	fp, r3
		config->sample_adjustment |
    157a:	6973      	ldr	r3, [r6, #20]
    157c:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    157e:	7e33      	ldrb	r3, [r6, #24]
    1580:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1582:	232e      	movs	r3, #46	; 0x2e
    1584:	5cf3      	ldrb	r3, [r6, r3]
    1586:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1588:	6873      	ldr	r3, [r6, #4]
    158a:	4699      	mov	r9, r3
	switch (transfer_mode)
    158c:	2b00      	cmp	r3, #0
    158e:	d100      	bne.n	1592 <usart_init+0x112>
    1590:	e0c5      	b.n	171e <usart_init+0x29e>
    1592:	2380      	movs	r3, #128	; 0x80
    1594:	055b      	lsls	r3, r3, #21
    1596:	4599      	cmp	r9, r3
    1598:	d100      	bne.n	159c <usart_init+0x11c>
    159a:	e0a8      	b.n	16ee <usart_init+0x26e>
	if(config->encoding_format_enable) {
    159c:	7e73      	ldrb	r3, [r6, #25]
    159e:	2b00      	cmp	r3, #0
    15a0:	d002      	beq.n	15a8 <usart_init+0x128>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    15a2:	7eb3      	ldrb	r3, [r6, #26]
    15a4:	9a02      	ldr	r2, [sp, #8]
    15a6:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    15a8:	230e      	movs	r3, #14
    15aa:	aa06      	add	r2, sp, #24
    15ac:	4694      	mov	ip, r2
    15ae:	4463      	add	r3, ip
    15b0:	881b      	ldrh	r3, [r3, #0]
    15b2:	9a02      	ldr	r2, [sp, #8]
    15b4:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    15b6:	9a05      	ldr	r2, [sp, #20]
    15b8:	465b      	mov	r3, fp
    15ba:	431a      	orrs	r2, r3
    15bc:	9b03      	ldr	r3, [sp, #12]
    15be:	431a      	orrs	r2, r3
    15c0:	464b      	mov	r3, r9
    15c2:	431a      	orrs	r2, r3
    15c4:	4643      	mov	r3, r8
    15c6:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    15c8:	9b04      	ldr	r3, [sp, #16]
    15ca:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    15cc:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    15ce:	4653      	mov	r3, sl
    15d0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    15d2:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
    15d4:	232f      	movs	r3, #47	; 0x2f
    15d6:	5cf3      	ldrb	r3, [r6, r3]
    15d8:	2b00      	cmp	r3, #0
    15da:	d101      	bne.n	15e0 <usart_init+0x160>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    15dc:	3304      	adds	r3, #4
    15de:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    15e0:	7e73      	ldrb	r3, [r6, #25]
    15e2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    15e4:	2124      	movs	r1, #36	; 0x24
    15e6:	5c71      	ldrb	r1, [r6, r1]
    15e8:	0249      	lsls	r1, r1, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    15ea:	430b      	orrs	r3, r1
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    15ec:	2126      	movs	r1, #38	; 0x26
    15ee:	5c71      	ldrb	r1, [r6, r1]
    15f0:	0209      	lsls	r1, r1, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    15f2:	430b      	orrs	r3, r1
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    15f4:	212c      	movs	r1, #44	; 0x2c
    15f6:	5c71      	ldrb	r1, [r6, r1]
    15f8:	0449      	lsls	r1, r1, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    15fa:	430b      	orrs	r3, r1
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    15fc:	212d      	movs	r1, #45	; 0x2d
    15fe:	5c71      	ldrb	r1, [r6, r1]
    1600:	0409      	lsls	r1, r1, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1602:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
    1604:	7ab0      	ldrb	r0, [r6, #10]
    1606:	7af1      	ldrb	r1, [r6, #11]
    1608:	4308      	orrs	r0, r1
    160a:	4318      	orrs	r0, r3
	if (config->parity != USART_PARITY_NONE) {
    160c:	8933      	ldrh	r3, [r6, #8]
    160e:	2bff      	cmp	r3, #255	; 0xff
    1610:	d100      	bne.n	1614 <usart_init+0x194>
    1612:	e0aa      	b.n	176a <usart_init+0x2ea>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1614:	2180      	movs	r1, #128	; 0x80
    1616:	0449      	lsls	r1, r1, #17
    1618:	430a      	orrs	r2, r1
		ctrlb |= config->parity;
    161a:	4318      	orrs	r0, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    161c:	9902      	ldr	r1, [sp, #8]
    161e:	688b      	ldr	r3, [r1, #8]
    1620:	469c      	mov	ip, r3
						| config->lin_break_length;
    1622:	8c33      	ldrh	r3, [r6, #32]
    1624:	8c71      	ldrh	r1, [r6, #34]	; 0x22
    1626:	430b      	orrs	r3, r1
    1628:	001f      	movs	r7, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    162a:	2107      	movs	r1, #7
    162c:	4663      	mov	r3, ip
    162e:	4019      	ands	r1, r3
						| config->lin_break_length;
    1630:	003b      	movs	r3, r7
    1632:	430b      	orrs	r3, r1
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1634:	9902      	ldr	r1, [sp, #8]
    1636:	608b      	str	r3, [r1, #8]
	if (config->lin_node != LIN_INVALID_MODE) {
    1638:	69f3      	ldr	r3, [r6, #28]
    163a:	2b00      	cmp	r3, #0
    163c:	d002      	beq.n	1644 <usart_init+0x1c4>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
    163e:	496e      	ldr	r1, [pc, #440]	; (17f8 <usart_init+0x378>)
    1640:	400a      	ands	r2, r1
		ctrla |= config->lin_node;
    1642:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1644:	2334      	movs	r3, #52	; 0x34
    1646:	5cf3      	ldrb	r3, [r6, r3]
    1648:	2b00      	cmp	r3, #0
    164a:	d103      	bne.n	1654 <usart_init+0x1d4>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    164c:	4b6b      	ldr	r3, [pc, #428]	; (17fc <usart_init+0x37c>)
    164e:	789b      	ldrb	r3, [r3, #2]
    1650:	079b      	lsls	r3, r3, #30
    1652:	d501      	bpl.n	1658 <usart_init+0x1d8>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1654:	2380      	movs	r3, #128	; 0x80
    1656:	431a      	orrs	r2, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1658:	6829      	ldr	r1, [r5, #0]
    165a:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    165c:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    165e:	2b00      	cmp	r3, #0
    1660:	d1fc      	bne.n	165c <usart_init+0x1dc>
	usart_hw->CTRLB.reg = ctrlb;
    1662:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1664:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1666:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    1668:	2b00      	cmp	r3, #0
    166a:	d1fc      	bne.n	1666 <usart_init+0x1e6>
	usart_hw->CTRLA.reg = ctrla;
    166c:	603a      	str	r2, [r7, #0]
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
    166e:	683b      	ldr	r3, [r7, #0]
    1670:	22f0      	movs	r2, #240	; 0xf0
    1672:	0512      	lsls	r2, r2, #20
    1674:	4013      	ands	r3, r2
    1676:	22e0      	movs	r2, #224	; 0xe0
    1678:	04d2      	lsls	r2, r2, #19
    167a:	4293      	cmp	r3, r2
    167c:	d00a      	beq.n	1694 <usart_init+0x214>
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
    167e:	68bb      	ldr	r3, [r7, #8]
    1680:	2207      	movs	r2, #7
    1682:	4393      	bics	r3, r2
    1684:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
    1686:	68ba      	ldr	r2, [r7, #8]
    1688:	2325      	movs	r3, #37	; 0x25
    168a:	5cf1      	ldrb	r1, [r6, r3]
    168c:	3b1e      	subs	r3, #30
    168e:	400b      	ands	r3, r1
    1690:	4313      	orrs	r3, r2
    1692:	60bb      	str	r3, [r7, #8]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1694:	ab0e      	add	r3, sp, #56	; 0x38
    1696:	2280      	movs	r2, #128	; 0x80
    1698:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    169a:	2200      	movs	r2, #0
    169c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    169e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    16a0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    16a2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    16a4:	930a      	str	r3, [sp, #40]	; 0x28
    16a6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    16a8:	930b      	str	r3, [sp, #44]	; 0x2c
    16aa:	6c33      	ldr	r3, [r6, #64]	; 0x40
    16ac:	930c      	str	r3, [sp, #48]	; 0x30
    16ae:	6c73      	ldr	r3, [r6, #68]	; 0x44
    16b0:	9302      	str	r3, [sp, #8]
    16b2:	930d      	str	r3, [sp, #52]	; 0x34
    16b4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    16b6:	ae0a      	add	r6, sp, #40	; 0x28
    16b8:	e066      	b.n	1788 <usart_init+0x308>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    16ba:	2308      	movs	r3, #8
    16bc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    16be:	3b07      	subs	r3, #7
    16c0:	9307      	str	r3, [sp, #28]
    16c2:	e756      	b.n	1572 <usart_init+0xf2>
	ctrla = (uint32_t)config->data_order |
    16c4:	6833      	ldr	r3, [r6, #0]
    16c6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    16c8:	68f3      	ldr	r3, [r6, #12]
    16ca:	469b      	mov	fp, r3
		config->sample_adjustment |
    16cc:	6973      	ldr	r3, [r6, #20]
    16ce:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    16d0:	7e33      	ldrb	r3, [r6, #24]
    16d2:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    16d4:	232e      	movs	r3, #46	; 0x2e
    16d6:	5cf3      	ldrb	r3, [r6, r3]
    16d8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    16da:	6873      	ldr	r3, [r6, #4]
    16dc:	4699      	mov	r9, r3
	switch (transfer_mode)
    16de:	2b00      	cmp	r3, #0
    16e0:	d019      	beq.n	1716 <usart_init+0x296>
    16e2:	2380      	movs	r3, #128	; 0x80
    16e4:	055b      	lsls	r3, r3, #21
    16e6:	4599      	cmp	r9, r3
    16e8:	d001      	beq.n	16ee <usart_init+0x26e>
	enum status_code status_code = STATUS_OK;
    16ea:	2300      	movs	r3, #0
    16ec:	e027      	b.n	173e <usart_init+0x2be>
			if (!config->use_external_clock) {
    16ee:	232f      	movs	r3, #47	; 0x2f
    16f0:	5cf3      	ldrb	r3, [r6, r3]
    16f2:	2b00      	cmp	r3, #0
    16f4:	d000      	beq.n	16f8 <usart_init+0x278>
    16f6:	e751      	b.n	159c <usart_init+0x11c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    16f8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    16fa:	001f      	movs	r7, r3
    16fc:	b2c0      	uxtb	r0, r0
    16fe:	4b40      	ldr	r3, [pc, #256]	; (1800 <usart_init+0x380>)
    1700:	4798      	blx	r3
    1702:	0001      	movs	r1, r0
    1704:	220e      	movs	r2, #14
    1706:	ab06      	add	r3, sp, #24
    1708:	469c      	mov	ip, r3
    170a:	4462      	add	r2, ip
    170c:	0038      	movs	r0, r7
    170e:	4b3d      	ldr	r3, [pc, #244]	; (1804 <usart_init+0x384>)
    1710:	4798      	blx	r3
    1712:	0003      	movs	r3, r0
    1714:	e013      	b.n	173e <usart_init+0x2be>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1716:	2308      	movs	r3, #8
    1718:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    171a:	2300      	movs	r3, #0
    171c:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    171e:	232f      	movs	r3, #47	; 0x2f
    1720:	5cf3      	ldrb	r3, [r6, r3]
    1722:	2b00      	cmp	r3, #0
    1724:	d00f      	beq.n	1746 <usart_init+0x2c6>
				status_code =
    1726:	9b06      	ldr	r3, [sp, #24]
    1728:	9300      	str	r3, [sp, #0]
    172a:	9b07      	ldr	r3, [sp, #28]
    172c:	220e      	movs	r2, #14
    172e:	a906      	add	r1, sp, #24
    1730:	468c      	mov	ip, r1
    1732:	4462      	add	r2, ip
    1734:	6b31      	ldr	r1, [r6, #48]	; 0x30
    1736:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    1738:	4f33      	ldr	r7, [pc, #204]	; (1808 <usart_init+0x388>)
    173a:	47b8      	blx	r7
    173c:	0003      	movs	r3, r0
	if (status_code != STATUS_OK) {
    173e:	2b00      	cmp	r3, #0
    1740:	d000      	beq.n	1744 <usart_init+0x2c4>
    1742:	e6b3      	b.n	14ac <usart_init+0x2c>
    1744:	e72a      	b.n	159c <usart_init+0x11c>
						_sercom_get_async_baud_val(config->baudrate,
    1746:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1748:	001f      	movs	r7, r3
    174a:	b2c0      	uxtb	r0, r0
    174c:	4b2c      	ldr	r3, [pc, #176]	; (1800 <usart_init+0x380>)
    174e:	4798      	blx	r3
    1750:	0001      	movs	r1, r0
				status_code =
    1752:	9b06      	ldr	r3, [sp, #24]
    1754:	9300      	str	r3, [sp, #0]
    1756:	9b07      	ldr	r3, [sp, #28]
    1758:	220e      	movs	r2, #14
    175a:	a806      	add	r0, sp, #24
    175c:	4684      	mov	ip, r0
    175e:	4462      	add	r2, ip
    1760:	0038      	movs	r0, r7
    1762:	4f29      	ldr	r7, [pc, #164]	; (1808 <usart_init+0x388>)
    1764:	47b8      	blx	r7
    1766:	0003      	movs	r3, r0
    1768:	e7e9      	b.n	173e <usart_init+0x2be>
		if(config->lin_slave_enable) {
    176a:	7ef3      	ldrb	r3, [r6, #27]
    176c:	2b00      	cmp	r3, #0
    176e:	d100      	bne.n	1772 <usart_init+0x2f2>
    1770:	e754      	b.n	161c <usart_init+0x19c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1772:	2380      	movs	r3, #128	; 0x80
    1774:	04db      	lsls	r3, r3, #19
    1776:	431a      	orrs	r2, r3
    1778:	e750      	b.n	161c <usart_init+0x19c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    177a:	0020      	movs	r0, r4
    177c:	4b23      	ldr	r3, [pc, #140]	; (180c <usart_init+0x38c>)
    177e:	4798      	blx	r3
    1780:	e007      	b.n	1792 <usart_init+0x312>
    1782:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1784:	2f04      	cmp	r7, #4
    1786:	d00d      	beq.n	17a4 <usart_init+0x324>
    1788:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    178a:	00bb      	lsls	r3, r7, #2
    178c:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    178e:	2800      	cmp	r0, #0
    1790:	d0f3      	beq.n	177a <usart_init+0x2fa>
		if (current_pinmux != PINMUX_UNUSED) {
    1792:	1c43      	adds	r3, r0, #1
    1794:	d0f5      	beq.n	1782 <usart_init+0x302>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1796:	a90e      	add	r1, sp, #56	; 0x38
    1798:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    179a:	0c00      	lsrs	r0, r0, #16
    179c:	b2c0      	uxtb	r0, r0
    179e:	4b1c      	ldr	r3, [pc, #112]	; (1810 <usart_init+0x390>)
    17a0:	4798      	blx	r3
    17a2:	e7ee      	b.n	1782 <usart_init+0x302>
		module->callback[i]            = NULL;
    17a4:	2300      	movs	r3, #0
    17a6:	60eb      	str	r3, [r5, #12]
    17a8:	612b      	str	r3, [r5, #16]
    17aa:	616b      	str	r3, [r5, #20]
    17ac:	61ab      	str	r3, [r5, #24]
    17ae:	61eb      	str	r3, [r5, #28]
    17b0:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    17b2:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    17b4:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    17b6:	2200      	movs	r2, #0
    17b8:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    17ba:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    17bc:	3330      	adds	r3, #48	; 0x30
    17be:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    17c0:	3301      	adds	r3, #1
    17c2:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    17c4:	3301      	adds	r3, #1
    17c6:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    17c8:	3301      	adds	r3, #1
    17ca:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    17cc:	6828      	ldr	r0, [r5, #0]
    17ce:	4b05      	ldr	r3, [pc, #20]	; (17e4 <usart_init+0x364>)
    17d0:	4798      	blx	r3
    17d2:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    17d4:	490f      	ldr	r1, [pc, #60]	; (1814 <usart_init+0x394>)
    17d6:	4b10      	ldr	r3, [pc, #64]	; (1818 <usart_init+0x398>)
    17d8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    17da:	00a4      	lsls	r4, r4, #2
    17dc:	4b0f      	ldr	r3, [pc, #60]	; (181c <usart_init+0x39c>)
    17de:	50e5      	str	r5, [r4, r3]
	return status_code;
    17e0:	2300      	movs	r3, #0
    17e2:	e663      	b.n	14ac <usart_init+0x2c>
    17e4:	00000e11 	.word	0x00000e11
    17e8:	40000800 	.word	0x40000800
    17ec:	00002a25 	.word	0x00002a25
    17f0:	000029b5 	.word	0x000029b5
    17f4:	00000c49 	.word	0x00000c49
    17f8:	f0ffffff 	.word	0xf0ffffff
    17fc:	41002000 	.word	0x41002000
    1800:	00002a49 	.word	0x00002a49
    1804:	00000b8b 	.word	0x00000b8b
    1808:	00000bb5 	.word	0x00000bb5
    180c:	00000c95 	.word	0x00000c95
    1810:	00002b21 	.word	0x00002b21
    1814:	0000191d 	.word	0x0000191d
    1818:	00001abd 	.word	0x00001abd
    181c:	200018d4 	.word	0x200018d4
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1820:	2310      	movs	r3, #16
    1822:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1824:	2300      	movs	r3, #0
    1826:	9307      	str	r3, [sp, #28]
    1828:	e6a3      	b.n	1572 <usart_init+0xf2>
    182a:	46c0      	nop			; (mov r8, r8)

0000182c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    182e:	0006      	movs	r6, r0
    1830:	000c      	movs	r4, r1
    1832:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1834:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1836:	4b0a      	ldr	r3, [pc, #40]	; (1860 <_usart_write_buffer+0x34>)
    1838:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    183a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    183c:	b29b      	uxth	r3, r3
    183e:	2b00      	cmp	r3, #0
    1840:	d003      	beq.n	184a <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    1842:	4b08      	ldr	r3, [pc, #32]	; (1864 <_usart_write_buffer+0x38>)
    1844:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1846:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    1848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    184a:	85f5      	strh	r5, [r6, #46]	; 0x2e
    184c:	4b05      	ldr	r3, [pc, #20]	; (1864 <_usart_write_buffer+0x38>)
    184e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    1850:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    1852:	2205      	movs	r2, #5
    1854:	2333      	movs	r3, #51	; 0x33
    1856:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1858:	3b32      	subs	r3, #50	; 0x32
    185a:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    185c:	2000      	movs	r0, #0
    185e:	e7f3      	b.n	1848 <_usart_write_buffer+0x1c>
    1860:	00002645 	.word	0x00002645
    1864:	00002685 	.word	0x00002685

00001868 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    186a:	0004      	movs	r4, r0
    186c:	000d      	movs	r5, r1
    186e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1870:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1872:	4b0f      	ldr	r3, [pc, #60]	; (18b0 <_usart_read_buffer+0x48>)
    1874:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1876:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1878:	b29b      	uxth	r3, r3
    187a:	2b00      	cmp	r3, #0
    187c:	d003      	beq.n	1886 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    187e:	4b0d      	ldr	r3, [pc, #52]	; (18b4 <_usart_read_buffer+0x4c>)
    1880:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1882:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    1886:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1888:	4b0a      	ldr	r3, [pc, #40]	; (18b4 <_usart_read_buffer+0x4c>)
    188a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    188c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    188e:	2205      	movs	r2, #5
    1890:	2332      	movs	r3, #50	; 0x32
    1892:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1894:	3b2e      	subs	r3, #46	; 0x2e
    1896:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    1898:	7a23      	ldrb	r3, [r4, #8]
    189a:	2b00      	cmp	r3, #0
    189c:	d001      	beq.n	18a2 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    189e:	2320      	movs	r3, #32
    18a0:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    18a2:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    18a4:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    18a6:	2b00      	cmp	r3, #0
    18a8:	d0ec      	beq.n	1884 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    18aa:	2308      	movs	r3, #8
    18ac:	75bb      	strb	r3, [r7, #22]
    18ae:	e7e9      	b.n	1884 <_usart_read_buffer+0x1c>
    18b0:	00002645 	.word	0x00002645
    18b4:	00002685 	.word	0x00002685

000018b8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    18b8:	1c93      	adds	r3, r2, #2
    18ba:	009b      	lsls	r3, r3, #2
    18bc:	18c3      	adds	r3, r0, r3
    18be:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    18c0:	2130      	movs	r1, #48	; 0x30
    18c2:	2301      	movs	r3, #1
    18c4:	4093      	lsls	r3, r2
    18c6:	001a      	movs	r2, r3
    18c8:	5c43      	ldrb	r3, [r0, r1]
    18ca:	4313      	orrs	r3, r2
    18cc:	5443      	strb	r3, [r0, r1]
}
    18ce:	4770      	bx	lr

000018d0 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    18d0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    18d2:	2201      	movs	r2, #1
    18d4:	4b01      	ldr	r3, [pc, #4]	; (18dc <usart_read_job+0xc>)
    18d6:	4798      	blx	r3
}
    18d8:	bd10      	pop	{r4, pc}
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	00001869 	.word	0x00001869

000018e0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    18e0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    18e2:	2317      	movs	r3, #23
	if (length == 0) {
    18e4:	2a00      	cmp	r2, #0
    18e6:	d101      	bne.n	18ec <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    18e8:	0018      	movs	r0, r3
    18ea:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    18ec:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    18ee:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    18f0:	2c00      	cmp	r4, #0
    18f2:	d0f9      	beq.n	18e8 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    18f4:	4b01      	ldr	r3, [pc, #4]	; (18fc <usart_write_buffer_job+0x1c>)
    18f6:	4798      	blx	r3
    18f8:	0003      	movs	r3, r0
    18fa:	e7f5      	b.n	18e8 <usart_write_buffer_job+0x8>
    18fc:	0000182d 	.word	0x0000182d

00001900 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    1900:	2900      	cmp	r1, #0
    1902:	d003      	beq.n	190c <usart_get_job_status+0xc>
    1904:	2901      	cmp	r1, #1
    1906:	d005      	beq.n	1914 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    1908:	2017      	movs	r0, #23
    190a:	e002      	b.n	1912 <usart_get_job_status+0x12>
			status_code = module->rx_status;
    190c:	2332      	movs	r3, #50	; 0x32
    190e:	5cc0      	ldrb	r0, [r0, r3]
    1910:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    1912:	4770      	bx	lr
			status_code = module->tx_status;
    1914:	2333      	movs	r3, #51	; 0x33
    1916:	5cc0      	ldrb	r0, [r0, r3]
    1918:	b2c0      	uxtb	r0, r0
			break;
    191a:	e7fa      	b.n	1912 <usart_get_job_status+0x12>

0000191c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    191e:	0080      	lsls	r0, r0, #2
    1920:	4b64      	ldr	r3, [pc, #400]	; (1ab4 <_usart_interrupt_handler+0x198>)
    1922:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1924:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1926:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1928:	2b00      	cmp	r3, #0
    192a:	d1fc      	bne.n	1926 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    192c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    192e:	7da6      	ldrb	r6, [r4, #22]
    1930:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1932:	2330      	movs	r3, #48	; 0x30
    1934:	5ceb      	ldrb	r3, [r5, r3]
    1936:	2231      	movs	r2, #49	; 0x31
    1938:	5caf      	ldrb	r7, [r5, r2]
    193a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    193c:	07f3      	lsls	r3, r6, #31
    193e:	d522      	bpl.n	1986 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1940:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1942:	b29b      	uxth	r3, r3
    1944:	2b00      	cmp	r3, #0
    1946:	d01c      	beq.n	1982 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1948:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    194a:	7813      	ldrb	r3, [r2, #0]
    194c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    194e:	1c51      	adds	r1, r2, #1
    1950:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1952:	7969      	ldrb	r1, [r5, #5]
    1954:	2901      	cmp	r1, #1
    1956:	d00e      	beq.n	1976 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1958:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    195a:	05db      	lsls	r3, r3, #23
    195c:	0ddb      	lsrs	r3, r3, #23
    195e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1960:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1962:	3b01      	subs	r3, #1
    1964:	b29b      	uxth	r3, r3
    1966:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1968:	2b00      	cmp	r3, #0
    196a:	d10c      	bne.n	1986 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    196c:	3301      	adds	r3, #1
    196e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1970:	3301      	adds	r3, #1
    1972:	75a3      	strb	r3, [r4, #22]
    1974:	e007      	b.n	1986 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1976:	7851      	ldrb	r1, [r2, #1]
    1978:	0209      	lsls	r1, r1, #8
    197a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    197c:	3202      	adds	r2, #2
    197e:	62aa      	str	r2, [r5, #40]	; 0x28
    1980:	e7eb      	b.n	195a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1982:	2301      	movs	r3, #1
    1984:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1986:	07b3      	lsls	r3, r6, #30
    1988:	d506      	bpl.n	1998 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    198a:	2302      	movs	r3, #2
    198c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    198e:	2200      	movs	r2, #0
    1990:	3331      	adds	r3, #49	; 0x31
    1992:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1994:	07fb      	lsls	r3, r7, #31
    1996:	d41e      	bmi.n	19d6 <_usart_interrupt_handler+0xba>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1998:	0773      	lsls	r3, r6, #29
    199a:	d568      	bpl.n	1a6e <_usart_interrupt_handler+0x152>

		if (module->remaining_rx_buffer_length) {
    199c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    199e:	b29b      	uxth	r3, r3
    19a0:	2b00      	cmp	r3, #0
    19a2:	d062      	beq.n	1a6a <_usart_interrupt_handler+0x14e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    19a4:	8b63      	ldrh	r3, [r4, #26]
    19a6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    19a8:	071a      	lsls	r2, r3, #28
    19aa:	d418      	bmi.n	19de <_usart_interrupt_handler+0xc2>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    19ac:	227f      	movs	r2, #127	; 0x7f
    19ae:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    19b0:	065a      	lsls	r2, r3, #25
    19b2:	d501      	bpl.n	19b8 <_usart_interrupt_handler+0x9c>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    19b4:	2240      	movs	r2, #64	; 0x40
    19b6:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    19b8:	2b00      	cmp	r3, #0
    19ba:	d033      	beq.n	1a24 <_usart_interrupt_handler+0x108>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    19bc:	079a      	lsls	r2, r3, #30
    19be:	d511      	bpl.n	19e4 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    19c0:	221a      	movs	r2, #26
    19c2:	2332      	movs	r3, #50	; 0x32
    19c4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    19c6:	3b30      	subs	r3, #48	; 0x30
    19c8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    19ca:	077b      	lsls	r3, r7, #29
    19cc:	d54f      	bpl.n	1a6e <_usart_interrupt_handler+0x152>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    19ce:	0028      	movs	r0, r5
    19d0:	696b      	ldr	r3, [r5, #20]
    19d2:	4798      	blx	r3
    19d4:	e04b      	b.n	1a6e <_usart_interrupt_handler+0x152>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    19d6:	0028      	movs	r0, r5
    19d8:	68eb      	ldr	r3, [r5, #12]
    19da:	4798      	blx	r3
    19dc:	e7dc      	b.n	1998 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    19de:	2277      	movs	r2, #119	; 0x77
    19e0:	4013      	ands	r3, r2
    19e2:	e7e5      	b.n	19b0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    19e4:	075a      	lsls	r2, r3, #29
    19e6:	d505      	bpl.n	19f4 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    19e8:	221e      	movs	r2, #30
    19ea:	2332      	movs	r3, #50	; 0x32
    19ec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    19ee:	3b2e      	subs	r3, #46	; 0x2e
    19f0:	8363      	strh	r3, [r4, #26]
    19f2:	e7ea      	b.n	19ca <_usart_interrupt_handler+0xae>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    19f4:	07da      	lsls	r2, r3, #31
    19f6:	d505      	bpl.n	1a04 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    19f8:	2213      	movs	r2, #19
    19fa:	2332      	movs	r3, #50	; 0x32
    19fc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    19fe:	3b31      	subs	r3, #49	; 0x31
    1a00:	8363      	strh	r3, [r4, #26]
    1a02:	e7e2      	b.n	19ca <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1a04:	06da      	lsls	r2, r3, #27
    1a06:	d505      	bpl.n	1a14 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1a08:	2242      	movs	r2, #66	; 0x42
    1a0a:	2332      	movs	r3, #50	; 0x32
    1a0c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1a0e:	3b22      	subs	r3, #34	; 0x22
    1a10:	8363      	strh	r3, [r4, #26]
    1a12:	e7da      	b.n	19ca <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1a14:	069b      	lsls	r3, r3, #26
    1a16:	d5d8      	bpl.n	19ca <_usart_interrupt_handler+0xae>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1a18:	2241      	movs	r2, #65	; 0x41
    1a1a:	2332      	movs	r3, #50	; 0x32
    1a1c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1a1e:	3b12      	subs	r3, #18
    1a20:	8363      	strh	r3, [r4, #26]
    1a22:	e7d2      	b.n	19ca <_usart_interrupt_handler+0xae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1a24:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1a26:	05db      	lsls	r3, r3, #23
    1a28:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1a2a:	b2da      	uxtb	r2, r3
    1a2c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1a2e:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1a30:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1a32:	1c51      	adds	r1, r2, #1
    1a34:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1a36:	7969      	ldrb	r1, [r5, #5]
    1a38:	2901      	cmp	r1, #1
    1a3a:	d010      	beq.n	1a5e <_usart_interrupt_handler+0x142>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1a3c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1a3e:	3b01      	subs	r3, #1
    1a40:	b29b      	uxth	r3, r3
    1a42:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1a44:	2b00      	cmp	r3, #0
    1a46:	d112      	bne.n	1a6e <_usart_interrupt_handler+0x152>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a48:	3304      	adds	r3, #4
    1a4a:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1a4c:	2200      	movs	r2, #0
    1a4e:	332e      	adds	r3, #46	; 0x2e
    1a50:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1a52:	07bb      	lsls	r3, r7, #30
    1a54:	d50b      	bpl.n	1a6e <_usart_interrupt_handler+0x152>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1a56:	0028      	movs	r0, r5
    1a58:	692b      	ldr	r3, [r5, #16]
    1a5a:	4798      	blx	r3
    1a5c:	e007      	b.n	1a6e <_usart_interrupt_handler+0x152>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1a5e:	0a1b      	lsrs	r3, r3, #8
    1a60:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1a62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a64:	3301      	adds	r3, #1
    1a66:	626b      	str	r3, [r5, #36]	; 0x24
    1a68:	e7e8      	b.n	1a3c <_usart_interrupt_handler+0x120>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a6a:	2304      	movs	r3, #4
    1a6c:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1a6e:	06f3      	lsls	r3, r6, #27
    1a70:	d504      	bpl.n	1a7c <_usart_interrupt_handler+0x160>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1a72:	2310      	movs	r3, #16
    1a74:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1a76:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1a78:	06fb      	lsls	r3, r7, #27
    1a7a:	d40e      	bmi.n	1a9a <_usart_interrupt_handler+0x17e>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1a7c:	06b3      	lsls	r3, r6, #26
    1a7e:	d504      	bpl.n	1a8a <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1a80:	2320      	movs	r3, #32
    1a82:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1a84:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1a86:	073b      	lsls	r3, r7, #28
    1a88:	d40b      	bmi.n	1aa2 <_usart_interrupt_handler+0x186>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1a8a:	0733      	lsls	r3, r6, #28
    1a8c:	d504      	bpl.n	1a98 <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1a8e:	2308      	movs	r3, #8
    1a90:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1a92:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1a94:	06bb      	lsls	r3, r7, #26
    1a96:	d408      	bmi.n	1aaa <_usart_interrupt_handler+0x18e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1a9a:	0028      	movs	r0, r5
    1a9c:	69eb      	ldr	r3, [r5, #28]
    1a9e:	4798      	blx	r3
    1aa0:	e7ec      	b.n	1a7c <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1aa2:	0028      	movs	r0, r5
    1aa4:	69ab      	ldr	r3, [r5, #24]
    1aa6:	4798      	blx	r3
    1aa8:	e7ef      	b.n	1a8a <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1aaa:	6a2b      	ldr	r3, [r5, #32]
    1aac:	0028      	movs	r0, r5
    1aae:	4798      	blx	r3
}
    1ab0:	e7f2      	b.n	1a98 <_usart_interrupt_handler+0x17c>
    1ab2:	46c0      	nop			; (mov r8, r8)
    1ab4:	200018d4 	.word	0x200018d4

00001ab8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1ab8:	4770      	bx	lr
	...

00001abc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1abc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1abe:	4b0a      	ldr	r3, [pc, #40]	; (1ae8 <_sercom_set_handler+0x2c>)
    1ac0:	781b      	ldrb	r3, [r3, #0]
    1ac2:	2b00      	cmp	r3, #0
    1ac4:	d10c      	bne.n	1ae0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1ac6:	4f09      	ldr	r7, [pc, #36]	; (1aec <_sercom_set_handler+0x30>)
    1ac8:	4e09      	ldr	r6, [pc, #36]	; (1af0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1aca:	4d0a      	ldr	r5, [pc, #40]	; (1af4 <_sercom_set_handler+0x38>)
    1acc:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1ace:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1ad0:	195a      	adds	r2, r3, r5
    1ad2:	6014      	str	r4, [r2, #0]
    1ad4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1ad6:	2b18      	cmp	r3, #24
    1ad8:	d1f9      	bne.n	1ace <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1ada:	2201      	movs	r2, #1
    1adc:	4b02      	ldr	r3, [pc, #8]	; (1ae8 <_sercom_set_handler+0x2c>)
    1ade:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1ae0:	0080      	lsls	r0, r0, #2
    1ae2:	4b02      	ldr	r3, [pc, #8]	; (1aec <_sercom_set_handler+0x30>)
    1ae4:	50c1      	str	r1, [r0, r3]
}
    1ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ae8:	200000a6 	.word	0x200000a6
    1aec:	200000a8 	.word	0x200000a8
    1af0:	00001ab9 	.word	0x00001ab9
    1af4:	200018d4 	.word	0x200018d4

00001af8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1af8:	b500      	push	{lr}
    1afa:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1afc:	2309      	movs	r3, #9
    1afe:	466a      	mov	r2, sp
    1b00:	7013      	strb	r3, [r2, #0]
    1b02:	3301      	adds	r3, #1
    1b04:	7053      	strb	r3, [r2, #1]
    1b06:	3301      	adds	r3, #1
    1b08:	7093      	strb	r3, [r2, #2]
    1b0a:	3301      	adds	r3, #1
    1b0c:	70d3      	strb	r3, [r2, #3]
    1b0e:	3301      	adds	r3, #1
    1b10:	7113      	strb	r3, [r2, #4]
    1b12:	3301      	adds	r3, #1
    1b14:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1b16:	4b03      	ldr	r3, [pc, #12]	; (1b24 <_sercom_get_interrupt_vector+0x2c>)
    1b18:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1b1a:	466b      	mov	r3, sp
    1b1c:	5618      	ldrsb	r0, [r3, r0]
}
    1b1e:	b003      	add	sp, #12
    1b20:	bd00      	pop	{pc}
    1b22:	46c0      	nop			; (mov r8, r8)
    1b24:	00000e11 	.word	0x00000e11

00001b28 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1b28:	b510      	push	{r4, lr}
    1b2a:	4b02      	ldr	r3, [pc, #8]	; (1b34 <SERCOM0_Handler+0xc>)
    1b2c:	681b      	ldr	r3, [r3, #0]
    1b2e:	2000      	movs	r0, #0
    1b30:	4798      	blx	r3
    1b32:	bd10      	pop	{r4, pc}
    1b34:	200000a8 	.word	0x200000a8

00001b38 <SERCOM1_Handler>:
    1b38:	b510      	push	{r4, lr}
    1b3a:	4b02      	ldr	r3, [pc, #8]	; (1b44 <SERCOM1_Handler+0xc>)
    1b3c:	685b      	ldr	r3, [r3, #4]
    1b3e:	2001      	movs	r0, #1
    1b40:	4798      	blx	r3
    1b42:	bd10      	pop	{r4, pc}
    1b44:	200000a8 	.word	0x200000a8

00001b48 <SERCOM2_Handler>:
    1b48:	b510      	push	{r4, lr}
    1b4a:	4b02      	ldr	r3, [pc, #8]	; (1b54 <SERCOM2_Handler+0xc>)
    1b4c:	689b      	ldr	r3, [r3, #8]
    1b4e:	2002      	movs	r0, #2
    1b50:	4798      	blx	r3
    1b52:	bd10      	pop	{r4, pc}
    1b54:	200000a8 	.word	0x200000a8

00001b58 <SERCOM3_Handler>:
    1b58:	b510      	push	{r4, lr}
    1b5a:	4b02      	ldr	r3, [pc, #8]	; (1b64 <SERCOM3_Handler+0xc>)
    1b5c:	68db      	ldr	r3, [r3, #12]
    1b5e:	2003      	movs	r0, #3
    1b60:	4798      	blx	r3
    1b62:	bd10      	pop	{r4, pc}
    1b64:	200000a8 	.word	0x200000a8

00001b68 <SERCOM4_Handler>:
    1b68:	b510      	push	{r4, lr}
    1b6a:	4b02      	ldr	r3, [pc, #8]	; (1b74 <SERCOM4_Handler+0xc>)
    1b6c:	691b      	ldr	r3, [r3, #16]
    1b6e:	2004      	movs	r0, #4
    1b70:	4798      	blx	r3
    1b72:	bd10      	pop	{r4, pc}
    1b74:	200000a8 	.word	0x200000a8

00001b78 <SERCOM5_Handler>:
    1b78:	b510      	push	{r4, lr}
    1b7a:	4b02      	ldr	r3, [pc, #8]	; (1b84 <SERCOM5_Handler+0xc>)
    1b7c:	695b      	ldr	r3, [r3, #20]
    1b7e:	2005      	movs	r0, #5
    1b80:	4798      	blx	r3
    1b82:	bd10      	pop	{r4, pc}
    1b84:	200000a8 	.word	0x200000a8

00001b88 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
    1b88:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
    1b8a:	0080      	lsls	r0, r0, #2
    1b8c:	4b1f      	ldr	r3, [pc, #124]	; (1c0c <_ac_interrupt_handler+0x84>)
    1b8e:	58c4      	ldr	r4, [r0, r3]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
    1b90:	6823      	ldr	r3, [r4, #0]
    1b92:	799d      	ldrb	r5, [r3, #6]
	interrupt_and_callback_status_mask =
    1b94:	7f22      	ldrb	r2, [r4, #28]
    1b96:	7f63      	ldrb	r3, [r4, #29]
    1b98:	4013      	ands	r3, r2
    1b9a:	401d      	ands	r5, r3
			(module->register_callback_mask & module->enable_callback_mask);

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
    1b9c:	07eb      	lsls	r3, r5, #31
    1b9e:	d40a      	bmi.n	1bb6 <_ac_interrupt_handler+0x2e>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
    1ba0:	07ab      	lsls	r3, r5, #30
    1ba2:	d40f      	bmi.n	1bc4 <_ac_interrupt_handler+0x3c>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
    1ba4:	06eb      	lsls	r3, r5, #27
    1ba6:	d414      	bmi.n	1bd2 <_ac_interrupt_handler+0x4a>
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
	}

#if (AC_NUM_CMP > 2)
		/* Check if comparator channel 2 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP2) {
    1ba8:	076b      	lsls	r3, r5, #29
    1baa:	d419      	bmi.n	1be0 <_ac_interrupt_handler+0x58>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP2;
	}

	/* Check if comparator channel 3 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP3) {
    1bac:	072b      	lsls	r3, r5, #28
    1bae:	d41e      	bmi.n	1bee <_ac_interrupt_handler+0x66>
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP3;
	}

#  if !(SAMC20)
		/* Check if window 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN1) {
    1bb0:	06ab      	lsls	r3, r5, #26
    1bb2:	d423      	bmi.n	1bfc <_ac_interrupt_handler+0x74>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
    1bb4:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
    1bb6:	0020      	movs	r0, r4
    1bb8:	6863      	ldr	r3, [r4, #4]
    1bba:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
    1bbc:	2301      	movs	r3, #1
    1bbe:	6822      	ldr	r2, [r4, #0]
    1bc0:	7193      	strb	r3, [r2, #6]
    1bc2:	e7ed      	b.n	1ba0 <_ac_interrupt_handler+0x18>
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
    1bc4:	0020      	movs	r0, r4
    1bc6:	68a3      	ldr	r3, [r4, #8]
    1bc8:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
    1bca:	2302      	movs	r3, #2
    1bcc:	6822      	ldr	r2, [r4, #0]
    1bce:	7193      	strb	r3, [r2, #6]
    1bd0:	e7e8      	b.n	1ba4 <_ac_interrupt_handler+0x1c>
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
    1bd2:	0020      	movs	r0, r4
    1bd4:	6963      	ldr	r3, [r4, #20]
    1bd6:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
    1bd8:	2310      	movs	r3, #16
    1bda:	6822      	ldr	r2, [r4, #0]
    1bdc:	7193      	strb	r3, [r2, #6]
    1bde:	e7e3      	b.n	1ba8 <_ac_interrupt_handler+0x20>
		(module->callback[AC_CALLBACK_COMPARATOR_2])(module);
    1be0:	0020      	movs	r0, r4
    1be2:	68e3      	ldr	r3, [r4, #12]
    1be4:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP2;
    1be6:	2304      	movs	r3, #4
    1be8:	6822      	ldr	r2, [r4, #0]
    1bea:	7193      	strb	r3, [r2, #6]
    1bec:	e7de      	b.n	1bac <_ac_interrupt_handler+0x24>
		(module->callback[AC_CALLBACK_COMPARATOR_3])(module);
    1bee:	0020      	movs	r0, r4
    1bf0:	6923      	ldr	r3, [r4, #16]
    1bf2:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP3;
    1bf4:	2308      	movs	r3, #8
    1bf6:	6822      	ldr	r2, [r4, #0]
    1bf8:	7193      	strb	r3, [r2, #6]
    1bfa:	e7d9      	b.n	1bb0 <_ac_interrupt_handler+0x28>
		(module->callback[AC_CALLBACK_WINDOW_1])(module);
    1bfc:	0020      	movs	r0, r4
    1bfe:	69a3      	ldr	r3, [r4, #24]
    1c00:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
    1c02:	6823      	ldr	r3, [r4, #0]
    1c04:	2220      	movs	r2, #32
    1c06:	719a      	strb	r2, [r3, #6]
}
    1c08:	e7d4      	b.n	1bb4 <_ac_interrupt_handler+0x2c>
    1c0a:	46c0      	nop			; (mov r8, r8)
    1c0c:	200018ec 	.word	0x200018ec

00001c10 <AC_Handler>:
{
    1c10:	b510      	push	{r4, lr}
	_ac_interrupt_handler(0);
    1c12:	2000      	movs	r0, #0
    1c14:	4b01      	ldr	r3, [pc, #4]	; (1c1c <AC_Handler+0xc>)
    1c16:	4798      	blx	r3
}
    1c18:	bd10      	pop	{r4, pc}
    1c1a:	46c0      	nop			; (mov r8, r8)
    1c1c:	00001b89 	.word	0x00001b89

00001c20 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1c20:	b500      	push	{lr}
    1c22:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1c24:	ab01      	add	r3, sp, #4
    1c26:	2280      	movs	r2, #128	; 0x80
    1c28:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1c2a:	780a      	ldrb	r2, [r1, #0]
    1c2c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1c2e:	784a      	ldrb	r2, [r1, #1]
    1c30:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1c32:	788a      	ldrb	r2, [r1, #2]
    1c34:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1c36:	0019      	movs	r1, r3
    1c38:	4b01      	ldr	r3, [pc, #4]	; (1c40 <port_pin_set_config+0x20>)
    1c3a:	4798      	blx	r3
}
    1c3c:	b003      	add	sp, #12
    1c3e:	bd00      	pop	{pc}
    1c40:	00002b21 	.word	0x00002b21

00001c44 <menu_add_item>:
#include "my_menu.h"
//#include "functions.h"


void menu_add_item(MENU *m, menu_item item)
{
    1c44:	b084      	sub	sp, #16
    1c46:	b570      	push	{r4, r5, r6, lr}
    1c48:	9105      	str	r1, [sp, #20]
    1c4a:	9206      	str	r2, [sp, #24]
    1c4c:	9307      	str	r3, [sp, #28]
    if(m->num_of_items == MENU_MAX_ITEMS)
    1c4e:	2399      	movs	r3, #153	; 0x99
    1c50:	009b      	lsls	r3, r3, #2
    1c52:	5cc1      	ldrb	r1, [r0, r3]
    1c54:	2911      	cmp	r1, #17
    1c56:	d013      	beq.n	1c80 <menu_add_item+0x3c>
        return;
    m->items[m->num_of_items] = item;
    1c58:	00cb      	lsls	r3, r1, #3
    1c5a:	185b      	adds	r3, r3, r1
    1c5c:	009b      	lsls	r3, r3, #2
    1c5e:	aa05      	add	r2, sp, #20
    1c60:	18c3      	adds	r3, r0, r3
    1c62:	ca70      	ldmia	r2!, {r4, r5, r6}
    1c64:	c370      	stmia	r3!, {r4, r5, r6}
    1c66:	ca70      	ldmia	r2!, {r4, r5, r6}
    1c68:	c370      	stmia	r3!, {r4, r5, r6}
    1c6a:	ca70      	ldmia	r2!, {r4, r5, r6}
    1c6c:	c370      	stmia	r3!, {r4, r5, r6}
    m->num_of_items++;
    1c6e:	3101      	adds	r1, #1
    1c70:	2399      	movs	r3, #153	; 0x99
    1c72:	009b      	lsls	r3, r3, #2
    1c74:	54c1      	strb	r1, [r0, r3]
    m->curr_pos = 0;
    1c76:	2300      	movs	r3, #0
    1c78:	4a03      	ldr	r2, [pc, #12]	; (1c88 <menu_add_item+0x44>)
    1c7a:	5483      	strb	r3, [r0, r2]
    m->curr_window_pos = 0;
    1c7c:	4a03      	ldr	r2, [pc, #12]	; (1c8c <menu_add_item+0x48>)
    1c7e:	5483      	strb	r3, [r0, r2]
}
    1c80:	bc70      	pop	{r4, r5, r6}
    1c82:	bc08      	pop	{r3}
    1c84:	b004      	add	sp, #16
    1c86:	4718      	bx	r3
    1c88:	00000265 	.word	0x00000265
    1c8c:	00000266 	.word	0x00000266

00001c90 <increment_menu_position>:

void increment_menu_position(MENU *m)
{
    if(m->curr_pos < m->num_of_items - 1)
    1c90:	4b0a      	ldr	r3, [pc, #40]	; (1cbc <increment_menu_position+0x2c>)
    1c92:	5cc2      	ldrb	r2, [r0, r3]
    1c94:	3b01      	subs	r3, #1
    1c96:	5cc3      	ldrb	r3, [r0, r3]
    1c98:	3b01      	subs	r3, #1
    1c9a:	429a      	cmp	r2, r3
    1c9c:	da02      	bge.n	1ca4 <increment_menu_position+0x14>
        m->curr_pos++;
    1c9e:	3201      	adds	r2, #1
    1ca0:	4b06      	ldr	r3, [pc, #24]	; (1cbc <increment_menu_position+0x2c>)
    1ca2:	54c2      	strb	r2, [r0, r3]
    if((m->curr_pos - m->curr_window_pos) == 4)
    1ca4:	4b06      	ldr	r3, [pc, #24]	; (1cc0 <increment_menu_position+0x30>)
    1ca6:	5cc2      	ldrb	r2, [r0, r3]
    1ca8:	4b04      	ldr	r3, [pc, #16]	; (1cbc <increment_menu_position+0x2c>)
    1caa:	5cc3      	ldrb	r3, [r0, r3]
    1cac:	1a9b      	subs	r3, r3, r2
    1cae:	2b04      	cmp	r3, #4
    1cb0:	d000      	beq.n	1cb4 <increment_menu_position+0x24>
        m->curr_window_pos++;
}
    1cb2:	4770      	bx	lr
        m->curr_window_pos++;
    1cb4:	3201      	adds	r2, #1
    1cb6:	4b02      	ldr	r3, [pc, #8]	; (1cc0 <increment_menu_position+0x30>)
    1cb8:	54c2      	strb	r2, [r0, r3]
}
    1cba:	e7fa      	b.n	1cb2 <increment_menu_position+0x22>
    1cbc:	00000265 	.word	0x00000265
    1cc0:	00000266 	.word	0x00000266

00001cc4 <decrement_menu_position>:

void decrement_menu_position(MENU *m)
{
    if(m->curr_pos > 0)
    1cc4:	4b08      	ldr	r3, [pc, #32]	; (1ce8 <decrement_menu_position+0x24>)
    1cc6:	5cc3      	ldrb	r3, [r0, r3]
    1cc8:	2b00      	cmp	r3, #0
    1cca:	d002      	beq.n	1cd2 <decrement_menu_position+0xe>
        m->curr_pos--;
    1ccc:	3b01      	subs	r3, #1
    1cce:	4a06      	ldr	r2, [pc, #24]	; (1ce8 <decrement_menu_position+0x24>)
    1cd0:	5483      	strb	r3, [r0, r2]
    if(m->curr_pos < m->curr_window_pos)
    1cd2:	4b06      	ldr	r3, [pc, #24]	; (1cec <decrement_menu_position+0x28>)
    1cd4:	5cc3      	ldrb	r3, [r0, r3]
    1cd6:	4a04      	ldr	r2, [pc, #16]	; (1ce8 <decrement_menu_position+0x24>)
    1cd8:	5c82      	ldrb	r2, [r0, r2]
    1cda:	429a      	cmp	r2, r3
    1cdc:	d202      	bcs.n	1ce4 <decrement_menu_position+0x20>
        m->curr_window_pos--;
    1cde:	3b01      	subs	r3, #1
    1ce0:	4a02      	ldr	r2, [pc, #8]	; (1cec <decrement_menu_position+0x28>)
    1ce2:	5483      	strb	r3, [r0, r2]
}
    1ce4:	4770      	bx	lr
    1ce6:	46c0      	nop			; (mov r8, r8)
    1ce8:	00000265 	.word	0x00000265
    1cec:	00000266 	.word	0x00000266

00001cf0 <get_p_to_item>:
    return m->curr_pos;
}

menu_item *get_p_to_item(MENU *m)
{
    return &(m->items[m->curr_pos]);
    1cf0:	4b03      	ldr	r3, [pc, #12]	; (1d00 <get_p_to_item+0x10>)
    1cf2:	5cc2      	ldrb	r2, [r0, r3]
    1cf4:	00d3      	lsls	r3, r2, #3
    1cf6:	189b      	adds	r3, r3, r2
    1cf8:	009b      	lsls	r3, r3, #2
    1cfa:	18c0      	adds	r0, r0, r3
}
    1cfc:	4770      	bx	lr
    1cfe:	46c0      	nop			; (mov r8, r8)
    1d00:	00000265 	.word	0x00000265

00001d04 <ftoe>:

void ftoe(char *s, float val)
{
    1d04:	b570      	push	{r4, r5, r6, lr}
    1d06:	0006      	movs	r6, r0
    1d08:	1c0d      	adds	r5, r1, #0
    uint32_t whole = (int) val;
    1d0a:	1c08      	adds	r0, r1, #0
    1d0c:	4b0a      	ldr	r3, [pc, #40]	; (1d38 <ftoe+0x34>)
    1d0e:	4798      	blx	r3
    1d10:	0004      	movs	r4, r0
    float fract = val-whole;
    1d12:	4b0a      	ldr	r3, [pc, #40]	; (1d3c <ftoe+0x38>)
    1d14:	4798      	blx	r3
    1d16:	1c01      	adds	r1, r0, #0
    1d18:	1c28      	adds	r0, r5, #0
    1d1a:	4b09      	ldr	r3, [pc, #36]	; (1d40 <ftoe+0x3c>)
    1d1c:	4798      	blx	r3
    uint32_t whole_fract= fract*1000;
    1d1e:	4909      	ldr	r1, [pc, #36]	; (1d44 <ftoe+0x40>)
    1d20:	4b09      	ldr	r3, [pc, #36]	; (1d48 <ftoe+0x44>)
    1d22:	4798      	blx	r3
    1d24:	4b09      	ldr	r3, [pc, #36]	; (1d4c <ftoe+0x48>)
    1d26:	4798      	blx	r3
    1d28:	0003      	movs	r3, r0
    //ne dela v primeru 4.05
    sprintf(s, "%3lu.%03lu", whole,whole_fract);
    1d2a:	0022      	movs	r2, r4
    1d2c:	4908      	ldr	r1, [pc, #32]	; (1d50 <ftoe+0x4c>)
    1d2e:	0030      	movs	r0, r6
    1d30:	4c08      	ldr	r4, [pc, #32]	; (1d54 <ftoe+0x50>)
    1d32:	47a0      	blx	r4
}
    1d34:	bd70      	pop	{r4, r5, r6, pc}
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	000040c9 	.word	0x000040c9
    1d3c:	000041a9 	.word	0x000041a9
    1d40:	00003d91 	.word	0x00003d91
    1d44:	447a0000 	.word	0x447a0000
    1d48:	00003b51 	.word	0x00003b51
    1d4c:	00003851 	.word	0x00003851
    1d50:	00005a08 	.word	0x00005a08
    1d54:	00005281 	.word	0x00005281

00001d58 <menu_get_item_string>:

void menu_get_item_string(MENU *m, char *str, uint8_t n)
{
    1d58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d5a:	b089      	sub	sp, #36	; 0x24
    1d5c:	0007      	movs	r7, r0
    1d5e:	000d      	movs	r5, r1
    1d60:	0016      	movs	r6, r2
    if(n >= m->num_of_items)
    1d62:	2399      	movs	r3, #153	; 0x99
    1d64:	009b      	lsls	r3, r3, #2
    1d66:	5cc3      	ldrb	r3, [r0, r3]
    1d68:	4293      	cmp	r3, r2
    1d6a:	d925      	bls.n	1db8 <menu_get_item_string+0x60>
        return;
    menu_item *tmp = m->items + n;
    1d6c:	00d4      	lsls	r4, r2, #3
    1d6e:	18a4      	adds	r4, r4, r2
    1d70:	00a4      	lsls	r4, r4, #2
    1d72:	1904      	adds	r4, r0, r4
    switch(tmp->type) {
    1d74:	7823      	ldrb	r3, [r4, #0]
    1d76:	2b04      	cmp	r3, #4
    1d78:	d83e      	bhi.n	1df8 <menu_get_item_string+0xa0>
    1d7a:	009b      	lsls	r3, r3, #2
    1d7c:	4a28      	ldr	r2, [pc, #160]	; (1e20 <menu_get_item_string+0xc8>)
    1d7e:	58d3      	ldr	r3, [r2, r3]
    1d80:	469f      	mov	pc, r3
        case UINT8:
            sprintf(tmp->val_str, "%6d", *(uint8_t *)tmp->variable);
    1d82:	6923      	ldr	r3, [r4, #16]
    1d84:	781a      	ldrb	r2, [r3, #0]
    1d86:	0020      	movs	r0, r4
    1d88:	3014      	adds	r0, #20
    1d8a:	4926      	ldr	r1, [pc, #152]	; (1e24 <menu_get_item_string+0xcc>)
    1d8c:	4b26      	ldr	r3, [pc, #152]	; (1e28 <menu_get_item_string+0xd0>)
    1d8e:	4798      	blx	r3
            break;
        default:
            strcpy(tmp->val_str, "ERROR99");
            break;
    }
    *(tmp->val_str + 7) = 0;
    1d90:	2300      	movs	r3, #0
    1d92:	76e3      	strb	r3, [r4, #27]
    char test[21];
    if(n == m->curr_pos) {
    1d94:	4b25      	ldr	r3, [pc, #148]	; (1e2c <menu_get_item_string+0xd4>)
    1d96:	5cfb      	ldrb	r3, [r7, r3]
    1d98:	42b3      	cmp	r3, r6
    1d9a:	d034      	beq.n	1e06 <menu_get_item_string+0xae>
        sprintf(test, "%c%s%s%s", '~', tmp->name, tmp->val_str + 1, tmp->units);
    }
    else
        sprintf(test, "%s%s%s", tmp->name, tmp->val_str, tmp->units);
    1d9c:	0023      	movs	r3, r4
    1d9e:	3314      	adds	r3, #20
    1da0:	1c62      	adds	r2, r4, #1
    1da2:	340b      	adds	r4, #11
    1da4:	9400      	str	r4, [sp, #0]
    1da6:	4922      	ldr	r1, [pc, #136]	; (1e30 <menu_get_item_string+0xd8>)
    1da8:	a802      	add	r0, sp, #8
    1daa:	4c1f      	ldr	r4, [pc, #124]	; (1e28 <menu_get_item_string+0xd0>)
    1dac:	47a0      	blx	r4
    memcpy(str, test, 20);
    1dae:	2214      	movs	r2, #20
    1db0:	a902      	add	r1, sp, #8
    1db2:	0028      	movs	r0, r5
    1db4:	4b1f      	ldr	r3, [pc, #124]	; (1e34 <menu_get_item_string+0xdc>)
    1db6:	4798      	blx	r3

}
    1db8:	b009      	add	sp, #36	; 0x24
    1dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
            sprintf(tmp->val_str, "%6d", *(uint16_t *)tmp->variable);
    1dbc:	6923      	ldr	r3, [r4, #16]
    1dbe:	881a      	ldrh	r2, [r3, #0]
    1dc0:	0020      	movs	r0, r4
    1dc2:	3014      	adds	r0, #20
    1dc4:	4917      	ldr	r1, [pc, #92]	; (1e24 <menu_get_item_string+0xcc>)
    1dc6:	4b18      	ldr	r3, [pc, #96]	; (1e28 <menu_get_item_string+0xd0>)
    1dc8:	4798      	blx	r3
            break;
    1dca:	e7e1      	b.n	1d90 <menu_get_item_string+0x38>
            sprintf(tmp->val_str, "%6lu", *(uint32_t *)tmp->variable);
    1dcc:	6923      	ldr	r3, [r4, #16]
    1dce:	681a      	ldr	r2, [r3, #0]
    1dd0:	0020      	movs	r0, r4
    1dd2:	3014      	adds	r0, #20
    1dd4:	4918      	ldr	r1, [pc, #96]	; (1e38 <menu_get_item_string+0xe0>)
    1dd6:	4b14      	ldr	r3, [pc, #80]	; (1e28 <menu_get_item_string+0xd0>)
    1dd8:	4798      	blx	r3
            break;
    1dda:	e7d9      	b.n	1d90 <menu_get_item_string+0x38>
            sprintf(tmp->val_str, "       ");
    1ddc:	0020      	movs	r0, r4
    1dde:	3014      	adds	r0, #20
    1de0:	2208      	movs	r2, #8
    1de2:	4916      	ldr	r1, [pc, #88]	; (1e3c <menu_get_item_string+0xe4>)
    1de4:	4b13      	ldr	r3, [pc, #76]	; (1e34 <menu_get_item_string+0xdc>)
    1de6:	4798      	blx	r3
            break;
    1de8:	e7d2      	b.n	1d90 <menu_get_item_string+0x38>
            ftoe(tmp->val_str, *(float *)tmp->variable);
    1dea:	6923      	ldr	r3, [r4, #16]
    1dec:	6819      	ldr	r1, [r3, #0]
    1dee:	0020      	movs	r0, r4
    1df0:	3014      	adds	r0, #20
    1df2:	4b13      	ldr	r3, [pc, #76]	; (1e40 <menu_get_item_string+0xe8>)
    1df4:	4798      	blx	r3
            break;
    1df6:	e7cb      	b.n	1d90 <menu_get_item_string+0x38>
            strcpy(tmp->val_str, "ERROR99");
    1df8:	0020      	movs	r0, r4
    1dfa:	3014      	adds	r0, #20
    1dfc:	2208      	movs	r2, #8
    1dfe:	4911      	ldr	r1, [pc, #68]	; (1e44 <menu_get_item_string+0xec>)
    1e00:	4b0c      	ldr	r3, [pc, #48]	; (1e34 <menu_get_item_string+0xdc>)
    1e02:	4798      	blx	r3
            break;
    1e04:	e7c4      	b.n	1d90 <menu_get_item_string+0x38>
        sprintf(test, "%c%s%s%s", '~', tmp->name, tmp->val_str + 1, tmp->units);
    1e06:	1c63      	adds	r3, r4, #1
    1e08:	0022      	movs	r2, r4
    1e0a:	320b      	adds	r2, #11
    1e0c:	9201      	str	r2, [sp, #4]
    1e0e:	3415      	adds	r4, #21
    1e10:	9400      	str	r4, [sp, #0]
    1e12:	227e      	movs	r2, #126	; 0x7e
    1e14:	490c      	ldr	r1, [pc, #48]	; (1e48 <menu_get_item_string+0xf0>)
    1e16:	a802      	add	r0, sp, #8
    1e18:	4c03      	ldr	r4, [pc, #12]	; (1e28 <menu_get_item_string+0xd0>)
    1e1a:	47a0      	blx	r4
    1e1c:	e7c7      	b.n	1dae <menu_get_item_string+0x56>
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	000059f4 	.word	0x000059f4
    1e24:	00005a28 	.word	0x00005a28
    1e28:	00005281 	.word	0x00005281
    1e2c:	00000265 	.word	0x00000265
    1e30:	00005a50 	.word	0x00005a50
    1e34:	000050e9 	.word	0x000050e9
    1e38:	00005a2c 	.word	0x00005a2c
    1e3c:	00005a34 	.word	0x00005a34
    1e40:	00001d05 	.word	0x00001d05
    1e44:	00005a3c 	.word	0x00005a3c
    1e48:	00005a44 	.word	0x00005a44

00001e4c <menu_whole_solo_string>:

void menu_whole_solo_string(MENU *m, char *s)
{
    1e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e4e:	46de      	mov	lr, fp
    1e50:	4657      	mov	r7, sl
    1e52:	464e      	mov	r6, r9
    1e54:	4645      	mov	r5, r8
    1e56:	b5e0      	push	{r5, r6, r7, lr}
    1e58:	b08b      	sub	sp, #44	; 0x2c
    1e5a:	0007      	movs	r7, r0
    1e5c:	000e      	movs	r6, r1
    return &(m->items[m->curr_pos]);
    1e5e:	4b2f      	ldr	r3, [pc, #188]	; (1f1c <menu_whole_solo_string+0xd0>)
    1e60:	5cc3      	ldrb	r3, [r0, r3]
    1e62:	4698      	mov	r8, r3
    char tmp_string[21];
    menu_item *p_to_item = get_p_to_item(m);
    menu_get_item_string(m, tmp_string, m->curr_pos);
    1e64:	001a      	movs	r2, r3
    1e66:	a904      	add	r1, sp, #16
    1e68:	4b2d      	ldr	r3, [pc, #180]	; (1f20 <menu_whole_solo_string+0xd4>)
    1e6a:	4798      	blx	r3
    1e6c:	4643      	mov	r3, r8
    1e6e:	00dd      	lsls	r5, r3, #3
    1e70:	4445      	add	r5, r8
    1e72:	00ad      	lsls	r5, r5, #2

    uint8_t string_length = strlen(p_to_item->name);
    1e74:	1c6b      	adds	r3, r5, #1
    1e76:	18fb      	adds	r3, r7, r3
    1e78:	9301      	str	r3, [sp, #4]
    1e7a:	0018      	movs	r0, r3
    1e7c:	4c29      	ldr	r4, [pc, #164]	; (1f24 <menu_whole_solo_string+0xd8>)
    1e7e:	47a0      	blx	r4
    1e80:	4683      	mov	fp, r0
    uint8_t value_length = strlen(p_to_item->val_str);
    1e82:	002b      	movs	r3, r5
    1e84:	3314      	adds	r3, #20
    1e86:	18fb      	adds	r3, r7, r3
    1e88:	9302      	str	r3, [sp, #8]
    1e8a:	0018      	movs	r0, r3
    1e8c:	47a0      	blx	r4
    1e8e:	9003      	str	r0, [sp, #12]
    1e90:	ab04      	add	r3, sp, #16
    1e92:	a909      	add	r1, sp, #36	; 0x24

    p_to_item->name[sizeof(p_to_item->name) - 1] = 0;
    for(uint8_t i = 0; i < 20; i++)
        tmp_string[i] = ' ';
    1e94:	2220      	movs	r2, #32
    1e96:	701a      	strb	r2, [r3, #0]
    1e98:	3301      	adds	r3, #1
    for(uint8_t i = 0; i < 20; i++)
    1e9a:	428b      	cmp	r3, r1
    1e9c:	d1fb      	bne.n	1e96 <menu_whole_solo_string+0x4a>
    tmp_string[20] = 0;
    1e9e:	2300      	movs	r3, #0
    1ea0:	aa04      	add	r2, sp, #16
    1ea2:	7513      	strb	r3, [r2, #20]
    1ea4:	0034      	movs	r4, r6
    1ea6:	3354      	adds	r3, #84	; 0x54
    1ea8:	469a      	mov	sl, r3
    1eaa:	44b2      	add	sl, r6
    for(uint8_t i = 0; i < 4; i++)
        memcpy(s + 21 * i, tmp_string, 20);
    1eac:	4b1e      	ldr	r3, [pc, #120]	; (1f28 <menu_whole_solo_string+0xdc>)
    1eae:	4699      	mov	r9, r3
    1eb0:	002b      	movs	r3, r5
    1eb2:	4655      	mov	r5, sl
    1eb4:	469a      	mov	sl, r3
    1eb6:	2214      	movs	r2, #20
    1eb8:	a904      	add	r1, sp, #16
    1eba:	0020      	movs	r0, r4
    1ebc:	47c8      	blx	r9
    1ebe:	3415      	adds	r4, #21
    for(uint8_t i = 0; i < 4; i++)
    1ec0:	42ac      	cmp	r4, r5
    1ec2:	d1f8      	bne.n	1eb6 <menu_whole_solo_string+0x6a>
    1ec4:	4655      	mov	r5, sl

    p_to_item->name[sizeof(p_to_item->name) - 1] = 0;
    1ec6:	4643      	mov	r3, r8
    1ec8:	00db      	lsls	r3, r3, #3
    1eca:	4642      	mov	r2, r8
    1ecc:	1899      	adds	r1, r3, r2
    1ece:	0089      	lsls	r1, r1, #2
    1ed0:	1879      	adds	r1, r7, r1
    1ed2:	2200      	movs	r2, #0
    1ed4:	728a      	strb	r2, [r1, #10]
    p_to_item->val_str[sizeof(p_to_item->val_str) - 1] = 0;
    1ed6:	76ca      	strb	r2, [r1, #27]

    memcpy(s + 21, p_to_item->name, string_length);
    1ed8:	0030      	movs	r0, r6
    1eda:	3015      	adds	r0, #21
    1edc:	24ff      	movs	r4, #255	; 0xff
    1ede:	465a      	mov	r2, fp
    1ee0:	4022      	ands	r2, r4
    1ee2:	9901      	ldr	r1, [sp, #4]
    1ee4:	4b10      	ldr	r3, [pc, #64]	; (1f28 <menu_whole_solo_string+0xdc>)
    1ee6:	4698      	mov	r8, r3
    1ee8:	4798      	blx	r3
    1eea:	9b03      	ldr	r3, [sp, #12]
    1eec:	401c      	ands	r4, r3
    memcpy(s + 42, p_to_item->val_str, value_length);
    1eee:	0030      	movs	r0, r6
    1ef0:	302a      	adds	r0, #42	; 0x2a
    1ef2:	0022      	movs	r2, r4
    1ef4:	9902      	ldr	r1, [sp, #8]
    1ef6:	47c0      	blx	r8
    memcpy(s + 42 + value_length + 1, p_to_item->units, strlen(p_to_item->units));
    1ef8:	350b      	adds	r5, #11
    1efa:	197f      	adds	r7, r7, r5
    1efc:	0038      	movs	r0, r7
    1efe:	4b09      	ldr	r3, [pc, #36]	; (1f24 <menu_whole_solo_string+0xd8>)
    1f00:	4798      	blx	r3
    1f02:	0002      	movs	r2, r0
    1f04:	342b      	adds	r4, #43	; 0x2b
    1f06:	1930      	adds	r0, r6, r4
    1f08:	0039      	movs	r1, r7
    1f0a:	47c0      	blx	r8
}
    1f0c:	b00b      	add	sp, #44	; 0x2c
    1f0e:	bc3c      	pop	{r2, r3, r4, r5}
    1f10:	4690      	mov	r8, r2
    1f12:	4699      	mov	r9, r3
    1f14:	46a2      	mov	sl, r4
    1f16:	46ab      	mov	fp, r5
    1f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f1a:	46c0      	nop			; (mov r8, r8)
    1f1c:	00000265 	.word	0x00000265
    1f20:	00001d59 	.word	0x00001d59
    1f24:	000052d5 	.word	0x000052d5
    1f28:	000050e9 	.word	0x000050e9

00001f2c <menu_whole_string>:

void menu_whole_string(MENU *m, char *s, STATE state)
{
    1f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f2e:	46d6      	mov	lr, sl
    1f30:	464f      	mov	r7, r9
    1f32:	4646      	mov	r6, r8
    1f34:	b5c0      	push	{r6, r7, lr}
    1f36:	0006      	movs	r6, r0
    1f38:	000f      	movs	r7, r1
    if(state == EDIT) {
    1f3a:	2a01      	cmp	r2, #1
    1f3c:	d03e      	beq.n	1fbc <menu_whole_string+0x90>
        menu_whole_solo_string(m, s);
    }
    else {
        uint8_t j = 0;
        for(uint8_t i = (m->curr_window_pos); i < (4 + m->curr_window_pos) && i < m->num_of_items; i++) {
    1f3e:	4b23      	ldr	r3, [pc, #140]	; (1fcc <menu_whole_string+0xa0>)
    1f40:	5cc5      	ldrb	r5, [r0, r3]
    1f42:	1d2b      	adds	r3, r5, #4
    1f44:	429d      	cmp	r5, r3
    1f46:	da3c      	bge.n	1fc2 <menu_whole_string+0x96>
    1f48:	2399      	movs	r3, #153	; 0x99
    1f4a:	009b      	lsls	r3, r3, #2
    1f4c:	5cc3      	ldrb	r3, [r0, r3]
    1f4e:	42ab      	cmp	r3, r5
    1f50:	d939      	bls.n	1fc6 <menu_whole_string+0x9a>
    1f52:	2300      	movs	r3, #0
            menu_get_item_string(m, s + 21 * (j++), i);
    1f54:	4a1e      	ldr	r2, [pc, #120]	; (1fd0 <menu_whole_string+0xa4>)
    1f56:	4691      	mov	r9, r2
        for(uint8_t i = (m->curr_window_pos); i < (4 + m->curr_window_pos) && i < m->num_of_items; i++) {
    1f58:	4a1c      	ldr	r2, [pc, #112]	; (1fcc <menu_whole_string+0xa0>)
    1f5a:	4690      	mov	r8, r2
    1f5c:	3a02      	subs	r2, #2
    1f5e:	4692      	mov	sl, r2
            menu_get_item_string(m, s + 21 * (j++), i);
    1f60:	1c5c      	adds	r4, r3, #1
    1f62:	b2e4      	uxtb	r4, r4
    1f64:	0059      	lsls	r1, r3, #1
    1f66:	18cb      	adds	r3, r1, r3
    1f68:	00d9      	lsls	r1, r3, #3
    1f6a:	1ac9      	subs	r1, r1, r3
    1f6c:	1879      	adds	r1, r7, r1
    1f6e:	002a      	movs	r2, r5
    1f70:	0030      	movs	r0, r6
    1f72:	47c8      	blx	r9
        for(uint8_t i = (m->curr_window_pos); i < (4 + m->curr_window_pos) && i < m->num_of_items; i++) {
    1f74:	3501      	adds	r5, #1
    1f76:	b2ed      	uxtb	r5, r5
    1f78:	4643      	mov	r3, r8
    1f7a:	5cf3      	ldrb	r3, [r6, r3]
    1f7c:	3304      	adds	r3, #4
    1f7e:	429d      	cmp	r5, r3
    1f80:	da04      	bge.n	1f8c <menu_whole_string+0x60>
            menu_get_item_string(m, s + 21 * (j++), i);
    1f82:	0023      	movs	r3, r4
        for(uint8_t i = (m->curr_window_pos); i < (4 + m->curr_window_pos) && i < m->num_of_items; i++) {
    1f84:	4652      	mov	r2, sl
    1f86:	5cb2      	ldrb	r2, [r6, r2]
    1f88:	42aa      	cmp	r2, r5
    1f8a:	d8e9      	bhi.n	1f60 <menu_whole_string+0x34>
        }
        for(; j < 4; j++)
    1f8c:	2c03      	cmp	r4, #3
    1f8e:	d810      	bhi.n	1fb2 <menu_whole_string+0x86>
            for(uint8_t i = 0; i < 20; i++)
                *(s + 21 * j) = ' ';
    1f90:	2114      	movs	r1, #20
    1f92:	2020      	movs	r0, #32
    1f94:	0062      	lsls	r2, r4, #1
    1f96:	1912      	adds	r2, r2, r4
    1f98:	00d3      	lsls	r3, r2, #3
    1f9a:	1a9a      	subs	r2, r3, r2
    1f9c:	18ba      	adds	r2, r7, r2
    1f9e:	000b      	movs	r3, r1
    1fa0:	3b01      	subs	r3, #1
    1fa2:	b2db      	uxtb	r3, r3
            for(uint8_t i = 0; i < 20; i++)
    1fa4:	2b00      	cmp	r3, #0
    1fa6:	d1fb      	bne.n	1fa0 <menu_whole_string+0x74>
    1fa8:	7010      	strb	r0, [r2, #0]
        for(; j < 4; j++)
    1faa:	3401      	adds	r4, #1
    1fac:	b2e4      	uxtb	r4, r4
    1fae:	2c03      	cmp	r4, #3
    1fb0:	d9f0      	bls.n	1f94 <menu_whole_string+0x68>
    }

}
    1fb2:	bc1c      	pop	{r2, r3, r4}
    1fb4:	4690      	mov	r8, r2
    1fb6:	4699      	mov	r9, r3
    1fb8:	46a2      	mov	sl, r4
    1fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        menu_whole_solo_string(m, s);
    1fbc:	4b05      	ldr	r3, [pc, #20]	; (1fd4 <menu_whole_string+0xa8>)
    1fbe:	4798      	blx	r3
    1fc0:	e7f7      	b.n	1fb2 <menu_whole_string+0x86>
        for(uint8_t i = (m->curr_window_pos); i < (4 + m->curr_window_pos) && i < m->num_of_items; i++) {
    1fc2:	2400      	movs	r4, #0
    1fc4:	e7e4      	b.n	1f90 <menu_whole_string+0x64>
    1fc6:	2400      	movs	r4, #0
    1fc8:	e7e2      	b.n	1f90 <menu_whole_string+0x64>
    1fca:	46c0      	nop			; (mov r8, r8)
    1fcc:	00000266 	.word	0x00000266
    1fd0:	00001d59 	.word	0x00001d59
    1fd4:	00001e4d 	.word	0x00001e4d

00001fd8 <menu_create_item>:

void menu_create_item(menu_item *item, const char *name, enum VAR_TYPE typ, const char *units, void *p_variable, float min_val, float max_val)
{
    1fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fda:	46c6      	mov	lr, r8
    1fdc:	b500      	push	{lr}
    1fde:	b082      	sub	sp, #8
    1fe0:	0004      	movs	r4, r0
    1fe2:	000f      	movs	r7, r1
    1fe4:	4690      	mov	r8, r2
    1fe6:	9301      	str	r3, [sp, #4]
    strcpy(item->name, "         ");
    1fe8:	1c45      	adds	r5, r0, #1
    1fea:	220a      	movs	r2, #10
    1fec:	4910      	ldr	r1, [pc, #64]	; (2030 <STACK_SIZE+0x30>)
    1fee:	0028      	movs	r0, r5
    1ff0:	4e10      	ldr	r6, [pc, #64]	; (2034 <STACK_SIZE+0x34>)
    1ff2:	47b0      	blx	r6
    strcpy(item->name, name);
    1ff4:	0039      	movs	r1, r7
    1ff6:	0028      	movs	r0, r5
    1ff8:	4f0f      	ldr	r7, [pc, #60]	; (2038 <STACK_SIZE+0x38>)
    1ffa:	47b8      	blx	r7
    strcpy(item->units, "    ");
    1ffc:	350a      	adds	r5, #10
    1ffe:	2205      	movs	r2, #5
    2000:	490e      	ldr	r1, [pc, #56]	; (203c <STACK_SIZE+0x3c>)
    2002:	0028      	movs	r0, r5
    2004:	47b0      	blx	r6
    strcpy(item->units, units);
    2006:	9901      	ldr	r1, [sp, #4]
    2008:	0028      	movs	r0, r5
    200a:	47b8      	blx	r7
    strcpy(item->val_str,"       ");
    200c:	0020      	movs	r0, r4
    200e:	3014      	adds	r0, #20
    2010:	2208      	movs	r2, #8
    2012:	490b      	ldr	r1, [pc, #44]	; (2040 <STACK_SIZE+0x40>)
    2014:	47b0      	blx	r6
    item->type = typ;
    2016:	4643      	mov	r3, r8
    2018:	7023      	strb	r3, [r4, #0]
    item->variable = p_variable;
    201a:	9b08      	ldr	r3, [sp, #32]
    201c:	6123      	str	r3, [r4, #16]
    item->val_max = max_val;
    201e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2020:	6223      	str	r3, [r4, #32]
    item->val_min = min_val;
    2022:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2024:	61e3      	str	r3, [r4, #28]
}
    2026:	b002      	add	sp, #8
    2028:	bc04      	pop	{r2}
    202a:	4690      	mov	r8, r2
    202c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	00005a14 	.word	0x00005a14
    2034:	000050e9 	.word	0x000050e9
    2038:	000052c5 	.word	0x000052c5
    203c:	00005a20 	.word	0x00005a20
    2040:	00005a34 	.word	0x00005a34

00002044 <menu_increment_item>:

void menu_increment_item(MENU *m)
{
    2044:	b5f0      	push	{r4, r5, r6, r7, lr}
    2046:	46c6      	mov	lr, r8
    2048:	b500      	push	{lr}
    204a:	0005      	movs	r5, r0
    switch(m->items[m->curr_pos].type) {
    204c:	4b34      	ldr	r3, [pc, #208]	; (2120 <menu_increment_item+0xdc>)
    204e:	5cc4      	ldrb	r4, [r0, r3]
    2050:	00e3      	lsls	r3, r4, #3
    2052:	191b      	adds	r3, r3, r4
    2054:	009b      	lsls	r3, r3, #2
    2056:	5c1b      	ldrb	r3, [r3, r0]
    2058:	2b01      	cmp	r3, #1
    205a:	d01e      	beq.n	209a <menu_increment_item+0x56>
    205c:	2b00      	cmp	r3, #0
    205e:	d006      	beq.n	206e <menu_increment_item+0x2a>
    2060:	2b02      	cmp	r3, #2
    2062:	d030      	beq.n	20c6 <menu_increment_item+0x82>
    2064:	2b03      	cmp	r3, #3
    2066:	d044      	beq.n	20f2 <menu_increment_item+0xae>
                (*(float *)m->items[m->curr_pos].variable) += 0.1;
            break;
        default:
            break;
    }
}
    2068:	bc04      	pop	{r2}
    206a:	4690      	mov	r8, r2
    206c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if((*(uint8_t *)m->items[m->curr_pos].variable) < (m->items[m->curr_pos].val_max))
    206e:	00e6      	lsls	r6, r4, #3
    2070:	1933      	adds	r3, r6, r4
    2072:	009b      	lsls	r3, r3, #2
    2074:	18c3      	adds	r3, r0, r3
    2076:	691b      	ldr	r3, [r3, #16]
    2078:	4698      	mov	r8, r3
    207a:	781f      	ldrb	r7, [r3, #0]
    207c:	0038      	movs	r0, r7
    207e:	4b29      	ldr	r3, [pc, #164]	; (2124 <menu_increment_item+0xe0>)
    2080:	4798      	blx	r3
    2082:	1936      	adds	r6, r6, r4
    2084:	00b6      	lsls	r6, r6, #2
    2086:	19ad      	adds	r5, r5, r6
    2088:	6a29      	ldr	r1, [r5, #32]
    208a:	4b27      	ldr	r3, [pc, #156]	; (2128 <menu_increment_item+0xe4>)
    208c:	4798      	blx	r3
    208e:	2800      	cmp	r0, #0
    2090:	d0ea      	beq.n	2068 <menu_increment_item+0x24>
                (*(uint8_t *)m->items[m->curr_pos].variable)++;
    2092:	3701      	adds	r7, #1
    2094:	4643      	mov	r3, r8
    2096:	701f      	strb	r7, [r3, #0]
    2098:	e7e6      	b.n	2068 <menu_increment_item+0x24>
            if((*(uint16_t *)m->items[m->curr_pos].variable) < (m->items[m->curr_pos].val_max))
    209a:	00e6      	lsls	r6, r4, #3
    209c:	1933      	adds	r3, r6, r4
    209e:	009b      	lsls	r3, r3, #2
    20a0:	18c3      	adds	r3, r0, r3
    20a2:	691b      	ldr	r3, [r3, #16]
    20a4:	4698      	mov	r8, r3
    20a6:	881f      	ldrh	r7, [r3, #0]
    20a8:	0038      	movs	r0, r7
    20aa:	4b1e      	ldr	r3, [pc, #120]	; (2124 <menu_increment_item+0xe0>)
    20ac:	4798      	blx	r3
    20ae:	1936      	adds	r6, r6, r4
    20b0:	00b6      	lsls	r6, r6, #2
    20b2:	19ad      	adds	r5, r5, r6
    20b4:	6a29      	ldr	r1, [r5, #32]
    20b6:	4b1c      	ldr	r3, [pc, #112]	; (2128 <menu_increment_item+0xe4>)
    20b8:	4798      	blx	r3
    20ba:	2800      	cmp	r0, #0
    20bc:	d0d4      	beq.n	2068 <menu_increment_item+0x24>
                (*(uint16_t *)m->items[m->curr_pos].variable)++;
    20be:	3701      	adds	r7, #1
    20c0:	4643      	mov	r3, r8
    20c2:	801f      	strh	r7, [r3, #0]
    20c4:	e7d0      	b.n	2068 <menu_increment_item+0x24>
            if((*(uint32_t *)m->items[m->curr_pos].variable) < (m->items[m->curr_pos].val_max))
    20c6:	00e6      	lsls	r6, r4, #3
    20c8:	1933      	adds	r3, r6, r4
    20ca:	009b      	lsls	r3, r3, #2
    20cc:	18c3      	adds	r3, r0, r3
    20ce:	691b      	ldr	r3, [r3, #16]
    20d0:	4698      	mov	r8, r3
    20d2:	681f      	ldr	r7, [r3, #0]
    20d4:	0038      	movs	r0, r7
    20d6:	4b15      	ldr	r3, [pc, #84]	; (212c <menu_increment_item+0xe8>)
    20d8:	4798      	blx	r3
    20da:	1936      	adds	r6, r6, r4
    20dc:	00b6      	lsls	r6, r6, #2
    20de:	19ad      	adds	r5, r5, r6
    20e0:	6a29      	ldr	r1, [r5, #32]
    20e2:	4b11      	ldr	r3, [pc, #68]	; (2128 <menu_increment_item+0xe4>)
    20e4:	4798      	blx	r3
    20e6:	2800      	cmp	r0, #0
    20e8:	d0be      	beq.n	2068 <menu_increment_item+0x24>
                (*(uint32_t *)m->items[m->curr_pos].variable)++;
    20ea:	3701      	adds	r7, #1
    20ec:	4643      	mov	r3, r8
    20ee:	601f      	str	r7, [r3, #0]
    20f0:	e7ba      	b.n	2068 <menu_increment_item+0x24>
            if((*(float *)m->items[m->curr_pos].variable) < (m->items[m->curr_pos].val_max))
    20f2:	00e3      	lsls	r3, r4, #3
    20f4:	191a      	adds	r2, r3, r4
    20f6:	0092      	lsls	r2, r2, #2
    20f8:	1882      	adds	r2, r0, r2
    20fa:	6917      	ldr	r7, [r2, #16]
    20fc:	683e      	ldr	r6, [r7, #0]
    20fe:	6a11      	ldr	r1, [r2, #32]
    2100:	1c30      	adds	r0, r6, #0
    2102:	4b09      	ldr	r3, [pc, #36]	; (2128 <menu_increment_item+0xe4>)
    2104:	4798      	blx	r3
    2106:	2800      	cmp	r0, #0
    2108:	d0ae      	beq.n	2068 <menu_increment_item+0x24>
                (*(float *)m->items[m->curr_pos].variable) += 0.1;
    210a:	1c30      	adds	r0, r6, #0
    210c:	4b08      	ldr	r3, [pc, #32]	; (2130 <menu_increment_item+0xec>)
    210e:	4798      	blx	r3
    2110:	4a08      	ldr	r2, [pc, #32]	; (2134 <menu_increment_item+0xf0>)
    2112:	4b09      	ldr	r3, [pc, #36]	; (2138 <menu_increment_item+0xf4>)
    2114:	4c09      	ldr	r4, [pc, #36]	; (213c <menu_increment_item+0xf8>)
    2116:	47a0      	blx	r4
    2118:	4b09      	ldr	r3, [pc, #36]	; (2140 <menu_increment_item+0xfc>)
    211a:	4798      	blx	r3
    211c:	6038      	str	r0, [r7, #0]
}
    211e:	e7a3      	b.n	2068 <menu_increment_item+0x24>
    2120:	00000265 	.word	0x00000265
    2124:	00004109 	.word	0x00004109
    2128:	0000376d 	.word	0x0000376d
    212c:	000041a9 	.word	0x000041a9
    2130:	00004e81 	.word	0x00004e81
    2134:	9999999a 	.word	0x9999999a
    2138:	3fb99999 	.word	0x3fb99999
    213c:	00004235 	.word	0x00004235
    2140:	00004f25 	.word	0x00004f25

00002144 <menu_decrement_item>:
void menu_decrement_item(MENU *m)
{
    2144:	b5f0      	push	{r4, r5, r6, r7, lr}
    2146:	46c6      	mov	lr, r8
    2148:	b500      	push	{lr}
    214a:	0005      	movs	r5, r0
    switch(m->items[m->curr_pos].type) {
    214c:	4b34      	ldr	r3, [pc, #208]	; (2220 <menu_decrement_item+0xdc>)
    214e:	5cc4      	ldrb	r4, [r0, r3]
    2150:	00e3      	lsls	r3, r4, #3
    2152:	191b      	adds	r3, r3, r4
    2154:	009b      	lsls	r3, r3, #2
    2156:	5c1b      	ldrb	r3, [r3, r0]
    2158:	2b01      	cmp	r3, #1
    215a:	d01e      	beq.n	219a <menu_decrement_item+0x56>
    215c:	2b00      	cmp	r3, #0
    215e:	d006      	beq.n	216e <menu_decrement_item+0x2a>
    2160:	2b02      	cmp	r3, #2
    2162:	d030      	beq.n	21c6 <menu_decrement_item+0x82>
    2164:	2b03      	cmp	r3, #3
    2166:	d044      	beq.n	21f2 <menu_decrement_item+0xae>
                (*(float *)m->items[m->curr_pos].variable) -= 0.1;
            break;
        default:
            break;
    }
}
    2168:	bc04      	pop	{r2}
    216a:	4690      	mov	r8, r2
    216c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if((*(uint8_t *)m->items[m->curr_pos].variable) > (m->items[m->curr_pos].val_min))
    216e:	00e6      	lsls	r6, r4, #3
    2170:	1933      	adds	r3, r6, r4
    2172:	009b      	lsls	r3, r3, #2
    2174:	18c3      	adds	r3, r0, r3
    2176:	691b      	ldr	r3, [r3, #16]
    2178:	4698      	mov	r8, r3
    217a:	781f      	ldrb	r7, [r3, #0]
    217c:	0038      	movs	r0, r7
    217e:	4b29      	ldr	r3, [pc, #164]	; (2224 <menu_decrement_item+0xe0>)
    2180:	4798      	blx	r3
    2182:	1936      	adds	r6, r6, r4
    2184:	00b6      	lsls	r6, r6, #2
    2186:	19ad      	adds	r5, r5, r6
    2188:	69e9      	ldr	r1, [r5, #28]
    218a:	4b27      	ldr	r3, [pc, #156]	; (2228 <menu_decrement_item+0xe4>)
    218c:	4798      	blx	r3
    218e:	2800      	cmp	r0, #0
    2190:	d0ea      	beq.n	2168 <menu_decrement_item+0x24>
                (*(uint8_t *)m->items[m->curr_pos].variable)--;
    2192:	3f01      	subs	r7, #1
    2194:	4643      	mov	r3, r8
    2196:	701f      	strb	r7, [r3, #0]
    2198:	e7e6      	b.n	2168 <menu_decrement_item+0x24>
            if((*(uint16_t *)m->items[m->curr_pos].variable) > (m->items[m->curr_pos].val_min))
    219a:	00e6      	lsls	r6, r4, #3
    219c:	1933      	adds	r3, r6, r4
    219e:	009b      	lsls	r3, r3, #2
    21a0:	18c3      	adds	r3, r0, r3
    21a2:	691b      	ldr	r3, [r3, #16]
    21a4:	4698      	mov	r8, r3
    21a6:	881f      	ldrh	r7, [r3, #0]
    21a8:	0038      	movs	r0, r7
    21aa:	4b1e      	ldr	r3, [pc, #120]	; (2224 <menu_decrement_item+0xe0>)
    21ac:	4798      	blx	r3
    21ae:	1936      	adds	r6, r6, r4
    21b0:	00b6      	lsls	r6, r6, #2
    21b2:	19ad      	adds	r5, r5, r6
    21b4:	69e9      	ldr	r1, [r5, #28]
    21b6:	4b1c      	ldr	r3, [pc, #112]	; (2228 <menu_decrement_item+0xe4>)
    21b8:	4798      	blx	r3
    21ba:	2800      	cmp	r0, #0
    21bc:	d0d4      	beq.n	2168 <menu_decrement_item+0x24>
                (*(uint16_t *)m->items[m->curr_pos].variable)--;
    21be:	3f01      	subs	r7, #1
    21c0:	4643      	mov	r3, r8
    21c2:	801f      	strh	r7, [r3, #0]
    21c4:	e7d0      	b.n	2168 <menu_decrement_item+0x24>
            if((*(uint32_t *)m->items[m->curr_pos].variable) > (m->items[m->curr_pos].val_min))
    21c6:	00e6      	lsls	r6, r4, #3
    21c8:	1933      	adds	r3, r6, r4
    21ca:	009b      	lsls	r3, r3, #2
    21cc:	18c3      	adds	r3, r0, r3
    21ce:	691b      	ldr	r3, [r3, #16]
    21d0:	4698      	mov	r8, r3
    21d2:	681f      	ldr	r7, [r3, #0]
    21d4:	0038      	movs	r0, r7
    21d6:	4b15      	ldr	r3, [pc, #84]	; (222c <menu_decrement_item+0xe8>)
    21d8:	4798      	blx	r3
    21da:	1936      	adds	r6, r6, r4
    21dc:	00b6      	lsls	r6, r6, #2
    21de:	19ad      	adds	r5, r5, r6
    21e0:	69e9      	ldr	r1, [r5, #28]
    21e2:	4b11      	ldr	r3, [pc, #68]	; (2228 <menu_decrement_item+0xe4>)
    21e4:	4798      	blx	r3
    21e6:	2800      	cmp	r0, #0
    21e8:	d0be      	beq.n	2168 <menu_decrement_item+0x24>
                (*(uint32_t *)m->items[m->curr_pos].variable)--;
    21ea:	3f01      	subs	r7, #1
    21ec:	4643      	mov	r3, r8
    21ee:	601f      	str	r7, [r3, #0]
    21f0:	e7ba      	b.n	2168 <menu_decrement_item+0x24>
            if((*(float *)m->items[m->curr_pos].variable) > (m->items[m->curr_pos].val_min))
    21f2:	00e3      	lsls	r3, r4, #3
    21f4:	191a      	adds	r2, r3, r4
    21f6:	0092      	lsls	r2, r2, #2
    21f8:	1882      	adds	r2, r0, r2
    21fa:	6917      	ldr	r7, [r2, #16]
    21fc:	683e      	ldr	r6, [r7, #0]
    21fe:	69d1      	ldr	r1, [r2, #28]
    2200:	1c30      	adds	r0, r6, #0
    2202:	4b09      	ldr	r3, [pc, #36]	; (2228 <menu_decrement_item+0xe4>)
    2204:	4798      	blx	r3
    2206:	2800      	cmp	r0, #0
    2208:	d0ae      	beq.n	2168 <menu_decrement_item+0x24>
                (*(float *)m->items[m->curr_pos].variable) -= 0.1;
    220a:	1c30      	adds	r0, r6, #0
    220c:	4b08      	ldr	r3, [pc, #32]	; (2230 <menu_decrement_item+0xec>)
    220e:	4798      	blx	r3
    2210:	4a08      	ldr	r2, [pc, #32]	; (2234 <menu_decrement_item+0xf0>)
    2212:	4b09      	ldr	r3, [pc, #36]	; (2238 <menu_decrement_item+0xf4>)
    2214:	4c09      	ldr	r4, [pc, #36]	; (223c <menu_decrement_item+0xf8>)
    2216:	47a0      	blx	r4
    2218:	4b09      	ldr	r3, [pc, #36]	; (2240 <menu_decrement_item+0xfc>)
    221a:	4798      	blx	r3
    221c:	6038      	str	r0, [r7, #0]
}
    221e:	e7a3      	b.n	2168 <menu_decrement_item+0x24>
    2220:	00000265 	.word	0x00000265
    2224:	00004109 	.word	0x00004109
    2228:	00003795 	.word	0x00003795
    222c:	000041a9 	.word	0x000041a9
    2230:	00004e81 	.word	0x00004e81
    2234:	9999999a 	.word	0x9999999a
    2238:	3fb99999 	.word	0x3fb99999
    223c:	00004855 	.word	0x00004855
    2240:	00004f25 	.word	0x00004f25

00002244 <menu_swap>:
void menu_swap(MENU **dest, MENU *src)
{
    *dest = src;
    2244:	6001      	str	r1, [r0, #0]
    2246:	4770      	bx	lr

00002248 <USB_transmit_enable>:
void USB_recieve_disable(void) {
    USB_flags &= ~(1 << USB_RXR);
}

void USB_transmit_enable(void) {
    USB_flags |= (1 << USB_TXR);
    2248:	4a02      	ldr	r2, [pc, #8]	; (2254 <USB_transmit_enable+0xc>)
    224a:	7813      	ldrb	r3, [r2, #0]
    224c:	2104      	movs	r1, #4
    224e:	430b      	orrs	r3, r1
    2250:	7013      	strb	r3, [r2, #0]
}
    2252:	4770      	bx	lr
    2254:	20001b2c 	.word	0x20001b2c

00002258 <USB_transmit_callback>:
void USB_transmit_callback(struct usart_module *const usart_module) {
    2258:	b510      	push	{r4, lr}
    USB_transmit_enable();
    225a:	4b01      	ldr	r3, [pc, #4]	; (2260 <USB_transmit_callback+0x8>)
    225c:	4798      	blx	r3
}
    225e:	bd10      	pop	{r4, pc}
    2260:	00002249 	.word	0x00002249

00002264 <USB_transmit_disable>:

void USB_transmit_disable(void) {
    USB_flags &= ~(1 << USB_TXR);
    2264:	4a02      	ldr	r2, [pc, #8]	; (2270 <USB_transmit_disable+0xc>)
    2266:	7813      	ldrb	r3, [r2, #0]
    2268:	2104      	movs	r1, #4
    226a:	438b      	bics	r3, r1
    226c:	7013      	strb	r3, [r2, #0]
}
    226e:	4770      	bx	lr
    2270:	20001b2c 	.word	0x20001b2c

00002274 <USB_SendMessage>:
void USB_SendMessage (uint8_t *p_string, uint16_t length) {
    2274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2276:	0004      	movs	r4, r0
    2278:	000d      	movs	r5, r1
uint8_t USB_transmit_ready(void) {
    return USB_flags & (1 << USB_TXR);
    227a:	490b      	ldr	r1, [pc, #44]	; (22a8 <USB_SendMessage+0x34>)
    227c:	2204      	movs	r2, #4
    227e:	780b      	ldrb	r3, [r1, #0]
    while(!USB_transmit_ready());
    2280:	4213      	tst	r3, r2
    2282:	d0fc      	beq.n	227e <USB_SendMessage+0xa>
    USB_transmit_disable();
    2284:	4b09      	ldr	r3, [pc, #36]	; (22ac <USB_SendMessage+0x38>)
    2286:	4798      	blx	r3
    while(usart_write_buffer_job(&USB_instance, p_string, length) != STATUS_OK);
    2288:	4e09      	ldr	r6, [pc, #36]	; (22b0 <USB_SendMessage+0x3c>)
    228a:	4f0a      	ldr	r7, [pc, #40]	; (22b4 <USB_SendMessage+0x40>)
    228c:	002a      	movs	r2, r5
    228e:	0021      	movs	r1, r4
    2290:	0030      	movs	r0, r6
    2292:	47b8      	blx	r7
    2294:	2800      	cmp	r0, #0
    2296:	d1f9      	bne.n	228c <USB_SendMessage+0x18>
    while(usart_get_job_status(&USB_instance, USART_TRANSCEIVER_TX) != STATUS_OK);
    2298:	4d05      	ldr	r5, [pc, #20]	; (22b0 <USB_SendMessage+0x3c>)
    229a:	4c07      	ldr	r4, [pc, #28]	; (22b8 <USB_SendMessage+0x44>)
    229c:	2101      	movs	r1, #1
    229e:	0028      	movs	r0, r5
    22a0:	47a0      	blx	r4
    22a2:	2800      	cmp	r0, #0
    22a4:	d1fa      	bne.n	229c <USB_SendMessage+0x28>
}
    22a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22a8:	20001b2c 	.word	0x20001b2c
    22ac:	00002265 	.word	0x00002265
    22b0:	20001af8 	.word	0x20001af8
    22b4:	000018e1 	.word	0x000018e1
    22b8:	00001901 	.word	0x00001901

000022bc <configure_USB_callbacks>:

unsigned char *USB_get_rx_buf(void) {
    return USB_RxBuf;
}

void configure_USB_callbacks(void) {
    22bc:	b510      	push	{r4, lr}
    usart_register_callback(&USB_instance, USB_transmit_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    22be:	4c08      	ldr	r4, [pc, #32]	; (22e0 <configure_USB_callbacks+0x24>)
    22c0:	2200      	movs	r2, #0
    22c2:	4908      	ldr	r1, [pc, #32]	; (22e4 <configure_USB_callbacks+0x28>)
    22c4:	0020      	movs	r0, r4
    22c6:	4b08      	ldr	r3, [pc, #32]	; (22e8 <configure_USB_callbacks+0x2c>)
    22c8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    22ca:	2231      	movs	r2, #49	; 0x31
    22cc:	5ca3      	ldrb	r3, [r4, r2]
    22ce:	2101      	movs	r1, #1
    22d0:	430b      	orrs	r3, r1
    22d2:	54a3      	strb	r3, [r4, r2]
    //usart_register_callback(&USB_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);

    usart_enable_callback(&USB_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    //usart_enable_callback(&USB_instance, USART_CALLBACK_BUFFER_RECEIVED);
    usart_read_job(&USB_instance, &c);
    22d4:	4905      	ldr	r1, [pc, #20]	; (22ec <configure_USB_callbacks+0x30>)
    22d6:	0020      	movs	r0, r4
    22d8:	4b05      	ldr	r3, [pc, #20]	; (22f0 <configure_USB_callbacks+0x34>)
    22da:	4798      	blx	r3
}
    22dc:	bd10      	pop	{r4, pc}
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	20001af8 	.word	0x20001af8
    22e4:	00002259 	.word	0x00002259
    22e8:	000018b9 	.word	0x000018b9
    22ec:	2000188e 	.word	0x2000188e
    22f0:	000018d1 	.word	0x000018d1

000022f4 <configure_USB>:
void configure_USB(void) {
    22f4:	b530      	push	{r4, r5, lr}
    22f6:	b093      	sub	sp, #76	; 0x4c
	config->data_order       = USART_DATAORDER_LSB;
    22f8:	2380      	movs	r3, #128	; 0x80
    22fa:	05db      	lsls	r3, r3, #23
    22fc:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    22fe:	2300      	movs	r3, #0
    2300:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2302:	22ff      	movs	r2, #255	; 0xff
    2304:	4669      	mov	r1, sp
    2306:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2308:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    230a:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    230c:	2101      	movs	r1, #1
    230e:	222c      	movs	r2, #44	; 0x2c
    2310:	4668      	mov	r0, sp
    2312:	5481      	strb	r1, [r0, r2]
	config->transmitter_enable = true;
    2314:	3201      	adds	r2, #1
    2316:	5481      	strb	r1, [r0, r2]
	config->clock_polarity_inverted = false;
    2318:	3201      	adds	r2, #1
    231a:	5483      	strb	r3, [r0, r2]
	config->use_external_clock = false;
    231c:	3201      	adds	r2, #1
    231e:	5483      	strb	r3, [r0, r2]
	config->ext_clock_freq   = 0;
    2320:	930c      	str	r3, [sp, #48]	; 0x30
	config->run_in_standby   = false;
    2322:	3205      	adds	r2, #5
    2324:	5483      	strb	r3, [r0, r2]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2326:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2328:	2200      	movs	r2, #0
    232a:	8203      	strh	r3, [r0, #16]
	config->lin_slave_enable      = false;
    232c:	76c2      	strb	r2, [r0, #27]
	config->lin_node = LIN_INVALID_MODE;
    232e:	9307      	str	r3, [sp, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    2330:	8403      	strh	r3, [r0, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    2332:	8443      	strh	r3, [r0, #34]	; 0x22
	config->immediate_buffer_overflow_notification  = false;
    2334:	7602      	strb	r2, [r0, #24]
	config->encoding_format_enable                  = false;
    2336:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    2338:	2313      	movs	r3, #19
    233a:	7683      	strb	r3, [r0, #26]
	config->collision_detection_enable              = false;
    233c:	3313      	adds	r3, #19
    233e:	54c2      	strb	r2, [r0, r3]
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    2340:	3b01      	subs	r3, #1
    2342:	54c2      	strb	r2, [r0, r3]
    config_usart.baudrate    =					250000;
    2344:	4b2f      	ldr	r3, [pc, #188]	; (2404 <configure_USB+0x110>)
    2346:	930a      	str	r3, [sp, #40]	; 0x28
    config_usart.mux_setting =					USART_RX_1_TX_0_XCK_1;
    2348:	2380      	movs	r3, #128	; 0x80
    234a:	035b      	lsls	r3, r3, #13
    234c:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 =					PINMUX_PA16C_SERCOM1_PAD0;
    234e:	4b2e      	ldr	r3, [pc, #184]	; (2408 <configure_USB+0x114>)
    2350:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad1 =					PINMUX_PA17C_SERCOM1_PAD1;
    2352:	4b2e      	ldr	r3, [pc, #184]	; (240c <configure_USB+0x118>)
    2354:	930f      	str	r3, [sp, #60]	; 0x3c
    config_usart.pinmux_pad2 =					PINMUX_UNUSED;
    2356:	2301      	movs	r3, #1
    2358:	425b      	negs	r3, r3
    235a:	9310      	str	r3, [sp, #64]	; 0x40
    config_usart.pinmux_pad3 =					PINMUX_UNUSED;
    235c:	9311      	str	r3, [sp, #68]	; 0x44
    config_usart.generator_source =				GCLK_GENERATOR_3;
    235e:	2203      	movs	r2, #3
    2360:	3336      	adds	r3, #54	; 0x36
    2362:	54c2      	strb	r2, [r0, r3]
    config_usart.start_frame_detection_enable = true;
    2364:	3b11      	subs	r3, #17
    2366:	54c1      	strb	r1, [r0, r3]
    while (usart_init(&USB_instance, USB_MODULE, &config_usart) != STATUS_OK);
    2368:	4d29      	ldr	r5, [pc, #164]	; (2410 <configure_USB+0x11c>)
    236a:	4c2a      	ldr	r4, [pc, #168]	; (2414 <configure_USB+0x120>)
    236c:	466a      	mov	r2, sp
    236e:	492a      	ldr	r1, [pc, #168]	; (2418 <configure_USB+0x124>)
    2370:	0028      	movs	r0, r5
    2372:	47a0      	blx	r4
    2374:	2800      	cmp	r0, #0
    2376:	d1f9      	bne.n	236c <configure_USB+0x78>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2378:	4d25      	ldr	r5, [pc, #148]	; (2410 <configure_USB+0x11c>)
    237a:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    237c:	0020      	movs	r0, r4
    237e:	4b27      	ldr	r3, [pc, #156]	; (241c <configure_USB+0x128>)
    2380:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2382:	231f      	movs	r3, #31
    2384:	4018      	ands	r0, r3
    2386:	3b1e      	subs	r3, #30
    2388:	4083      	lsls	r3, r0
    238a:	4a25      	ldr	r2, [pc, #148]	; (2420 <configure_USB+0x12c>)
    238c:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    238e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2390:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2392:	2b00      	cmp	r3, #0
    2394:	d1fc      	bne.n	2390 <configure_USB+0x9c>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2396:	6823      	ldr	r3, [r4, #0]
    2398:	2202      	movs	r2, #2
    239a:	4313      	orrs	r3, r2
    239c:	6023      	str	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    239e:	4b1c      	ldr	r3, [pc, #112]	; (2410 <configure_USB+0x11c>)
    23a0:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    23a2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    23a4:	2a00      	cmp	r2, #0
    23a6:	d1fc      	bne.n	23a2 <configure_USB+0xae>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    23a8:	6859      	ldr	r1, [r3, #4]
    23aa:	2280      	movs	r2, #128	; 0x80
    23ac:	0252      	lsls	r2, r2, #9
    23ae:	430a      	orrs	r2, r1
    23b0:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    23b2:	2101      	movs	r1, #1
    23b4:	4a16      	ldr	r2, [pc, #88]	; (2410 <configure_USB+0x11c>)
    23b6:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    23b8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    23ba:	2a00      	cmp	r2, #0
    23bc:	d1fc      	bne.n	23b8 <configure_USB+0xc4>
	return (usart_hw->SYNCBUSY.reg);
    23be:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    23c0:	2a00      	cmp	r2, #0
    23c2:	d1fc      	bne.n	23be <configure_USB+0xca>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    23c4:	6859      	ldr	r1, [r3, #4]
    23c6:	2280      	movs	r2, #128	; 0x80
    23c8:	0292      	lsls	r2, r2, #10
    23ca:	430a      	orrs	r2, r1
    23cc:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    23ce:	2101      	movs	r1, #1
    23d0:	4a0f      	ldr	r2, [pc, #60]	; (2410 <configure_USB+0x11c>)
    23d2:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    23d4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    23d6:	2a00      	cmp	r2, #0
    23d8:	d1fc      	bne.n	23d4 <configure_USB+0xe0>
    delay_ms(1);
    23da:	2000      	movs	r0, #0
    23dc:	4b11      	ldr	r3, [pc, #68]	; (2424 <configure_USB+0x130>)
    23de:	4798      	blx	r3
    23e0:	0002      	movs	r2, r0
    23e2:	2300      	movs	r3, #0
    23e4:	4810      	ldr	r0, [pc, #64]	; (2428 <configure_USB+0x134>)
    23e6:	2100      	movs	r1, #0
    23e8:	1880      	adds	r0, r0, r2
    23ea:	4159      	adcs	r1, r3
    23ec:	4a0f      	ldr	r2, [pc, #60]	; (242c <configure_USB+0x138>)
    23ee:	2300      	movs	r3, #0
    23f0:	4c0f      	ldr	r4, [pc, #60]	; (2430 <configure_USB+0x13c>)
    23f2:	47a0      	blx	r4
    23f4:	4b0f      	ldr	r3, [pc, #60]	; (2434 <configure_USB+0x140>)
    23f6:	4798      	blx	r3
    configure_USB_callbacks();
    23f8:	4b0f      	ldr	r3, [pc, #60]	; (2438 <configure_USB+0x144>)
    23fa:	4798      	blx	r3
    USB_transmit_enable();
    23fc:	4b0f      	ldr	r3, [pc, #60]	; (243c <configure_USB+0x148>)
    23fe:	4798      	blx	r3
}
    2400:	b013      	add	sp, #76	; 0x4c
    2402:	bd30      	pop	{r4, r5, pc}
    2404:	0003d090 	.word	0x0003d090
    2408:	00100002 	.word	0x00100002
    240c:	00110002 	.word	0x00110002
    2410:	20001af8 	.word	0x20001af8
    2414:	00001481 	.word	0x00001481
    2418:	42000800 	.word	0x42000800
    241c:	00001af9 	.word	0x00001af9
    2420:	e000e100 	.word	0xe000e100
    2424:	00002949 	.word	0x00002949
    2428:	00001b57 	.word	0x00001b57
    242c:	00001b58 	.word	0x00001b58
    2430:	000037bd 	.word	0x000037bd
    2434:	20000001 	.word	0x20000001
    2438:	000022bd 	.word	0x000022bd
    243c:	00002249 	.word	0x00002249

00002440 <millis>:
volatile uint32_t last_tick_time = 0;
ENCODER encoder;
ENCODER_POS encoder_pos;
uint32_t millis(void)
{
    return proc_millis;
    2440:	4b01      	ldr	r3, [pc, #4]	; (2448 <millis+0x8>)
    2442:	6818      	ldr	r0, [r3, #0]
}
    2444:	4770      	bx	lr
    2446:	46c0      	nop			; (mov r8, r8)
    2448:	200000c8 	.word	0x200000c8

0000244c <get_encoder_status>:

ENCODER get_encoder_status(void)
{
    return encoder;
    244c:	4b01      	ldr	r3, [pc, #4]	; (2454 <get_encoder_status+0x8>)
    244e:	7818      	ldrb	r0, [r3, #0]
    encoder_pos = POS_NONE;
    encoder = IDLE;
}
    2450:	4770      	bx	lr
    2452:	46c0      	nop			; (mov r8, r8)
    2454:	20001d3c 	.word	0x20001d3c

00002458 <process_encoder>:
    2458:	4b26      	ldr	r3, [pc, #152]	; (24f4 <process_encoder+0x9c>)
    245a:	6a1a      	ldr	r2, [r3, #32]
    245c:	6a19      	ldr	r1, [r3, #32]

void process_encoder(void)
{
    uint8_t status = 0;
    status |= (!port_pin_get_input_level(PIN_ENC_B)) << 0;
    status |= (!port_pin_get_input_level(PIN_ENC_A)) << 1;
    245e:	0dc9      	lsrs	r1, r1, #23
    2460:	2001      	movs	r0, #1
    2462:	0003      	movs	r3, r0
    2464:	438b      	bics	r3, r1
    2466:	005b      	lsls	r3, r3, #1
    status |= (!port_pin_get_input_level(PIN_ENC_B)) << 0;
    2468:	0d92      	lsrs	r2, r2, #22
    246a:	4042      	eors	r2, r0
    246c:	2101      	movs	r1, #1
    246e:	400a      	ands	r2, r1
    status |= (!port_pin_get_input_level(PIN_ENC_A)) << 1;
    2470:	4313      	orrs	r3, r2

    switch(status) {
    2472:	2b01      	cmp	r3, #1
    2474:	d009      	beq.n	248a <process_encoder+0x32>
    2476:	2b02      	cmp	r3, #2
    2478:	d021      	beq.n	24be <process_encoder+0x66>
    247a:	2b00      	cmp	r3, #0
    247c:	d000      	beq.n	2480 <process_encoder+0x28>
            break;
        default:
            break;
    }

}
    247e:	4770      	bx	lr
            encoder_pos = POS_NONE;
    2480:	4a1d      	ldr	r2, [pc, #116]	; (24f8 <process_encoder+0xa0>)
    2482:	7013      	strb	r3, [r2, #0]
            encoder = IDLE;
    2484:	4a1d      	ldr	r2, [pc, #116]	; (24fc <process_encoder+0xa4>)
    2486:	7013      	strb	r3, [r2, #0]
            break;
    2488:	e7f9      	b.n	247e <process_encoder+0x26>
            if(encoder_pos == POS_NONE) {
    248a:	4b1b      	ldr	r3, [pc, #108]	; (24f8 <process_encoder+0xa0>)
    248c:	781b      	ldrb	r3, [r3, #0]
    248e:	2b00      	cmp	r3, #0
    2490:	d008      	beq.n	24a4 <process_encoder+0x4c>
            if(encoder_pos == POS_B) {
    2492:	2b02      	cmp	r3, #2
    2494:	d1f3      	bne.n	247e <process_encoder+0x26>
                encoder_pos = POS_NONE;
    2496:	2200      	movs	r2, #0
    2498:	4b17      	ldr	r3, [pc, #92]	; (24f8 <process_encoder+0xa0>)
    249a:	701a      	strb	r2, [r3, #0]
                encoder = FORWARD;
    249c:	3201      	adds	r2, #1
    249e:	4b17      	ldr	r3, [pc, #92]	; (24fc <process_encoder+0xa4>)
    24a0:	701a      	strb	r2, [r3, #0]
    24a2:	e7ec      	b.n	247e <process_encoder+0x26>
                encoder_pos = POS_A;
    24a4:	2201      	movs	r2, #1
    24a6:	4b14      	ldr	r3, [pc, #80]	; (24f8 <process_encoder+0xa0>)
    24a8:	701a      	strb	r2, [r3, #0]
    return proc_millis;
    24aa:	4915      	ldr	r1, [pc, #84]	; (2500 <process_encoder+0xa8>)
    24ac:	680b      	ldr	r3, [r1, #0]
                encoder_timer = millis()-last_tick_time;
    24ae:	4a15      	ldr	r2, [pc, #84]	; (2504 <process_encoder+0xac>)
    24b0:	6810      	ldr	r0, [r2, #0]
    24b2:	1a1b      	subs	r3, r3, r0
    24b4:	4814      	ldr	r0, [pc, #80]	; (2508 <process_encoder+0xb0>)
    24b6:	6003      	str	r3, [r0, #0]
    return proc_millis;
    24b8:	680b      	ldr	r3, [r1, #0]
                last_tick_time=millis();
    24ba:	6013      	str	r3, [r2, #0]
    24bc:	e7df      	b.n	247e <process_encoder+0x26>
            if(encoder_pos == POS_NONE) {
    24be:	4b0e      	ldr	r3, [pc, #56]	; (24f8 <process_encoder+0xa0>)
    24c0:	781b      	ldrb	r3, [r3, #0]
    24c2:	2b00      	cmp	r3, #0
    24c4:	d008      	beq.n	24d8 <process_encoder+0x80>
            if(encoder_pos == POS_A) {
    24c6:	2b01      	cmp	r3, #1
    24c8:	d1d9      	bne.n	247e <process_encoder+0x26>
                encoder_pos = POS_NONE;
    24ca:	2200      	movs	r2, #0
    24cc:	4b0a      	ldr	r3, [pc, #40]	; (24f8 <process_encoder+0xa0>)
    24ce:	701a      	strb	r2, [r3, #0]
                encoder = BACKWARD;
    24d0:	3202      	adds	r2, #2
    24d2:	4b0a      	ldr	r3, [pc, #40]	; (24fc <process_encoder+0xa4>)
    24d4:	701a      	strb	r2, [r3, #0]
}
    24d6:	e7d2      	b.n	247e <process_encoder+0x26>
                encoder_pos = POS_B;
    24d8:	2202      	movs	r2, #2
    24da:	4b07      	ldr	r3, [pc, #28]	; (24f8 <process_encoder+0xa0>)
    24dc:	701a      	strb	r2, [r3, #0]
    return proc_millis;
    24de:	4908      	ldr	r1, [pc, #32]	; (2500 <process_encoder+0xa8>)
    24e0:	680b      	ldr	r3, [r1, #0]
                encoder_timer = millis()-last_tick_time;
    24e2:	4a08      	ldr	r2, [pc, #32]	; (2504 <process_encoder+0xac>)
    24e4:	6810      	ldr	r0, [r2, #0]
    24e6:	1a1b      	subs	r3, r3, r0
    24e8:	4807      	ldr	r0, [pc, #28]	; (2508 <process_encoder+0xb0>)
    24ea:	6003      	str	r3, [r0, #0]
    return proc_millis;
    24ec:	680b      	ldr	r3, [r1, #0]
                last_tick_time=millis();
    24ee:	6013      	str	r3, [r2, #0]
    24f0:	e7c5      	b.n	247e <process_encoder+0x26>
    24f2:	46c0      	nop			; (mov r8, r8)
    24f4:	41000080 	.word	0x41000080
    24f8:	20001d44 	.word	0x20001d44
    24fc:	20001d3c 	.word	0x20001d3c
    2500:	200000c8 	.word	0x200000c8
    2504:	200000c4 	.word	0x200000c4
    2508:	200000c0 	.word	0x200000c0

0000250c <timer0_compare_callback>:
    a3 = adsr3;
    a4 = adsr4;
}

void timer0_compare_callback(struct tcc_module *const module_inst)
{
    250c:	b510      	push	{r4, lr}
    process_ADSR(a0);
    250e:	4b0b      	ldr	r3, [pc, #44]	; (253c <timer0_compare_callback+0x30>)
    2510:	6818      	ldr	r0, [r3, #0]
    2512:	4c0b      	ldr	r4, [pc, #44]	; (2540 <timer0_compare_callback+0x34>)
    2514:	47a0      	blx	r4
    process_ADSR(a1);
    2516:	4b0b      	ldr	r3, [pc, #44]	; (2544 <timer0_compare_callback+0x38>)
    2518:	6818      	ldr	r0, [r3, #0]
    251a:	47a0      	blx	r4
    process_ADSR(a2);
    251c:	4b0a      	ldr	r3, [pc, #40]	; (2548 <timer0_compare_callback+0x3c>)
    251e:	6818      	ldr	r0, [r3, #0]
    2520:	47a0      	blx	r4
    process_ADSR(a3);
    2522:	4b0a      	ldr	r3, [pc, #40]	; (254c <timer0_compare_callback+0x40>)
    2524:	6818      	ldr	r0, [r3, #0]
    2526:	47a0      	blx	r4
    process_ADSR(a4);
    2528:	4b09      	ldr	r3, [pc, #36]	; (2550 <timer0_compare_callback+0x44>)
    252a:	6818      	ldr	r0, [r3, #0]
    252c:	47a0      	blx	r4
    proc_millis++;
    252e:	4a09      	ldr	r2, [pc, #36]	; (2554 <timer0_compare_callback+0x48>)
    2530:	6813      	ldr	r3, [r2, #0]
    2532:	3301      	adds	r3, #1
    2534:	6013      	str	r3, [r2, #0]
    process_encoder();
    2536:	4b08      	ldr	r3, [pc, #32]	; (2558 <timer0_compare_callback+0x4c>)
    2538:	4798      	blx	r3
}
    253a:	bd10      	pop	{r4, pc}
    253c:	20001d8c 	.word	0x20001d8c
    2540:	00000585 	.word	0x00000585
    2544:	20001d38 	.word	0x20001d38
    2548:	20001d48 	.word	0x20001d48
    254c:	20001d40 	.word	0x20001d40
    2550:	20001d90 	.word	0x20001d90
    2554:	200000c8 	.word	0x200000c8
    2558:	00002459 	.word	0x00002459

0000255c <configure_tcc0>:
{
    255c:	b570      	push	{r4, r5, r6, lr}
    255e:	b0aa      	sub	sp, #168	; 0xa8
    tcc_get_config_defaults(&config_tcc, TCC0);
    2560:	4e0e      	ldr	r6, [pc, #56]	; (259c <configure_tcc0+0x40>)
    2562:	ac01      	add	r4, sp, #4
    2564:	0031      	movs	r1, r6
    2566:	0020      	movs	r0, r4
    2568:	4b0d      	ldr	r3, [pc, #52]	; (25a0 <configure_tcc0+0x44>)
    256a:	4798      	blx	r3
    config_tcc.counter.clock_source = GCLK_GENERATOR_6;
    256c:	2306      	movs	r3, #6
    256e:	72a3      	strb	r3, [r4, #10]
    config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV16;
    2570:	3b02      	subs	r3, #2
    2572:	72e3      	strb	r3, [r4, #11]
    config_tcc.counter.period = 250;
    2574:	33f6      	adds	r3, #246	; 0xf6
    2576:	6063      	str	r3, [r4, #4]
    tcc_init(&tcc0_instance, TCC0, &config_tcc);
    2578:	4d0a      	ldr	r5, [pc, #40]	; (25a4 <configure_tcc0+0x48>)
    257a:	0022      	movs	r2, r4
    257c:	0031      	movs	r1, r6
    257e:	0028      	movs	r0, r5
    2580:	4b09      	ldr	r3, [pc, #36]	; (25a8 <configure_tcc0+0x4c>)
    2582:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    2584:	682a      	ldr	r2, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    2586:	2102      	movs	r1, #2
    2588:	6893      	ldr	r3, [r2, #8]
    258a:	4219      	tst	r1, r3
    258c:	d1fc      	bne.n	2588 <configure_tcc0+0x2c>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    258e:	6813      	ldr	r3, [r2, #0]
    2590:	2102      	movs	r1, #2
    2592:	430b      	orrs	r3, r1
    2594:	6013      	str	r3, [r2, #0]
}
    2596:	b02a      	add	sp, #168	; 0xa8
    2598:	bd70      	pop	{r4, r5, r6, pc}
    259a:	46c0      	nop			; (mov r8, r8)
    259c:	42002400 	.word	0x42002400
    25a0:	00000e7d 	.word	0x00000e7d
    25a4:	20001d4c 	.word	0x20001d4c
    25a8:	00000fc9 	.word	0x00000fc9

000025ac <configure_tcc0_callbacks>:
{
    25ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    25ae:	46c6      	mov	lr, r8
    25b0:	b500      	push	{lr}
    25b2:	4680      	mov	r8, r0
    25b4:	000f      	movs	r7, r1
    25b6:	0016      	movs	r6, r2
    25b8:	001d      	movs	r5, r3
    process_encoder();
    25ba:	4b0d      	ldr	r3, [pc, #52]	; (25f0 <configure_tcc0_callbacks+0x44>)
    25bc:	4798      	blx	r3
    tcc_register_callback(&tcc0_instance, timer0_compare_callback, TCC_CALLBACK_OVERFLOW);
    25be:	4c0d      	ldr	r4, [pc, #52]	; (25f4 <configure_tcc0_callbacks+0x48>)
    25c0:	2200      	movs	r2, #0
    25c2:	490d      	ldr	r1, [pc, #52]	; (25f8 <configure_tcc0_callbacks+0x4c>)
    25c4:	0020      	movs	r0, r4
    25c6:	4b0d      	ldr	r3, [pc, #52]	; (25fc <configure_tcc0_callbacks+0x50>)
    25c8:	4798      	blx	r3
    tcc_enable_callback(&tcc0_instance, TCC_CALLBACK_OVERFLOW);
    25ca:	2100      	movs	r1, #0
    25cc:	0020      	movs	r0, r4
    25ce:	4b0c      	ldr	r3, [pc, #48]	; (2600 <configure_tcc0_callbacks+0x54>)
    25d0:	4798      	blx	r3
    a0 = adsr0;
    25d2:	4b0c      	ldr	r3, [pc, #48]	; (2604 <configure_tcc0_callbacks+0x58>)
    25d4:	4642      	mov	r2, r8
    25d6:	601a      	str	r2, [r3, #0]
    a1 = adsr1;
    25d8:	4b0b      	ldr	r3, [pc, #44]	; (2608 <configure_tcc0_callbacks+0x5c>)
    25da:	601f      	str	r7, [r3, #0]
    a2 = adsr2;
    25dc:	4b0b      	ldr	r3, [pc, #44]	; (260c <configure_tcc0_callbacks+0x60>)
    25de:	601e      	str	r6, [r3, #0]
    a3 = adsr3;
    25e0:	4b0b      	ldr	r3, [pc, #44]	; (2610 <configure_tcc0_callbacks+0x64>)
    25e2:	601d      	str	r5, [r3, #0]
    a4 = adsr4;
    25e4:	4b0b      	ldr	r3, [pc, #44]	; (2614 <configure_tcc0_callbacks+0x68>)
    25e6:	9a06      	ldr	r2, [sp, #24]
    25e8:	601a      	str	r2, [r3, #0]
}
    25ea:	bc04      	pop	{r2}
    25ec:	4690      	mov	r8, r2
    25ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25f0:	00002459 	.word	0x00002459
    25f4:	20001d4c 	.word	0x20001d4c
    25f8:	0000250d 	.word	0x0000250d
    25fc:	000013ad 	.word	0x000013ad
    2600:	000013c5 	.word	0x000013c5
    2604:	20001d8c 	.word	0x20001d8c
    2608:	20001d38 	.word	0x20001d38
    260c:	20001d48 	.word	0x20001d48
    2610:	20001d40 	.word	0x20001d40
    2614:	20001d90 	.word	0x20001d90

00002618 <get_encoder_speed>:
uint8_t get_encoder_speed(void)
{
    if(encoder_timer>50)return 1;
    2618:	4b08      	ldr	r3, [pc, #32]	; (263c <get_encoder_speed+0x24>)
    261a:	681b      	ldr	r3, [r3, #0]
    261c:	2001      	movs	r0, #1
    261e:	2b32      	cmp	r3, #50	; 0x32
    2620:	d804      	bhi.n	262c <get_encoder_speed+0x14>
    if(encoder_timer>35)return 3;
    2622:	4b06      	ldr	r3, [pc, #24]	; (263c <get_encoder_speed+0x24>)
    2624:	681b      	ldr	r3, [r3, #0]
    2626:	3002      	adds	r0, #2
    2628:	2b23      	cmp	r3, #35	; 0x23
    262a:	d900      	bls.n	262e <get_encoder_speed+0x16>
    if(encoder_timer>15)return 5;
    return 10;
    262c:	4770      	bx	lr
    if(encoder_timer>15)return 5;
    262e:	4b03      	ldr	r3, [pc, #12]	; (263c <get_encoder_speed+0x24>)
    2630:	681b      	ldr	r3, [r3, #0]
    2632:	3002      	adds	r0, #2
    2634:	2b0f      	cmp	r3, #15
    2636:	d8f9      	bhi.n	262c <get_encoder_speed+0x14>
    return 10;
    2638:	3005      	adds	r0, #5
    263a:	e7f7      	b.n	262c <get_encoder_speed+0x14>
    263c:	200000c0 	.word	0x200000c0

00002640 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2640:	4770      	bx	lr
	...

00002644 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2644:	4b0c      	ldr	r3, [pc, #48]	; (2678 <cpu_irq_enter_critical+0x34>)
    2646:	681b      	ldr	r3, [r3, #0]
    2648:	2b00      	cmp	r3, #0
    264a:	d106      	bne.n	265a <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    264c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2650:	2b00      	cmp	r3, #0
    2652:	d007      	beq.n	2664 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2654:	2200      	movs	r2, #0
    2656:	4b09      	ldr	r3, [pc, #36]	; (267c <cpu_irq_enter_critical+0x38>)
    2658:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    265a:	4a07      	ldr	r2, [pc, #28]	; (2678 <cpu_irq_enter_critical+0x34>)
    265c:	6813      	ldr	r3, [r2, #0]
    265e:	3301      	adds	r3, #1
    2660:	6013      	str	r3, [r2, #0]
}
    2662:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2664:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2666:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    266a:	2200      	movs	r2, #0
    266c:	4b04      	ldr	r3, [pc, #16]	; (2680 <cpu_irq_enter_critical+0x3c>)
    266e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2670:	3201      	adds	r2, #1
    2672:	4b02      	ldr	r3, [pc, #8]	; (267c <cpu_irq_enter_critical+0x38>)
    2674:	701a      	strb	r2, [r3, #0]
    2676:	e7f0      	b.n	265a <cpu_irq_enter_critical+0x16>
    2678:	200000cc 	.word	0x200000cc
    267c:	200000d0 	.word	0x200000d0
    2680:	20000014 	.word	0x20000014

00002684 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2684:	4b08      	ldr	r3, [pc, #32]	; (26a8 <cpu_irq_leave_critical+0x24>)
    2686:	681a      	ldr	r2, [r3, #0]
    2688:	3a01      	subs	r2, #1
    268a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    268c:	681b      	ldr	r3, [r3, #0]
    268e:	2b00      	cmp	r3, #0
    2690:	d109      	bne.n	26a6 <cpu_irq_leave_critical+0x22>
    2692:	4b06      	ldr	r3, [pc, #24]	; (26ac <cpu_irq_leave_critical+0x28>)
    2694:	781b      	ldrb	r3, [r3, #0]
    2696:	2b00      	cmp	r3, #0
    2698:	d005      	beq.n	26a6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    269a:	2201      	movs	r2, #1
    269c:	4b04      	ldr	r3, [pc, #16]	; (26b0 <cpu_irq_leave_critical+0x2c>)
    269e:	701a      	strb	r2, [r3, #0]
    26a0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    26a4:	b662      	cpsie	i
	}
}
    26a6:	4770      	bx	lr
    26a8:	200000cc 	.word	0x200000cc
    26ac:	200000d0 	.word	0x200000d0
    26b0:	20000014 	.word	0x20000014

000026b4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    26b4:	b510      	push	{r4, lr}
	switch (clock_source) {
    26b6:	2807      	cmp	r0, #7
    26b8:	d803      	bhi.n	26c2 <system_clock_source_get_hz+0xe>
    26ba:	0080      	lsls	r0, r0, #2
    26bc:	4b0f      	ldr	r3, [pc, #60]	; (26fc <system_clock_source_get_hz+0x48>)
    26be:	581b      	ldr	r3, [r3, r0]
    26c0:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    26c2:	2000      	movs	r0, #0
    26c4:	e018      	b.n	26f8 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
    26c6:	4b0e      	ldr	r3, [pc, #56]	; (2700 <system_clock_source_get_hz+0x4c>)
    26c8:	6858      	ldr	r0, [r3, #4]
    26ca:	e015      	b.n	26f8 <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    26cc:	4b0d      	ldr	r3, [pc, #52]	; (2704 <system_clock_source_get_hz+0x50>)
    26ce:	7d59      	ldrb	r1, [r3, #21]
    26d0:	0709      	lsls	r1, r1, #28
    26d2:	0f09      	lsrs	r1, r1, #28
    26d4:	3101      	adds	r1, #1
    26d6:	480c      	ldr	r0, [pc, #48]	; (2708 <system_clock_source_get_hz+0x54>)
    26d8:	4b0c      	ldr	r3, [pc, #48]	; (270c <system_clock_source_get_hz+0x58>)
    26da:	4798      	blx	r3
    26dc:	e00c      	b.n	26f8 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
    26de:	4b08      	ldr	r3, [pc, #32]	; (2700 <system_clock_source_get_hz+0x4c>)
    26e0:	6898      	ldr	r0, [r3, #8]
    26e2:	e009      	b.n	26f8 <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    26e4:	4b07      	ldr	r3, [pc, #28]	; (2704 <system_clock_source_get_hz+0x50>)
    26e6:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    26e8:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    26ea:	079b      	lsls	r3, r3, #30
    26ec:	d504      	bpl.n	26f8 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
    26ee:	4b04      	ldr	r3, [pc, #16]	; (2700 <system_clock_source_get_hz+0x4c>)
    26f0:	6818      	ldr	r0, [r3, #0]
    26f2:	e001      	b.n	26f8 <system_clock_source_get_hz+0x44>
		return 32768UL;
    26f4:	2080      	movs	r0, #128	; 0x80
    26f6:	0200      	lsls	r0, r0, #8
	}
}
    26f8:	bd10      	pop	{r4, pc}
    26fa:	46c0      	nop			; (mov r8, r8)
    26fc:	00005a58 	.word	0x00005a58
    2700:	200000d4 	.word	0x200000d4
    2704:	40001000 	.word	0x40001000
    2708:	02dc6c00 	.word	0x02dc6c00
    270c:	00003631 	.word	0x00003631

00002710 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    2710:	b5f0      	push	{r4, r5, r6, r7, lr}
    2712:	46ce      	mov	lr, r9
    2714:	4647      	mov	r7, r8
    2716:	b580      	push	{r7, lr}
    2718:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    271a:	2203      	movs	r2, #3
    271c:	4b3f      	ldr	r3, [pc, #252]	; (281c <system_clock_init+0x10c>)
    271e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2720:	4a3f      	ldr	r2, [pc, #252]	; (2820 <system_clock_init+0x110>)
    2722:	6853      	ldr	r3, [r2, #4]
    2724:	211e      	movs	r1, #30
    2726:	438b      	bics	r3, r1
    2728:	6053      	str	r3, [r2, #4]
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    272a:	4a3e      	ldr	r2, [pc, #248]	; (2824 <system_clock_init+0x114>)
    272c:	7d13      	ldrb	r3, [r2, #20]
    272e:	3162      	adds	r1, #98	; 0x62
    2730:	430b      	orrs	r3, r1
    2732:	7513      	strb	r3, [r2, #20]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2734:	4b3c      	ldr	r3, [pc, #240]	; (2828 <system_clock_init+0x118>)
    2736:	4798      	blx	r3
	config->division_factor    = 1;
    2738:	ac01      	add	r4, sp, #4
    273a:	2601      	movs	r6, #1
    273c:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    273e:	2500      	movs	r5, #0
    2740:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    2742:	2306      	movs	r3, #6
    2744:	4699      	mov	r9, r3
    2746:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    2748:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    274a:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    274c:	0021      	movs	r1, r4
    274e:	2001      	movs	r0, #1
    2750:	4b36      	ldr	r3, [pc, #216]	; (282c <system_clock_init+0x11c>)
    2752:	4698      	mov	r8, r3
    2754:	4798      	blx	r3
    2756:	2001      	movs	r0, #1
    2758:	4f35      	ldr	r7, [pc, #212]	; (2830 <system_clock_init+0x120>)
    275a:	47b8      	blx	r7
	config->division_factor    = 1;
    275c:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    275e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    2760:	464b      	mov	r3, r9
    2762:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    2764:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2766:	7265      	strb	r5, [r4, #9]
    2768:	0021      	movs	r1, r4
    276a:	2002      	movs	r0, #2
    276c:	47c0      	blx	r8
    276e:	2002      	movs	r0, #2
    2770:	47b8      	blx	r7
	config->division_factor    = 1;
    2772:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    2774:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    2776:	464b      	mov	r3, r9
    2778:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    277a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    277c:	7265      	strb	r5, [r4, #9]
    277e:	0021      	movs	r1, r4
    2780:	2003      	movs	r0, #3
    2782:	47c0      	blx	r8
    2784:	2003      	movs	r0, #3
    2786:	47b8      	blx	r7
	config->division_factor    = 1;
    2788:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    278a:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    278c:	464b      	mov	r3, r9
    278e:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    2790:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2792:	7265      	strb	r5, [r4, #9]
    2794:	0021      	movs	r1, r4
    2796:	2004      	movs	r0, #4
    2798:	47c0      	blx	r8
    279a:	2004      	movs	r0, #4
    279c:	47b8      	blx	r7
	config->division_factor    = 1;
    279e:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    27a0:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    27a2:	464b      	mov	r3, r9
    27a4:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    27a6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    27a8:	7265      	strb	r5, [r4, #9]
    27aa:	0021      	movs	r1, r4
    27ac:	2005      	movs	r0, #5
    27ae:	47c0      	blx	r8
    27b0:	2005      	movs	r0, #5
    27b2:	47b8      	blx	r7
	config->division_factor    = 1;
    27b4:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    27b6:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    27b8:	464b      	mov	r3, r9
    27ba:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    27bc:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    27be:	7265      	strb	r5, [r4, #9]
    27c0:	0021      	movs	r1, r4
    27c2:	2006      	movs	r0, #6
    27c4:	47c0      	blx	r8
    27c6:	2006      	movs	r0, #6
    27c8:	47b8      	blx	r7
	config->division_factor    = 1;
    27ca:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    27cc:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    27ce:	464b      	mov	r3, r9
    27d0:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    27d2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    27d4:	7265      	strb	r5, [r4, #9]
    27d6:	0021      	movs	r1, r4
    27d8:	2007      	movs	r0, #7
    27da:	47c0      	blx	r8
    27dc:	2007      	movs	r0, #7
    27de:	47b8      	blx	r7
	config->division_factor    = 1;
    27e0:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    27e2:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    27e4:	464b      	mov	r3, r9
    27e6:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    27e8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    27ea:	7265      	strb	r5, [r4, #9]
    27ec:	0021      	movs	r1, r4
    27ee:	2008      	movs	r0, #8
    27f0:	47c0      	blx	r8
    27f2:	2008      	movs	r0, #8
    27f4:	47b8      	blx	r7
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    27f6:	4b0f      	ldr	r3, [pc, #60]	; (2834 <system_clock_init+0x124>)
    27f8:	711e      	strb	r6, [r3, #4]
	config->division_factor    = 1;
    27fa:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    27fc:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    27fe:	464b      	mov	r3, r9
    2800:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    2802:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2804:	7265      	strb	r5, [r4, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2806:	0021      	movs	r1, r4
    2808:	2000      	movs	r0, #0
    280a:	47c0      	blx	r8
    280c:	2000      	movs	r0, #0
    280e:	47b8      	blx	r7
#endif

}
    2810:	b005      	add	sp, #20
    2812:	bc0c      	pop	{r2, r3}
    2814:	4690      	mov	r8, r2
    2816:	4699      	mov	r9, r3
    2818:	bdf0      	pop	{r4, r5, r6, r7, pc}
    281a:	46c0      	nop			; (mov r8, r8)
    281c:	40001800 	.word	0x40001800
    2820:	41004000 	.word	0x41004000
    2824:	40001000 	.word	0x40001000
    2828:	00002839 	.word	0x00002839
    282c:	0000285d 	.word	0x0000285d
    2830:	00002909 	.word	0x00002909
    2834:	40000800 	.word	0x40000800

00002838 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    2838:	4a06      	ldr	r2, [pc, #24]	; (2854 <system_gclk_init+0x1c>)
    283a:	6953      	ldr	r3, [r2, #20]
    283c:	2180      	movs	r1, #128	; 0x80
    283e:	430b      	orrs	r3, r1
    2840:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    2842:	2201      	movs	r2, #1
    2844:	4b04      	ldr	r3, [pc, #16]	; (2858 <system_gclk_init+0x20>)
    2846:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    2848:	0019      	movs	r1, r3
    284a:	780b      	ldrb	r3, [r1, #0]
    284c:	4213      	tst	r3, r2
    284e:	d1fc      	bne.n	284a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2850:	4770      	bx	lr
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	40000800 	.word	0x40000800
    2858:	40001c00 	.word	0x40001c00

0000285c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    285c:	b570      	push	{r4, r5, r6, lr}
    285e:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2860:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2862:	784b      	ldrb	r3, [r1, #1]
    2864:	2b00      	cmp	r3, #0
    2866:	d002      	beq.n	286e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2868:	2380      	movs	r3, #128	; 0x80
    286a:	00db      	lsls	r3, r3, #3
    286c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    286e:	7a4b      	ldrb	r3, [r1, #9]
    2870:	2b00      	cmp	r3, #0
    2872:	d002      	beq.n	287a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2874:	2380      	movs	r3, #128	; 0x80
    2876:	011b      	lsls	r3, r3, #4
    2878:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    287a:	6848      	ldr	r0, [r1, #4]
    287c:	2801      	cmp	r0, #1
    287e:	d90f      	bls.n	28a0 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2880:	1e43      	subs	r3, r0, #1
    2882:	4218      	tst	r0, r3
    2884:	d131      	bne.n	28ea <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2886:	2802      	cmp	r0, #2
    2888:	d92d      	bls.n	28e6 <system_gclk_gen_set_config+0x8a>
    288a:	2302      	movs	r3, #2
    288c:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    288e:	3201      	adds	r2, #1
						mask <<= 1) {
    2890:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2892:	4298      	cmp	r0, r3
    2894:	d8fb      	bhi.n	288e <system_gclk_gen_set_config+0x32>
    2896:	2380      	movs	r3, #128	; 0x80
    2898:	015b      	lsls	r3, r3, #5
    289a:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    289c:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    289e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    28a0:	7a0b      	ldrb	r3, [r1, #8]
    28a2:	2b00      	cmp	r3, #0
    28a4:	d002      	beq.n	28ac <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    28a6:	2380      	movs	r3, #128	; 0x80
    28a8:	019b      	lsls	r3, r3, #6
    28aa:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    28ac:	2604      	movs	r6, #4
    28ae:	40a6      	lsls	r6, r4
    28b0:	4911      	ldr	r1, [pc, #68]	; (28f8 <system_gclk_gen_set_config+0x9c>)
    28b2:	4a12      	ldr	r2, [pc, #72]	; (28fc <system_gclk_gen_set_config+0xa0>)
    28b4:	684b      	ldr	r3, [r1, #4]
    28b6:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    28b8:	421e      	tst	r6, r3
    28ba:	d1fb      	bne.n	28b4 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    28bc:	4b10      	ldr	r3, [pc, #64]	; (2900 <system_gclk_gen_set_config+0xa4>)
    28be:	4798      	blx	r3
    28c0:	00a4      	lsls	r4, r4, #2
    28c2:	4b0d      	ldr	r3, [pc, #52]	; (28f8 <system_gclk_gen_set_config+0x9c>)
    28c4:	469c      	mov	ip, r3
    28c6:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    28c8:	6a22      	ldr	r2, [r4, #32]
    28ca:	2380      	movs	r3, #128	; 0x80
    28cc:	005b      	lsls	r3, r3, #1
    28ce:	401a      	ands	r2, r3
    28d0:	432a      	orrs	r2, r5
    28d2:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    28d4:	4661      	mov	r1, ip
    28d6:	4a09      	ldr	r2, [pc, #36]	; (28fc <system_gclk_gen_set_config+0xa0>)
    28d8:	684b      	ldr	r3, [r1, #4]
    28da:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    28dc:	421e      	tst	r6, r3
    28de:	d1fb      	bne.n	28d8 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    28e0:	4b08      	ldr	r3, [pc, #32]	; (2904 <system_gclk_gen_set_config+0xa8>)
    28e2:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    28e4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    28e6:	2200      	movs	r2, #0
    28e8:	e7d5      	b.n	2896 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    28ea:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    28ec:	2380      	movs	r3, #128	; 0x80
    28ee:	009b      	lsls	r3, r3, #2
    28f0:	4318      	orrs	r0, r3
    28f2:	4305      	orrs	r5, r0
    28f4:	e7d4      	b.n	28a0 <system_gclk_gen_set_config+0x44>
    28f6:	46c0      	nop			; (mov r8, r8)
    28f8:	40001c00 	.word	0x40001c00
    28fc:	000007fc 	.word	0x000007fc
    2900:	00002645 	.word	0x00002645
    2904:	00002685 	.word	0x00002685

00002908 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2908:	b510      	push	{r4, lr}
    290a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    290c:	2204      	movs	r2, #4
    290e:	4082      	lsls	r2, r0
    2910:	4809      	ldr	r0, [pc, #36]	; (2938 <system_gclk_gen_enable+0x30>)
    2912:	490a      	ldr	r1, [pc, #40]	; (293c <system_gclk_gen_enable+0x34>)
    2914:	6843      	ldr	r3, [r0, #4]
    2916:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    2918:	421a      	tst	r2, r3
    291a:	d1fb      	bne.n	2914 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    291c:	4b08      	ldr	r3, [pc, #32]	; (2940 <system_gclk_gen_enable+0x38>)
    291e:	4798      	blx	r3
    2920:	00a4      	lsls	r4, r4, #2
    2922:	4b05      	ldr	r3, [pc, #20]	; (2938 <system_gclk_gen_enable+0x30>)
    2924:	469c      	mov	ip, r3
    2926:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    2928:	6a22      	ldr	r2, [r4, #32]
    292a:	2380      	movs	r3, #128	; 0x80
    292c:	005b      	lsls	r3, r3, #1
    292e:	4313      	orrs	r3, r2
    2930:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    2932:	4b04      	ldr	r3, [pc, #16]	; (2944 <system_gclk_gen_enable+0x3c>)
    2934:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2936:	bd10      	pop	{r4, pc}
    2938:	40001c00 	.word	0x40001c00
    293c:	000007fc 	.word	0x000007fc
    2940:	00002645 	.word	0x00002645
    2944:	00002685 	.word	0x00002685

00002948 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    294a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    294c:	2204      	movs	r2, #4
    294e:	4082      	lsls	r2, r0
    2950:	4812      	ldr	r0, [pc, #72]	; (299c <system_gclk_gen_get_hz+0x54>)
    2952:	4913      	ldr	r1, [pc, #76]	; (29a0 <system_gclk_gen_get_hz+0x58>)
    2954:	6843      	ldr	r3, [r0, #4]
    2956:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    2958:	421a      	tst	r2, r3
    295a:	d1fb      	bne.n	2954 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    295c:	4b11      	ldr	r3, [pc, #68]	; (29a4 <system_gclk_gen_get_hz+0x5c>)
    295e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    2960:	4f0e      	ldr	r7, [pc, #56]	; (299c <system_gclk_gen_get_hz+0x54>)
    2962:	3408      	adds	r4, #8
    2964:	00a4      	lsls	r4, r4, #2
    2966:	59e0      	ldr	r0, [r4, r7]
    2968:	0740      	lsls	r0, r0, #29
    296a:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
    296c:	4b0e      	ldr	r3, [pc, #56]	; (29a8 <system_gclk_gen_get_hz+0x60>)
    296e:	4798      	blx	r3
    2970:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    2972:	59e5      	ldr	r5, [r4, r7]
    2974:	04ed      	lsls	r5, r5, #19
    2976:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    2978:	59e4      	ldr	r4, [r4, r7]
    297a:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    297c:	4b0b      	ldr	r3, [pc, #44]	; (29ac <system_gclk_gen_get_hz+0x64>)
    297e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2980:	2d00      	cmp	r5, #0
    2982:	d107      	bne.n	2994 <system_gclk_gen_get_hz+0x4c>
    2984:	2c01      	cmp	r4, #1
    2986:	d907      	bls.n	2998 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    2988:	0021      	movs	r1, r4
    298a:	0030      	movs	r0, r6
    298c:	4b08      	ldr	r3, [pc, #32]	; (29b0 <system_gclk_gen_get_hz+0x68>)
    298e:	4798      	blx	r3
    2990:	0006      	movs	r6, r0
    2992:	e001      	b.n	2998 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2994:	3401      	adds	r4, #1
    2996:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    2998:	0030      	movs	r0, r6
    299a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    299c:	40001c00 	.word	0x40001c00
    29a0:	000007fc 	.word	0x000007fc
    29a4:	00002645 	.word	0x00002645
    29a8:	000026b5 	.word	0x000026b5
    29ac:	00002685 	.word	0x00002685
    29b0:	00003631 	.word	0x00003631

000029b4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    29b4:	b510      	push	{r4, lr}
    29b6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    29b8:	4b09      	ldr	r3, [pc, #36]	; (29e0 <system_gclk_chan_enable+0x2c>)
    29ba:	4798      	blx	r3
    29bc:	00a0      	lsls	r0, r4, #2
    29be:	4b09      	ldr	r3, [pc, #36]	; (29e4 <system_gclk_chan_enable+0x30>)
    29c0:	469c      	mov	ip, r3
    29c2:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    29c4:	2280      	movs	r2, #128	; 0x80
    29c6:	5883      	ldr	r3, [r0, r2]
    29c8:	2140      	movs	r1, #64	; 0x40
    29ca:	430b      	orrs	r3, r1
    29cc:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    29ce:	3140      	adds	r1, #64	; 0x40
    29d0:	3a40      	subs	r2, #64	; 0x40
    29d2:	5843      	ldr	r3, [r0, r1]
    29d4:	421a      	tst	r2, r3
    29d6:	d0fc      	beq.n	29d2 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    29d8:	4b03      	ldr	r3, [pc, #12]	; (29e8 <system_gclk_chan_enable+0x34>)
    29da:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    29dc:	bd10      	pop	{r4, pc}
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	00002645 	.word	0x00002645
    29e4:	40001c00 	.word	0x40001c00
    29e8:	00002685 	.word	0x00002685

000029ec <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    29ec:	b510      	push	{r4, lr}
    29ee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    29f0:	4b09      	ldr	r3, [pc, #36]	; (2a18 <system_gclk_chan_disable+0x2c>)
    29f2:	4798      	blx	r3
    29f4:	00a0      	lsls	r0, r4, #2
    29f6:	4b09      	ldr	r3, [pc, #36]	; (2a1c <system_gclk_chan_disable+0x30>)
    29f8:	469c      	mov	ip, r3
    29fa:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    29fc:	2280      	movs	r2, #128	; 0x80
    29fe:	5883      	ldr	r3, [r0, r2]
    2a00:	2140      	movs	r1, #64	; 0x40
    2a02:	438b      	bics	r3, r1
    2a04:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    2a06:	3140      	adds	r1, #64	; 0x40
    2a08:	3a40      	subs	r2, #64	; 0x40
    2a0a:	5843      	ldr	r3, [r0, r1]
    2a0c:	421a      	tst	r2, r3
    2a0e:	d1fc      	bne.n	2a0a <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    2a10:	4b03      	ldr	r3, [pc, #12]	; (2a20 <system_gclk_chan_disable+0x34>)
    2a12:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    2a14:	bd10      	pop	{r4, pc}
    2a16:	46c0      	nop			; (mov r8, r8)
    2a18:	00002645 	.word	0x00002645
    2a1c:	40001c00 	.word	0x40001c00
    2a20:	00002685 	.word	0x00002685

00002a24 <system_gclk_chan_set_config>:
{
    2a24:	b570      	push	{r4, r5, r6, lr}
    2a26:	0004      	movs	r4, r0
    2a28:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    2a2a:	4b05      	ldr	r3, [pc, #20]	; (2a40 <system_gclk_chan_set_config+0x1c>)
    2a2c:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    2a2e:	782a      	ldrb	r2, [r5, #0]
    2a30:	230f      	movs	r3, #15
    2a32:	4013      	ands	r3, r2
    2a34:	3420      	adds	r4, #32
    2a36:	00a4      	lsls	r4, r4, #2
    2a38:	4a02      	ldr	r2, [pc, #8]	; (2a44 <system_gclk_chan_set_config+0x20>)
    2a3a:	50a3      	str	r3, [r4, r2]
}
    2a3c:	bd70      	pop	{r4, r5, r6, pc}
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	000029ed 	.word	0x000029ed
    2a44:	40001c00 	.word	0x40001c00

00002a48 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2a48:	b510      	push	{r4, lr}
    2a4a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2a4c:	4b06      	ldr	r3, [pc, #24]	; (2a68 <system_gclk_chan_get_hz+0x20>)
    2a4e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    2a50:	3420      	adds	r4, #32
    2a52:	00a4      	lsls	r4, r4, #2
    2a54:	4b05      	ldr	r3, [pc, #20]	; (2a6c <system_gclk_chan_get_hz+0x24>)
    2a56:	58e4      	ldr	r4, [r4, r3]
    2a58:	0724      	lsls	r4, r4, #28
    2a5a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2a5c:	4b04      	ldr	r3, [pc, #16]	; (2a70 <system_gclk_chan_get_hz+0x28>)
    2a5e:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2a60:	0020      	movs	r0, r4
    2a62:	4b04      	ldr	r3, [pc, #16]	; (2a74 <system_gclk_chan_get_hz+0x2c>)
    2a64:	4798      	blx	r3
}
    2a66:	bd10      	pop	{r4, pc}
    2a68:	00002645 	.word	0x00002645
    2a6c:	40001c00 	.word	0x40001c00
    2a70:	00002685 	.word	0x00002685
    2a74:	00002949 	.word	0x00002949

00002a78 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2a78:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2a7a:	78d3      	ldrb	r3, [r2, #3]
    2a7c:	2b00      	cmp	r3, #0
    2a7e:	d135      	bne.n	2aec <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2a80:	7813      	ldrb	r3, [r2, #0]
    2a82:	2b80      	cmp	r3, #128	; 0x80
    2a84:	d029      	beq.n	2ada <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2a86:	061b      	lsls	r3, r3, #24
    2a88:	2480      	movs	r4, #128	; 0x80
    2a8a:	0264      	lsls	r4, r4, #9
    2a8c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2a8e:	7854      	ldrb	r4, [r2, #1]
    2a90:	2502      	movs	r5, #2
    2a92:	43ac      	bics	r4, r5
    2a94:	d106      	bne.n	2aa4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2a96:	7894      	ldrb	r4, [r2, #2]
    2a98:	2c00      	cmp	r4, #0
    2a9a:	d120      	bne.n	2ade <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2a9c:	2480      	movs	r4, #128	; 0x80
    2a9e:	02a4      	lsls	r4, r4, #10
    2aa0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2aa2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2aa4:	7854      	ldrb	r4, [r2, #1]
    2aa6:	3c01      	subs	r4, #1
    2aa8:	2c01      	cmp	r4, #1
    2aaa:	d91c      	bls.n	2ae6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2aac:	040d      	lsls	r5, r1, #16
    2aae:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2ab0:	24a0      	movs	r4, #160	; 0xa0
    2ab2:	05e4      	lsls	r4, r4, #23
    2ab4:	432c      	orrs	r4, r5
    2ab6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2ab8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2aba:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2abc:	24d0      	movs	r4, #208	; 0xd0
    2abe:	0624      	lsls	r4, r4, #24
    2ac0:	432c      	orrs	r4, r5
    2ac2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2ac4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2ac6:	78d4      	ldrb	r4, [r2, #3]
    2ac8:	2c00      	cmp	r4, #0
    2aca:	d122      	bne.n	2b12 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2acc:	035b      	lsls	r3, r3, #13
    2ace:	d51c      	bpl.n	2b0a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2ad0:	7893      	ldrb	r3, [r2, #2]
    2ad2:	2b01      	cmp	r3, #1
    2ad4:	d01e      	beq.n	2b14 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2ad6:	6141      	str	r1, [r0, #20]
    2ad8:	e017      	b.n	2b0a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2ada:	2300      	movs	r3, #0
    2adc:	e7d7      	b.n	2a8e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2ade:	24c0      	movs	r4, #192	; 0xc0
    2ae0:	02e4      	lsls	r4, r4, #11
    2ae2:	4323      	orrs	r3, r4
    2ae4:	e7dd      	b.n	2aa2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2ae6:	4c0d      	ldr	r4, [pc, #52]	; (2b1c <_system_pinmux_config+0xa4>)
    2ae8:	4023      	ands	r3, r4
    2aea:	e7df      	b.n	2aac <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2aec:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2aee:	040c      	lsls	r4, r1, #16
    2af0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2af2:	23a0      	movs	r3, #160	; 0xa0
    2af4:	05db      	lsls	r3, r3, #23
    2af6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2af8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2afa:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2afc:	23d0      	movs	r3, #208	; 0xd0
    2afe:	061b      	lsls	r3, r3, #24
    2b00:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2b02:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2b04:	78d3      	ldrb	r3, [r2, #3]
    2b06:	2b00      	cmp	r3, #0
    2b08:	d103      	bne.n	2b12 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2b0a:	7853      	ldrb	r3, [r2, #1]
    2b0c:	3b01      	subs	r3, #1
    2b0e:	2b01      	cmp	r3, #1
    2b10:	d902      	bls.n	2b18 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2b12:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2b14:	6181      	str	r1, [r0, #24]
    2b16:	e7f8      	b.n	2b0a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2b18:	6081      	str	r1, [r0, #8]
}
    2b1a:	e7fa      	b.n	2b12 <_system_pinmux_config+0x9a>
    2b1c:	fffbffff 	.word	0xfffbffff

00002b20 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2b20:	b510      	push	{r4, lr}
    2b22:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2b24:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2b26:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2b28:	2900      	cmp	r1, #0
    2b2a:	d105      	bne.n	2b38 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    2b2c:	0943      	lsrs	r3, r0, #5
    2b2e:	01db      	lsls	r3, r3, #7
    2b30:	2182      	movs	r1, #130	; 0x82
    2b32:	05c9      	lsls	r1, r1, #23
    2b34:	468c      	mov	ip, r1
    2b36:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2b38:	241f      	movs	r4, #31
    2b3a:	4020      	ands	r0, r4
    2b3c:	2101      	movs	r1, #1
    2b3e:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2b40:	0018      	movs	r0, r3
    2b42:	4b01      	ldr	r3, [pc, #4]	; (2b48 <system_pinmux_pin_set_config+0x28>)
    2b44:	4798      	blx	r3
}
    2b46:	bd10      	pop	{r4, pc}
    2b48:	00002a79 	.word	0x00002a79

00002b4c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2b4c:	4770      	bx	lr
	...

00002b50 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2b50:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2b52:	4b05      	ldr	r3, [pc, #20]	; (2b68 <system_init+0x18>)
    2b54:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2b56:	4b05      	ldr	r3, [pc, #20]	; (2b6c <system_init+0x1c>)
    2b58:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2b5a:	4b05      	ldr	r3, [pc, #20]	; (2b70 <system_init+0x20>)
    2b5c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2b5e:	4b05      	ldr	r3, [pc, #20]	; (2b74 <system_init+0x24>)
    2b60:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2b62:	4b05      	ldr	r3, [pc, #20]	; (2b78 <system_init+0x28>)
    2b64:	4798      	blx	r3
}
    2b66:	bd10      	pop	{r4, pc}
    2b68:	00002711 	.word	0x00002711
    2b6c:	00002641 	.word	0x00002641
    2b70:	00002b4d 	.word	0x00002b4d
    2b74:	00000849 	.word	0x00000849
    2b78:	00002b4d 	.word	0x00002b4d

00002b7c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2b7c:	e7fe      	b.n	2b7c <Dummy_Handler>
	...

00002b80 <Reset_Handler>:
{
    2b80:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    2b82:	4a17      	ldr	r2, [pc, #92]	; (2be0 <Reset_Handler+0x60>)
    2b84:	4b17      	ldr	r3, [pc, #92]	; (2be4 <Reset_Handler+0x64>)
    2b86:	429a      	cmp	r2, r3
    2b88:	d011      	beq.n	2bae <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2b8a:	001a      	movs	r2, r3
    2b8c:	4b16      	ldr	r3, [pc, #88]	; (2be8 <Reset_Handler+0x68>)
    2b8e:	429a      	cmp	r2, r3
    2b90:	d20d      	bcs.n	2bae <Reset_Handler+0x2e>
    2b92:	4a16      	ldr	r2, [pc, #88]	; (2bec <Reset_Handler+0x6c>)
    2b94:	3303      	adds	r3, #3
    2b96:	1a9b      	subs	r3, r3, r2
    2b98:	089b      	lsrs	r3, r3, #2
    2b9a:	3301      	adds	r3, #1
    2b9c:	009b      	lsls	r3, r3, #2
    2b9e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2ba0:	4810      	ldr	r0, [pc, #64]	; (2be4 <Reset_Handler+0x64>)
    2ba2:	490f      	ldr	r1, [pc, #60]	; (2be0 <Reset_Handler+0x60>)
    2ba4:	588c      	ldr	r4, [r1, r2]
    2ba6:	5084      	str	r4, [r0, r2]
    2ba8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2baa:	429a      	cmp	r2, r3
    2bac:	d1fa      	bne.n	2ba4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2bae:	4a10      	ldr	r2, [pc, #64]	; (2bf0 <Reset_Handler+0x70>)
    2bb0:	4b10      	ldr	r3, [pc, #64]	; (2bf4 <Reset_Handler+0x74>)
    2bb2:	429a      	cmp	r2, r3
    2bb4:	d20a      	bcs.n	2bcc <Reset_Handler+0x4c>
    2bb6:	43d3      	mvns	r3, r2
    2bb8:	490e      	ldr	r1, [pc, #56]	; (2bf4 <Reset_Handler+0x74>)
    2bba:	185b      	adds	r3, r3, r1
    2bbc:	2103      	movs	r1, #3
    2bbe:	438b      	bics	r3, r1
    2bc0:	3304      	adds	r3, #4
    2bc2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2bc4:	2100      	movs	r1, #0
    2bc6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2bc8:	4293      	cmp	r3, r2
    2bca:	d1fc      	bne.n	2bc6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2bcc:	4a0a      	ldr	r2, [pc, #40]	; (2bf8 <Reset_Handler+0x78>)
    2bce:	21ff      	movs	r1, #255	; 0xff
    2bd0:	4b0a      	ldr	r3, [pc, #40]	; (2bfc <Reset_Handler+0x7c>)
    2bd2:	438b      	bics	r3, r1
    2bd4:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    2bd6:	4b0a      	ldr	r3, [pc, #40]	; (2c00 <Reset_Handler+0x80>)
    2bd8:	4798      	blx	r3
        main();
    2bda:	4b0a      	ldr	r3, [pc, #40]	; (2c04 <Reset_Handler+0x84>)
    2bdc:	4798      	blx	r3
    2bde:	e7fe      	b.n	2bde <Reset_Handler+0x5e>
    2be0:	00005c28 	.word	0x00005c28
    2be4:	20000000 	.word	0x20000000
    2be8:	20000080 	.word	0x20000080
    2bec:	20000004 	.word	0x20000004
    2bf0:	20000080 	.word	0x20000080
    2bf4:	20001e38 	.word	0x20001e38
    2bf8:	e000ed00 	.word	0xe000ed00
    2bfc:	00000000 	.word	0x00000000
    2c00:	0000508d 	.word	0x0000508d
    2c04:	00002dfd 	.word	0x00002dfd

00002c08 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2c08:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2c0a:	4a06      	ldr	r2, [pc, #24]	; (2c24 <_sbrk+0x1c>)
    2c0c:	6812      	ldr	r2, [r2, #0]
    2c0e:	2a00      	cmp	r2, #0
    2c10:	d004      	beq.n	2c1c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2c12:	4a04      	ldr	r2, [pc, #16]	; (2c24 <_sbrk+0x1c>)
    2c14:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2c16:	18c3      	adds	r3, r0, r3
    2c18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2c1a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2c1c:	4902      	ldr	r1, [pc, #8]	; (2c28 <_sbrk+0x20>)
    2c1e:	4a01      	ldr	r2, [pc, #4]	; (2c24 <_sbrk+0x1c>)
    2c20:	6011      	str	r1, [r2, #0]
    2c22:	e7f6      	b.n	2c12 <_sbrk+0xa>
    2c24:	200000e0 	.word	0x200000e0
    2c28:	20003e38 	.word	0x20003e38

00002c2c <NMI_Handler>:
struct dac_module dac_instance;
void IO_init(void);

void NMI_Handler(void)
{
    BREAKPOINT;
    2c2c:	46c0      	nop			; (mov r8, r8)
}
    2c2e:	4770      	bx	lr

00002c30 <HardFault_Handler>:
void HardFault_Handler(void)
{
    BREAKPOINT;
    2c30:	46c0      	nop			; (mov r8, r8)
}
    2c32:	4770      	bx	lr

00002c34 <SVC_Handler>:
void SVC_Handler(void)
{
    BREAKPOINT;
    2c34:	46c0      	nop			; (mov r8, r8)
}
    2c36:	4770      	bx	lr

00002c38 <PendSV_Handler>:
void PendSV_Handler(void)
{
    BREAKPOINT;
    2c38:	46c0      	nop			; (mov r8, r8)
}
    2c3a:	4770      	bx	lr

00002c3c <SysTick_Handler>:
void SysTick_Handler(void)
{
    BREAKPOINT;
    2c3c:	46c0      	nop			; (mov r8, r8)
}
    2c3e:	4770      	bx	lr

00002c40 <select_device_mode>:
    }
}

MODE select_device_mode(uint8_t mode)
{
    switch(device_mode) {
    2c40:	4b05      	ldr	r3, [pc, #20]	; (2c58 <select_device_mode+0x18>)
    2c42:	7818      	ldrb	r0, [r3, #0]
    2c44:	2801      	cmp	r0, #1
    2c46:	d004      	beq.n	2c52 <select_device_mode+0x12>
        case 0:
            return DMX;
    2c48:	3802      	subs	r0, #2
    2c4a:	4243      	negs	r3, r0
    2c4c:	4158      	adcs	r0, r3
    2c4e:	3001      	adds	r0, #1
        case 2:
            return BOTH;
        default:
            return DMX;
    }
}
    2c50:	4770      	bx	lr
            return TRIGGER;
    2c52:	2000      	movs	r0, #0
    2c54:	e7fc      	b.n	2c50 <select_device_mode+0x10>
    2c56:	46c0      	nop			; (mov r8, r8)
    2c58:	20001e18 	.word	0x20001e18

00002c5c <IO_init>:

void IO_init(void)
{
    2c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c5e:	b085      	sub	sp, #20
	config->direction  = PORT_PIN_DIR_INPUT;
    2c60:	2700      	movs	r7, #0
    2c62:	466b      	mov	r3, sp
    2c64:	731f      	strb	r7, [r3, #12]
	config->powersave  = false;
    2c66:	739f      	strb	r7, [r3, #14]
    //configure all ports!
    struct port_config input_pin_no_pullup;
    port_get_config_defaults(&input_pin_no_pullup);
    input_pin_no_pullup.direction = PORT_PIN_DIR_INPUT;
    input_pin_no_pullup.input_pull = PORT_PIN_PULL_NONE;
    2c68:	735f      	strb	r7, [r3, #13]
	config->direction  = PORT_PIN_DIR_INPUT;
    2c6a:	721f      	strb	r7, [r3, #8]
	config->input_pull = PORT_PIN_PULL_UP;
    2c6c:	2601      	movs	r6, #1
    2c6e:	725e      	strb	r6, [r3, #9]
	config->powersave  = false;
    2c70:	729f      	strb	r7, [r3, #10]
	config->input_pull = PORT_PIN_PULL_UP;
    2c72:	ad01      	add	r5, sp, #4
    2c74:	706e      	strb	r6, [r5, #1]
	config->powersave  = false;
    2c76:	70af      	strb	r7, [r5, #2]
    input_pin_pullup.direction = PORT_PIN_DIR_INPUT;
    input_pin_pullup.input_pull = PORT_PIN_PULL_UP;

    struct port_config output_pin;
    port_get_config_defaults(&output_pin);
    output_pin.direction = PORT_PIN_DIR_OUTPUT;
    2c78:	702e      	strb	r6, [r5, #0]
    struct port_config output_pin_w_readback;
    port_get_config_defaults(&output_pin_w_readback);
    output_pin_w_readback.direction = PORT_PIN_DIR_OUTPUT_WTH_READBACK;
    /* DEFINE PINS WITH PULLUPS */
    port_pin_set_config(PIN_SW1, &input_pin_pullup);
    2c7a:	a902      	add	r1, sp, #8
    2c7c:	200c      	movs	r0, #12
    2c7e:	4c2c      	ldr	r4, [pc, #176]	; (2d30 <IO_init+0xd4>)
    2c80:	47a0      	blx	r4
    port_pin_set_config(PIN_SW2, &input_pin_pullup);
    2c82:	a902      	add	r1, sp, #8
    2c84:	200d      	movs	r0, #13
    2c86:	47a0      	blx	r4

    /* DEFINE PINS WITHOUT PULLUPS */
    port_pin_set_config(PIN_ENC_B, &input_pin_no_pullup);
    2c88:	a903      	add	r1, sp, #12
    2c8a:	2036      	movs	r0, #54	; 0x36
    2c8c:	47a0      	blx	r4
    port_pin_set_config(PIN_ENC_A, &input_pin_no_pullup);
    2c8e:	a903      	add	r1, sp, #12
    2c90:	2037      	movs	r0, #55	; 0x37
    2c92:	47a0      	blx	r4

    /* DEFINE OUTPUT PINS */
    port_pin_set_config(PIN_EEPROM_WP, &output_pin);
    2c94:	0029      	movs	r1, r5
    2c96:	2018      	movs	r0, #24
    2c98:	47a0      	blx	r4
    port_pin_set_config(PIN_LED_POWER, &output_pin);
    2c9a:	0029      	movs	r1, r5
    2c9c:	201c      	movs	r0, #28
    2c9e:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D0, &output_pin);
    2ca0:	0029      	movs	r1, r5
    2ca2:	2026      	movs	r0, #38	; 0x26
    2ca4:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D1, &output_pin);
    2ca6:	0029      	movs	r1, r5
    2ca8:	2025      	movs	r0, #37	; 0x25
    2caa:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D2, &output_pin);
    2cac:	0029      	movs	r1, r5
    2cae:	2024      	movs	r0, #36	; 0x24
    2cb0:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D3, &output_pin);
    2cb2:	0029      	movs	r1, r5
    2cb4:	2023      	movs	r0, #35	; 0x23
    2cb6:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D4, &output_pin);
    2cb8:	0029      	movs	r1, r5
    2cba:	2022      	movs	r0, #34	; 0x22
    2cbc:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D5, &output_pin);
    2cbe:	0029      	movs	r1, r5
    2cc0:	2021      	movs	r0, #33	; 0x21
    2cc2:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D6, &output_pin);
    2cc4:	0029      	movs	r1, r5
    2cc6:	2020      	movs	r0, #32
    2cc8:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D7, &output_pin);
    2cca:	0029      	movs	r1, r5
    2ccc:	203f      	movs	r0, #63	; 0x3f
    2cce:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_EN, &output_pin);
    2cd0:	0029      	movs	r1, r5
    2cd2:	2027      	movs	r0, #39	; 0x27
    2cd4:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_RW, &output_pin);
    2cd6:	0029      	movs	r1, r5
    2cd8:	2028      	movs	r0, #40	; 0x28
    2cda:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_RS, &output_pin);
    2cdc:	0029      	movs	r1, r5
    2cde:	2029      	movs	r0, #41	; 0x29
    2ce0:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_BL, &output_pin);
    2ce2:	0029      	movs	r1, r5
    2ce4:	202b      	movs	r0, #43	; 0x2b
    2ce6:	47a0      	blx	r4
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2ce8:	466b      	mov	r3, sp
    2cea:	705f      	strb	r7, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2cec:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
    2cee:	70df      	strb	r7, [r3, #3]

    struct system_pinmux_config mux_config;
    system_pinmux_get_config_defaults(&mux_config);
    mux_config.mux_position = MUX_ADC0;
    2cf0:	701e      	strb	r6, [r3, #0]
    mux_config.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    system_pinmux_pin_set_config(PIN_ADC0, &mux_config);
    2cf2:	4669      	mov	r1, sp
    2cf4:	2004      	movs	r0, #4
    2cf6:	4c0f      	ldr	r4, [pc, #60]	; (2d34 <IO_init+0xd8>)
    2cf8:	47a0      	blx	r4

    mux_config.mux_position = MUX_ADC1;
    2cfa:	466b      	mov	r3, sp
    2cfc:	701e      	strb	r6, [r3, #0]
    system_pinmux_pin_set_config(PIN_ADC1, &mux_config);
    2cfe:	4669      	mov	r1, sp
    2d00:	2005      	movs	r0, #5
    2d02:	47a0      	blx	r4
    mux_config.mux_position = MUX_ADC2;
    2d04:	466b      	mov	r3, sp
    2d06:	701e      	strb	r6, [r3, #0]
    system_pinmux_pin_set_config(PIN_ADC2, &mux_config);
    2d08:	4669      	mov	r1, sp
    2d0a:	2006      	movs	r0, #6
    2d0c:	47a0      	blx	r4
    mux_config.mux_position = MUX_ADC3;
    2d0e:	466b      	mov	r3, sp
    2d10:	701e      	strb	r6, [r3, #0]
    system_pinmux_pin_set_config(PIN_ADC3, &mux_config);
    2d12:	4669      	mov	r1, sp
    2d14:	2007      	movs	r0, #7
    2d16:	47a0      	blx	r4
    mux_config.mux_position = MUX_ADC4;
    2d18:	466b      	mov	r3, sp
    2d1a:	701e      	strb	r6, [r3, #0]
    system_pinmux_pin_set_config(PIN_ADC4, &mux_config);
    2d1c:	4669      	mov	r1, sp
    2d1e:	2003      	movs	r0, #3
    2d20:	47a0      	blx	r4

    mux_config.mux_position = MUX_LCD_VO;
    2d22:	466b      	mov	r3, sp
    2d24:	701e      	strb	r6, [r3, #0]
    system_pinmux_pin_set_config(PIN_LCD_VO, &mux_config);
    2d26:	4669      	mov	r1, sp
    2d28:	2002      	movs	r0, #2
    2d2a:	47a0      	blx	r4
}
    2d2c:	b005      	add	sp, #20
    2d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d30:	00001c21 	.word	0x00001c21
    2d34:	00002b21 	.word	0x00002b21

00002d38 <configure_dac>:

void configure_dac(void)
{
    2d38:	b500      	push	{lr}
    2d3a:	b083      	sub	sp, #12
    struct dac_config config_dac;
    dac_get_config_defaults(&config_dac);
    2d3c:	4668      	mov	r0, sp
    2d3e:	4b05      	ldr	r3, [pc, #20]	; (2d54 <configure_dac+0x1c>)
    2d40:	4798      	blx	r3
    config_dac.reference = DAC_REFERENCE_AVCC;
    2d42:	2340      	movs	r3, #64	; 0x40
    2d44:	466a      	mov	r2, sp
    2d46:	7013      	strb	r3, [r2, #0]
    dac_init(&dac_instance, DAC, &config_dac);
    2d48:	4903      	ldr	r1, [pc, #12]	; (2d58 <configure_dac+0x20>)
    2d4a:	4804      	ldr	r0, [pc, #16]	; (2d5c <configure_dac+0x24>)
    2d4c:	4b04      	ldr	r3, [pc, #16]	; (2d60 <configure_dac+0x28>)
    2d4e:	4798      	blx	r3
}
    2d50:	b003      	add	sp, #12
    2d52:	bd00      	pop	{pc}
    2d54:	000008d5 	.word	0x000008d5
    2d58:	42005400 	.word	0x42005400
    2d5c:	20001dac 	.word	0x20001dac
    2d60:	000008e9 	.word	0x000008e9

00002d64 <configure_dac_channel>:

void configure_dac_channel(void)
{
    2d64:	b510      	push	{r4, lr}
    2d66:	b082      	sub	sp, #8
    struct dac_chan_config config_dac_chan;
    dac_chan_get_config_defaults(&config_dac_chan);
    2d68:	a801      	add	r0, sp, #4
    2d6a:	4b07      	ldr	r3, [pc, #28]	; (2d88 <configure_dac_channel+0x24>)
    2d6c:	4798      	blx	r3

    dac_chan_set_config(&dac_instance, DAC_CHANNEL_0, &config_dac_chan);
    2d6e:	4c07      	ldr	r4, [pc, #28]	; (2d8c <configure_dac_channel+0x28>)
    2d70:	aa01      	add	r2, sp, #4
    2d72:	2100      	movs	r1, #0
    2d74:	0020      	movs	r0, r4
    2d76:	4b06      	ldr	r3, [pc, #24]	; (2d90 <configure_dac_channel+0x2c>)
    2d78:	4798      	blx	r3

    dac_chan_enable(&dac_instance, DAC_CHANNEL_0);
    2d7a:	2100      	movs	r1, #0
    2d7c:	0020      	movs	r0, r4
    2d7e:	4b05      	ldr	r3, [pc, #20]	; (2d94 <configure_dac_channel+0x30>)
    2d80:	4798      	blx	r3
}
    2d82:	b002      	add	sp, #8
    2d84:	bd10      	pop	{r4, pc}
    2d86:	46c0      	nop			; (mov r8, r8)
    2d88:	000009f9 	.word	0x000009f9
    2d8c:	20001dac 	.word	0x20001dac
    2d90:	000009fb 	.word	0x000009fb
    2d94:	000009fd 	.word	0x000009fd

00002d98 <button_handler>:

void button_handler(TIPKA t, STATE *s)
{
    2d98:	b570      	push	{r4, r5, r6, lr}
    2d9a:	000c      	movs	r4, r1
    key_pressed=1;
    2d9c:	2201      	movs	r2, #1
    2d9e:	4b13      	ldr	r3, [pc, #76]	; (2dec <button_handler+0x54>)
    2da0:	701a      	strb	r2, [r3, #0]
    switch(t) {
    2da2:	2801      	cmp	r0, #1
    2da4:	d021      	beq.n	2dea <button_handler+0x52>
    2da6:	2802      	cmp	r0, #2
    2da8:	d11c      	bne.n	2de4 <button_handler+0x4c>
        case BUTTON_1:
            break;
        case BUTTON_2:
            if(get_p_to_item(selected_menu)->type==TYPE_MENU) {
    2daa:	4b11      	ldr	r3, [pc, #68]	; (2df0 <button_handler+0x58>)
    2dac:	6818      	ldr	r0, [r3, #0]
    2dae:	4b11      	ldr	r3, [pc, #68]	; (2df4 <button_handler+0x5c>)
    2db0:	4798      	blx	r3
    2db2:	7803      	ldrb	r3, [r0, #0]
    2db4:	2b04      	cmp	r3, #4
    2db6:	d007      	beq.n	2dc8 <button_handler+0x30>
                menu_swap(&selected_menu, (MENU *)(get_p_to_item(selected_menu)->variable));
                *s= SCROLL;
            }
            else if(*s== EDIT)
    2db8:	7823      	ldrb	r3, [r4, #0]
    2dba:	2b01      	cmp	r3, #1
    2dbc:	d00f      	beq.n	2dde <button_handler+0x46>
                *s= SCROLL;
            else if(*s== SCROLL)
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	d113      	bne.n	2dea <button_handler+0x52>
                *s= EDIT;
    2dc2:	3301      	adds	r3, #1
    2dc4:	7023      	strb	r3, [r4, #0]
    2dc6:	e010      	b.n	2dea <button_handler+0x52>
                menu_swap(&selected_menu, (MENU *)(get_p_to_item(selected_menu)->variable));
    2dc8:	4d09      	ldr	r5, [pc, #36]	; (2df0 <button_handler+0x58>)
    2dca:	6828      	ldr	r0, [r5, #0]
    2dcc:	4b09      	ldr	r3, [pc, #36]	; (2df4 <button_handler+0x5c>)
    2dce:	4798      	blx	r3
    2dd0:	6901      	ldr	r1, [r0, #16]
    2dd2:	0028      	movs	r0, r5
    2dd4:	4b08      	ldr	r3, [pc, #32]	; (2df8 <button_handler+0x60>)
    2dd6:	4798      	blx	r3
                *s= SCROLL;
    2dd8:	2300      	movs	r3, #0
    2dda:	7023      	strb	r3, [r4, #0]
    2ddc:	e005      	b.n	2dea <button_handler+0x52>
                *s= SCROLL;
    2dde:	2300      	movs	r3, #0
    2de0:	7023      	strb	r3, [r4, #0]
    2de2:	e002      	b.n	2dea <button_handler+0x52>
            break;
        default:
            key_pressed=0;
    2de4:	2200      	movs	r2, #0
    2de6:	4b01      	ldr	r3, [pc, #4]	; (2dec <button_handler+0x54>)
    2de8:	701a      	strb	r2, [r3, #0]
            break;
    }
    return;
    2dea:	bd70      	pop	{r4, r5, r6, pc}
    2dec:	20000015 	.word	0x20000015
    2df0:	20000018 	.word	0x20000018
    2df4:	00001cf1 	.word	0x00001cf1
    2df8:	00002245 	.word	0x00002245

00002dfc <main>:
{
    2dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dfe:	46de      	mov	lr, fp
    2e00:	4657      	mov	r7, sl
    2e02:	464e      	mov	r6, r9
    2e04:	4645      	mov	r5, r8
    2e06:	b5e0      	push	{r5, r6, r7, lr}
    2e08:	4cf9      	ldr	r4, [pc, #996]	; (31f0 <main+0x3f4>)
    2e0a:	44a5      	add	sp, r4
    system_init();
    2e0c:	4bf9      	ldr	r3, [pc, #996]	; (31f4 <main+0x3f8>)
    2e0e:	4798      	blx	r3
    IO_init();
    2e10:	4bf9      	ldr	r3, [pc, #996]	; (31f8 <main+0x3fc>)
    2e12:	4798      	blx	r3
    lcd_begin();
    2e14:	4bf9      	ldr	r3, [pc, #996]	; (31fc <main+0x400>)
    2e16:	4798      	blx	r3
    lcd_noCursor();
    2e18:	4bf9      	ldr	r3, [pc, #996]	; (3200 <main+0x404>)
    2e1a:	4798      	blx	r3
    configure_dac();
    2e1c:	4bf9      	ldr	r3, [pc, #996]	; (3204 <main+0x408>)
    2e1e:	4798      	blx	r3
    configure_dac_channel();
    2e20:	4bf9      	ldr	r3, [pc, #996]	; (3208 <main+0x40c>)
    2e22:	4798      	blx	r3
    configure_USB();
    2e24:	4bf9      	ldr	r3, [pc, #996]	; (320c <main+0x410>)
    2e26:	4798      	blx	r3
    delay_init();
    2e28:	4bf9      	ldr	r3, [pc, #996]	; (3210 <main+0x414>)
    2e2a:	4798      	blx	r3
    configure_extint_channel();
    2e2c:	4bf9      	ldr	r3, [pc, #996]	; (3214 <main+0x418>)
    2e2e:	4798      	blx	r3
    dac_enable(&dac_instance);
    2e30:	48f9      	ldr	r0, [pc, #996]	; (3218 <main+0x41c>)
    2e32:	4bfa      	ldr	r3, [pc, #1000]	; (321c <main+0x420>)
    2e34:	4798      	blx	r3
    Enable_global_interrupt();
    2e36:	2501      	movs	r5, #1
    2e38:	4bf9      	ldr	r3, [pc, #996]	; (3220 <main+0x424>)
    2e3a:	701d      	strb	r5, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    2e3c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2e40:	b662      	cpsie	i
    ADSR adsr_channel0 = {.p_to_var = dmx_values + 0};
    2e42:	2234      	movs	r2, #52	; 0x34
    2e44:	2100      	movs	r1, #0
    2e46:	a87a      	add	r0, sp, #488	; 0x1e8
    2e48:	4cf6      	ldr	r4, [pc, #984]	; (3224 <main+0x428>)
    2e4a:	47a0      	blx	r4
    2e4c:	ab87      	add	r3, sp, #540	; 0x21c
    2e4e:	937a      	str	r3, [sp, #488]	; 0x1e8
    ADSR adsr_channel1 = {.p_to_var = dmx_values + 1};
    2e50:	2234      	movs	r2, #52	; 0x34
    2e52:	2100      	movs	r1, #0
    2e54:	a86d      	add	r0, sp, #436	; 0x1b4
    2e56:	47a0      	blx	r4
    2e58:	4bf3      	ldr	r3, [pc, #972]	; (3228 <main+0x42c>)
    2e5a:	aa04      	add	r2, sp, #16
    2e5c:	4694      	mov	ip, r2
    2e5e:	4463      	add	r3, ip
    2e60:	936d      	str	r3, [sp, #436]	; 0x1b4
    ADSR adsr_channel2 = {.p_to_var = dmx_values + 2};
    2e62:	2234      	movs	r2, #52	; 0x34
    2e64:	2100      	movs	r1, #0
    2e66:	a860      	add	r0, sp, #384	; 0x180
    2e68:	47a0      	blx	r4
    2e6a:	4bf0      	ldr	r3, [pc, #960]	; (322c <main+0x430>)
    2e6c:	aa04      	add	r2, sp, #16
    2e6e:	4694      	mov	ip, r2
    2e70:	4463      	add	r3, ip
    2e72:	9360      	str	r3, [sp, #384]	; 0x180
    ADSR adsr_channel3 = {.p_to_var = dmx_values + 3};
    2e74:	2234      	movs	r2, #52	; 0x34
    2e76:	2100      	movs	r1, #0
    2e78:	a853      	add	r0, sp, #332	; 0x14c
    2e7a:	47a0      	blx	r4
    2e7c:	4bec      	ldr	r3, [pc, #944]	; (3230 <main+0x434>)
    2e7e:	aa04      	add	r2, sp, #16
    2e80:	4694      	mov	ip, r2
    2e82:	4463      	add	r3, ip
    2e84:	9353      	str	r3, [sp, #332]	; 0x14c
    ADSR adsr_channel4 = {.p_to_var = dmx_values + 4};
    2e86:	2234      	movs	r2, #52	; 0x34
    2e88:	2100      	movs	r1, #0
    2e8a:	a846      	add	r0, sp, #280	; 0x118
    2e8c:	47a0      	blx	r4
    2e8e:	ab88      	add	r3, sp, #544	; 0x220
    2e90:	9346      	str	r3, [sp, #280]	; 0x118
    configure_tcc0();
    2e92:	4be8      	ldr	r3, [pc, #928]	; (3234 <main+0x438>)
    2e94:	4798      	blx	r3
    configure_tcc0_callbacks(&adsr_channel0, &adsr_channel1, &adsr_channel2, &adsr_channel3, &adsr_channel4);
    2e96:	ab46      	add	r3, sp, #280	; 0x118
    2e98:	9300      	str	r3, [sp, #0]
    2e9a:	ab53      	add	r3, sp, #332	; 0x14c
    2e9c:	aa60      	add	r2, sp, #384	; 0x180
    2e9e:	a96d      	add	r1, sp, #436	; 0x1b4
    2ea0:	a87a      	add	r0, sp, #488	; 0x1e8
    2ea2:	4ce5      	ldr	r4, [pc, #916]	; (3238 <main+0x43c>)
    2ea4:	47a0      	blx	r4
    uint8_t device_mode_num =1;
    2ea6:	2308      	movs	r3, #8
    2ea8:	33ff      	adds	r3, #255	; 0xff
    2eaa:	aa04      	add	r2, sp, #16
    2eac:	4694      	mov	ip, r2
    2eae:	4463      	add	r3, ip
    2eb0:	701d      	strb	r5, [r3, #0]
    2eb2:	ab35      	add	r3, sp, #212	; 0xd4
    2eb4:	af45      	add	r7, sp, #276	; 0x114
    2eb6:	001d      	movs	r5, r3
        p_to_dmx_group_menus[i] = (MENU *)malloc(sizeof(MENU));
    2eb8:	4ee0      	ldr	r6, [pc, #896]	; (323c <main+0x440>)
    2eba:	001c      	movs	r4, r3
    2ebc:	209a      	movs	r0, #154	; 0x9a
    2ebe:	0080      	lsls	r0, r0, #2
    2ec0:	47b0      	blx	r6
    2ec2:	c501      	stmia	r5!, {r0}
    for(uint8_t i = 0; i < 16; i++) {
    2ec4:	42bd      	cmp	r5, r7
    2ec6:	d1f9      	bne.n	2ebc <main+0xc0>
    2ec8:	46a0      	mov	r8, r4
    channel *p_to_channels[5] = {&dmx_ch1, &dmx_ch2, &dmx_ch3, &dmx_ch4, &dmx_ch5};
    2eca:	a830      	add	r0, sp, #192	; 0xc0
    2ecc:	4bdc      	ldr	r3, [pc, #880]	; (3240 <main+0x444>)
    2ece:	0002      	movs	r2, r0
    2ed0:	0019      	movs	r1, r3
    2ed2:	c961      	ldmia	r1!, {r0, r5, r6}
    2ed4:	c261      	stmia	r2!, {r0, r5, r6}
    2ed6:	c921      	ldmia	r1!, {r0, r5}
    2ed8:	c221      	stmia	r2!, {r0, r5}
    volatile MENU *p_to_menus[5] = {&channel1_menu, &channel2_menu, &channel3_menu, &channel4_menu, &channel5_menu};
    2eda:	a92b      	add	r1, sp, #172	; 0xac
    2edc:	3314      	adds	r3, #20
    2ede:	000a      	movs	r2, r1
    2ee0:	cb23      	ldmia	r3!, {r0, r1, r5}
    2ee2:	c223      	stmia	r2!, {r0, r1, r5}
    2ee4:	cb03      	ldmia	r3!, {r0, r1}
    2ee6:	c203      	stmia	r2!, {r0, r1}
    uint8_t brightness  = 0, contrast = 0;
    2ee8:	2300      	movs	r3, #0
    2eea:	229b      	movs	r2, #155	; 0x9b
    2eec:	a904      	add	r1, sp, #16
    2eee:	468c      	mov	ip, r1
    2ef0:	4462      	add	r2, ip
    2ef2:	7013      	strb	r3, [r2, #0]
    2ef4:	229a      	movs	r2, #154	; 0x9a
    2ef6:	4462      	add	r2, ip
    2ef8:	7013      	strb	r3, [r2, #0]
    menu_create_item(&tmp_item, "SETTINGS", TYPE_MENU, "", (void *)&settings_menu, 0, 0);
    2efa:	2600      	movs	r6, #0
    2efc:	9602      	str	r6, [sp, #8]
    2efe:	9601      	str	r6, [sp, #4]
    2f00:	4bd0      	ldr	r3, [pc, #832]	; (3244 <main+0x448>)
    2f02:	9300      	str	r3, [sp, #0]
    2f04:	4bd0      	ldr	r3, [pc, #832]	; (3248 <main+0x44c>)
    2f06:	2204      	movs	r2, #4
    2f08:	49d0      	ldr	r1, [pc, #832]	; (324c <main+0x450>)
    2f0a:	a821      	add	r0, sp, #132	; 0x84
    2f0c:	4fd0      	ldr	r7, [pc, #832]	; (3250 <main+0x454>)
    2f0e:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    2f10:	ab24      	add	r3, sp, #144	; 0x90
    2f12:	466a      	mov	r2, sp
    2f14:	cb23      	ldmia	r3!, {r0, r1, r5}
    2f16:	c223      	stmia	r2!, {r0, r1, r5}
    2f18:	cb23      	ldmia	r3!, {r0, r1, r5}
    2f1a:	c223      	stmia	r2!, {r0, r1, r5}
    2f1c:	9921      	ldr	r1, [sp, #132]	; 0x84
    2f1e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    2f20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2f22:	48cc      	ldr	r0, [pc, #816]	; (3254 <main+0x458>)
    2f24:	4dcc      	ldr	r5, [pc, #816]	; (3258 <main+0x45c>)
    2f26:	47a8      	blx	r5
    menu_create_item(&tmp_item, "CHANNEL 1", TYPE_MENU, "", (void *)p_to_menus[0], 0, 0);
    2f28:	9602      	str	r6, [sp, #8]
    2f2a:	9601      	str	r6, [sp, #4]
    2f2c:	4bcb      	ldr	r3, [pc, #812]	; (325c <main+0x460>)
    2f2e:	9300      	str	r3, [sp, #0]
    2f30:	4bc5      	ldr	r3, [pc, #788]	; (3248 <main+0x44c>)
    2f32:	2204      	movs	r2, #4
    2f34:	49ca      	ldr	r1, [pc, #808]	; (3260 <main+0x464>)
    2f36:	a821      	add	r0, sp, #132	; 0x84
    2f38:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    2f3a:	ab24      	add	r3, sp, #144	; 0x90
    2f3c:	466a      	mov	r2, sp
    2f3e:	cb13      	ldmia	r3!, {r0, r1, r4}
    2f40:	c213      	stmia	r2!, {r0, r1, r4}
    2f42:	cb13      	ldmia	r3!, {r0, r1, r4}
    2f44:	c213      	stmia	r2!, {r0, r1, r4}
    2f46:	9921      	ldr	r1, [sp, #132]	; 0x84
    2f48:	9a22      	ldr	r2, [sp, #136]	; 0x88
    2f4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2f4c:	48c1      	ldr	r0, [pc, #772]	; (3254 <main+0x458>)
    2f4e:	47a8      	blx	r5
    menu_create_item(&tmp_item, "CHANNEL 2", TYPE_MENU, "", (void *)p_to_menus[1], 0, 0);
    2f50:	9602      	str	r6, [sp, #8]
    2f52:	9601      	str	r6, [sp, #4]
    2f54:	4bc3      	ldr	r3, [pc, #780]	; (3264 <main+0x468>)
    2f56:	9300      	str	r3, [sp, #0]
    2f58:	4bbb      	ldr	r3, [pc, #748]	; (3248 <main+0x44c>)
    2f5a:	2204      	movs	r2, #4
    2f5c:	49c2      	ldr	r1, [pc, #776]	; (3268 <main+0x46c>)
    2f5e:	a821      	add	r0, sp, #132	; 0x84
    2f60:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    2f62:	ab24      	add	r3, sp, #144	; 0x90
    2f64:	466a      	mov	r2, sp
    2f66:	cb13      	ldmia	r3!, {r0, r1, r4}
    2f68:	c213      	stmia	r2!, {r0, r1, r4}
    2f6a:	cb13      	ldmia	r3!, {r0, r1, r4}
    2f6c:	c213      	stmia	r2!, {r0, r1, r4}
    2f6e:	9921      	ldr	r1, [sp, #132]	; 0x84
    2f70:	9a22      	ldr	r2, [sp, #136]	; 0x88
    2f72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2f74:	48b7      	ldr	r0, [pc, #732]	; (3254 <main+0x458>)
    2f76:	47a8      	blx	r5
    menu_create_item(&tmp_item, "CHANNEL 3", TYPE_MENU, "", (void *)p_to_menus[2], 0, 0);
    2f78:	9602      	str	r6, [sp, #8]
    2f7a:	9601      	str	r6, [sp, #4]
    2f7c:	4bbb      	ldr	r3, [pc, #748]	; (326c <main+0x470>)
    2f7e:	9300      	str	r3, [sp, #0]
    2f80:	4bb1      	ldr	r3, [pc, #708]	; (3248 <main+0x44c>)
    2f82:	2204      	movs	r2, #4
    2f84:	49ba      	ldr	r1, [pc, #744]	; (3270 <main+0x474>)
    2f86:	a821      	add	r0, sp, #132	; 0x84
    2f88:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    2f8a:	ab24      	add	r3, sp, #144	; 0x90
    2f8c:	466a      	mov	r2, sp
    2f8e:	cb13      	ldmia	r3!, {r0, r1, r4}
    2f90:	c213      	stmia	r2!, {r0, r1, r4}
    2f92:	cb13      	ldmia	r3!, {r0, r1, r4}
    2f94:	c213      	stmia	r2!, {r0, r1, r4}
    2f96:	9921      	ldr	r1, [sp, #132]	; 0x84
    2f98:	9a22      	ldr	r2, [sp, #136]	; 0x88
    2f9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2f9c:	48ad      	ldr	r0, [pc, #692]	; (3254 <main+0x458>)
    2f9e:	47a8      	blx	r5
    menu_create_item(&tmp_item, "CHANNEL 4", TYPE_MENU, "", (void *)p_to_menus[3], 0, 0);
    2fa0:	9602      	str	r6, [sp, #8]
    2fa2:	9601      	str	r6, [sp, #4]
    2fa4:	4bb3      	ldr	r3, [pc, #716]	; (3274 <main+0x478>)
    2fa6:	9300      	str	r3, [sp, #0]
    2fa8:	4ba7      	ldr	r3, [pc, #668]	; (3248 <main+0x44c>)
    2faa:	2204      	movs	r2, #4
    2fac:	49b2      	ldr	r1, [pc, #712]	; (3278 <main+0x47c>)
    2fae:	a821      	add	r0, sp, #132	; 0x84
    2fb0:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    2fb2:	ab24      	add	r3, sp, #144	; 0x90
    2fb4:	466a      	mov	r2, sp
    2fb6:	cb13      	ldmia	r3!, {r0, r1, r4}
    2fb8:	c213      	stmia	r2!, {r0, r1, r4}
    2fba:	cb13      	ldmia	r3!, {r0, r1, r4}
    2fbc:	c213      	stmia	r2!, {r0, r1, r4}
    2fbe:	9921      	ldr	r1, [sp, #132]	; 0x84
    2fc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    2fc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2fc4:	48a3      	ldr	r0, [pc, #652]	; (3254 <main+0x458>)
    2fc6:	47a8      	blx	r5
    menu_create_item(&tmp_item, "CHANNEL 5", TYPE_MENU, "", (void *)p_to_menus[4], 0, 0);
    2fc8:	9602      	str	r6, [sp, #8]
    2fca:	9601      	str	r6, [sp, #4]
    2fcc:	4bab      	ldr	r3, [pc, #684]	; (327c <main+0x480>)
    2fce:	9300      	str	r3, [sp, #0]
    2fd0:	4b9d      	ldr	r3, [pc, #628]	; (3248 <main+0x44c>)
    2fd2:	2204      	movs	r2, #4
    2fd4:	49aa      	ldr	r1, [pc, #680]	; (3280 <main+0x484>)
    2fd6:	a821      	add	r0, sp, #132	; 0x84
    2fd8:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    2fda:	ab24      	add	r3, sp, #144	; 0x90
    2fdc:	466a      	mov	r2, sp
    2fde:	cb13      	ldmia	r3!, {r0, r1, r4}
    2fe0:	c213      	stmia	r2!, {r0, r1, r4}
    2fe2:	cb13      	ldmia	r3!, {r0, r1, r4}
    2fe4:	c213      	stmia	r2!, {r0, r1, r4}
    2fe6:	9921      	ldr	r1, [sp, #132]	; 0x84
    2fe8:	9a22      	ldr	r2, [sp, #136]	; 0x88
    2fea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2fec:	4899      	ldr	r0, [pc, #612]	; (3254 <main+0x458>)
    2fee:	47a8      	blx	r5
    menu_create_item(&tmp_item, "CONTRAST", UINT8, "", (void *)&contrast, 0, 16);
    2ff0:	2383      	movs	r3, #131	; 0x83
    2ff2:	05db      	lsls	r3, r3, #23
    2ff4:	9302      	str	r3, [sp, #8]
    2ff6:	9601      	str	r6, [sp, #4]
    2ff8:	239a      	movs	r3, #154	; 0x9a
    2ffa:	aa04      	add	r2, sp, #16
    2ffc:	4694      	mov	ip, r2
    2ffe:	4463      	add	r3, ip
    3000:	9300      	str	r3, [sp, #0]
    3002:	4b91      	ldr	r3, [pc, #580]	; (3248 <main+0x44c>)
    3004:	2200      	movs	r2, #0
    3006:	499f      	ldr	r1, [pc, #636]	; (3284 <main+0x488>)
    3008:	a821      	add	r0, sp, #132	; 0x84
    300a:	47b8      	blx	r7
    menu_add_item(&settings_menu, tmp_item);
    300c:	ab24      	add	r3, sp, #144	; 0x90
    300e:	466a      	mov	r2, sp
    3010:	cb13      	ldmia	r3!, {r0, r1, r4}
    3012:	c213      	stmia	r2!, {r0, r1, r4}
    3014:	cb13      	ldmia	r3!, {r0, r1, r4}
    3016:	c213      	stmia	r2!, {r0, r1, r4}
    3018:	9921      	ldr	r1, [sp, #132]	; 0x84
    301a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    301c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    301e:	4889      	ldr	r0, [pc, #548]	; (3244 <main+0x448>)
    3020:	47a8      	blx	r5
    menu_create_item(&tmp_item, "BRIGHTNES", UINT8, "", (void *)&brightness, 0, 10);
    3022:	4b99      	ldr	r3, [pc, #612]	; (3288 <main+0x48c>)
    3024:	9302      	str	r3, [sp, #8]
    3026:	9601      	str	r6, [sp, #4]
    3028:	239b      	movs	r3, #155	; 0x9b
    302a:	aa04      	add	r2, sp, #16
    302c:	4694      	mov	ip, r2
    302e:	4463      	add	r3, ip
    3030:	9300      	str	r3, [sp, #0]
    3032:	4b85      	ldr	r3, [pc, #532]	; (3248 <main+0x44c>)
    3034:	2200      	movs	r2, #0
    3036:	4995      	ldr	r1, [pc, #596]	; (328c <main+0x490>)
    3038:	a821      	add	r0, sp, #132	; 0x84
    303a:	47b8      	blx	r7
    menu_add_item(&settings_menu, tmp_item);
    303c:	ab24      	add	r3, sp, #144	; 0x90
    303e:	466a      	mov	r2, sp
    3040:	cb13      	ldmia	r3!, {r0, r1, r4}
    3042:	c213      	stmia	r2!, {r0, r1, r4}
    3044:	cb13      	ldmia	r3!, {r0, r1, r4}
    3046:	c213      	stmia	r2!, {r0, r1, r4}
    3048:	9921      	ldr	r1, [sp, #132]	; 0x84
    304a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    304c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    304e:	487d      	ldr	r0, [pc, #500]	; (3244 <main+0x448>)
    3050:	47a8      	blx	r5
    menu_create_item(&tmp_item, "MODE", UINT8, "", (void *)&device_mode_num, 0, 3);
    3052:	4b8f      	ldr	r3, [pc, #572]	; (3290 <main+0x494>)
    3054:	9302      	str	r3, [sp, #8]
    3056:	9601      	str	r6, [sp, #4]
    3058:	2308      	movs	r3, #8
    305a:	33ff      	adds	r3, #255	; 0xff
    305c:	aa04      	add	r2, sp, #16
    305e:	4694      	mov	ip, r2
    3060:	4463      	add	r3, ip
    3062:	9300      	str	r3, [sp, #0]
    3064:	4b78      	ldr	r3, [pc, #480]	; (3248 <main+0x44c>)
    3066:	2200      	movs	r2, #0
    3068:	498a      	ldr	r1, [pc, #552]	; (3294 <main+0x498>)
    306a:	a821      	add	r0, sp, #132	; 0x84
    306c:	47b8      	blx	r7
    menu_add_item(&settings_menu, tmp_item);
    306e:	ab24      	add	r3, sp, #144	; 0x90
    3070:	466a      	mov	r2, sp
    3072:	cb13      	ldmia	r3!, {r0, r1, r4}
    3074:	c213      	stmia	r2!, {r0, r1, r4}
    3076:	cb13      	ldmia	r3!, {r0, r1, r4}
    3078:	c213      	stmia	r2!, {r0, r1, r4}
    307a:	9921      	ldr	r1, [sp, #132]	; 0x84
    307c:	9a22      	ldr	r2, [sp, #136]	; 0x88
    307e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3080:	4870      	ldr	r0, [pc, #448]	; (3244 <main+0x448>)
    3082:	47a8      	blx	r5
    menu_create_item(&tmp_item, "BACK", TYPE_MENU, "", (void *)&main_menu, 0, 0);
    3084:	9602      	str	r6, [sp, #8]
    3086:	9601      	str	r6, [sp, #4]
    3088:	4b72      	ldr	r3, [pc, #456]	; (3254 <main+0x458>)
    308a:	9300      	str	r3, [sp, #0]
    308c:	4b6e      	ldr	r3, [pc, #440]	; (3248 <main+0x44c>)
    308e:	2204      	movs	r2, #4
    3090:	4981      	ldr	r1, [pc, #516]	; (3298 <main+0x49c>)
    3092:	a821      	add	r0, sp, #132	; 0x84
    3094:	47b8      	blx	r7
    menu_add_item(&settings_menu, tmp_item);
    3096:	ab24      	add	r3, sp, #144	; 0x90
    3098:	466a      	mov	r2, sp
    309a:	cb13      	ldmia	r3!, {r0, r1, r4}
    309c:	c213      	stmia	r2!, {r0, r1, r4}
    309e:	cb13      	ldmia	r3!, {r0, r1, r4}
    30a0:	c213      	stmia	r2!, {r0, r1, r4}
    30a2:	9921      	ldr	r1, [sp, #132]	; 0x84
    30a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
    30a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    30a8:	4866      	ldr	r0, [pc, #408]	; (3244 <main+0x448>)
    30aa:	47a8      	blx	r5
    30ac:	2310      	movs	r3, #16
    30ae:	469b      	mov	fp, r3
    30b0:	2300      	movs	r3, #0
    30b2:	4699      	mov	r9, r3
    30b4:	2700      	movs	r7, #0
    30b6:	4643      	mov	r3, r8
    30b8:	9307      	str	r3, [sp, #28]
    30ba:	465e      	mov	r6, fp
    30bc:	0035      	movs	r5, r6
    30be:	3d10      	subs	r5, #16
            menu_create_item(&tmp_item, menu_item_name, UINT8, "", dmx_values + i * 16 + j, -1, 256);
    30c0:	4b61      	ldr	r3, [pc, #388]	; (3248 <main+0x44c>)
    30c2:	4698      	mov	r8, r3
    30c4:	9b07      	ldr	r3, [sp, #28]
    30c6:	469b      	mov	fp, r3
    30c8:	9709      	str	r7, [sp, #36]	; 0x24
            sprintf(menu_item_name, "DMX%d", i * MENU_MAX_ITEMS + j);
    30ca:	002a      	movs	r2, r5
    30cc:	4973      	ldr	r1, [pc, #460]	; (329c <main+0x4a0>)
    30ce:	a80c      	add	r0, sp, #48	; 0x30
    30d0:	4b73      	ldr	r3, [pc, #460]	; (32a0 <main+0x4a4>)
    30d2:	4798      	blx	r3
            menu_create_item(&tmp_item, menu_item_name, UINT8, "", dmx_values + i * 16 + j, -1, 256);
    30d4:	2387      	movs	r3, #135	; 0x87
    30d6:	05db      	lsls	r3, r3, #23
    30d8:	9302      	str	r3, [sp, #8]
    30da:	4b72      	ldr	r3, [pc, #456]	; (32a4 <main+0x4a8>)
    30dc:	9301      	str	r3, [sp, #4]
    30de:	464b      	mov	r3, r9
    30e0:	18eb      	adds	r3, r5, r3
    30e2:	aa87      	add	r2, sp, #540	; 0x21c
    30e4:	4694      	mov	ip, r2
    30e6:	4463      	add	r3, ip
    30e8:	9300      	str	r3, [sp, #0]
    30ea:	4643      	mov	r3, r8
    30ec:	2200      	movs	r2, #0
    30ee:	a90c      	add	r1, sp, #48	; 0x30
    30f0:	a821      	add	r0, sp, #132	; 0x84
    30f2:	4f57      	ldr	r7, [pc, #348]	; (3250 <main+0x454>)
    30f4:	47b8      	blx	r7
            menu_add_item(p_to_dmx_group_menus[i], tmp_item);
    30f6:	465b      	mov	r3, fp
    30f8:	681b      	ldr	r3, [r3, #0]
    30fa:	0018      	movs	r0, r3
    30fc:	9308      	str	r3, [sp, #32]
    30fe:	ab24      	add	r3, sp, #144	; 0x90
    3100:	466a      	mov	r2, sp
    3102:	cb92      	ldmia	r3!, {r1, r4, r7}
    3104:	c292      	stmia	r2!, {r1, r4, r7}
    3106:	cb92      	ldmia	r3!, {r1, r4, r7}
    3108:	c292      	stmia	r2!, {r1, r4, r7}
    310a:	9921      	ldr	r1, [sp, #132]	; 0x84
    310c:	9a22      	ldr	r2, [sp, #136]	; 0x88
    310e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3110:	4f51      	ldr	r7, [pc, #324]	; (3258 <main+0x45c>)
    3112:	47b8      	blx	r7
    3114:	3501      	adds	r5, #1
        for(uint16_t j = 0; j < MENU_MAX_ITEMS-1 ; j++) {
    3116:	42b5      	cmp	r5, r6
    3118:	d1d7      	bne.n	30ca <main+0x2ce>
    311a:	465b      	mov	r3, fp
    311c:	9307      	str	r3, [sp, #28]
    311e:	9f09      	ldr	r7, [sp, #36]	; 0x24
        menu_create_item(&tmp_item, "BACK", TYPE_MENU, "", (void *)&static_channels_menu, 0, 0);
    3120:	2500      	movs	r5, #0
    3122:	9502      	str	r5, [sp, #8]
    3124:	9501      	str	r5, [sp, #4]
    3126:	4b60      	ldr	r3, [pc, #384]	; (32a8 <main+0x4ac>)
    3128:	9300      	str	r3, [sp, #0]
    312a:	4b47      	ldr	r3, [pc, #284]	; (3248 <main+0x44c>)
    312c:	2204      	movs	r2, #4
    312e:	495a      	ldr	r1, [pc, #360]	; (3298 <main+0x49c>)
    3130:	a821      	add	r0, sp, #132	; 0x84
    3132:	4c47      	ldr	r4, [pc, #284]	; (3250 <main+0x454>)
    3134:	46a2      	mov	sl, r4
    3136:	47a0      	blx	r4
        menu_add_item(p_to_dmx_group_menus[i], tmp_item);
    3138:	ab24      	add	r3, sp, #144	; 0x90
    313a:	466a      	mov	r2, sp
    313c:	cb13      	ldmia	r3!, {r0, r1, r4}
    313e:	c213      	stmia	r2!, {r0, r1, r4}
    3140:	cb13      	ldmia	r3!, {r0, r1, r4}
    3142:	c213      	stmia	r2!, {r0, r1, r4}
    3144:	9921      	ldr	r1, [sp, #132]	; 0x84
    3146:	9a22      	ldr	r2, [sp, #136]	; 0x88
    3148:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    314a:	9808      	ldr	r0, [sp, #32]
    314c:	4c42      	ldr	r4, [pc, #264]	; (3258 <main+0x45c>)
    314e:	46a0      	mov	r8, r4
    3150:	47a0      	blx	r4
        sprintf(menu_item_name, "DMX%d-%d", i * 16, i * 16 + 15);
    3152:	003b      	movs	r3, r7
    3154:	330f      	adds	r3, #15
    3156:	003a      	movs	r2, r7
    3158:	4954      	ldr	r1, [pc, #336]	; (32ac <main+0x4b0>)
    315a:	a80c      	add	r0, sp, #48	; 0x30
    315c:	4c50      	ldr	r4, [pc, #320]	; (32a0 <main+0x4a4>)
    315e:	47a0      	blx	r4
        menu_create_item(&tmp_item, menu_item_name, TYPE_MENU, "", (void *)p_to_dmx_group_menus[i], 0, 0);
    3160:	9502      	str	r5, [sp, #8]
    3162:	9501      	str	r5, [sp, #4]
    3164:	9b08      	ldr	r3, [sp, #32]
    3166:	9300      	str	r3, [sp, #0]
    3168:	4b37      	ldr	r3, [pc, #220]	; (3248 <main+0x44c>)
    316a:	2204      	movs	r2, #4
    316c:	a90c      	add	r1, sp, #48	; 0x30
    316e:	a821      	add	r0, sp, #132	; 0x84
    3170:	47d0      	blx	sl
        menu_add_item(&static_channels_menu, tmp_item);
    3172:	ab24      	add	r3, sp, #144	; 0x90
    3174:	466a      	mov	r2, sp
    3176:	cb13      	ldmia	r3!, {r0, r1, r4}
    3178:	c213      	stmia	r2!, {r0, r1, r4}
    317a:	cb13      	ldmia	r3!, {r0, r1, r4}
    317c:	c213      	stmia	r2!, {r0, r1, r4}
    317e:	9921      	ldr	r1, [sp, #132]	; 0x84
    3180:	9a22      	ldr	r2, [sp, #136]	; 0x88
    3182:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3184:	4848      	ldr	r0, [pc, #288]	; (32a8 <main+0x4ac>)
    3186:	47c0      	blx	r8
    3188:	9b07      	ldr	r3, [sp, #28]
    318a:	3304      	adds	r3, #4
    318c:	9307      	str	r3, [sp, #28]
    318e:	3710      	adds	r7, #16
    3190:	2301      	movs	r3, #1
    3192:	425b      	negs	r3, r3
    3194:	469c      	mov	ip, r3
    3196:	44e1      	add	r9, ip
    3198:	3611      	adds	r6, #17
    for(uint16_t i = 0; i < (MAX_DMX_CHANNELS / 16); i++) {
    319a:	3302      	adds	r3, #2
    319c:	33ff      	adds	r3, #255	; 0xff
    319e:	429f      	cmp	r7, r3
    31a0:	d18c      	bne.n	30bc <main+0x2c0>
    menu_create_item(&tmp_item, "STATIC_CH", TYPE_MENU, "", (void *)&static_channels_menu, 0, 0);
    31a2:	2400      	movs	r4, #0
    31a4:	9402      	str	r4, [sp, #8]
    31a6:	9401      	str	r4, [sp, #4]
    31a8:	4f3f      	ldr	r7, [pc, #252]	; (32a8 <main+0x4ac>)
    31aa:	9700      	str	r7, [sp, #0]
    31ac:	4b26      	ldr	r3, [pc, #152]	; (3248 <main+0x44c>)
    31ae:	2204      	movs	r2, #4
    31b0:	493f      	ldr	r1, [pc, #252]	; (32b0 <main+0x4b4>)
    31b2:	a821      	add	r0, sp, #132	; 0x84
    31b4:	4d26      	ldr	r5, [pc, #152]	; (3250 <main+0x454>)
    31b6:	47a8      	blx	r5
    menu_add_item(&main_menu, tmp_item);
    31b8:	4b26      	ldr	r3, [pc, #152]	; (3254 <main+0x458>)
    31ba:	4699      	mov	r9, r3
    31bc:	ab24      	add	r3, sp, #144	; 0x90
    31be:	466a      	mov	r2, sp
    31c0:	cb43      	ldmia	r3!, {r0, r1, r6}
    31c2:	c243      	stmia	r2!, {r0, r1, r6}
    31c4:	cb43      	ldmia	r3!, {r0, r1, r6}
    31c6:	c243      	stmia	r2!, {r0, r1, r6}
    31c8:	9921      	ldr	r1, [sp, #132]	; 0x84
    31ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
    31cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    31ce:	4648      	mov	r0, r9
    31d0:	4e21      	ldr	r6, [pc, #132]	; (3258 <main+0x45c>)
    31d2:	47b0      	blx	r6
    menu_create_item(&tmp_item, "BACK", TYPE_MENU, "", (void *)&main_menu, 0, 0);
    31d4:	9402      	str	r4, [sp, #8]
    31d6:	9401      	str	r4, [sp, #4]
    31d8:	464b      	mov	r3, r9
    31da:	9300      	str	r3, [sp, #0]
    31dc:	4b1a      	ldr	r3, [pc, #104]	; (3248 <main+0x44c>)
    31de:	2204      	movs	r2, #4
    31e0:	492d      	ldr	r1, [pc, #180]	; (3298 <main+0x49c>)
    31e2:	a821      	add	r0, sp, #132	; 0x84
    31e4:	47a8      	blx	r5
    menu_add_item(&static_channels_menu, tmp_item);
    31e6:	ab24      	add	r3, sp, #144	; 0x90
    31e8:	466a      	mov	r2, sp
    31ea:	cb13      	ldmia	r3!, {r0, r1, r4}
    31ec:	c213      	stmia	r2!, {r0, r1, r4}
    31ee:	e061      	b.n	32b4 <main+0x4b8>
    31f0:	fffffbec 	.word	0xfffffbec
    31f4:	00002b51 	.word	0x00002b51
    31f8:	00002c5d 	.word	0x00002c5d
    31fc:	000003c9 	.word	0x000003c9
    3200:	00000539 	.word	0x00000539
    3204:	00002d39 	.word	0x00002d39
    3208:	00002d65 	.word	0x00002d65
    320c:	000022f5 	.word	0x000022f5
    3210:	000006b1 	.word	0x000006b1
    3214:	00000671 	.word	0x00000671
    3218:	20001dac 	.word	0x20001dac
    321c:	000009b1 	.word	0x000009b1
    3220:	20000014 	.word	0x20000014
    3224:	000050fb 	.word	0x000050fb
    3228:	0000020d 	.word	0x0000020d
    322c:	0000020e 	.word	0x0000020e
    3230:	0000020f 	.word	0x0000020f
    3234:	0000255d 	.word	0x0000255d
    3238:	000025ad 	.word	0x000025ad
    323c:	000050d5 	.word	0x000050d5
    3240:	00005a78 	.word	0x00005a78
    3244:	20000f54 	.word	0x20000f54
    3248:	00005a24 	.word	0x00005a24
    324c:	00005aa0 	.word	0x00005aa0
    3250:	00001fd9 	.word	0x00001fd9
    3254:	20000cec 	.word	0x20000cec
    3258:	00001c45 	.word	0x00001c45
    325c:	200000e4 	.word	0x200000e4
    3260:	00005aac 	.word	0x00005aac
    3264:	2000034c 	.word	0x2000034c
    3268:	00005ab8 	.word	0x00005ab8
    326c:	200005b4 	.word	0x200005b4
    3270:	00005ac4 	.word	0x00005ac4
    3274:	2000081c 	.word	0x2000081c
    3278:	00005ad0 	.word	0x00005ad0
    327c:	20000a84 	.word	0x20000a84
    3280:	00005adc 	.word	0x00005adc
    3284:	00005ae8 	.word	0x00005ae8
    3288:	41200000 	.word	0x41200000
    328c:	00005af4 	.word	0x00005af4
    3290:	40400000 	.word	0x40400000
    3294:	00005b00 	.word	0x00005b00
    3298:	00005b08 	.word	0x00005b08
    329c:	00005b10 	.word	0x00005b10
    32a0:	00005281 	.word	0x00005281
    32a4:	bf800000 	.word	0xbf800000
    32a8:	200011c0 	.word	0x200011c0
    32ac:	00005b18 	.word	0x00005b18
    32b0:	00005b24 	.word	0x00005b24
    32b4:	cb13      	ldmia	r3!, {r0, r1, r4}
    32b6:	c213      	stmia	r2!, {r0, r1, r4}
    32b8:	9921      	ldr	r1, [sp, #132]	; 0x84
    32ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
    32bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    32be:	0038      	movs	r0, r7
    32c0:	47b0      	blx	r6
    32c2:	2600      	movs	r6, #0
        menu_create_item(&tmp_item, "DMX CH   ", UINT32, "    ", (void *)&p_to_channels[i]->ch, 0, 255);
    32c4:	46b0      	mov	r8, r6
    32c6:	ab30      	add	r3, sp, #192	; 0xc0
    32c8:	4642      	mov	r2, r8
    32ca:	58d3      	ldr	r3, [r2, r3]
    32cc:	469a      	mov	sl, r3
    32ce:	4fb6      	ldr	r7, [pc, #728]	; (35a8 <main+0x7ac>)
    32d0:	9702      	str	r7, [sp, #8]
    32d2:	2400      	movs	r4, #0
    32d4:	9401      	str	r4, [sp, #4]
    32d6:	9300      	str	r3, [sp, #0]
    32d8:	4bb4      	ldr	r3, [pc, #720]	; (35ac <main+0x7b0>)
    32da:	2202      	movs	r2, #2
    32dc:	49b4      	ldr	r1, [pc, #720]	; (35b0 <main+0x7b4>)
    32de:	a821      	add	r0, sp, #132	; 0x84
    32e0:	4eb4      	ldr	r6, [pc, #720]	; (35b4 <main+0x7b8>)
    32e2:	46b1      	mov	r9, r6
    32e4:	47b0      	blx	r6
        menu_add_item(p_to_menus[i], tmp_item);
    32e6:	ab2b      	add	r3, sp, #172	; 0xac
    32e8:	4642      	mov	r2, r8
    32ea:	58d3      	ldr	r3, [r2, r3]
    32ec:	0018      	movs	r0, r3
    32ee:	ab24      	add	r3, sp, #144	; 0x90
    32f0:	466a      	mov	r2, sp
    32f2:	cb62      	ldmia	r3!, {r1, r5, r6}
    32f4:	c262      	stmia	r2!, {r1, r5, r6}
    32f6:	cb62      	ldmia	r3!, {r1, r5, r6}
    32f8:	c262      	stmia	r2!, {r1, r5, r6}
    32fa:	9921      	ldr	r1, [sp, #132]	; 0x84
    32fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
    32fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3300:	9007      	str	r0, [sp, #28]
    3302:	4ead      	ldr	r6, [pc, #692]	; (35b8 <main+0x7bc>)
    3304:	47b0      	blx	r6
        menu_create_item(&tmp_item, "LEVEL    ", FLOAT, "    ", (void *)&p_to_channels[i]->level, 0, 255);
    3306:	9702      	str	r7, [sp, #8]
    3308:	9401      	str	r4, [sp, #4]
    330a:	4653      	mov	r3, sl
    330c:	3314      	adds	r3, #20
    330e:	9300      	str	r3, [sp, #0]
    3310:	4ba6      	ldr	r3, [pc, #664]	; (35ac <main+0x7b0>)
    3312:	2203      	movs	r2, #3
    3314:	49a9      	ldr	r1, [pc, #676]	; (35bc <main+0x7c0>)
    3316:	a821      	add	r0, sp, #132	; 0x84
    3318:	47c8      	blx	r9
        menu_add_item(p_to_menus[i], tmp_item);
    331a:	ab24      	add	r3, sp, #144	; 0x90
    331c:	466a      	mov	r2, sp
    331e:	cb23      	ldmia	r3!, {r0, r1, r5}
    3320:	c223      	stmia	r2!, {r0, r1, r5}
    3322:	cb23      	ldmia	r3!, {r0, r1, r5}
    3324:	c223      	stmia	r2!, {r0, r1, r5}
    3326:	9921      	ldr	r1, [sp, #132]	; 0x84
    3328:	9a22      	ldr	r2, [sp, #136]	; 0x88
    332a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    332c:	9807      	ldr	r0, [sp, #28]
    332e:	47b0      	blx	r6
        menu_create_item(&tmp_item, "ATTACK   ", UINT32, "  ms", (void *)&p_to_channels[i]->A, 0, 0);
    3330:	4fa3      	ldr	r7, [pc, #652]	; (35c0 <main+0x7c4>)
    3332:	9402      	str	r4, [sp, #8]
    3334:	9401      	str	r4, [sp, #4]
    3336:	4652      	mov	r2, sl
    3338:	1d13      	adds	r3, r2, #4
    333a:	9300      	str	r3, [sp, #0]
    333c:	003b      	movs	r3, r7
    333e:	2202      	movs	r2, #2
    3340:	49a0      	ldr	r1, [pc, #640]	; (35c4 <main+0x7c8>)
    3342:	a821      	add	r0, sp, #132	; 0x84
    3344:	47c8      	blx	r9
        menu_add_item(p_to_menus[i], tmp_item);
    3346:	ab24      	add	r3, sp, #144	; 0x90
    3348:	466a      	mov	r2, sp
    334a:	cb23      	ldmia	r3!, {r0, r1, r5}
    334c:	c223      	stmia	r2!, {r0, r1, r5}
    334e:	cb23      	ldmia	r3!, {r0, r1, r5}
    3350:	c223      	stmia	r2!, {r0, r1, r5}
    3352:	9921      	ldr	r1, [sp, #132]	; 0x84
    3354:	9a22      	ldr	r2, [sp, #136]	; 0x88
    3356:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3358:	9807      	ldr	r0, [sp, #28]
    335a:	47b0      	blx	r6
        menu_create_item(&tmp_item, "DECAY    ", UINT32, "  ms", (void *)&p_to_channels[i]->D, 0, 0);
    335c:	9402      	str	r4, [sp, #8]
    335e:	9401      	str	r4, [sp, #4]
    3360:	4653      	mov	r3, sl
    3362:	3308      	adds	r3, #8
    3364:	9300      	str	r3, [sp, #0]
    3366:	003b      	movs	r3, r7
    3368:	2202      	movs	r2, #2
    336a:	4997      	ldr	r1, [pc, #604]	; (35c8 <main+0x7cc>)
    336c:	a821      	add	r0, sp, #132	; 0x84
    336e:	47c8      	blx	r9
        menu_add_item(p_to_menus[i], tmp_item);
    3370:	ab24      	add	r3, sp, #144	; 0x90
    3372:	466a      	mov	r2, sp
    3374:	cb23      	ldmia	r3!, {r0, r1, r5}
    3376:	c223      	stmia	r2!, {r0, r1, r5}
    3378:	cb23      	ldmia	r3!, {r0, r1, r5}
    337a:	c223      	stmia	r2!, {r0, r1, r5}
    337c:	9921      	ldr	r1, [sp, #132]	; 0x84
    337e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    3380:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3382:	9807      	ldr	r0, [sp, #28]
    3384:	47b0      	blx	r6
        menu_create_item(&tmp_item, "SUSTAIN  ", UINT32, "    ", (void *)&p_to_channels[i]->S, 0, 0);
    3386:	9402      	str	r4, [sp, #8]
    3388:	9401      	str	r4, [sp, #4]
    338a:	4653      	mov	r3, sl
    338c:	330c      	adds	r3, #12
    338e:	9300      	str	r3, [sp, #0]
    3390:	4b86      	ldr	r3, [pc, #536]	; (35ac <main+0x7b0>)
    3392:	2202      	movs	r2, #2
    3394:	498d      	ldr	r1, [pc, #564]	; (35cc <main+0x7d0>)
    3396:	a821      	add	r0, sp, #132	; 0x84
    3398:	47c8      	blx	r9
        menu_add_item(p_to_menus[i], tmp_item);
    339a:	ab24      	add	r3, sp, #144	; 0x90
    339c:	466a      	mov	r2, sp
    339e:	cb23      	ldmia	r3!, {r0, r1, r5}
    33a0:	c223      	stmia	r2!, {r0, r1, r5}
    33a2:	cb23      	ldmia	r3!, {r0, r1, r5}
    33a4:	c223      	stmia	r2!, {r0, r1, r5}
    33a6:	9921      	ldr	r1, [sp, #132]	; 0x84
    33a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
    33aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    33ac:	9807      	ldr	r0, [sp, #28]
    33ae:	47b0      	blx	r6
        menu_create_item(&tmp_item, "RELEASE  ", UINT32, "  ms", (void *)&p_to_channels[i]->R, 0, 0);
    33b0:	9402      	str	r4, [sp, #8]
    33b2:	9401      	str	r4, [sp, #4]
    33b4:	4653      	mov	r3, sl
    33b6:	3310      	adds	r3, #16
    33b8:	9300      	str	r3, [sp, #0]
    33ba:	003b      	movs	r3, r7
    33bc:	2202      	movs	r2, #2
    33be:	4984      	ldr	r1, [pc, #528]	; (35d0 <main+0x7d4>)
    33c0:	a821      	add	r0, sp, #132	; 0x84
    33c2:	47c8      	blx	r9
        menu_add_item(p_to_menus[i], tmp_item);
    33c4:	ab24      	add	r3, sp, #144	; 0x90
    33c6:	466a      	mov	r2, sp
    33c8:	cb23      	ldmia	r3!, {r0, r1, r5}
    33ca:	c223      	stmia	r2!, {r0, r1, r5}
    33cc:	cb23      	ldmia	r3!, {r0, r1, r5}
    33ce:	c223      	stmia	r2!, {r0, r1, r5}
    33d0:	9921      	ldr	r1, [sp, #132]	; 0x84
    33d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    33d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    33d6:	9f07      	ldr	r7, [sp, #28]
    33d8:	0038      	movs	r0, r7
    33da:	47b0      	blx	r6
        menu_create_item(&tmp_item, "BACK     ", TYPE_MENU, "    ", (void *)&main_menu, 0, 0);
    33dc:	9402      	str	r4, [sp, #8]
    33de:	9401      	str	r4, [sp, #4]
    33e0:	4b7c      	ldr	r3, [pc, #496]	; (35d4 <main+0x7d8>)
    33e2:	9300      	str	r3, [sp, #0]
    33e4:	4b71      	ldr	r3, [pc, #452]	; (35ac <main+0x7b0>)
    33e6:	2204      	movs	r2, #4
    33e8:	497b      	ldr	r1, [pc, #492]	; (35d8 <main+0x7dc>)
    33ea:	a821      	add	r0, sp, #132	; 0x84
    33ec:	47c8      	blx	r9
        menu_add_item(p_to_menus[i], tmp_item);
    33ee:	ab24      	add	r3, sp, #144	; 0x90
    33f0:	466a      	mov	r2, sp
    33f2:	cb13      	ldmia	r3!, {r0, r1, r4}
    33f4:	c213      	stmia	r2!, {r0, r1, r4}
    33f6:	cb13      	ldmia	r3!, {r0, r1, r4}
    33f8:	c213      	stmia	r2!, {r0, r1, r4}
    33fa:	9921      	ldr	r1, [sp, #132]	; 0x84
    33fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
    33fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3400:	0038      	movs	r0, r7
    3402:	47b0      	blx	r6
    3404:	2304      	movs	r3, #4
    3406:	469c      	mov	ip, r3
    3408:	44e0      	add	r8, ip
    for(uint8_t i = 0; i < 5; i++) {
    340a:	4643      	mov	r3, r8
    340c:	2b14      	cmp	r3, #20
    340e:	d000      	beq.n	3412 <main+0x616>
    3410:	e759      	b.n	32c6 <main+0x4ca>
    3412:	ab87      	add	r3, sp, #540	; 0x21c
    3414:	a9ff      	add	r1, sp, #1020	; 0x3fc
    3416:	3114      	adds	r1, #20
        dmx_values[i] = 0;
    3418:	2200      	movs	r2, #0
    341a:	701a      	strb	r2, [r3, #0]
    341c:	3301      	adds	r3, #1
    for(uint16_t i = 0; i < sizeof(dmx_values); i++) {
    341e:	428b      	cmp	r3, r1
    3420:	d1fb      	bne.n	341a <main+0x61e>
    device_mode = TRIGGER;
    3422:	2200      	movs	r2, #0
    3424:	4b6d      	ldr	r3, [pc, #436]	; (35dc <main+0x7e0>)
    3426:	701a      	strb	r2, [r3, #0]
    contrast=9;
    3428:	3209      	adds	r2, #9
    342a:	239a      	movs	r3, #154	; 0x9a
    342c:	a904      	add	r1, sp, #16
    342e:	468c      	mov	ip, r1
    3430:	4463      	add	r3, ip
    3432:	701a      	strb	r2, [r3, #0]
    uint32_t send_data_timer = 0, read_button_timer =0;
    3434:	2300      	movs	r3, #0
                        increment_menu_position(selected_menu);
    3436:	496a      	ldr	r1, [pc, #424]	; (35e0 <main+0x7e4>)
    3438:	4688      	mov	r8, r1
    343a:	469a      	mov	sl, r3
    343c:	9308      	str	r3, [sp, #32]
    343e:	e036      	b.n	34ae <main+0x6b2>
                        menu_decrement_item(selected_menu);
    3440:	4b67      	ldr	r3, [pc, #412]	; (35e0 <main+0x7e4>)
    3442:	6818      	ldr	r0, [r3, #0]
    3444:	4b67      	ldr	r3, [pc, #412]	; (35e4 <main+0x7e8>)
    3446:	4798      	blx	r3
                for(uint8_t i=get_encoder_speed(); i>0; i--)
    3448:	3c01      	subs	r4, #1
    344a:	b2e4      	uxtb	r4, r4
    344c:	2c00      	cmp	r4, #0
    344e:	d01f      	beq.n	3490 <main+0x694>
                    if(state==SCROLL) {
    3450:	7833      	ldrb	r3, [r6, #0]
    3452:	2b00      	cmp	r3, #0
    3454:	d1f4      	bne.n	3440 <main+0x644>
                        decrement_menu_position(selected_menu);
    3456:	465b      	mov	r3, fp
    3458:	6818      	ldr	r0, [r3, #0]
    345a:	47a8      	blx	r5
    345c:	e7f4      	b.n	3448 <main+0x64c>
                for(uint8_t i=get_encoder_speed(); i>0; i--)
    345e:	4b62      	ldr	r3, [pc, #392]	; (35e8 <main+0x7ec>)
    3460:	4798      	blx	r3
    3462:	1e04      	subs	r4, r0, #0
    3464:	d014      	beq.n	3490 <main+0x694>
                    if(state==SCROLL) {
    3466:	4e61      	ldr	r6, [pc, #388]	; (35ec <main+0x7f0>)
    3468:	e007      	b.n	347a <main+0x67e>
                        menu_increment_item(selected_menu);
    346a:	4b5d      	ldr	r3, [pc, #372]	; (35e0 <main+0x7e4>)
    346c:	6818      	ldr	r0, [r3, #0]
    346e:	4b60      	ldr	r3, [pc, #384]	; (35f0 <main+0x7f4>)
    3470:	4798      	blx	r3
                for(uint8_t i=get_encoder_speed(); i>0; i--)
    3472:	3c01      	subs	r4, #1
    3474:	b2e4      	uxtb	r4, r4
    3476:	2c00      	cmp	r4, #0
    3478:	d00a      	beq.n	3490 <main+0x694>
                    if(state==SCROLL) {
    347a:	7833      	ldrb	r3, [r6, #0]
    347c:	2b00      	cmp	r3, #0
    347e:	d1f4      	bne.n	346a <main+0x66e>
                        increment_menu_position(selected_menu);
    3480:	4643      	mov	r3, r8
    3482:	6818      	ldr	r0, [r3, #0]
    3484:	4b5b      	ldr	r3, [pc, #364]	; (35f4 <main+0x7f8>)
    3486:	4798      	blx	r3
    3488:	e7f3      	b.n	3472 <main+0x676>
                key_pressed = 0;
    348a:	2200      	movs	r2, #0
    348c:	4b5a      	ldr	r3, [pc, #360]	; (35f8 <main+0x7fc>)
    348e:	701a      	strb	r2, [r3, #0]
        if(millis()-read_button_timer>2) {
    3490:	4b5a      	ldr	r3, [pc, #360]	; (35fc <main+0x800>)
    3492:	4798      	blx	r3
    3494:	9b08      	ldr	r3, [sp, #32]
    3496:	1ac0      	subs	r0, r0, r3
    3498:	2802      	cmp	r0, #2
    349a:	d84f      	bhi.n	353c <main+0x740>
        if(millis() - send_data_timer > 1000) {
    349c:	4b57      	ldr	r3, [pc, #348]	; (35fc <main+0x800>)
    349e:	4798      	blx	r3
    34a0:	4653      	mov	r3, sl
    34a2:	1ac0      	subs	r0, r0, r3
    34a4:	23fa      	movs	r3, #250	; 0xfa
    34a6:	009b      	lsls	r3, r3, #2
    34a8:	4298      	cmp	r0, r3
    34aa:	d850      	bhi.n	354e <main+0x752>
    34ac:	9b07      	ldr	r3, [sp, #28]
        if(contrast != prev_contrast) {
    34ae:	229a      	movs	r2, #154	; 0x9a
    34b0:	a904      	add	r1, sp, #16
    34b2:	468c      	mov	ip, r1
    34b4:	4462      	add	r2, ip
    34b6:	7812      	ldrb	r2, [r2, #0]
    34b8:	9207      	str	r2, [sp, #28]
    34ba:	4293      	cmp	r3, r2
    34bc:	d004      	beq.n	34c8 <main+0x6cc>
            dac_chan_write(&dac_instance, DAC_CHANNEL_0, (contrast << 5));
    34be:	0152      	lsls	r2, r2, #5
    34c0:	2100      	movs	r1, #0
    34c2:	484f      	ldr	r0, [pc, #316]	; (3600 <main+0x804>)
    34c4:	4b4f      	ldr	r3, [pc, #316]	; (3604 <main+0x808>)
    34c6:	4798      	blx	r3
        if(key_pressed) {
    34c8:	4b4b      	ldr	r3, [pc, #300]	; (35f8 <main+0x7fc>)
    34ca:	781b      	ldrb	r3, [r3, #0]
    34cc:	2b00      	cmp	r3, #0
    34ce:	d023      	beq.n	3518 <main+0x71c>
    34d0:	ac0c      	add	r4, sp, #48	; 0x30
    34d2:	ae21      	add	r6, sp, #132	; 0x84
    34d4:	0020      	movs	r0, r4
                    test[i][j]=' ';
    34d6:	2120      	movs	r1, #32
                test[i][20]=0;
    34d8:	2500      	movs	r5, #0
    34da:	0002      	movs	r2, r0
    34dc:	3214      	adds	r2, #20
    uint8_t prev_contrast = 0;
    34de:	0003      	movs	r3, r0
                    test[i][j]=' ';
    34e0:	7019      	strb	r1, [r3, #0]
    34e2:	3301      	adds	r3, #1
                for(uint8_t j = 0; j < 20; j++)
    34e4:	429a      	cmp	r2, r3
    34e6:	d1fb      	bne.n	34e0 <main+0x6e4>
                test[i][20]=0;
    34e8:	7505      	strb	r5, [r0, #20]
    34ea:	3015      	adds	r0, #21
            for(uint8_t i = 0; i < 4; i++) {
    34ec:	4286      	cmp	r6, r0
    34ee:	d1f4      	bne.n	34da <main+0x6de>
            menu_whole_string(selected_menu, test, state);
    34f0:	4b3e      	ldr	r3, [pc, #248]	; (35ec <main+0x7f0>)
    34f2:	781a      	ldrb	r2, [r3, #0]
    34f4:	4b3a      	ldr	r3, [pc, #232]	; (35e0 <main+0x7e4>)
    34f6:	6818      	ldr	r0, [r3, #0]
    34f8:	a90c      	add	r1, sp, #48	; 0x30
    34fa:	4b43      	ldr	r3, [pc, #268]	; (3608 <main+0x80c>)
    34fc:	4798      	blx	r3
            for(uint8_t i = 0; i < 4; i++) {
    34fe:	2500      	movs	r5, #0
                lcd_setCursor(0,i);
    3500:	4f42      	ldr	r7, [pc, #264]	; (360c <main+0x810>)
                lcd_printstr(test[i]);
    3502:	4e43      	ldr	r6, [pc, #268]	; (3610 <main+0x814>)
                lcd_setCursor(0,i);
    3504:	0029      	movs	r1, r5
    3506:	2000      	movs	r0, #0
    3508:	47b8      	blx	r7
                lcd_printstr(test[i]);
    350a:	0020      	movs	r0, r4
    350c:	47b0      	blx	r6
            for(uint8_t i = 0; i < 4; i++) {
    350e:	3501      	adds	r5, #1
    3510:	b2ed      	uxtb	r5, r5
    3512:	3415      	adds	r4, #21
    3514:	2d04      	cmp	r5, #4
    3516:	d1f5      	bne.n	3504 <main+0x708>
        key_pressed = 1;
    3518:	2201      	movs	r2, #1
    351a:	4b37      	ldr	r3, [pc, #220]	; (35f8 <main+0x7fc>)
    351c:	701a      	strb	r2, [r3, #0]
        switch(get_encoder_status()) {
    351e:	4b3d      	ldr	r3, [pc, #244]	; (3614 <main+0x818>)
    3520:	4798      	blx	r3
    3522:	2801      	cmp	r0, #1
    3524:	d09b      	beq.n	345e <main+0x662>
    3526:	2802      	cmp	r0, #2
    3528:	d1af      	bne.n	348a <main+0x68e>
                for(uint8_t i=get_encoder_speed(); i>0; i--)
    352a:	4b2f      	ldr	r3, [pc, #188]	; (35e8 <main+0x7ec>)
    352c:	4798      	blx	r3
    352e:	1e04      	subs	r4, r0, #0
    3530:	d0ae      	beq.n	3490 <main+0x694>
                    if(state==SCROLL) {
    3532:	4e2e      	ldr	r6, [pc, #184]	; (35ec <main+0x7f0>)
                        decrement_menu_position(selected_menu);
    3534:	4b2a      	ldr	r3, [pc, #168]	; (35e0 <main+0x7e4>)
    3536:	469b      	mov	fp, r3
    3538:	4d37      	ldr	r5, [pc, #220]	; (3618 <main+0x81c>)
    353a:	e789      	b.n	3450 <main+0x654>
            read_button_timer=millis();
    353c:	4b2f      	ldr	r3, [pc, #188]	; (35fc <main+0x800>)
    353e:	4798      	blx	r3
    3540:	9008      	str	r0, [sp, #32]
            button_handler(button_read(),&state);
    3542:	4b36      	ldr	r3, [pc, #216]	; (361c <main+0x820>)
    3544:	4798      	blx	r3
    3546:	4929      	ldr	r1, [pc, #164]	; (35ec <main+0x7f0>)
    3548:	4b35      	ldr	r3, [pc, #212]	; (3620 <main+0x824>)
    354a:	4798      	blx	r3
    354c:	e7a6      	b.n	349c <main+0x6a0>
            send_data_timer = millis();
    354e:	4b2b      	ldr	r3, [pc, #172]	; (35fc <main+0x800>)
    3550:	4798      	blx	r3
    3552:	4682      	mov	sl, r0
            device_mode = select_device_mode(device_mode_num);
    3554:	2308      	movs	r3, #8
    3556:	33ff      	adds	r3, #255	; 0xff
    3558:	aa04      	add	r2, sp, #16
    355a:	4694      	mov	ip, r2
    355c:	4463      	add	r3, ip
    355e:	7818      	ldrb	r0, [r3, #0]
    3560:	4b30      	ldr	r3, [pc, #192]	; (3624 <main+0x828>)
    3562:	4798      	blx	r3
    3564:	4b1d      	ldr	r3, [pc, #116]	; (35dc <main+0x7e0>)
    3566:	7018      	strb	r0, [r3, #0]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    3568:	2280      	movs	r2, #128	; 0x80
    356a:	0552      	lsls	r2, r2, #21
    356c:	2382      	movs	r3, #130	; 0x82
    356e:	05db      	lsls	r3, r3, #23
    3570:	61da      	str	r2, [r3, #28]
            if(device_mode == TRIGGER || device_mode == BOTH) {
    3572:	2302      	movs	r3, #2
    3574:	4398      	bics	r0, r3
    3576:	d199      	bne.n	34ac <main+0x6b0>
                BREAKPOINT;
    3578:	46c0      	nop			; (mov r8, r8)
                uint8_t usb_values[] = {get_ADSR_value(&adsr_channel0), get_ADSR_value(&adsr_channel1), get_ADSR_value(&adsr_channel2), get_ADSR_value(&adsr_channel3), get_ADSR_value(&adsr_channel4)};
    357a:	a87a      	add	r0, sp, #488	; 0x1e8
    357c:	4b2a      	ldr	r3, [pc, #168]	; (3628 <main+0x82c>)
    357e:	4699      	mov	r9, r3
    3580:	4798      	blx	r3
    3582:	ac0a      	add	r4, sp, #40	; 0x28
    3584:	7020      	strb	r0, [r4, #0]
    3586:	a86d      	add	r0, sp, #436	; 0x1b4
    3588:	47c8      	blx	r9
    358a:	7060      	strb	r0, [r4, #1]
    358c:	a860      	add	r0, sp, #384	; 0x180
    358e:	47c8      	blx	r9
    3590:	70a0      	strb	r0, [r4, #2]
    3592:	a853      	add	r0, sp, #332	; 0x14c
    3594:	47c8      	blx	r9
    3596:	70e0      	strb	r0, [r4, #3]
    3598:	a846      	add	r0, sp, #280	; 0x118
    359a:	47c8      	blx	r9
    359c:	7120      	strb	r0, [r4, #4]
                USB_SendMessage(usb_values, 5);
    359e:	2105      	movs	r1, #5
    35a0:	a80a      	add	r0, sp, #40	; 0x28
    35a2:	4b22      	ldr	r3, [pc, #136]	; (362c <main+0x830>)
    35a4:	4798      	blx	r3
    35a6:	e781      	b.n	34ac <main+0x6b0>
    35a8:	437f0000 	.word	0x437f0000
    35ac:	00005a20 	.word	0x00005a20
    35b0:	00005b30 	.word	0x00005b30
    35b4:	00001fd9 	.word	0x00001fd9
    35b8:	00001c45 	.word	0x00001c45
    35bc:	00005b3c 	.word	0x00005b3c
    35c0:	00005b48 	.word	0x00005b48
    35c4:	00005b50 	.word	0x00005b50
    35c8:	00005b5c 	.word	0x00005b5c
    35cc:	00005b68 	.word	0x00005b68
    35d0:	00005b74 	.word	0x00005b74
    35d4:	20000cec 	.word	0x20000cec
    35d8:	00005b80 	.word	0x00005b80
    35dc:	20001e18 	.word	0x20001e18
    35e0:	20000018 	.word	0x20000018
    35e4:	00002145 	.word	0x00002145
    35e8:	00002619 	.word	0x00002619
    35ec:	200011bc 	.word	0x200011bc
    35f0:	00002045 	.word	0x00002045
    35f4:	00001c91 	.word	0x00001c91
    35f8:	20000015 	.word	0x20000015
    35fc:	00002441 	.word	0x00002441
    3600:	20001dac 	.word	0x20001dac
    3604:	00000a01 	.word	0x00000a01
    3608:	00001f2d 	.word	0x00001f2d
    360c:	000004fd 	.word	0x000004fd
    3610:	00000569 	.word	0x00000569
    3614:	0000244d 	.word	0x0000244d
    3618:	00001cc5 	.word	0x00001cc5
    361c:	00000675 	.word	0x00000675
    3620:	00002d99 	.word	0x00002d99
    3624:	00002c41 	.word	0x00002c41
    3628:	0000066d 	.word	0x0000066d
    362c:	00002275 	.word	0x00002275

00003630 <__udivsi3>:
    3630:	2200      	movs	r2, #0
    3632:	0843      	lsrs	r3, r0, #1
    3634:	428b      	cmp	r3, r1
    3636:	d374      	bcc.n	3722 <__udivsi3+0xf2>
    3638:	0903      	lsrs	r3, r0, #4
    363a:	428b      	cmp	r3, r1
    363c:	d35f      	bcc.n	36fe <__udivsi3+0xce>
    363e:	0a03      	lsrs	r3, r0, #8
    3640:	428b      	cmp	r3, r1
    3642:	d344      	bcc.n	36ce <__udivsi3+0x9e>
    3644:	0b03      	lsrs	r3, r0, #12
    3646:	428b      	cmp	r3, r1
    3648:	d328      	bcc.n	369c <__udivsi3+0x6c>
    364a:	0c03      	lsrs	r3, r0, #16
    364c:	428b      	cmp	r3, r1
    364e:	d30d      	bcc.n	366c <__udivsi3+0x3c>
    3650:	22ff      	movs	r2, #255	; 0xff
    3652:	0209      	lsls	r1, r1, #8
    3654:	ba12      	rev	r2, r2
    3656:	0c03      	lsrs	r3, r0, #16
    3658:	428b      	cmp	r3, r1
    365a:	d302      	bcc.n	3662 <__udivsi3+0x32>
    365c:	1212      	asrs	r2, r2, #8
    365e:	0209      	lsls	r1, r1, #8
    3660:	d065      	beq.n	372e <__udivsi3+0xfe>
    3662:	0b03      	lsrs	r3, r0, #12
    3664:	428b      	cmp	r3, r1
    3666:	d319      	bcc.n	369c <__udivsi3+0x6c>
    3668:	e000      	b.n	366c <__udivsi3+0x3c>
    366a:	0a09      	lsrs	r1, r1, #8
    366c:	0bc3      	lsrs	r3, r0, #15
    366e:	428b      	cmp	r3, r1
    3670:	d301      	bcc.n	3676 <__udivsi3+0x46>
    3672:	03cb      	lsls	r3, r1, #15
    3674:	1ac0      	subs	r0, r0, r3
    3676:	4152      	adcs	r2, r2
    3678:	0b83      	lsrs	r3, r0, #14
    367a:	428b      	cmp	r3, r1
    367c:	d301      	bcc.n	3682 <__udivsi3+0x52>
    367e:	038b      	lsls	r3, r1, #14
    3680:	1ac0      	subs	r0, r0, r3
    3682:	4152      	adcs	r2, r2
    3684:	0b43      	lsrs	r3, r0, #13
    3686:	428b      	cmp	r3, r1
    3688:	d301      	bcc.n	368e <__udivsi3+0x5e>
    368a:	034b      	lsls	r3, r1, #13
    368c:	1ac0      	subs	r0, r0, r3
    368e:	4152      	adcs	r2, r2
    3690:	0b03      	lsrs	r3, r0, #12
    3692:	428b      	cmp	r3, r1
    3694:	d301      	bcc.n	369a <__udivsi3+0x6a>
    3696:	030b      	lsls	r3, r1, #12
    3698:	1ac0      	subs	r0, r0, r3
    369a:	4152      	adcs	r2, r2
    369c:	0ac3      	lsrs	r3, r0, #11
    369e:	428b      	cmp	r3, r1
    36a0:	d301      	bcc.n	36a6 <__udivsi3+0x76>
    36a2:	02cb      	lsls	r3, r1, #11
    36a4:	1ac0      	subs	r0, r0, r3
    36a6:	4152      	adcs	r2, r2
    36a8:	0a83      	lsrs	r3, r0, #10
    36aa:	428b      	cmp	r3, r1
    36ac:	d301      	bcc.n	36b2 <__udivsi3+0x82>
    36ae:	028b      	lsls	r3, r1, #10
    36b0:	1ac0      	subs	r0, r0, r3
    36b2:	4152      	adcs	r2, r2
    36b4:	0a43      	lsrs	r3, r0, #9
    36b6:	428b      	cmp	r3, r1
    36b8:	d301      	bcc.n	36be <__udivsi3+0x8e>
    36ba:	024b      	lsls	r3, r1, #9
    36bc:	1ac0      	subs	r0, r0, r3
    36be:	4152      	adcs	r2, r2
    36c0:	0a03      	lsrs	r3, r0, #8
    36c2:	428b      	cmp	r3, r1
    36c4:	d301      	bcc.n	36ca <__udivsi3+0x9a>
    36c6:	020b      	lsls	r3, r1, #8
    36c8:	1ac0      	subs	r0, r0, r3
    36ca:	4152      	adcs	r2, r2
    36cc:	d2cd      	bcs.n	366a <__udivsi3+0x3a>
    36ce:	09c3      	lsrs	r3, r0, #7
    36d0:	428b      	cmp	r3, r1
    36d2:	d301      	bcc.n	36d8 <__udivsi3+0xa8>
    36d4:	01cb      	lsls	r3, r1, #7
    36d6:	1ac0      	subs	r0, r0, r3
    36d8:	4152      	adcs	r2, r2
    36da:	0983      	lsrs	r3, r0, #6
    36dc:	428b      	cmp	r3, r1
    36de:	d301      	bcc.n	36e4 <__udivsi3+0xb4>
    36e0:	018b      	lsls	r3, r1, #6
    36e2:	1ac0      	subs	r0, r0, r3
    36e4:	4152      	adcs	r2, r2
    36e6:	0943      	lsrs	r3, r0, #5
    36e8:	428b      	cmp	r3, r1
    36ea:	d301      	bcc.n	36f0 <__udivsi3+0xc0>
    36ec:	014b      	lsls	r3, r1, #5
    36ee:	1ac0      	subs	r0, r0, r3
    36f0:	4152      	adcs	r2, r2
    36f2:	0903      	lsrs	r3, r0, #4
    36f4:	428b      	cmp	r3, r1
    36f6:	d301      	bcc.n	36fc <__udivsi3+0xcc>
    36f8:	010b      	lsls	r3, r1, #4
    36fa:	1ac0      	subs	r0, r0, r3
    36fc:	4152      	adcs	r2, r2
    36fe:	08c3      	lsrs	r3, r0, #3
    3700:	428b      	cmp	r3, r1
    3702:	d301      	bcc.n	3708 <__udivsi3+0xd8>
    3704:	00cb      	lsls	r3, r1, #3
    3706:	1ac0      	subs	r0, r0, r3
    3708:	4152      	adcs	r2, r2
    370a:	0883      	lsrs	r3, r0, #2
    370c:	428b      	cmp	r3, r1
    370e:	d301      	bcc.n	3714 <__udivsi3+0xe4>
    3710:	008b      	lsls	r3, r1, #2
    3712:	1ac0      	subs	r0, r0, r3
    3714:	4152      	adcs	r2, r2
    3716:	0843      	lsrs	r3, r0, #1
    3718:	428b      	cmp	r3, r1
    371a:	d301      	bcc.n	3720 <__udivsi3+0xf0>
    371c:	004b      	lsls	r3, r1, #1
    371e:	1ac0      	subs	r0, r0, r3
    3720:	4152      	adcs	r2, r2
    3722:	1a41      	subs	r1, r0, r1
    3724:	d200      	bcs.n	3728 <__udivsi3+0xf8>
    3726:	4601      	mov	r1, r0
    3728:	4152      	adcs	r2, r2
    372a:	4610      	mov	r0, r2
    372c:	4770      	bx	lr
    372e:	e7ff      	b.n	3730 <__udivsi3+0x100>
    3730:	b501      	push	{r0, lr}
    3732:	2000      	movs	r0, #0
    3734:	f000 f806 	bl	3744 <__aeabi_idiv0>
    3738:	bd02      	pop	{r1, pc}
    373a:	46c0      	nop			; (mov r8, r8)

0000373c <__aeabi_uidivmod>:
    373c:	2900      	cmp	r1, #0
    373e:	d0f7      	beq.n	3730 <__udivsi3+0x100>
    3740:	e776      	b.n	3630 <__udivsi3>
    3742:	4770      	bx	lr

00003744 <__aeabi_idiv0>:
    3744:	4770      	bx	lr
    3746:	46c0      	nop			; (mov r8, r8)

00003748 <__aeabi_cfrcmple>:
    3748:	4684      	mov	ip, r0
    374a:	1c08      	adds	r0, r1, #0
    374c:	4661      	mov	r1, ip
    374e:	e7ff      	b.n	3750 <__aeabi_cfcmpeq>

00003750 <__aeabi_cfcmpeq>:
    3750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3752:	f000 f9bb 	bl	3acc <__lesf2>
    3756:	2800      	cmp	r0, #0
    3758:	d401      	bmi.n	375e <__aeabi_cfcmpeq+0xe>
    375a:	2100      	movs	r1, #0
    375c:	42c8      	cmn	r0, r1
    375e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003760 <__aeabi_fcmpeq>:
    3760:	b510      	push	{r4, lr}
    3762:	f000 f94d 	bl	3a00 <__eqsf2>
    3766:	4240      	negs	r0, r0
    3768:	3001      	adds	r0, #1
    376a:	bd10      	pop	{r4, pc}

0000376c <__aeabi_fcmplt>:
    376c:	b510      	push	{r4, lr}
    376e:	f000 f9ad 	bl	3acc <__lesf2>
    3772:	2800      	cmp	r0, #0
    3774:	db01      	blt.n	377a <__aeabi_fcmplt+0xe>
    3776:	2000      	movs	r0, #0
    3778:	bd10      	pop	{r4, pc}
    377a:	2001      	movs	r0, #1
    377c:	bd10      	pop	{r4, pc}
    377e:	46c0      	nop			; (mov r8, r8)

00003780 <__aeabi_fcmple>:
    3780:	b510      	push	{r4, lr}
    3782:	f000 f9a3 	bl	3acc <__lesf2>
    3786:	2800      	cmp	r0, #0
    3788:	dd01      	ble.n	378e <__aeabi_fcmple+0xe>
    378a:	2000      	movs	r0, #0
    378c:	bd10      	pop	{r4, pc}
    378e:	2001      	movs	r0, #1
    3790:	bd10      	pop	{r4, pc}
    3792:	46c0      	nop			; (mov r8, r8)

00003794 <__aeabi_fcmpgt>:
    3794:	b510      	push	{r4, lr}
    3796:	f000 f959 	bl	3a4c <__gesf2>
    379a:	2800      	cmp	r0, #0
    379c:	dc01      	bgt.n	37a2 <__aeabi_fcmpgt+0xe>
    379e:	2000      	movs	r0, #0
    37a0:	bd10      	pop	{r4, pc}
    37a2:	2001      	movs	r0, #1
    37a4:	bd10      	pop	{r4, pc}
    37a6:	46c0      	nop			; (mov r8, r8)

000037a8 <__aeabi_fcmpge>:
    37a8:	b510      	push	{r4, lr}
    37aa:	f000 f94f 	bl	3a4c <__gesf2>
    37ae:	2800      	cmp	r0, #0
    37b0:	da01      	bge.n	37b6 <__aeabi_fcmpge+0xe>
    37b2:	2000      	movs	r0, #0
    37b4:	bd10      	pop	{r4, pc}
    37b6:	2001      	movs	r0, #1
    37b8:	bd10      	pop	{r4, pc}
    37ba:	46c0      	nop			; (mov r8, r8)

000037bc <__aeabi_uldivmod>:
    37bc:	2b00      	cmp	r3, #0
    37be:	d111      	bne.n	37e4 <__aeabi_uldivmod+0x28>
    37c0:	2a00      	cmp	r2, #0
    37c2:	d10f      	bne.n	37e4 <__aeabi_uldivmod+0x28>
    37c4:	2900      	cmp	r1, #0
    37c6:	d100      	bne.n	37ca <__aeabi_uldivmod+0xe>
    37c8:	2800      	cmp	r0, #0
    37ca:	d002      	beq.n	37d2 <__aeabi_uldivmod+0x16>
    37cc:	2100      	movs	r1, #0
    37ce:	43c9      	mvns	r1, r1
    37d0:	1c08      	adds	r0, r1, #0
    37d2:	b407      	push	{r0, r1, r2}
    37d4:	4802      	ldr	r0, [pc, #8]	; (37e0 <__aeabi_uldivmod+0x24>)
    37d6:	a102      	add	r1, pc, #8	; (adr r1, 37e0 <__aeabi_uldivmod+0x24>)
    37d8:	1840      	adds	r0, r0, r1
    37da:	9002      	str	r0, [sp, #8]
    37dc:	bd03      	pop	{r0, r1, pc}
    37de:	46c0      	nop			; (mov r8, r8)
    37e0:	ffffff65 	.word	0xffffff65
    37e4:	b403      	push	{r0, r1}
    37e6:	4668      	mov	r0, sp
    37e8:	b501      	push	{r0, lr}
    37ea:	9802      	ldr	r0, [sp, #8]
    37ec:	f000 f848 	bl	3880 <__udivmoddi4>
    37f0:	9b01      	ldr	r3, [sp, #4]
    37f2:	469e      	mov	lr, r3
    37f4:	b002      	add	sp, #8
    37f6:	bc0c      	pop	{r2, r3}
    37f8:	4770      	bx	lr
    37fa:	46c0      	nop			; (mov r8, r8)

000037fc <__aeabi_lmul>:
    37fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    37fe:	46ce      	mov	lr, r9
    3800:	4647      	mov	r7, r8
    3802:	0415      	lsls	r5, r2, #16
    3804:	0c2d      	lsrs	r5, r5, #16
    3806:	002e      	movs	r6, r5
    3808:	b580      	push	{r7, lr}
    380a:	0407      	lsls	r7, r0, #16
    380c:	0c14      	lsrs	r4, r2, #16
    380e:	0c3f      	lsrs	r7, r7, #16
    3810:	4699      	mov	r9, r3
    3812:	0c03      	lsrs	r3, r0, #16
    3814:	437e      	muls	r6, r7
    3816:	435d      	muls	r5, r3
    3818:	4367      	muls	r7, r4
    381a:	4363      	muls	r3, r4
    381c:	197f      	adds	r7, r7, r5
    381e:	0c34      	lsrs	r4, r6, #16
    3820:	19e4      	adds	r4, r4, r7
    3822:	469c      	mov	ip, r3
    3824:	42a5      	cmp	r5, r4
    3826:	d903      	bls.n	3830 <__aeabi_lmul+0x34>
    3828:	2380      	movs	r3, #128	; 0x80
    382a:	025b      	lsls	r3, r3, #9
    382c:	4698      	mov	r8, r3
    382e:	44c4      	add	ip, r8
    3830:	464b      	mov	r3, r9
    3832:	4351      	muls	r1, r2
    3834:	4343      	muls	r3, r0
    3836:	0436      	lsls	r6, r6, #16
    3838:	0c36      	lsrs	r6, r6, #16
    383a:	0c25      	lsrs	r5, r4, #16
    383c:	0424      	lsls	r4, r4, #16
    383e:	4465      	add	r5, ip
    3840:	19a4      	adds	r4, r4, r6
    3842:	1859      	adds	r1, r3, r1
    3844:	1949      	adds	r1, r1, r5
    3846:	0020      	movs	r0, r4
    3848:	bc0c      	pop	{r2, r3}
    384a:	4690      	mov	r8, r2
    384c:	4699      	mov	r9, r3
    384e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003850 <__aeabi_f2uiz>:
    3850:	219e      	movs	r1, #158	; 0x9e
    3852:	b510      	push	{r4, lr}
    3854:	05c9      	lsls	r1, r1, #23
    3856:	1c04      	adds	r4, r0, #0
    3858:	f7ff ffa6 	bl	37a8 <__aeabi_fcmpge>
    385c:	2800      	cmp	r0, #0
    385e:	d103      	bne.n	3868 <__aeabi_f2uiz+0x18>
    3860:	1c20      	adds	r0, r4, #0
    3862:	f000 fc31 	bl	40c8 <__aeabi_f2iz>
    3866:	bd10      	pop	{r4, pc}
    3868:	219e      	movs	r1, #158	; 0x9e
    386a:	1c20      	adds	r0, r4, #0
    386c:	05c9      	lsls	r1, r1, #23
    386e:	f000 fa8f 	bl	3d90 <__aeabi_fsub>
    3872:	f000 fc29 	bl	40c8 <__aeabi_f2iz>
    3876:	2380      	movs	r3, #128	; 0x80
    3878:	061b      	lsls	r3, r3, #24
    387a:	469c      	mov	ip, r3
    387c:	4460      	add	r0, ip
    387e:	e7f2      	b.n	3866 <__aeabi_f2uiz+0x16>

00003880 <__udivmoddi4>:
    3880:	b5f0      	push	{r4, r5, r6, r7, lr}
    3882:	4657      	mov	r7, sl
    3884:	464e      	mov	r6, r9
    3886:	4645      	mov	r5, r8
    3888:	46de      	mov	lr, fp
    388a:	b5e0      	push	{r5, r6, r7, lr}
    388c:	0004      	movs	r4, r0
    388e:	b083      	sub	sp, #12
    3890:	000d      	movs	r5, r1
    3892:	4692      	mov	sl, r2
    3894:	4699      	mov	r9, r3
    3896:	428b      	cmp	r3, r1
    3898:	d82f      	bhi.n	38fa <__udivmoddi4+0x7a>
    389a:	d02c      	beq.n	38f6 <__udivmoddi4+0x76>
    389c:	4649      	mov	r1, r9
    389e:	4650      	mov	r0, sl
    38a0:	f001 fbe8 	bl	5074 <__clzdi2>
    38a4:	0029      	movs	r1, r5
    38a6:	0006      	movs	r6, r0
    38a8:	0020      	movs	r0, r4
    38aa:	f001 fbe3 	bl	5074 <__clzdi2>
    38ae:	1a33      	subs	r3, r6, r0
    38b0:	4698      	mov	r8, r3
    38b2:	3b20      	subs	r3, #32
    38b4:	469b      	mov	fp, r3
    38b6:	d500      	bpl.n	38ba <__udivmoddi4+0x3a>
    38b8:	e074      	b.n	39a4 <__udivmoddi4+0x124>
    38ba:	4653      	mov	r3, sl
    38bc:	465a      	mov	r2, fp
    38be:	4093      	lsls	r3, r2
    38c0:	001f      	movs	r7, r3
    38c2:	4653      	mov	r3, sl
    38c4:	4642      	mov	r2, r8
    38c6:	4093      	lsls	r3, r2
    38c8:	001e      	movs	r6, r3
    38ca:	42af      	cmp	r7, r5
    38cc:	d829      	bhi.n	3922 <__udivmoddi4+0xa2>
    38ce:	d026      	beq.n	391e <__udivmoddi4+0x9e>
    38d0:	465b      	mov	r3, fp
    38d2:	1ba4      	subs	r4, r4, r6
    38d4:	41bd      	sbcs	r5, r7
    38d6:	2b00      	cmp	r3, #0
    38d8:	da00      	bge.n	38dc <__udivmoddi4+0x5c>
    38da:	e079      	b.n	39d0 <__udivmoddi4+0x150>
    38dc:	2200      	movs	r2, #0
    38de:	2300      	movs	r3, #0
    38e0:	9200      	str	r2, [sp, #0]
    38e2:	9301      	str	r3, [sp, #4]
    38e4:	2301      	movs	r3, #1
    38e6:	465a      	mov	r2, fp
    38e8:	4093      	lsls	r3, r2
    38ea:	9301      	str	r3, [sp, #4]
    38ec:	2301      	movs	r3, #1
    38ee:	4642      	mov	r2, r8
    38f0:	4093      	lsls	r3, r2
    38f2:	9300      	str	r3, [sp, #0]
    38f4:	e019      	b.n	392a <__udivmoddi4+0xaa>
    38f6:	4282      	cmp	r2, r0
    38f8:	d9d0      	bls.n	389c <__udivmoddi4+0x1c>
    38fa:	2200      	movs	r2, #0
    38fc:	2300      	movs	r3, #0
    38fe:	9200      	str	r2, [sp, #0]
    3900:	9301      	str	r3, [sp, #4]
    3902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3904:	2b00      	cmp	r3, #0
    3906:	d001      	beq.n	390c <__udivmoddi4+0x8c>
    3908:	601c      	str	r4, [r3, #0]
    390a:	605d      	str	r5, [r3, #4]
    390c:	9800      	ldr	r0, [sp, #0]
    390e:	9901      	ldr	r1, [sp, #4]
    3910:	b003      	add	sp, #12
    3912:	bc3c      	pop	{r2, r3, r4, r5}
    3914:	4690      	mov	r8, r2
    3916:	4699      	mov	r9, r3
    3918:	46a2      	mov	sl, r4
    391a:	46ab      	mov	fp, r5
    391c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    391e:	42a3      	cmp	r3, r4
    3920:	d9d6      	bls.n	38d0 <__udivmoddi4+0x50>
    3922:	2200      	movs	r2, #0
    3924:	2300      	movs	r3, #0
    3926:	9200      	str	r2, [sp, #0]
    3928:	9301      	str	r3, [sp, #4]
    392a:	4643      	mov	r3, r8
    392c:	2b00      	cmp	r3, #0
    392e:	d0e8      	beq.n	3902 <__udivmoddi4+0x82>
    3930:	07fb      	lsls	r3, r7, #31
    3932:	0872      	lsrs	r2, r6, #1
    3934:	431a      	orrs	r2, r3
    3936:	4646      	mov	r6, r8
    3938:	087b      	lsrs	r3, r7, #1
    393a:	e00e      	b.n	395a <__udivmoddi4+0xda>
    393c:	42ab      	cmp	r3, r5
    393e:	d101      	bne.n	3944 <__udivmoddi4+0xc4>
    3940:	42a2      	cmp	r2, r4
    3942:	d80c      	bhi.n	395e <__udivmoddi4+0xde>
    3944:	1aa4      	subs	r4, r4, r2
    3946:	419d      	sbcs	r5, r3
    3948:	2001      	movs	r0, #1
    394a:	1924      	adds	r4, r4, r4
    394c:	416d      	adcs	r5, r5
    394e:	2100      	movs	r1, #0
    3950:	3e01      	subs	r6, #1
    3952:	1824      	adds	r4, r4, r0
    3954:	414d      	adcs	r5, r1
    3956:	2e00      	cmp	r6, #0
    3958:	d006      	beq.n	3968 <__udivmoddi4+0xe8>
    395a:	42ab      	cmp	r3, r5
    395c:	d9ee      	bls.n	393c <__udivmoddi4+0xbc>
    395e:	3e01      	subs	r6, #1
    3960:	1924      	adds	r4, r4, r4
    3962:	416d      	adcs	r5, r5
    3964:	2e00      	cmp	r6, #0
    3966:	d1f8      	bne.n	395a <__udivmoddi4+0xda>
    3968:	465b      	mov	r3, fp
    396a:	9800      	ldr	r0, [sp, #0]
    396c:	9901      	ldr	r1, [sp, #4]
    396e:	1900      	adds	r0, r0, r4
    3970:	4169      	adcs	r1, r5
    3972:	2b00      	cmp	r3, #0
    3974:	db22      	blt.n	39bc <__udivmoddi4+0x13c>
    3976:	002b      	movs	r3, r5
    3978:	465a      	mov	r2, fp
    397a:	40d3      	lsrs	r3, r2
    397c:	002a      	movs	r2, r5
    397e:	4644      	mov	r4, r8
    3980:	40e2      	lsrs	r2, r4
    3982:	001c      	movs	r4, r3
    3984:	465b      	mov	r3, fp
    3986:	0015      	movs	r5, r2
    3988:	2b00      	cmp	r3, #0
    398a:	db2c      	blt.n	39e6 <__udivmoddi4+0x166>
    398c:	0026      	movs	r6, r4
    398e:	409e      	lsls	r6, r3
    3990:	0033      	movs	r3, r6
    3992:	0026      	movs	r6, r4
    3994:	4647      	mov	r7, r8
    3996:	40be      	lsls	r6, r7
    3998:	0032      	movs	r2, r6
    399a:	1a80      	subs	r0, r0, r2
    399c:	4199      	sbcs	r1, r3
    399e:	9000      	str	r0, [sp, #0]
    39a0:	9101      	str	r1, [sp, #4]
    39a2:	e7ae      	b.n	3902 <__udivmoddi4+0x82>
    39a4:	4642      	mov	r2, r8
    39a6:	2320      	movs	r3, #32
    39a8:	1a9b      	subs	r3, r3, r2
    39aa:	4652      	mov	r2, sl
    39ac:	40da      	lsrs	r2, r3
    39ae:	4641      	mov	r1, r8
    39b0:	0013      	movs	r3, r2
    39b2:	464a      	mov	r2, r9
    39b4:	408a      	lsls	r2, r1
    39b6:	0017      	movs	r7, r2
    39b8:	431f      	orrs	r7, r3
    39ba:	e782      	b.n	38c2 <__udivmoddi4+0x42>
    39bc:	4642      	mov	r2, r8
    39be:	2320      	movs	r3, #32
    39c0:	1a9b      	subs	r3, r3, r2
    39c2:	002a      	movs	r2, r5
    39c4:	4646      	mov	r6, r8
    39c6:	409a      	lsls	r2, r3
    39c8:	0023      	movs	r3, r4
    39ca:	40f3      	lsrs	r3, r6
    39cc:	4313      	orrs	r3, r2
    39ce:	e7d5      	b.n	397c <__udivmoddi4+0xfc>
    39d0:	4642      	mov	r2, r8
    39d2:	2320      	movs	r3, #32
    39d4:	2100      	movs	r1, #0
    39d6:	1a9b      	subs	r3, r3, r2
    39d8:	2200      	movs	r2, #0
    39da:	9100      	str	r1, [sp, #0]
    39dc:	9201      	str	r2, [sp, #4]
    39de:	2201      	movs	r2, #1
    39e0:	40da      	lsrs	r2, r3
    39e2:	9201      	str	r2, [sp, #4]
    39e4:	e782      	b.n	38ec <__udivmoddi4+0x6c>
    39e6:	4642      	mov	r2, r8
    39e8:	2320      	movs	r3, #32
    39ea:	0026      	movs	r6, r4
    39ec:	1a9b      	subs	r3, r3, r2
    39ee:	40de      	lsrs	r6, r3
    39f0:	002f      	movs	r7, r5
    39f2:	46b4      	mov	ip, r6
    39f4:	4097      	lsls	r7, r2
    39f6:	4666      	mov	r6, ip
    39f8:	003b      	movs	r3, r7
    39fa:	4333      	orrs	r3, r6
    39fc:	e7c9      	b.n	3992 <__udivmoddi4+0x112>
    39fe:	46c0      	nop			; (mov r8, r8)

00003a00 <__eqsf2>:
    3a00:	b570      	push	{r4, r5, r6, lr}
    3a02:	0042      	lsls	r2, r0, #1
    3a04:	0245      	lsls	r5, r0, #9
    3a06:	024e      	lsls	r6, r1, #9
    3a08:	004c      	lsls	r4, r1, #1
    3a0a:	0fc3      	lsrs	r3, r0, #31
    3a0c:	0a6d      	lsrs	r5, r5, #9
    3a0e:	0e12      	lsrs	r2, r2, #24
    3a10:	0a76      	lsrs	r6, r6, #9
    3a12:	0e24      	lsrs	r4, r4, #24
    3a14:	0fc9      	lsrs	r1, r1, #31
    3a16:	2001      	movs	r0, #1
    3a18:	2aff      	cmp	r2, #255	; 0xff
    3a1a:	d006      	beq.n	3a2a <__eqsf2+0x2a>
    3a1c:	2cff      	cmp	r4, #255	; 0xff
    3a1e:	d003      	beq.n	3a28 <__eqsf2+0x28>
    3a20:	42a2      	cmp	r2, r4
    3a22:	d101      	bne.n	3a28 <__eqsf2+0x28>
    3a24:	42b5      	cmp	r5, r6
    3a26:	d006      	beq.n	3a36 <__eqsf2+0x36>
    3a28:	bd70      	pop	{r4, r5, r6, pc}
    3a2a:	2d00      	cmp	r5, #0
    3a2c:	d1fc      	bne.n	3a28 <__eqsf2+0x28>
    3a2e:	2cff      	cmp	r4, #255	; 0xff
    3a30:	d1fa      	bne.n	3a28 <__eqsf2+0x28>
    3a32:	2e00      	cmp	r6, #0
    3a34:	d1f8      	bne.n	3a28 <__eqsf2+0x28>
    3a36:	428b      	cmp	r3, r1
    3a38:	d006      	beq.n	3a48 <__eqsf2+0x48>
    3a3a:	2001      	movs	r0, #1
    3a3c:	2a00      	cmp	r2, #0
    3a3e:	d1f3      	bne.n	3a28 <__eqsf2+0x28>
    3a40:	0028      	movs	r0, r5
    3a42:	1e45      	subs	r5, r0, #1
    3a44:	41a8      	sbcs	r0, r5
    3a46:	e7ef      	b.n	3a28 <__eqsf2+0x28>
    3a48:	2000      	movs	r0, #0
    3a4a:	e7ed      	b.n	3a28 <__eqsf2+0x28>

00003a4c <__gesf2>:
    3a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a4e:	0042      	lsls	r2, r0, #1
    3a50:	0245      	lsls	r5, r0, #9
    3a52:	024c      	lsls	r4, r1, #9
    3a54:	0fc3      	lsrs	r3, r0, #31
    3a56:	0048      	lsls	r0, r1, #1
    3a58:	0a6d      	lsrs	r5, r5, #9
    3a5a:	0e12      	lsrs	r2, r2, #24
    3a5c:	0a64      	lsrs	r4, r4, #9
    3a5e:	0e00      	lsrs	r0, r0, #24
    3a60:	0fc9      	lsrs	r1, r1, #31
    3a62:	2aff      	cmp	r2, #255	; 0xff
    3a64:	d01e      	beq.n	3aa4 <__gesf2+0x58>
    3a66:	28ff      	cmp	r0, #255	; 0xff
    3a68:	d021      	beq.n	3aae <__gesf2+0x62>
    3a6a:	2a00      	cmp	r2, #0
    3a6c:	d10a      	bne.n	3a84 <__gesf2+0x38>
    3a6e:	426e      	negs	r6, r5
    3a70:	416e      	adcs	r6, r5
    3a72:	b2f6      	uxtb	r6, r6
    3a74:	2800      	cmp	r0, #0
    3a76:	d10f      	bne.n	3a98 <__gesf2+0x4c>
    3a78:	2c00      	cmp	r4, #0
    3a7a:	d10d      	bne.n	3a98 <__gesf2+0x4c>
    3a7c:	2000      	movs	r0, #0
    3a7e:	2d00      	cmp	r5, #0
    3a80:	d009      	beq.n	3a96 <__gesf2+0x4a>
    3a82:	e005      	b.n	3a90 <__gesf2+0x44>
    3a84:	2800      	cmp	r0, #0
    3a86:	d101      	bne.n	3a8c <__gesf2+0x40>
    3a88:	2c00      	cmp	r4, #0
    3a8a:	d001      	beq.n	3a90 <__gesf2+0x44>
    3a8c:	428b      	cmp	r3, r1
    3a8e:	d011      	beq.n	3ab4 <__gesf2+0x68>
    3a90:	2101      	movs	r1, #1
    3a92:	4258      	negs	r0, r3
    3a94:	4308      	orrs	r0, r1
    3a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a98:	2e00      	cmp	r6, #0
    3a9a:	d0f7      	beq.n	3a8c <__gesf2+0x40>
    3a9c:	2001      	movs	r0, #1
    3a9e:	3901      	subs	r1, #1
    3aa0:	4308      	orrs	r0, r1
    3aa2:	e7f8      	b.n	3a96 <__gesf2+0x4a>
    3aa4:	2d00      	cmp	r5, #0
    3aa6:	d0de      	beq.n	3a66 <__gesf2+0x1a>
    3aa8:	2002      	movs	r0, #2
    3aaa:	4240      	negs	r0, r0
    3aac:	e7f3      	b.n	3a96 <__gesf2+0x4a>
    3aae:	2c00      	cmp	r4, #0
    3ab0:	d0db      	beq.n	3a6a <__gesf2+0x1e>
    3ab2:	e7f9      	b.n	3aa8 <__gesf2+0x5c>
    3ab4:	4282      	cmp	r2, r0
    3ab6:	dceb      	bgt.n	3a90 <__gesf2+0x44>
    3ab8:	db04      	blt.n	3ac4 <__gesf2+0x78>
    3aba:	42a5      	cmp	r5, r4
    3abc:	d8e8      	bhi.n	3a90 <__gesf2+0x44>
    3abe:	2000      	movs	r0, #0
    3ac0:	42a5      	cmp	r5, r4
    3ac2:	d2e8      	bcs.n	3a96 <__gesf2+0x4a>
    3ac4:	2101      	movs	r1, #1
    3ac6:	1e58      	subs	r0, r3, #1
    3ac8:	4308      	orrs	r0, r1
    3aca:	e7e4      	b.n	3a96 <__gesf2+0x4a>

00003acc <__lesf2>:
    3acc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ace:	0042      	lsls	r2, r0, #1
    3ad0:	024d      	lsls	r5, r1, #9
    3ad2:	004c      	lsls	r4, r1, #1
    3ad4:	0246      	lsls	r6, r0, #9
    3ad6:	0a76      	lsrs	r6, r6, #9
    3ad8:	0e12      	lsrs	r2, r2, #24
    3ada:	0fc3      	lsrs	r3, r0, #31
    3adc:	0a6d      	lsrs	r5, r5, #9
    3ade:	0e24      	lsrs	r4, r4, #24
    3ae0:	0fc9      	lsrs	r1, r1, #31
    3ae2:	2aff      	cmp	r2, #255	; 0xff
    3ae4:	d016      	beq.n	3b14 <__lesf2+0x48>
    3ae6:	2cff      	cmp	r4, #255	; 0xff
    3ae8:	d018      	beq.n	3b1c <__lesf2+0x50>
    3aea:	2a00      	cmp	r2, #0
    3aec:	d10a      	bne.n	3b04 <__lesf2+0x38>
    3aee:	4270      	negs	r0, r6
    3af0:	4170      	adcs	r0, r6
    3af2:	b2c0      	uxtb	r0, r0
    3af4:	2c00      	cmp	r4, #0
    3af6:	d015      	beq.n	3b24 <__lesf2+0x58>
    3af8:	2800      	cmp	r0, #0
    3afa:	d005      	beq.n	3b08 <__lesf2+0x3c>
    3afc:	2001      	movs	r0, #1
    3afe:	3901      	subs	r1, #1
    3b00:	4308      	orrs	r0, r1
    3b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b04:	2c00      	cmp	r4, #0
    3b06:	d013      	beq.n	3b30 <__lesf2+0x64>
    3b08:	4299      	cmp	r1, r3
    3b0a:	d014      	beq.n	3b36 <__lesf2+0x6a>
    3b0c:	2001      	movs	r0, #1
    3b0e:	425b      	negs	r3, r3
    3b10:	4318      	orrs	r0, r3
    3b12:	e7f6      	b.n	3b02 <__lesf2+0x36>
    3b14:	2002      	movs	r0, #2
    3b16:	2e00      	cmp	r6, #0
    3b18:	d1f3      	bne.n	3b02 <__lesf2+0x36>
    3b1a:	e7e4      	b.n	3ae6 <__lesf2+0x1a>
    3b1c:	2002      	movs	r0, #2
    3b1e:	2d00      	cmp	r5, #0
    3b20:	d1ef      	bne.n	3b02 <__lesf2+0x36>
    3b22:	e7e2      	b.n	3aea <__lesf2+0x1e>
    3b24:	2d00      	cmp	r5, #0
    3b26:	d1e7      	bne.n	3af8 <__lesf2+0x2c>
    3b28:	2000      	movs	r0, #0
    3b2a:	2e00      	cmp	r6, #0
    3b2c:	d0e9      	beq.n	3b02 <__lesf2+0x36>
    3b2e:	e7ed      	b.n	3b0c <__lesf2+0x40>
    3b30:	2d00      	cmp	r5, #0
    3b32:	d1e9      	bne.n	3b08 <__lesf2+0x3c>
    3b34:	e7ea      	b.n	3b0c <__lesf2+0x40>
    3b36:	42a2      	cmp	r2, r4
    3b38:	dc06      	bgt.n	3b48 <__lesf2+0x7c>
    3b3a:	dbdf      	blt.n	3afc <__lesf2+0x30>
    3b3c:	42ae      	cmp	r6, r5
    3b3e:	d803      	bhi.n	3b48 <__lesf2+0x7c>
    3b40:	2000      	movs	r0, #0
    3b42:	42ae      	cmp	r6, r5
    3b44:	d3da      	bcc.n	3afc <__lesf2+0x30>
    3b46:	e7dc      	b.n	3b02 <__lesf2+0x36>
    3b48:	2001      	movs	r0, #1
    3b4a:	4249      	negs	r1, r1
    3b4c:	4308      	orrs	r0, r1
    3b4e:	e7d8      	b.n	3b02 <__lesf2+0x36>

00003b50 <__aeabi_fmul>:
    3b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b52:	4657      	mov	r7, sl
    3b54:	464e      	mov	r6, r9
    3b56:	4645      	mov	r5, r8
    3b58:	46de      	mov	lr, fp
    3b5a:	b5e0      	push	{r5, r6, r7, lr}
    3b5c:	0247      	lsls	r7, r0, #9
    3b5e:	0046      	lsls	r6, r0, #1
    3b60:	4688      	mov	r8, r1
    3b62:	0a7f      	lsrs	r7, r7, #9
    3b64:	0e36      	lsrs	r6, r6, #24
    3b66:	0fc4      	lsrs	r4, r0, #31
    3b68:	2e00      	cmp	r6, #0
    3b6a:	d047      	beq.n	3bfc <__aeabi_fmul+0xac>
    3b6c:	2eff      	cmp	r6, #255	; 0xff
    3b6e:	d024      	beq.n	3bba <__aeabi_fmul+0x6a>
    3b70:	00fb      	lsls	r3, r7, #3
    3b72:	2780      	movs	r7, #128	; 0x80
    3b74:	04ff      	lsls	r7, r7, #19
    3b76:	431f      	orrs	r7, r3
    3b78:	2300      	movs	r3, #0
    3b7a:	4699      	mov	r9, r3
    3b7c:	469a      	mov	sl, r3
    3b7e:	3e7f      	subs	r6, #127	; 0x7f
    3b80:	4643      	mov	r3, r8
    3b82:	025d      	lsls	r5, r3, #9
    3b84:	0058      	lsls	r0, r3, #1
    3b86:	0fdb      	lsrs	r3, r3, #31
    3b88:	0a6d      	lsrs	r5, r5, #9
    3b8a:	0e00      	lsrs	r0, r0, #24
    3b8c:	4698      	mov	r8, r3
    3b8e:	d043      	beq.n	3c18 <__aeabi_fmul+0xc8>
    3b90:	28ff      	cmp	r0, #255	; 0xff
    3b92:	d03b      	beq.n	3c0c <__aeabi_fmul+0xbc>
    3b94:	00eb      	lsls	r3, r5, #3
    3b96:	2580      	movs	r5, #128	; 0x80
    3b98:	2200      	movs	r2, #0
    3b9a:	04ed      	lsls	r5, r5, #19
    3b9c:	431d      	orrs	r5, r3
    3b9e:	387f      	subs	r0, #127	; 0x7f
    3ba0:	1836      	adds	r6, r6, r0
    3ba2:	1c73      	adds	r3, r6, #1
    3ba4:	4641      	mov	r1, r8
    3ba6:	469b      	mov	fp, r3
    3ba8:	464b      	mov	r3, r9
    3baa:	4061      	eors	r1, r4
    3bac:	4313      	orrs	r3, r2
    3bae:	2b0f      	cmp	r3, #15
    3bb0:	d864      	bhi.n	3c7c <__aeabi_fmul+0x12c>
    3bb2:	4875      	ldr	r0, [pc, #468]	; (3d88 <__aeabi_fmul+0x238>)
    3bb4:	009b      	lsls	r3, r3, #2
    3bb6:	58c3      	ldr	r3, [r0, r3]
    3bb8:	469f      	mov	pc, r3
    3bba:	2f00      	cmp	r7, #0
    3bbc:	d142      	bne.n	3c44 <__aeabi_fmul+0xf4>
    3bbe:	2308      	movs	r3, #8
    3bc0:	4699      	mov	r9, r3
    3bc2:	3b06      	subs	r3, #6
    3bc4:	26ff      	movs	r6, #255	; 0xff
    3bc6:	469a      	mov	sl, r3
    3bc8:	e7da      	b.n	3b80 <__aeabi_fmul+0x30>
    3bca:	4641      	mov	r1, r8
    3bcc:	2a02      	cmp	r2, #2
    3bce:	d028      	beq.n	3c22 <__aeabi_fmul+0xd2>
    3bd0:	2a03      	cmp	r2, #3
    3bd2:	d100      	bne.n	3bd6 <__aeabi_fmul+0x86>
    3bd4:	e0ce      	b.n	3d74 <__aeabi_fmul+0x224>
    3bd6:	2a01      	cmp	r2, #1
    3bd8:	d000      	beq.n	3bdc <__aeabi_fmul+0x8c>
    3bda:	e0ac      	b.n	3d36 <__aeabi_fmul+0x1e6>
    3bdc:	4011      	ands	r1, r2
    3bde:	2000      	movs	r0, #0
    3be0:	2200      	movs	r2, #0
    3be2:	b2cc      	uxtb	r4, r1
    3be4:	0240      	lsls	r0, r0, #9
    3be6:	05d2      	lsls	r2, r2, #23
    3be8:	0a40      	lsrs	r0, r0, #9
    3bea:	07e4      	lsls	r4, r4, #31
    3bec:	4310      	orrs	r0, r2
    3bee:	4320      	orrs	r0, r4
    3bf0:	bc3c      	pop	{r2, r3, r4, r5}
    3bf2:	4690      	mov	r8, r2
    3bf4:	4699      	mov	r9, r3
    3bf6:	46a2      	mov	sl, r4
    3bf8:	46ab      	mov	fp, r5
    3bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bfc:	2f00      	cmp	r7, #0
    3bfe:	d115      	bne.n	3c2c <__aeabi_fmul+0xdc>
    3c00:	2304      	movs	r3, #4
    3c02:	4699      	mov	r9, r3
    3c04:	3b03      	subs	r3, #3
    3c06:	2600      	movs	r6, #0
    3c08:	469a      	mov	sl, r3
    3c0a:	e7b9      	b.n	3b80 <__aeabi_fmul+0x30>
    3c0c:	20ff      	movs	r0, #255	; 0xff
    3c0e:	2202      	movs	r2, #2
    3c10:	2d00      	cmp	r5, #0
    3c12:	d0c5      	beq.n	3ba0 <__aeabi_fmul+0x50>
    3c14:	2203      	movs	r2, #3
    3c16:	e7c3      	b.n	3ba0 <__aeabi_fmul+0x50>
    3c18:	2d00      	cmp	r5, #0
    3c1a:	d119      	bne.n	3c50 <__aeabi_fmul+0x100>
    3c1c:	2000      	movs	r0, #0
    3c1e:	2201      	movs	r2, #1
    3c20:	e7be      	b.n	3ba0 <__aeabi_fmul+0x50>
    3c22:	2401      	movs	r4, #1
    3c24:	22ff      	movs	r2, #255	; 0xff
    3c26:	400c      	ands	r4, r1
    3c28:	2000      	movs	r0, #0
    3c2a:	e7db      	b.n	3be4 <__aeabi_fmul+0x94>
    3c2c:	0038      	movs	r0, r7
    3c2e:	f001 fa03 	bl	5038 <__clzsi2>
    3c32:	2676      	movs	r6, #118	; 0x76
    3c34:	1f43      	subs	r3, r0, #5
    3c36:	409f      	lsls	r7, r3
    3c38:	2300      	movs	r3, #0
    3c3a:	4276      	negs	r6, r6
    3c3c:	1a36      	subs	r6, r6, r0
    3c3e:	4699      	mov	r9, r3
    3c40:	469a      	mov	sl, r3
    3c42:	e79d      	b.n	3b80 <__aeabi_fmul+0x30>
    3c44:	230c      	movs	r3, #12
    3c46:	4699      	mov	r9, r3
    3c48:	3b09      	subs	r3, #9
    3c4a:	26ff      	movs	r6, #255	; 0xff
    3c4c:	469a      	mov	sl, r3
    3c4e:	e797      	b.n	3b80 <__aeabi_fmul+0x30>
    3c50:	0028      	movs	r0, r5
    3c52:	f001 f9f1 	bl	5038 <__clzsi2>
    3c56:	1f43      	subs	r3, r0, #5
    3c58:	409d      	lsls	r5, r3
    3c5a:	2376      	movs	r3, #118	; 0x76
    3c5c:	425b      	negs	r3, r3
    3c5e:	1a18      	subs	r0, r3, r0
    3c60:	2200      	movs	r2, #0
    3c62:	e79d      	b.n	3ba0 <__aeabi_fmul+0x50>
    3c64:	2080      	movs	r0, #128	; 0x80
    3c66:	2400      	movs	r4, #0
    3c68:	03c0      	lsls	r0, r0, #15
    3c6a:	22ff      	movs	r2, #255	; 0xff
    3c6c:	e7ba      	b.n	3be4 <__aeabi_fmul+0x94>
    3c6e:	003d      	movs	r5, r7
    3c70:	4652      	mov	r2, sl
    3c72:	e7ab      	b.n	3bcc <__aeabi_fmul+0x7c>
    3c74:	003d      	movs	r5, r7
    3c76:	0021      	movs	r1, r4
    3c78:	4652      	mov	r2, sl
    3c7a:	e7a7      	b.n	3bcc <__aeabi_fmul+0x7c>
    3c7c:	0c3b      	lsrs	r3, r7, #16
    3c7e:	469c      	mov	ip, r3
    3c80:	042a      	lsls	r2, r5, #16
    3c82:	0c12      	lsrs	r2, r2, #16
    3c84:	0c2b      	lsrs	r3, r5, #16
    3c86:	0014      	movs	r4, r2
    3c88:	4660      	mov	r0, ip
    3c8a:	4665      	mov	r5, ip
    3c8c:	043f      	lsls	r7, r7, #16
    3c8e:	0c3f      	lsrs	r7, r7, #16
    3c90:	437c      	muls	r4, r7
    3c92:	4342      	muls	r2, r0
    3c94:	435d      	muls	r5, r3
    3c96:	437b      	muls	r3, r7
    3c98:	0c27      	lsrs	r7, r4, #16
    3c9a:	189b      	adds	r3, r3, r2
    3c9c:	18ff      	adds	r7, r7, r3
    3c9e:	42ba      	cmp	r2, r7
    3ca0:	d903      	bls.n	3caa <__aeabi_fmul+0x15a>
    3ca2:	2380      	movs	r3, #128	; 0x80
    3ca4:	025b      	lsls	r3, r3, #9
    3ca6:	469c      	mov	ip, r3
    3ca8:	4465      	add	r5, ip
    3caa:	0424      	lsls	r4, r4, #16
    3cac:	043a      	lsls	r2, r7, #16
    3cae:	0c24      	lsrs	r4, r4, #16
    3cb0:	1912      	adds	r2, r2, r4
    3cb2:	0193      	lsls	r3, r2, #6
    3cb4:	1e5c      	subs	r4, r3, #1
    3cb6:	41a3      	sbcs	r3, r4
    3cb8:	0c3f      	lsrs	r7, r7, #16
    3cba:	0e92      	lsrs	r2, r2, #26
    3cbc:	197d      	adds	r5, r7, r5
    3cbe:	431a      	orrs	r2, r3
    3cc0:	01ad      	lsls	r5, r5, #6
    3cc2:	4315      	orrs	r5, r2
    3cc4:	012b      	lsls	r3, r5, #4
    3cc6:	d504      	bpl.n	3cd2 <__aeabi_fmul+0x182>
    3cc8:	2301      	movs	r3, #1
    3cca:	465e      	mov	r6, fp
    3ccc:	086a      	lsrs	r2, r5, #1
    3cce:	401d      	ands	r5, r3
    3cd0:	4315      	orrs	r5, r2
    3cd2:	0032      	movs	r2, r6
    3cd4:	327f      	adds	r2, #127	; 0x7f
    3cd6:	2a00      	cmp	r2, #0
    3cd8:	dd25      	ble.n	3d26 <__aeabi_fmul+0x1d6>
    3cda:	076b      	lsls	r3, r5, #29
    3cdc:	d004      	beq.n	3ce8 <__aeabi_fmul+0x198>
    3cde:	230f      	movs	r3, #15
    3ce0:	402b      	ands	r3, r5
    3ce2:	2b04      	cmp	r3, #4
    3ce4:	d000      	beq.n	3ce8 <__aeabi_fmul+0x198>
    3ce6:	3504      	adds	r5, #4
    3ce8:	012b      	lsls	r3, r5, #4
    3cea:	d503      	bpl.n	3cf4 <__aeabi_fmul+0x1a4>
    3cec:	0032      	movs	r2, r6
    3cee:	4b27      	ldr	r3, [pc, #156]	; (3d8c <__aeabi_fmul+0x23c>)
    3cf0:	3280      	adds	r2, #128	; 0x80
    3cf2:	401d      	ands	r5, r3
    3cf4:	2afe      	cmp	r2, #254	; 0xfe
    3cf6:	dc94      	bgt.n	3c22 <__aeabi_fmul+0xd2>
    3cf8:	2401      	movs	r4, #1
    3cfa:	01a8      	lsls	r0, r5, #6
    3cfc:	0a40      	lsrs	r0, r0, #9
    3cfe:	b2d2      	uxtb	r2, r2
    3d00:	400c      	ands	r4, r1
    3d02:	e76f      	b.n	3be4 <__aeabi_fmul+0x94>
    3d04:	2080      	movs	r0, #128	; 0x80
    3d06:	03c0      	lsls	r0, r0, #15
    3d08:	4207      	tst	r7, r0
    3d0a:	d007      	beq.n	3d1c <__aeabi_fmul+0x1cc>
    3d0c:	4205      	tst	r5, r0
    3d0e:	d105      	bne.n	3d1c <__aeabi_fmul+0x1cc>
    3d10:	4328      	orrs	r0, r5
    3d12:	0240      	lsls	r0, r0, #9
    3d14:	0a40      	lsrs	r0, r0, #9
    3d16:	4644      	mov	r4, r8
    3d18:	22ff      	movs	r2, #255	; 0xff
    3d1a:	e763      	b.n	3be4 <__aeabi_fmul+0x94>
    3d1c:	4338      	orrs	r0, r7
    3d1e:	0240      	lsls	r0, r0, #9
    3d20:	0a40      	lsrs	r0, r0, #9
    3d22:	22ff      	movs	r2, #255	; 0xff
    3d24:	e75e      	b.n	3be4 <__aeabi_fmul+0x94>
    3d26:	2401      	movs	r4, #1
    3d28:	1aa3      	subs	r3, r4, r2
    3d2a:	2b1b      	cmp	r3, #27
    3d2c:	dd05      	ble.n	3d3a <__aeabi_fmul+0x1ea>
    3d2e:	400c      	ands	r4, r1
    3d30:	2200      	movs	r2, #0
    3d32:	2000      	movs	r0, #0
    3d34:	e756      	b.n	3be4 <__aeabi_fmul+0x94>
    3d36:	465e      	mov	r6, fp
    3d38:	e7cb      	b.n	3cd2 <__aeabi_fmul+0x182>
    3d3a:	002a      	movs	r2, r5
    3d3c:	2020      	movs	r0, #32
    3d3e:	40da      	lsrs	r2, r3
    3d40:	1ac3      	subs	r3, r0, r3
    3d42:	409d      	lsls	r5, r3
    3d44:	002b      	movs	r3, r5
    3d46:	1e5d      	subs	r5, r3, #1
    3d48:	41ab      	sbcs	r3, r5
    3d4a:	4313      	orrs	r3, r2
    3d4c:	075a      	lsls	r2, r3, #29
    3d4e:	d004      	beq.n	3d5a <__aeabi_fmul+0x20a>
    3d50:	220f      	movs	r2, #15
    3d52:	401a      	ands	r2, r3
    3d54:	2a04      	cmp	r2, #4
    3d56:	d000      	beq.n	3d5a <__aeabi_fmul+0x20a>
    3d58:	3304      	adds	r3, #4
    3d5a:	015a      	lsls	r2, r3, #5
    3d5c:	d504      	bpl.n	3d68 <__aeabi_fmul+0x218>
    3d5e:	2401      	movs	r4, #1
    3d60:	2201      	movs	r2, #1
    3d62:	400c      	ands	r4, r1
    3d64:	2000      	movs	r0, #0
    3d66:	e73d      	b.n	3be4 <__aeabi_fmul+0x94>
    3d68:	2401      	movs	r4, #1
    3d6a:	019b      	lsls	r3, r3, #6
    3d6c:	0a58      	lsrs	r0, r3, #9
    3d6e:	400c      	ands	r4, r1
    3d70:	2200      	movs	r2, #0
    3d72:	e737      	b.n	3be4 <__aeabi_fmul+0x94>
    3d74:	2080      	movs	r0, #128	; 0x80
    3d76:	2401      	movs	r4, #1
    3d78:	03c0      	lsls	r0, r0, #15
    3d7a:	4328      	orrs	r0, r5
    3d7c:	0240      	lsls	r0, r0, #9
    3d7e:	0a40      	lsrs	r0, r0, #9
    3d80:	400c      	ands	r4, r1
    3d82:	22ff      	movs	r2, #255	; 0xff
    3d84:	e72e      	b.n	3be4 <__aeabi_fmul+0x94>
    3d86:	46c0      	nop			; (mov r8, r8)
    3d88:	00005b8c 	.word	0x00005b8c
    3d8c:	f7ffffff 	.word	0xf7ffffff

00003d90 <__aeabi_fsub>:
    3d90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d92:	464f      	mov	r7, r9
    3d94:	46d6      	mov	lr, sl
    3d96:	4646      	mov	r6, r8
    3d98:	0044      	lsls	r4, r0, #1
    3d9a:	b5c0      	push	{r6, r7, lr}
    3d9c:	0fc2      	lsrs	r2, r0, #31
    3d9e:	0247      	lsls	r7, r0, #9
    3da0:	0248      	lsls	r0, r1, #9
    3da2:	0a40      	lsrs	r0, r0, #9
    3da4:	4684      	mov	ip, r0
    3da6:	4666      	mov	r6, ip
    3da8:	0a7b      	lsrs	r3, r7, #9
    3daa:	0048      	lsls	r0, r1, #1
    3dac:	0fc9      	lsrs	r1, r1, #31
    3dae:	469a      	mov	sl, r3
    3db0:	0e24      	lsrs	r4, r4, #24
    3db2:	0015      	movs	r5, r2
    3db4:	00db      	lsls	r3, r3, #3
    3db6:	0e00      	lsrs	r0, r0, #24
    3db8:	4689      	mov	r9, r1
    3dba:	00f6      	lsls	r6, r6, #3
    3dbc:	28ff      	cmp	r0, #255	; 0xff
    3dbe:	d100      	bne.n	3dc2 <__aeabi_fsub+0x32>
    3dc0:	e08f      	b.n	3ee2 <__aeabi_fsub+0x152>
    3dc2:	2101      	movs	r1, #1
    3dc4:	464f      	mov	r7, r9
    3dc6:	404f      	eors	r7, r1
    3dc8:	0039      	movs	r1, r7
    3dca:	4291      	cmp	r1, r2
    3dcc:	d066      	beq.n	3e9c <__aeabi_fsub+0x10c>
    3dce:	1a22      	subs	r2, r4, r0
    3dd0:	2a00      	cmp	r2, #0
    3dd2:	dc00      	bgt.n	3dd6 <__aeabi_fsub+0x46>
    3dd4:	e09d      	b.n	3f12 <__aeabi_fsub+0x182>
    3dd6:	2800      	cmp	r0, #0
    3dd8:	d13d      	bne.n	3e56 <__aeabi_fsub+0xc6>
    3dda:	2e00      	cmp	r6, #0
    3ddc:	d100      	bne.n	3de0 <__aeabi_fsub+0x50>
    3dde:	e08b      	b.n	3ef8 <__aeabi_fsub+0x168>
    3de0:	1e51      	subs	r1, r2, #1
    3de2:	2900      	cmp	r1, #0
    3de4:	d000      	beq.n	3de8 <__aeabi_fsub+0x58>
    3de6:	e0b5      	b.n	3f54 <__aeabi_fsub+0x1c4>
    3de8:	2401      	movs	r4, #1
    3dea:	1b9b      	subs	r3, r3, r6
    3dec:	015a      	lsls	r2, r3, #5
    3dee:	d544      	bpl.n	3e7a <__aeabi_fsub+0xea>
    3df0:	019b      	lsls	r3, r3, #6
    3df2:	099f      	lsrs	r7, r3, #6
    3df4:	0038      	movs	r0, r7
    3df6:	f001 f91f 	bl	5038 <__clzsi2>
    3dfa:	3805      	subs	r0, #5
    3dfc:	4087      	lsls	r7, r0
    3dfe:	4284      	cmp	r4, r0
    3e00:	dd00      	ble.n	3e04 <__aeabi_fsub+0x74>
    3e02:	e096      	b.n	3f32 <__aeabi_fsub+0x1a2>
    3e04:	1b04      	subs	r4, r0, r4
    3e06:	003a      	movs	r2, r7
    3e08:	2020      	movs	r0, #32
    3e0a:	3401      	adds	r4, #1
    3e0c:	40e2      	lsrs	r2, r4
    3e0e:	1b04      	subs	r4, r0, r4
    3e10:	40a7      	lsls	r7, r4
    3e12:	003b      	movs	r3, r7
    3e14:	1e5f      	subs	r7, r3, #1
    3e16:	41bb      	sbcs	r3, r7
    3e18:	2400      	movs	r4, #0
    3e1a:	4313      	orrs	r3, r2
    3e1c:	075a      	lsls	r2, r3, #29
    3e1e:	d004      	beq.n	3e2a <__aeabi_fsub+0x9a>
    3e20:	220f      	movs	r2, #15
    3e22:	401a      	ands	r2, r3
    3e24:	2a04      	cmp	r2, #4
    3e26:	d000      	beq.n	3e2a <__aeabi_fsub+0x9a>
    3e28:	3304      	adds	r3, #4
    3e2a:	015a      	lsls	r2, r3, #5
    3e2c:	d527      	bpl.n	3e7e <__aeabi_fsub+0xee>
    3e2e:	3401      	adds	r4, #1
    3e30:	2cff      	cmp	r4, #255	; 0xff
    3e32:	d100      	bne.n	3e36 <__aeabi_fsub+0xa6>
    3e34:	e079      	b.n	3f2a <__aeabi_fsub+0x19a>
    3e36:	2201      	movs	r2, #1
    3e38:	019b      	lsls	r3, r3, #6
    3e3a:	0a5b      	lsrs	r3, r3, #9
    3e3c:	b2e4      	uxtb	r4, r4
    3e3e:	402a      	ands	r2, r5
    3e40:	025b      	lsls	r3, r3, #9
    3e42:	05e4      	lsls	r4, r4, #23
    3e44:	0a58      	lsrs	r0, r3, #9
    3e46:	07d2      	lsls	r2, r2, #31
    3e48:	4320      	orrs	r0, r4
    3e4a:	4310      	orrs	r0, r2
    3e4c:	bc1c      	pop	{r2, r3, r4}
    3e4e:	4690      	mov	r8, r2
    3e50:	4699      	mov	r9, r3
    3e52:	46a2      	mov	sl, r4
    3e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e56:	2cff      	cmp	r4, #255	; 0xff
    3e58:	d0e0      	beq.n	3e1c <__aeabi_fsub+0x8c>
    3e5a:	2180      	movs	r1, #128	; 0x80
    3e5c:	04c9      	lsls	r1, r1, #19
    3e5e:	430e      	orrs	r6, r1
    3e60:	2a1b      	cmp	r2, #27
    3e62:	dc7b      	bgt.n	3f5c <__aeabi_fsub+0x1cc>
    3e64:	0031      	movs	r1, r6
    3e66:	2020      	movs	r0, #32
    3e68:	40d1      	lsrs	r1, r2
    3e6a:	1a82      	subs	r2, r0, r2
    3e6c:	4096      	lsls	r6, r2
    3e6e:	1e72      	subs	r2, r6, #1
    3e70:	4196      	sbcs	r6, r2
    3e72:	430e      	orrs	r6, r1
    3e74:	1b9b      	subs	r3, r3, r6
    3e76:	015a      	lsls	r2, r3, #5
    3e78:	d4ba      	bmi.n	3df0 <__aeabi_fsub+0x60>
    3e7a:	075a      	lsls	r2, r3, #29
    3e7c:	d1d0      	bne.n	3e20 <__aeabi_fsub+0x90>
    3e7e:	2201      	movs	r2, #1
    3e80:	08df      	lsrs	r7, r3, #3
    3e82:	402a      	ands	r2, r5
    3e84:	2cff      	cmp	r4, #255	; 0xff
    3e86:	d133      	bne.n	3ef0 <__aeabi_fsub+0x160>
    3e88:	2f00      	cmp	r7, #0
    3e8a:	d100      	bne.n	3e8e <__aeabi_fsub+0xfe>
    3e8c:	e0a8      	b.n	3fe0 <__aeabi_fsub+0x250>
    3e8e:	2380      	movs	r3, #128	; 0x80
    3e90:	03db      	lsls	r3, r3, #15
    3e92:	433b      	orrs	r3, r7
    3e94:	025b      	lsls	r3, r3, #9
    3e96:	0a5b      	lsrs	r3, r3, #9
    3e98:	24ff      	movs	r4, #255	; 0xff
    3e9a:	e7d1      	b.n	3e40 <__aeabi_fsub+0xb0>
    3e9c:	1a21      	subs	r1, r4, r0
    3e9e:	2900      	cmp	r1, #0
    3ea0:	dd4c      	ble.n	3f3c <__aeabi_fsub+0x1ac>
    3ea2:	2800      	cmp	r0, #0
    3ea4:	d02a      	beq.n	3efc <__aeabi_fsub+0x16c>
    3ea6:	2cff      	cmp	r4, #255	; 0xff
    3ea8:	d0b8      	beq.n	3e1c <__aeabi_fsub+0x8c>
    3eaa:	2080      	movs	r0, #128	; 0x80
    3eac:	04c0      	lsls	r0, r0, #19
    3eae:	4306      	orrs	r6, r0
    3eb0:	291b      	cmp	r1, #27
    3eb2:	dd00      	ble.n	3eb6 <__aeabi_fsub+0x126>
    3eb4:	e0af      	b.n	4016 <__aeabi_fsub+0x286>
    3eb6:	0030      	movs	r0, r6
    3eb8:	2720      	movs	r7, #32
    3eba:	40c8      	lsrs	r0, r1
    3ebc:	1a79      	subs	r1, r7, r1
    3ebe:	408e      	lsls	r6, r1
    3ec0:	1e71      	subs	r1, r6, #1
    3ec2:	418e      	sbcs	r6, r1
    3ec4:	4306      	orrs	r6, r0
    3ec6:	199b      	adds	r3, r3, r6
    3ec8:	0159      	lsls	r1, r3, #5
    3eca:	d5d6      	bpl.n	3e7a <__aeabi_fsub+0xea>
    3ecc:	3401      	adds	r4, #1
    3ece:	2cff      	cmp	r4, #255	; 0xff
    3ed0:	d100      	bne.n	3ed4 <__aeabi_fsub+0x144>
    3ed2:	e085      	b.n	3fe0 <__aeabi_fsub+0x250>
    3ed4:	2201      	movs	r2, #1
    3ed6:	497a      	ldr	r1, [pc, #488]	; (40c0 <__aeabi_fsub+0x330>)
    3ed8:	401a      	ands	r2, r3
    3eda:	085b      	lsrs	r3, r3, #1
    3edc:	400b      	ands	r3, r1
    3ede:	4313      	orrs	r3, r2
    3ee0:	e79c      	b.n	3e1c <__aeabi_fsub+0x8c>
    3ee2:	2e00      	cmp	r6, #0
    3ee4:	d000      	beq.n	3ee8 <__aeabi_fsub+0x158>
    3ee6:	e770      	b.n	3dca <__aeabi_fsub+0x3a>
    3ee8:	e76b      	b.n	3dc2 <__aeabi_fsub+0x32>
    3eea:	1e3b      	subs	r3, r7, #0
    3eec:	d1c5      	bne.n	3e7a <__aeabi_fsub+0xea>
    3eee:	2200      	movs	r2, #0
    3ef0:	027b      	lsls	r3, r7, #9
    3ef2:	0a5b      	lsrs	r3, r3, #9
    3ef4:	b2e4      	uxtb	r4, r4
    3ef6:	e7a3      	b.n	3e40 <__aeabi_fsub+0xb0>
    3ef8:	0014      	movs	r4, r2
    3efa:	e78f      	b.n	3e1c <__aeabi_fsub+0x8c>
    3efc:	2e00      	cmp	r6, #0
    3efe:	d04d      	beq.n	3f9c <__aeabi_fsub+0x20c>
    3f00:	1e48      	subs	r0, r1, #1
    3f02:	2800      	cmp	r0, #0
    3f04:	d157      	bne.n	3fb6 <__aeabi_fsub+0x226>
    3f06:	199b      	adds	r3, r3, r6
    3f08:	2401      	movs	r4, #1
    3f0a:	015a      	lsls	r2, r3, #5
    3f0c:	d5b5      	bpl.n	3e7a <__aeabi_fsub+0xea>
    3f0e:	2402      	movs	r4, #2
    3f10:	e7e0      	b.n	3ed4 <__aeabi_fsub+0x144>
    3f12:	2a00      	cmp	r2, #0
    3f14:	d125      	bne.n	3f62 <__aeabi_fsub+0x1d2>
    3f16:	1c62      	adds	r2, r4, #1
    3f18:	b2d2      	uxtb	r2, r2
    3f1a:	2a01      	cmp	r2, #1
    3f1c:	dd72      	ble.n	4004 <__aeabi_fsub+0x274>
    3f1e:	1b9f      	subs	r7, r3, r6
    3f20:	017a      	lsls	r2, r7, #5
    3f22:	d535      	bpl.n	3f90 <__aeabi_fsub+0x200>
    3f24:	1af7      	subs	r7, r6, r3
    3f26:	000d      	movs	r5, r1
    3f28:	e764      	b.n	3df4 <__aeabi_fsub+0x64>
    3f2a:	2201      	movs	r2, #1
    3f2c:	2300      	movs	r3, #0
    3f2e:	402a      	ands	r2, r5
    3f30:	e786      	b.n	3e40 <__aeabi_fsub+0xb0>
    3f32:	003b      	movs	r3, r7
    3f34:	4a63      	ldr	r2, [pc, #396]	; (40c4 <__aeabi_fsub+0x334>)
    3f36:	1a24      	subs	r4, r4, r0
    3f38:	4013      	ands	r3, r2
    3f3a:	e76f      	b.n	3e1c <__aeabi_fsub+0x8c>
    3f3c:	2900      	cmp	r1, #0
    3f3e:	d16c      	bne.n	401a <__aeabi_fsub+0x28a>
    3f40:	1c61      	adds	r1, r4, #1
    3f42:	b2c8      	uxtb	r0, r1
    3f44:	2801      	cmp	r0, #1
    3f46:	dd4e      	ble.n	3fe6 <__aeabi_fsub+0x256>
    3f48:	29ff      	cmp	r1, #255	; 0xff
    3f4a:	d049      	beq.n	3fe0 <__aeabi_fsub+0x250>
    3f4c:	199b      	adds	r3, r3, r6
    3f4e:	085b      	lsrs	r3, r3, #1
    3f50:	000c      	movs	r4, r1
    3f52:	e763      	b.n	3e1c <__aeabi_fsub+0x8c>
    3f54:	2aff      	cmp	r2, #255	; 0xff
    3f56:	d041      	beq.n	3fdc <__aeabi_fsub+0x24c>
    3f58:	000a      	movs	r2, r1
    3f5a:	e781      	b.n	3e60 <__aeabi_fsub+0xd0>
    3f5c:	2601      	movs	r6, #1
    3f5e:	1b9b      	subs	r3, r3, r6
    3f60:	e789      	b.n	3e76 <__aeabi_fsub+0xe6>
    3f62:	2c00      	cmp	r4, #0
    3f64:	d01c      	beq.n	3fa0 <__aeabi_fsub+0x210>
    3f66:	28ff      	cmp	r0, #255	; 0xff
    3f68:	d021      	beq.n	3fae <__aeabi_fsub+0x21e>
    3f6a:	2480      	movs	r4, #128	; 0x80
    3f6c:	04e4      	lsls	r4, r4, #19
    3f6e:	4252      	negs	r2, r2
    3f70:	4323      	orrs	r3, r4
    3f72:	2a1b      	cmp	r2, #27
    3f74:	dd00      	ble.n	3f78 <__aeabi_fsub+0x1e8>
    3f76:	e096      	b.n	40a6 <__aeabi_fsub+0x316>
    3f78:	001c      	movs	r4, r3
    3f7a:	2520      	movs	r5, #32
    3f7c:	40d4      	lsrs	r4, r2
    3f7e:	1aaa      	subs	r2, r5, r2
    3f80:	4093      	lsls	r3, r2
    3f82:	1e5a      	subs	r2, r3, #1
    3f84:	4193      	sbcs	r3, r2
    3f86:	4323      	orrs	r3, r4
    3f88:	1af3      	subs	r3, r6, r3
    3f8a:	0004      	movs	r4, r0
    3f8c:	000d      	movs	r5, r1
    3f8e:	e72d      	b.n	3dec <__aeabi_fsub+0x5c>
    3f90:	2f00      	cmp	r7, #0
    3f92:	d000      	beq.n	3f96 <__aeabi_fsub+0x206>
    3f94:	e72e      	b.n	3df4 <__aeabi_fsub+0x64>
    3f96:	2200      	movs	r2, #0
    3f98:	2400      	movs	r4, #0
    3f9a:	e7a9      	b.n	3ef0 <__aeabi_fsub+0x160>
    3f9c:	000c      	movs	r4, r1
    3f9e:	e73d      	b.n	3e1c <__aeabi_fsub+0x8c>
    3fa0:	2b00      	cmp	r3, #0
    3fa2:	d058      	beq.n	4056 <__aeabi_fsub+0x2c6>
    3fa4:	43d2      	mvns	r2, r2
    3fa6:	2a00      	cmp	r2, #0
    3fa8:	d0ee      	beq.n	3f88 <__aeabi_fsub+0x1f8>
    3faa:	28ff      	cmp	r0, #255	; 0xff
    3fac:	d1e1      	bne.n	3f72 <__aeabi_fsub+0x1e2>
    3fae:	0033      	movs	r3, r6
    3fb0:	24ff      	movs	r4, #255	; 0xff
    3fb2:	000d      	movs	r5, r1
    3fb4:	e732      	b.n	3e1c <__aeabi_fsub+0x8c>
    3fb6:	29ff      	cmp	r1, #255	; 0xff
    3fb8:	d010      	beq.n	3fdc <__aeabi_fsub+0x24c>
    3fba:	0001      	movs	r1, r0
    3fbc:	e778      	b.n	3eb0 <__aeabi_fsub+0x120>
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d06e      	beq.n	40a0 <__aeabi_fsub+0x310>
    3fc2:	24ff      	movs	r4, #255	; 0xff
    3fc4:	2e00      	cmp	r6, #0
    3fc6:	d100      	bne.n	3fca <__aeabi_fsub+0x23a>
    3fc8:	e728      	b.n	3e1c <__aeabi_fsub+0x8c>
    3fca:	2280      	movs	r2, #128	; 0x80
    3fcc:	4651      	mov	r1, sl
    3fce:	03d2      	lsls	r2, r2, #15
    3fd0:	4211      	tst	r1, r2
    3fd2:	d003      	beq.n	3fdc <__aeabi_fsub+0x24c>
    3fd4:	4661      	mov	r1, ip
    3fd6:	4211      	tst	r1, r2
    3fd8:	d100      	bne.n	3fdc <__aeabi_fsub+0x24c>
    3fda:	0033      	movs	r3, r6
    3fdc:	24ff      	movs	r4, #255	; 0xff
    3fde:	e71d      	b.n	3e1c <__aeabi_fsub+0x8c>
    3fe0:	24ff      	movs	r4, #255	; 0xff
    3fe2:	2300      	movs	r3, #0
    3fe4:	e72c      	b.n	3e40 <__aeabi_fsub+0xb0>
    3fe6:	2c00      	cmp	r4, #0
    3fe8:	d1e9      	bne.n	3fbe <__aeabi_fsub+0x22e>
    3fea:	2b00      	cmp	r3, #0
    3fec:	d063      	beq.n	40b6 <__aeabi_fsub+0x326>
    3fee:	2e00      	cmp	r6, #0
    3ff0:	d100      	bne.n	3ff4 <__aeabi_fsub+0x264>
    3ff2:	e713      	b.n	3e1c <__aeabi_fsub+0x8c>
    3ff4:	199b      	adds	r3, r3, r6
    3ff6:	015a      	lsls	r2, r3, #5
    3ff8:	d400      	bmi.n	3ffc <__aeabi_fsub+0x26c>
    3ffa:	e73e      	b.n	3e7a <__aeabi_fsub+0xea>
    3ffc:	4a31      	ldr	r2, [pc, #196]	; (40c4 <__aeabi_fsub+0x334>)
    3ffe:	000c      	movs	r4, r1
    4000:	4013      	ands	r3, r2
    4002:	e70b      	b.n	3e1c <__aeabi_fsub+0x8c>
    4004:	2c00      	cmp	r4, #0
    4006:	d11e      	bne.n	4046 <__aeabi_fsub+0x2b6>
    4008:	2b00      	cmp	r3, #0
    400a:	d12f      	bne.n	406c <__aeabi_fsub+0x2dc>
    400c:	2e00      	cmp	r6, #0
    400e:	d04f      	beq.n	40b0 <__aeabi_fsub+0x320>
    4010:	0033      	movs	r3, r6
    4012:	000d      	movs	r5, r1
    4014:	e702      	b.n	3e1c <__aeabi_fsub+0x8c>
    4016:	2601      	movs	r6, #1
    4018:	e755      	b.n	3ec6 <__aeabi_fsub+0x136>
    401a:	2c00      	cmp	r4, #0
    401c:	d11f      	bne.n	405e <__aeabi_fsub+0x2ce>
    401e:	2b00      	cmp	r3, #0
    4020:	d043      	beq.n	40aa <__aeabi_fsub+0x31a>
    4022:	43c9      	mvns	r1, r1
    4024:	2900      	cmp	r1, #0
    4026:	d00b      	beq.n	4040 <__aeabi_fsub+0x2b0>
    4028:	28ff      	cmp	r0, #255	; 0xff
    402a:	d039      	beq.n	40a0 <__aeabi_fsub+0x310>
    402c:	291b      	cmp	r1, #27
    402e:	dc44      	bgt.n	40ba <__aeabi_fsub+0x32a>
    4030:	001c      	movs	r4, r3
    4032:	2720      	movs	r7, #32
    4034:	40cc      	lsrs	r4, r1
    4036:	1a79      	subs	r1, r7, r1
    4038:	408b      	lsls	r3, r1
    403a:	1e59      	subs	r1, r3, #1
    403c:	418b      	sbcs	r3, r1
    403e:	4323      	orrs	r3, r4
    4040:	199b      	adds	r3, r3, r6
    4042:	0004      	movs	r4, r0
    4044:	e740      	b.n	3ec8 <__aeabi_fsub+0x138>
    4046:	2b00      	cmp	r3, #0
    4048:	d11a      	bne.n	4080 <__aeabi_fsub+0x2f0>
    404a:	2e00      	cmp	r6, #0
    404c:	d124      	bne.n	4098 <__aeabi_fsub+0x308>
    404e:	2780      	movs	r7, #128	; 0x80
    4050:	2200      	movs	r2, #0
    4052:	03ff      	lsls	r7, r7, #15
    4054:	e71b      	b.n	3e8e <__aeabi_fsub+0xfe>
    4056:	0033      	movs	r3, r6
    4058:	0004      	movs	r4, r0
    405a:	000d      	movs	r5, r1
    405c:	e6de      	b.n	3e1c <__aeabi_fsub+0x8c>
    405e:	28ff      	cmp	r0, #255	; 0xff
    4060:	d01e      	beq.n	40a0 <__aeabi_fsub+0x310>
    4062:	2480      	movs	r4, #128	; 0x80
    4064:	04e4      	lsls	r4, r4, #19
    4066:	4249      	negs	r1, r1
    4068:	4323      	orrs	r3, r4
    406a:	e7df      	b.n	402c <__aeabi_fsub+0x29c>
    406c:	2e00      	cmp	r6, #0
    406e:	d100      	bne.n	4072 <__aeabi_fsub+0x2e2>
    4070:	e6d4      	b.n	3e1c <__aeabi_fsub+0x8c>
    4072:	1b9f      	subs	r7, r3, r6
    4074:	017a      	lsls	r2, r7, #5
    4076:	d400      	bmi.n	407a <__aeabi_fsub+0x2ea>
    4078:	e737      	b.n	3eea <__aeabi_fsub+0x15a>
    407a:	1af3      	subs	r3, r6, r3
    407c:	000d      	movs	r5, r1
    407e:	e6cd      	b.n	3e1c <__aeabi_fsub+0x8c>
    4080:	24ff      	movs	r4, #255	; 0xff
    4082:	2e00      	cmp	r6, #0
    4084:	d100      	bne.n	4088 <__aeabi_fsub+0x2f8>
    4086:	e6c9      	b.n	3e1c <__aeabi_fsub+0x8c>
    4088:	2280      	movs	r2, #128	; 0x80
    408a:	4650      	mov	r0, sl
    408c:	03d2      	lsls	r2, r2, #15
    408e:	4210      	tst	r0, r2
    4090:	d0a4      	beq.n	3fdc <__aeabi_fsub+0x24c>
    4092:	4660      	mov	r0, ip
    4094:	4210      	tst	r0, r2
    4096:	d1a1      	bne.n	3fdc <__aeabi_fsub+0x24c>
    4098:	0033      	movs	r3, r6
    409a:	000d      	movs	r5, r1
    409c:	24ff      	movs	r4, #255	; 0xff
    409e:	e6bd      	b.n	3e1c <__aeabi_fsub+0x8c>
    40a0:	0033      	movs	r3, r6
    40a2:	24ff      	movs	r4, #255	; 0xff
    40a4:	e6ba      	b.n	3e1c <__aeabi_fsub+0x8c>
    40a6:	2301      	movs	r3, #1
    40a8:	e76e      	b.n	3f88 <__aeabi_fsub+0x1f8>
    40aa:	0033      	movs	r3, r6
    40ac:	0004      	movs	r4, r0
    40ae:	e6b5      	b.n	3e1c <__aeabi_fsub+0x8c>
    40b0:	2700      	movs	r7, #0
    40b2:	2200      	movs	r2, #0
    40b4:	e71c      	b.n	3ef0 <__aeabi_fsub+0x160>
    40b6:	0033      	movs	r3, r6
    40b8:	e6b0      	b.n	3e1c <__aeabi_fsub+0x8c>
    40ba:	2301      	movs	r3, #1
    40bc:	e7c0      	b.n	4040 <__aeabi_fsub+0x2b0>
    40be:	46c0      	nop			; (mov r8, r8)
    40c0:	7dffffff 	.word	0x7dffffff
    40c4:	fbffffff 	.word	0xfbffffff

000040c8 <__aeabi_f2iz>:
    40c8:	0241      	lsls	r1, r0, #9
    40ca:	0043      	lsls	r3, r0, #1
    40cc:	0fc2      	lsrs	r2, r0, #31
    40ce:	0a49      	lsrs	r1, r1, #9
    40d0:	0e1b      	lsrs	r3, r3, #24
    40d2:	2000      	movs	r0, #0
    40d4:	2b7e      	cmp	r3, #126	; 0x7e
    40d6:	dd0d      	ble.n	40f4 <__aeabi_f2iz+0x2c>
    40d8:	2b9d      	cmp	r3, #157	; 0x9d
    40da:	dc0c      	bgt.n	40f6 <__aeabi_f2iz+0x2e>
    40dc:	2080      	movs	r0, #128	; 0x80
    40de:	0400      	lsls	r0, r0, #16
    40e0:	4301      	orrs	r1, r0
    40e2:	2b95      	cmp	r3, #149	; 0x95
    40e4:	dc0a      	bgt.n	40fc <__aeabi_f2iz+0x34>
    40e6:	2096      	movs	r0, #150	; 0x96
    40e8:	1ac3      	subs	r3, r0, r3
    40ea:	40d9      	lsrs	r1, r3
    40ec:	4248      	negs	r0, r1
    40ee:	2a00      	cmp	r2, #0
    40f0:	d100      	bne.n	40f4 <__aeabi_f2iz+0x2c>
    40f2:	0008      	movs	r0, r1
    40f4:	4770      	bx	lr
    40f6:	4b03      	ldr	r3, [pc, #12]	; (4104 <__aeabi_f2iz+0x3c>)
    40f8:	18d0      	adds	r0, r2, r3
    40fa:	e7fb      	b.n	40f4 <__aeabi_f2iz+0x2c>
    40fc:	3b96      	subs	r3, #150	; 0x96
    40fe:	4099      	lsls	r1, r3
    4100:	e7f4      	b.n	40ec <__aeabi_f2iz+0x24>
    4102:	46c0      	nop			; (mov r8, r8)
    4104:	7fffffff 	.word	0x7fffffff

00004108 <__aeabi_i2f>:
    4108:	b570      	push	{r4, r5, r6, lr}
    410a:	2800      	cmp	r0, #0
    410c:	d030      	beq.n	4170 <__aeabi_i2f+0x68>
    410e:	17c3      	asrs	r3, r0, #31
    4110:	18c4      	adds	r4, r0, r3
    4112:	405c      	eors	r4, r3
    4114:	0fc5      	lsrs	r5, r0, #31
    4116:	0020      	movs	r0, r4
    4118:	f000 ff8e 	bl	5038 <__clzsi2>
    411c:	239e      	movs	r3, #158	; 0x9e
    411e:	1a1b      	subs	r3, r3, r0
    4120:	2b96      	cmp	r3, #150	; 0x96
    4122:	dc0d      	bgt.n	4140 <__aeabi_i2f+0x38>
    4124:	2296      	movs	r2, #150	; 0x96
    4126:	1ad2      	subs	r2, r2, r3
    4128:	4094      	lsls	r4, r2
    412a:	002a      	movs	r2, r5
    412c:	0264      	lsls	r4, r4, #9
    412e:	0a64      	lsrs	r4, r4, #9
    4130:	b2db      	uxtb	r3, r3
    4132:	0264      	lsls	r4, r4, #9
    4134:	05db      	lsls	r3, r3, #23
    4136:	0a60      	lsrs	r0, r4, #9
    4138:	07d2      	lsls	r2, r2, #31
    413a:	4318      	orrs	r0, r3
    413c:	4310      	orrs	r0, r2
    413e:	bd70      	pop	{r4, r5, r6, pc}
    4140:	2b99      	cmp	r3, #153	; 0x99
    4142:	dc19      	bgt.n	4178 <__aeabi_i2f+0x70>
    4144:	2299      	movs	r2, #153	; 0x99
    4146:	1ad2      	subs	r2, r2, r3
    4148:	2a00      	cmp	r2, #0
    414a:	dd29      	ble.n	41a0 <__aeabi_i2f+0x98>
    414c:	4094      	lsls	r4, r2
    414e:	0022      	movs	r2, r4
    4150:	4c14      	ldr	r4, [pc, #80]	; (41a4 <__aeabi_i2f+0x9c>)
    4152:	4014      	ands	r4, r2
    4154:	0751      	lsls	r1, r2, #29
    4156:	d004      	beq.n	4162 <__aeabi_i2f+0x5a>
    4158:	210f      	movs	r1, #15
    415a:	400a      	ands	r2, r1
    415c:	2a04      	cmp	r2, #4
    415e:	d000      	beq.n	4162 <__aeabi_i2f+0x5a>
    4160:	3404      	adds	r4, #4
    4162:	0162      	lsls	r2, r4, #5
    4164:	d413      	bmi.n	418e <__aeabi_i2f+0x86>
    4166:	01a4      	lsls	r4, r4, #6
    4168:	0a64      	lsrs	r4, r4, #9
    416a:	b2db      	uxtb	r3, r3
    416c:	002a      	movs	r2, r5
    416e:	e7e0      	b.n	4132 <__aeabi_i2f+0x2a>
    4170:	2200      	movs	r2, #0
    4172:	2300      	movs	r3, #0
    4174:	2400      	movs	r4, #0
    4176:	e7dc      	b.n	4132 <__aeabi_i2f+0x2a>
    4178:	2205      	movs	r2, #5
    417a:	0021      	movs	r1, r4
    417c:	1a12      	subs	r2, r2, r0
    417e:	40d1      	lsrs	r1, r2
    4180:	22b9      	movs	r2, #185	; 0xb9
    4182:	1ad2      	subs	r2, r2, r3
    4184:	4094      	lsls	r4, r2
    4186:	1e62      	subs	r2, r4, #1
    4188:	4194      	sbcs	r4, r2
    418a:	430c      	orrs	r4, r1
    418c:	e7da      	b.n	4144 <__aeabi_i2f+0x3c>
    418e:	4b05      	ldr	r3, [pc, #20]	; (41a4 <__aeabi_i2f+0x9c>)
    4190:	002a      	movs	r2, r5
    4192:	401c      	ands	r4, r3
    4194:	239f      	movs	r3, #159	; 0x9f
    4196:	01a4      	lsls	r4, r4, #6
    4198:	1a1b      	subs	r3, r3, r0
    419a:	0a64      	lsrs	r4, r4, #9
    419c:	b2db      	uxtb	r3, r3
    419e:	e7c8      	b.n	4132 <__aeabi_i2f+0x2a>
    41a0:	0022      	movs	r2, r4
    41a2:	e7d5      	b.n	4150 <__aeabi_i2f+0x48>
    41a4:	fbffffff 	.word	0xfbffffff

000041a8 <__aeabi_ui2f>:
    41a8:	b510      	push	{r4, lr}
    41aa:	1e04      	subs	r4, r0, #0
    41ac:	d027      	beq.n	41fe <__aeabi_ui2f+0x56>
    41ae:	f000 ff43 	bl	5038 <__clzsi2>
    41b2:	239e      	movs	r3, #158	; 0x9e
    41b4:	1a1b      	subs	r3, r3, r0
    41b6:	2b96      	cmp	r3, #150	; 0x96
    41b8:	dc0a      	bgt.n	41d0 <__aeabi_ui2f+0x28>
    41ba:	2296      	movs	r2, #150	; 0x96
    41bc:	1ad2      	subs	r2, r2, r3
    41be:	4094      	lsls	r4, r2
    41c0:	0264      	lsls	r4, r4, #9
    41c2:	0a64      	lsrs	r4, r4, #9
    41c4:	b2db      	uxtb	r3, r3
    41c6:	0264      	lsls	r4, r4, #9
    41c8:	05db      	lsls	r3, r3, #23
    41ca:	0a60      	lsrs	r0, r4, #9
    41cc:	4318      	orrs	r0, r3
    41ce:	bd10      	pop	{r4, pc}
    41d0:	2b99      	cmp	r3, #153	; 0x99
    41d2:	dc17      	bgt.n	4204 <__aeabi_ui2f+0x5c>
    41d4:	2299      	movs	r2, #153	; 0x99
    41d6:	1ad2      	subs	r2, r2, r3
    41d8:	2a00      	cmp	r2, #0
    41da:	dd27      	ble.n	422c <__aeabi_ui2f+0x84>
    41dc:	4094      	lsls	r4, r2
    41de:	0022      	movs	r2, r4
    41e0:	4c13      	ldr	r4, [pc, #76]	; (4230 <__aeabi_ui2f+0x88>)
    41e2:	4014      	ands	r4, r2
    41e4:	0751      	lsls	r1, r2, #29
    41e6:	d004      	beq.n	41f2 <__aeabi_ui2f+0x4a>
    41e8:	210f      	movs	r1, #15
    41ea:	400a      	ands	r2, r1
    41ec:	2a04      	cmp	r2, #4
    41ee:	d000      	beq.n	41f2 <__aeabi_ui2f+0x4a>
    41f0:	3404      	adds	r4, #4
    41f2:	0162      	lsls	r2, r4, #5
    41f4:	d412      	bmi.n	421c <__aeabi_ui2f+0x74>
    41f6:	01a4      	lsls	r4, r4, #6
    41f8:	0a64      	lsrs	r4, r4, #9
    41fa:	b2db      	uxtb	r3, r3
    41fc:	e7e3      	b.n	41c6 <__aeabi_ui2f+0x1e>
    41fe:	2300      	movs	r3, #0
    4200:	2400      	movs	r4, #0
    4202:	e7e0      	b.n	41c6 <__aeabi_ui2f+0x1e>
    4204:	22b9      	movs	r2, #185	; 0xb9
    4206:	0021      	movs	r1, r4
    4208:	1ad2      	subs	r2, r2, r3
    420a:	4091      	lsls	r1, r2
    420c:	000a      	movs	r2, r1
    420e:	1e51      	subs	r1, r2, #1
    4210:	418a      	sbcs	r2, r1
    4212:	2105      	movs	r1, #5
    4214:	1a09      	subs	r1, r1, r0
    4216:	40cc      	lsrs	r4, r1
    4218:	4314      	orrs	r4, r2
    421a:	e7db      	b.n	41d4 <__aeabi_ui2f+0x2c>
    421c:	4b04      	ldr	r3, [pc, #16]	; (4230 <__aeabi_ui2f+0x88>)
    421e:	401c      	ands	r4, r3
    4220:	239f      	movs	r3, #159	; 0x9f
    4222:	01a4      	lsls	r4, r4, #6
    4224:	1a1b      	subs	r3, r3, r0
    4226:	0a64      	lsrs	r4, r4, #9
    4228:	b2db      	uxtb	r3, r3
    422a:	e7cc      	b.n	41c6 <__aeabi_ui2f+0x1e>
    422c:	0022      	movs	r2, r4
    422e:	e7d7      	b.n	41e0 <__aeabi_ui2f+0x38>
    4230:	fbffffff 	.word	0xfbffffff

00004234 <__aeabi_dadd>:
    4234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4236:	4645      	mov	r5, r8
    4238:	46de      	mov	lr, fp
    423a:	4657      	mov	r7, sl
    423c:	464e      	mov	r6, r9
    423e:	030c      	lsls	r4, r1, #12
    4240:	b5e0      	push	{r5, r6, r7, lr}
    4242:	004e      	lsls	r6, r1, #1
    4244:	0fc9      	lsrs	r1, r1, #31
    4246:	4688      	mov	r8, r1
    4248:	000d      	movs	r5, r1
    424a:	0a61      	lsrs	r1, r4, #9
    424c:	0f44      	lsrs	r4, r0, #29
    424e:	430c      	orrs	r4, r1
    4250:	00c7      	lsls	r7, r0, #3
    4252:	0319      	lsls	r1, r3, #12
    4254:	0058      	lsls	r0, r3, #1
    4256:	0fdb      	lsrs	r3, r3, #31
    4258:	469b      	mov	fp, r3
    425a:	0a4b      	lsrs	r3, r1, #9
    425c:	0f51      	lsrs	r1, r2, #29
    425e:	430b      	orrs	r3, r1
    4260:	0d76      	lsrs	r6, r6, #21
    4262:	0d40      	lsrs	r0, r0, #21
    4264:	0019      	movs	r1, r3
    4266:	00d2      	lsls	r2, r2, #3
    4268:	45d8      	cmp	r8, fp
    426a:	d100      	bne.n	426e <__aeabi_dadd+0x3a>
    426c:	e0ae      	b.n	43cc <__aeabi_dadd+0x198>
    426e:	1a35      	subs	r5, r6, r0
    4270:	2d00      	cmp	r5, #0
    4272:	dc00      	bgt.n	4276 <__aeabi_dadd+0x42>
    4274:	e0f6      	b.n	4464 <__aeabi_dadd+0x230>
    4276:	2800      	cmp	r0, #0
    4278:	d10f      	bne.n	429a <__aeabi_dadd+0x66>
    427a:	4313      	orrs	r3, r2
    427c:	d100      	bne.n	4280 <__aeabi_dadd+0x4c>
    427e:	e0db      	b.n	4438 <__aeabi_dadd+0x204>
    4280:	1e6b      	subs	r3, r5, #1
    4282:	2b00      	cmp	r3, #0
    4284:	d000      	beq.n	4288 <__aeabi_dadd+0x54>
    4286:	e137      	b.n	44f8 <__aeabi_dadd+0x2c4>
    4288:	1aba      	subs	r2, r7, r2
    428a:	4297      	cmp	r7, r2
    428c:	41bf      	sbcs	r7, r7
    428e:	1a64      	subs	r4, r4, r1
    4290:	427f      	negs	r7, r7
    4292:	1be4      	subs	r4, r4, r7
    4294:	2601      	movs	r6, #1
    4296:	0017      	movs	r7, r2
    4298:	e024      	b.n	42e4 <__aeabi_dadd+0xb0>
    429a:	4bc6      	ldr	r3, [pc, #792]	; (45b4 <__aeabi_dadd+0x380>)
    429c:	429e      	cmp	r6, r3
    429e:	d04d      	beq.n	433c <__aeabi_dadd+0x108>
    42a0:	2380      	movs	r3, #128	; 0x80
    42a2:	041b      	lsls	r3, r3, #16
    42a4:	4319      	orrs	r1, r3
    42a6:	2d38      	cmp	r5, #56	; 0x38
    42a8:	dd00      	ble.n	42ac <__aeabi_dadd+0x78>
    42aa:	e107      	b.n	44bc <__aeabi_dadd+0x288>
    42ac:	2d1f      	cmp	r5, #31
    42ae:	dd00      	ble.n	42b2 <__aeabi_dadd+0x7e>
    42b0:	e138      	b.n	4524 <__aeabi_dadd+0x2f0>
    42b2:	2020      	movs	r0, #32
    42b4:	1b43      	subs	r3, r0, r5
    42b6:	469a      	mov	sl, r3
    42b8:	000b      	movs	r3, r1
    42ba:	4650      	mov	r0, sl
    42bc:	4083      	lsls	r3, r0
    42be:	4699      	mov	r9, r3
    42c0:	0013      	movs	r3, r2
    42c2:	4648      	mov	r0, r9
    42c4:	40eb      	lsrs	r3, r5
    42c6:	4318      	orrs	r0, r3
    42c8:	0003      	movs	r3, r0
    42ca:	4650      	mov	r0, sl
    42cc:	4082      	lsls	r2, r0
    42ce:	1e50      	subs	r0, r2, #1
    42d0:	4182      	sbcs	r2, r0
    42d2:	40e9      	lsrs	r1, r5
    42d4:	431a      	orrs	r2, r3
    42d6:	1aba      	subs	r2, r7, r2
    42d8:	1a61      	subs	r1, r4, r1
    42da:	4297      	cmp	r7, r2
    42dc:	41a4      	sbcs	r4, r4
    42de:	0017      	movs	r7, r2
    42e0:	4264      	negs	r4, r4
    42e2:	1b0c      	subs	r4, r1, r4
    42e4:	0223      	lsls	r3, r4, #8
    42e6:	d562      	bpl.n	43ae <__aeabi_dadd+0x17a>
    42e8:	0264      	lsls	r4, r4, #9
    42ea:	0a65      	lsrs	r5, r4, #9
    42ec:	2d00      	cmp	r5, #0
    42ee:	d100      	bne.n	42f2 <__aeabi_dadd+0xbe>
    42f0:	e0df      	b.n	44b2 <__aeabi_dadd+0x27e>
    42f2:	0028      	movs	r0, r5
    42f4:	f000 fea0 	bl	5038 <__clzsi2>
    42f8:	0003      	movs	r3, r0
    42fa:	3b08      	subs	r3, #8
    42fc:	2b1f      	cmp	r3, #31
    42fe:	dd00      	ble.n	4302 <__aeabi_dadd+0xce>
    4300:	e0d2      	b.n	44a8 <__aeabi_dadd+0x274>
    4302:	2220      	movs	r2, #32
    4304:	003c      	movs	r4, r7
    4306:	1ad2      	subs	r2, r2, r3
    4308:	409d      	lsls	r5, r3
    430a:	40d4      	lsrs	r4, r2
    430c:	409f      	lsls	r7, r3
    430e:	4325      	orrs	r5, r4
    4310:	429e      	cmp	r6, r3
    4312:	dd00      	ble.n	4316 <__aeabi_dadd+0xe2>
    4314:	e0c4      	b.n	44a0 <__aeabi_dadd+0x26c>
    4316:	1b9e      	subs	r6, r3, r6
    4318:	1c73      	adds	r3, r6, #1
    431a:	2b1f      	cmp	r3, #31
    431c:	dd00      	ble.n	4320 <__aeabi_dadd+0xec>
    431e:	e0f1      	b.n	4504 <__aeabi_dadd+0x2d0>
    4320:	2220      	movs	r2, #32
    4322:	0038      	movs	r0, r7
    4324:	0029      	movs	r1, r5
    4326:	1ad2      	subs	r2, r2, r3
    4328:	40d8      	lsrs	r0, r3
    432a:	4091      	lsls	r1, r2
    432c:	4097      	lsls	r7, r2
    432e:	002c      	movs	r4, r5
    4330:	4301      	orrs	r1, r0
    4332:	1e78      	subs	r0, r7, #1
    4334:	4187      	sbcs	r7, r0
    4336:	40dc      	lsrs	r4, r3
    4338:	2600      	movs	r6, #0
    433a:	430f      	orrs	r7, r1
    433c:	077b      	lsls	r3, r7, #29
    433e:	d009      	beq.n	4354 <__aeabi_dadd+0x120>
    4340:	230f      	movs	r3, #15
    4342:	403b      	ands	r3, r7
    4344:	2b04      	cmp	r3, #4
    4346:	d005      	beq.n	4354 <__aeabi_dadd+0x120>
    4348:	1d3b      	adds	r3, r7, #4
    434a:	42bb      	cmp	r3, r7
    434c:	41bf      	sbcs	r7, r7
    434e:	427f      	negs	r7, r7
    4350:	19e4      	adds	r4, r4, r7
    4352:	001f      	movs	r7, r3
    4354:	0223      	lsls	r3, r4, #8
    4356:	d52c      	bpl.n	43b2 <__aeabi_dadd+0x17e>
    4358:	4b96      	ldr	r3, [pc, #600]	; (45b4 <__aeabi_dadd+0x380>)
    435a:	3601      	adds	r6, #1
    435c:	429e      	cmp	r6, r3
    435e:	d100      	bne.n	4362 <__aeabi_dadd+0x12e>
    4360:	e09a      	b.n	4498 <__aeabi_dadd+0x264>
    4362:	4645      	mov	r5, r8
    4364:	4b94      	ldr	r3, [pc, #592]	; (45b8 <__aeabi_dadd+0x384>)
    4366:	08ff      	lsrs	r7, r7, #3
    4368:	401c      	ands	r4, r3
    436a:	0760      	lsls	r0, r4, #29
    436c:	0576      	lsls	r6, r6, #21
    436e:	0264      	lsls	r4, r4, #9
    4370:	4307      	orrs	r7, r0
    4372:	0b24      	lsrs	r4, r4, #12
    4374:	0d76      	lsrs	r6, r6, #21
    4376:	2100      	movs	r1, #0
    4378:	0324      	lsls	r4, r4, #12
    437a:	0b23      	lsrs	r3, r4, #12
    437c:	0d0c      	lsrs	r4, r1, #20
    437e:	4a8f      	ldr	r2, [pc, #572]	; (45bc <__aeabi_dadd+0x388>)
    4380:	0524      	lsls	r4, r4, #20
    4382:	431c      	orrs	r4, r3
    4384:	4014      	ands	r4, r2
    4386:	0533      	lsls	r3, r6, #20
    4388:	4323      	orrs	r3, r4
    438a:	005b      	lsls	r3, r3, #1
    438c:	07ed      	lsls	r5, r5, #31
    438e:	085b      	lsrs	r3, r3, #1
    4390:	432b      	orrs	r3, r5
    4392:	0038      	movs	r0, r7
    4394:	0019      	movs	r1, r3
    4396:	bc3c      	pop	{r2, r3, r4, r5}
    4398:	4690      	mov	r8, r2
    439a:	4699      	mov	r9, r3
    439c:	46a2      	mov	sl, r4
    439e:	46ab      	mov	fp, r5
    43a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43a2:	4664      	mov	r4, ip
    43a4:	4304      	orrs	r4, r0
    43a6:	d100      	bne.n	43aa <__aeabi_dadd+0x176>
    43a8:	e211      	b.n	47ce <__aeabi_dadd+0x59a>
    43aa:	0004      	movs	r4, r0
    43ac:	4667      	mov	r7, ip
    43ae:	077b      	lsls	r3, r7, #29
    43b0:	d1c6      	bne.n	4340 <__aeabi_dadd+0x10c>
    43b2:	4645      	mov	r5, r8
    43b4:	0760      	lsls	r0, r4, #29
    43b6:	08ff      	lsrs	r7, r7, #3
    43b8:	4307      	orrs	r7, r0
    43ba:	08e4      	lsrs	r4, r4, #3
    43bc:	4b7d      	ldr	r3, [pc, #500]	; (45b4 <__aeabi_dadd+0x380>)
    43be:	429e      	cmp	r6, r3
    43c0:	d030      	beq.n	4424 <__aeabi_dadd+0x1f0>
    43c2:	0324      	lsls	r4, r4, #12
    43c4:	0576      	lsls	r6, r6, #21
    43c6:	0b24      	lsrs	r4, r4, #12
    43c8:	0d76      	lsrs	r6, r6, #21
    43ca:	e7d4      	b.n	4376 <__aeabi_dadd+0x142>
    43cc:	1a33      	subs	r3, r6, r0
    43ce:	469a      	mov	sl, r3
    43d0:	2b00      	cmp	r3, #0
    43d2:	dd78      	ble.n	44c6 <__aeabi_dadd+0x292>
    43d4:	2800      	cmp	r0, #0
    43d6:	d031      	beq.n	443c <__aeabi_dadd+0x208>
    43d8:	4876      	ldr	r0, [pc, #472]	; (45b4 <__aeabi_dadd+0x380>)
    43da:	4286      	cmp	r6, r0
    43dc:	d0ae      	beq.n	433c <__aeabi_dadd+0x108>
    43de:	2080      	movs	r0, #128	; 0x80
    43e0:	0400      	lsls	r0, r0, #16
    43e2:	4301      	orrs	r1, r0
    43e4:	4653      	mov	r3, sl
    43e6:	2b38      	cmp	r3, #56	; 0x38
    43e8:	dc00      	bgt.n	43ec <__aeabi_dadd+0x1b8>
    43ea:	e0e9      	b.n	45c0 <__aeabi_dadd+0x38c>
    43ec:	430a      	orrs	r2, r1
    43ee:	1e51      	subs	r1, r2, #1
    43f0:	418a      	sbcs	r2, r1
    43f2:	2100      	movs	r1, #0
    43f4:	19d2      	adds	r2, r2, r7
    43f6:	42ba      	cmp	r2, r7
    43f8:	41bf      	sbcs	r7, r7
    43fa:	1909      	adds	r1, r1, r4
    43fc:	427c      	negs	r4, r7
    43fe:	0017      	movs	r7, r2
    4400:	190c      	adds	r4, r1, r4
    4402:	0223      	lsls	r3, r4, #8
    4404:	d5d3      	bpl.n	43ae <__aeabi_dadd+0x17a>
    4406:	4b6b      	ldr	r3, [pc, #428]	; (45b4 <__aeabi_dadd+0x380>)
    4408:	3601      	adds	r6, #1
    440a:	429e      	cmp	r6, r3
    440c:	d100      	bne.n	4410 <__aeabi_dadd+0x1dc>
    440e:	e13a      	b.n	4686 <__aeabi_dadd+0x452>
    4410:	2001      	movs	r0, #1
    4412:	4b69      	ldr	r3, [pc, #420]	; (45b8 <__aeabi_dadd+0x384>)
    4414:	401c      	ands	r4, r3
    4416:	087b      	lsrs	r3, r7, #1
    4418:	4007      	ands	r7, r0
    441a:	431f      	orrs	r7, r3
    441c:	07e0      	lsls	r0, r4, #31
    441e:	4307      	orrs	r7, r0
    4420:	0864      	lsrs	r4, r4, #1
    4422:	e78b      	b.n	433c <__aeabi_dadd+0x108>
    4424:	0023      	movs	r3, r4
    4426:	433b      	orrs	r3, r7
    4428:	d100      	bne.n	442c <__aeabi_dadd+0x1f8>
    442a:	e1cb      	b.n	47c4 <__aeabi_dadd+0x590>
    442c:	2280      	movs	r2, #128	; 0x80
    442e:	0312      	lsls	r2, r2, #12
    4430:	4314      	orrs	r4, r2
    4432:	0324      	lsls	r4, r4, #12
    4434:	0b24      	lsrs	r4, r4, #12
    4436:	e79e      	b.n	4376 <__aeabi_dadd+0x142>
    4438:	002e      	movs	r6, r5
    443a:	e77f      	b.n	433c <__aeabi_dadd+0x108>
    443c:	0008      	movs	r0, r1
    443e:	4310      	orrs	r0, r2
    4440:	d100      	bne.n	4444 <__aeabi_dadd+0x210>
    4442:	e0b4      	b.n	45ae <__aeabi_dadd+0x37a>
    4444:	1e58      	subs	r0, r3, #1
    4446:	2800      	cmp	r0, #0
    4448:	d000      	beq.n	444c <__aeabi_dadd+0x218>
    444a:	e0de      	b.n	460a <__aeabi_dadd+0x3d6>
    444c:	18ba      	adds	r2, r7, r2
    444e:	42ba      	cmp	r2, r7
    4450:	419b      	sbcs	r3, r3
    4452:	1864      	adds	r4, r4, r1
    4454:	425b      	negs	r3, r3
    4456:	18e4      	adds	r4, r4, r3
    4458:	0017      	movs	r7, r2
    445a:	2601      	movs	r6, #1
    445c:	0223      	lsls	r3, r4, #8
    445e:	d5a6      	bpl.n	43ae <__aeabi_dadd+0x17a>
    4460:	2602      	movs	r6, #2
    4462:	e7d5      	b.n	4410 <__aeabi_dadd+0x1dc>
    4464:	2d00      	cmp	r5, #0
    4466:	d16e      	bne.n	4546 <__aeabi_dadd+0x312>
    4468:	1c70      	adds	r0, r6, #1
    446a:	0540      	lsls	r0, r0, #21
    446c:	0d40      	lsrs	r0, r0, #21
    446e:	2801      	cmp	r0, #1
    4470:	dc00      	bgt.n	4474 <__aeabi_dadd+0x240>
    4472:	e0f9      	b.n	4668 <__aeabi_dadd+0x434>
    4474:	1ab8      	subs	r0, r7, r2
    4476:	4684      	mov	ip, r0
    4478:	4287      	cmp	r7, r0
    447a:	4180      	sbcs	r0, r0
    447c:	1ae5      	subs	r5, r4, r3
    447e:	4240      	negs	r0, r0
    4480:	1a2d      	subs	r5, r5, r0
    4482:	0228      	lsls	r0, r5, #8
    4484:	d400      	bmi.n	4488 <__aeabi_dadd+0x254>
    4486:	e089      	b.n	459c <__aeabi_dadd+0x368>
    4488:	1bd7      	subs	r7, r2, r7
    448a:	42ba      	cmp	r2, r7
    448c:	4192      	sbcs	r2, r2
    448e:	1b1c      	subs	r4, r3, r4
    4490:	4252      	negs	r2, r2
    4492:	1aa5      	subs	r5, r4, r2
    4494:	46d8      	mov	r8, fp
    4496:	e729      	b.n	42ec <__aeabi_dadd+0xb8>
    4498:	4645      	mov	r5, r8
    449a:	2400      	movs	r4, #0
    449c:	2700      	movs	r7, #0
    449e:	e76a      	b.n	4376 <__aeabi_dadd+0x142>
    44a0:	4c45      	ldr	r4, [pc, #276]	; (45b8 <__aeabi_dadd+0x384>)
    44a2:	1af6      	subs	r6, r6, r3
    44a4:	402c      	ands	r4, r5
    44a6:	e749      	b.n	433c <__aeabi_dadd+0x108>
    44a8:	003d      	movs	r5, r7
    44aa:	3828      	subs	r0, #40	; 0x28
    44ac:	4085      	lsls	r5, r0
    44ae:	2700      	movs	r7, #0
    44b0:	e72e      	b.n	4310 <__aeabi_dadd+0xdc>
    44b2:	0038      	movs	r0, r7
    44b4:	f000 fdc0 	bl	5038 <__clzsi2>
    44b8:	3020      	adds	r0, #32
    44ba:	e71d      	b.n	42f8 <__aeabi_dadd+0xc4>
    44bc:	430a      	orrs	r2, r1
    44be:	1e51      	subs	r1, r2, #1
    44c0:	418a      	sbcs	r2, r1
    44c2:	2100      	movs	r1, #0
    44c4:	e707      	b.n	42d6 <__aeabi_dadd+0xa2>
    44c6:	2b00      	cmp	r3, #0
    44c8:	d000      	beq.n	44cc <__aeabi_dadd+0x298>
    44ca:	e0f3      	b.n	46b4 <__aeabi_dadd+0x480>
    44cc:	1c70      	adds	r0, r6, #1
    44ce:	0543      	lsls	r3, r0, #21
    44d0:	0d5b      	lsrs	r3, r3, #21
    44d2:	2b01      	cmp	r3, #1
    44d4:	dc00      	bgt.n	44d8 <__aeabi_dadd+0x2a4>
    44d6:	e0ad      	b.n	4634 <__aeabi_dadd+0x400>
    44d8:	4b36      	ldr	r3, [pc, #216]	; (45b4 <__aeabi_dadd+0x380>)
    44da:	4298      	cmp	r0, r3
    44dc:	d100      	bne.n	44e0 <__aeabi_dadd+0x2ac>
    44de:	e0d1      	b.n	4684 <__aeabi_dadd+0x450>
    44e0:	18ba      	adds	r2, r7, r2
    44e2:	42ba      	cmp	r2, r7
    44e4:	41bf      	sbcs	r7, r7
    44e6:	1864      	adds	r4, r4, r1
    44e8:	427f      	negs	r7, r7
    44ea:	19e4      	adds	r4, r4, r7
    44ec:	07e7      	lsls	r7, r4, #31
    44ee:	0852      	lsrs	r2, r2, #1
    44f0:	4317      	orrs	r7, r2
    44f2:	0864      	lsrs	r4, r4, #1
    44f4:	0006      	movs	r6, r0
    44f6:	e721      	b.n	433c <__aeabi_dadd+0x108>
    44f8:	482e      	ldr	r0, [pc, #184]	; (45b4 <__aeabi_dadd+0x380>)
    44fa:	4285      	cmp	r5, r0
    44fc:	d100      	bne.n	4500 <__aeabi_dadd+0x2cc>
    44fe:	e093      	b.n	4628 <__aeabi_dadd+0x3f4>
    4500:	001d      	movs	r5, r3
    4502:	e6d0      	b.n	42a6 <__aeabi_dadd+0x72>
    4504:	0029      	movs	r1, r5
    4506:	3e1f      	subs	r6, #31
    4508:	40f1      	lsrs	r1, r6
    450a:	2b20      	cmp	r3, #32
    450c:	d100      	bne.n	4510 <__aeabi_dadd+0x2dc>
    450e:	e08d      	b.n	462c <__aeabi_dadd+0x3f8>
    4510:	2240      	movs	r2, #64	; 0x40
    4512:	1ad3      	subs	r3, r2, r3
    4514:	409d      	lsls	r5, r3
    4516:	432f      	orrs	r7, r5
    4518:	1e7d      	subs	r5, r7, #1
    451a:	41af      	sbcs	r7, r5
    451c:	2400      	movs	r4, #0
    451e:	430f      	orrs	r7, r1
    4520:	2600      	movs	r6, #0
    4522:	e744      	b.n	43ae <__aeabi_dadd+0x17a>
    4524:	002b      	movs	r3, r5
    4526:	0008      	movs	r0, r1
    4528:	3b20      	subs	r3, #32
    452a:	40d8      	lsrs	r0, r3
    452c:	0003      	movs	r3, r0
    452e:	2d20      	cmp	r5, #32
    4530:	d100      	bne.n	4534 <__aeabi_dadd+0x300>
    4532:	e07d      	b.n	4630 <__aeabi_dadd+0x3fc>
    4534:	2040      	movs	r0, #64	; 0x40
    4536:	1b45      	subs	r5, r0, r5
    4538:	40a9      	lsls	r1, r5
    453a:	430a      	orrs	r2, r1
    453c:	1e51      	subs	r1, r2, #1
    453e:	418a      	sbcs	r2, r1
    4540:	2100      	movs	r1, #0
    4542:	431a      	orrs	r2, r3
    4544:	e6c7      	b.n	42d6 <__aeabi_dadd+0xa2>
    4546:	2e00      	cmp	r6, #0
    4548:	d050      	beq.n	45ec <__aeabi_dadd+0x3b8>
    454a:	4e1a      	ldr	r6, [pc, #104]	; (45b4 <__aeabi_dadd+0x380>)
    454c:	42b0      	cmp	r0, r6
    454e:	d057      	beq.n	4600 <__aeabi_dadd+0x3cc>
    4550:	2680      	movs	r6, #128	; 0x80
    4552:	426b      	negs	r3, r5
    4554:	4699      	mov	r9, r3
    4556:	0436      	lsls	r6, r6, #16
    4558:	4334      	orrs	r4, r6
    455a:	464b      	mov	r3, r9
    455c:	2b38      	cmp	r3, #56	; 0x38
    455e:	dd00      	ble.n	4562 <__aeabi_dadd+0x32e>
    4560:	e0d6      	b.n	4710 <__aeabi_dadd+0x4dc>
    4562:	2b1f      	cmp	r3, #31
    4564:	dd00      	ble.n	4568 <__aeabi_dadd+0x334>
    4566:	e135      	b.n	47d4 <__aeabi_dadd+0x5a0>
    4568:	2620      	movs	r6, #32
    456a:	1af5      	subs	r5, r6, r3
    456c:	0026      	movs	r6, r4
    456e:	40ae      	lsls	r6, r5
    4570:	46b2      	mov	sl, r6
    4572:	003e      	movs	r6, r7
    4574:	40de      	lsrs	r6, r3
    4576:	46ac      	mov	ip, r5
    4578:	0035      	movs	r5, r6
    457a:	4656      	mov	r6, sl
    457c:	432e      	orrs	r6, r5
    457e:	4665      	mov	r5, ip
    4580:	40af      	lsls	r7, r5
    4582:	1e7d      	subs	r5, r7, #1
    4584:	41af      	sbcs	r7, r5
    4586:	40dc      	lsrs	r4, r3
    4588:	4337      	orrs	r7, r6
    458a:	1bd7      	subs	r7, r2, r7
    458c:	42ba      	cmp	r2, r7
    458e:	4192      	sbcs	r2, r2
    4590:	1b0c      	subs	r4, r1, r4
    4592:	4252      	negs	r2, r2
    4594:	1aa4      	subs	r4, r4, r2
    4596:	0006      	movs	r6, r0
    4598:	46d8      	mov	r8, fp
    459a:	e6a3      	b.n	42e4 <__aeabi_dadd+0xb0>
    459c:	4664      	mov	r4, ip
    459e:	4667      	mov	r7, ip
    45a0:	432c      	orrs	r4, r5
    45a2:	d000      	beq.n	45a6 <__aeabi_dadd+0x372>
    45a4:	e6a2      	b.n	42ec <__aeabi_dadd+0xb8>
    45a6:	2500      	movs	r5, #0
    45a8:	2600      	movs	r6, #0
    45aa:	2700      	movs	r7, #0
    45ac:	e706      	b.n	43bc <__aeabi_dadd+0x188>
    45ae:	001e      	movs	r6, r3
    45b0:	e6c4      	b.n	433c <__aeabi_dadd+0x108>
    45b2:	46c0      	nop			; (mov r8, r8)
    45b4:	000007ff 	.word	0x000007ff
    45b8:	ff7fffff 	.word	0xff7fffff
    45bc:	800fffff 	.word	0x800fffff
    45c0:	2b1f      	cmp	r3, #31
    45c2:	dc63      	bgt.n	468c <__aeabi_dadd+0x458>
    45c4:	2020      	movs	r0, #32
    45c6:	1ac3      	subs	r3, r0, r3
    45c8:	0008      	movs	r0, r1
    45ca:	4098      	lsls	r0, r3
    45cc:	469c      	mov	ip, r3
    45ce:	4683      	mov	fp, r0
    45d0:	4653      	mov	r3, sl
    45d2:	0010      	movs	r0, r2
    45d4:	40d8      	lsrs	r0, r3
    45d6:	0003      	movs	r3, r0
    45d8:	4658      	mov	r0, fp
    45da:	4318      	orrs	r0, r3
    45dc:	4663      	mov	r3, ip
    45de:	409a      	lsls	r2, r3
    45e0:	1e53      	subs	r3, r2, #1
    45e2:	419a      	sbcs	r2, r3
    45e4:	4653      	mov	r3, sl
    45e6:	4302      	orrs	r2, r0
    45e8:	40d9      	lsrs	r1, r3
    45ea:	e703      	b.n	43f4 <__aeabi_dadd+0x1c0>
    45ec:	0026      	movs	r6, r4
    45ee:	433e      	orrs	r6, r7
    45f0:	d006      	beq.n	4600 <__aeabi_dadd+0x3cc>
    45f2:	43eb      	mvns	r3, r5
    45f4:	4699      	mov	r9, r3
    45f6:	2b00      	cmp	r3, #0
    45f8:	d0c7      	beq.n	458a <__aeabi_dadd+0x356>
    45fa:	4e94      	ldr	r6, [pc, #592]	; (484c <__aeabi_dadd+0x618>)
    45fc:	42b0      	cmp	r0, r6
    45fe:	d1ac      	bne.n	455a <__aeabi_dadd+0x326>
    4600:	000c      	movs	r4, r1
    4602:	0017      	movs	r7, r2
    4604:	0006      	movs	r6, r0
    4606:	46d8      	mov	r8, fp
    4608:	e698      	b.n	433c <__aeabi_dadd+0x108>
    460a:	4b90      	ldr	r3, [pc, #576]	; (484c <__aeabi_dadd+0x618>)
    460c:	459a      	cmp	sl, r3
    460e:	d00b      	beq.n	4628 <__aeabi_dadd+0x3f4>
    4610:	4682      	mov	sl, r0
    4612:	e6e7      	b.n	43e4 <__aeabi_dadd+0x1b0>
    4614:	2800      	cmp	r0, #0
    4616:	d000      	beq.n	461a <__aeabi_dadd+0x3e6>
    4618:	e09e      	b.n	4758 <__aeabi_dadd+0x524>
    461a:	0018      	movs	r0, r3
    461c:	4310      	orrs	r0, r2
    461e:	d100      	bne.n	4622 <__aeabi_dadd+0x3ee>
    4620:	e0e9      	b.n	47f6 <__aeabi_dadd+0x5c2>
    4622:	001c      	movs	r4, r3
    4624:	0017      	movs	r7, r2
    4626:	46d8      	mov	r8, fp
    4628:	4e88      	ldr	r6, [pc, #544]	; (484c <__aeabi_dadd+0x618>)
    462a:	e687      	b.n	433c <__aeabi_dadd+0x108>
    462c:	2500      	movs	r5, #0
    462e:	e772      	b.n	4516 <__aeabi_dadd+0x2e2>
    4630:	2100      	movs	r1, #0
    4632:	e782      	b.n	453a <__aeabi_dadd+0x306>
    4634:	0023      	movs	r3, r4
    4636:	433b      	orrs	r3, r7
    4638:	2e00      	cmp	r6, #0
    463a:	d000      	beq.n	463e <__aeabi_dadd+0x40a>
    463c:	e0ab      	b.n	4796 <__aeabi_dadd+0x562>
    463e:	2b00      	cmp	r3, #0
    4640:	d100      	bne.n	4644 <__aeabi_dadd+0x410>
    4642:	e0e7      	b.n	4814 <__aeabi_dadd+0x5e0>
    4644:	000b      	movs	r3, r1
    4646:	4313      	orrs	r3, r2
    4648:	d100      	bne.n	464c <__aeabi_dadd+0x418>
    464a:	e677      	b.n	433c <__aeabi_dadd+0x108>
    464c:	18ba      	adds	r2, r7, r2
    464e:	42ba      	cmp	r2, r7
    4650:	41bf      	sbcs	r7, r7
    4652:	1864      	adds	r4, r4, r1
    4654:	427f      	negs	r7, r7
    4656:	19e4      	adds	r4, r4, r7
    4658:	0223      	lsls	r3, r4, #8
    465a:	d400      	bmi.n	465e <__aeabi_dadd+0x42a>
    465c:	e0f2      	b.n	4844 <__aeabi_dadd+0x610>
    465e:	4b7c      	ldr	r3, [pc, #496]	; (4850 <__aeabi_dadd+0x61c>)
    4660:	0017      	movs	r7, r2
    4662:	401c      	ands	r4, r3
    4664:	0006      	movs	r6, r0
    4666:	e669      	b.n	433c <__aeabi_dadd+0x108>
    4668:	0020      	movs	r0, r4
    466a:	4338      	orrs	r0, r7
    466c:	2e00      	cmp	r6, #0
    466e:	d1d1      	bne.n	4614 <__aeabi_dadd+0x3e0>
    4670:	2800      	cmp	r0, #0
    4672:	d15b      	bne.n	472c <__aeabi_dadd+0x4f8>
    4674:	001c      	movs	r4, r3
    4676:	4314      	orrs	r4, r2
    4678:	d100      	bne.n	467c <__aeabi_dadd+0x448>
    467a:	e0a8      	b.n	47ce <__aeabi_dadd+0x59a>
    467c:	001c      	movs	r4, r3
    467e:	0017      	movs	r7, r2
    4680:	46d8      	mov	r8, fp
    4682:	e65b      	b.n	433c <__aeabi_dadd+0x108>
    4684:	0006      	movs	r6, r0
    4686:	2400      	movs	r4, #0
    4688:	2700      	movs	r7, #0
    468a:	e697      	b.n	43bc <__aeabi_dadd+0x188>
    468c:	4650      	mov	r0, sl
    468e:	000b      	movs	r3, r1
    4690:	3820      	subs	r0, #32
    4692:	40c3      	lsrs	r3, r0
    4694:	4699      	mov	r9, r3
    4696:	4653      	mov	r3, sl
    4698:	2b20      	cmp	r3, #32
    469a:	d100      	bne.n	469e <__aeabi_dadd+0x46a>
    469c:	e095      	b.n	47ca <__aeabi_dadd+0x596>
    469e:	2340      	movs	r3, #64	; 0x40
    46a0:	4650      	mov	r0, sl
    46a2:	1a1b      	subs	r3, r3, r0
    46a4:	4099      	lsls	r1, r3
    46a6:	430a      	orrs	r2, r1
    46a8:	1e51      	subs	r1, r2, #1
    46aa:	418a      	sbcs	r2, r1
    46ac:	464b      	mov	r3, r9
    46ae:	2100      	movs	r1, #0
    46b0:	431a      	orrs	r2, r3
    46b2:	e69f      	b.n	43f4 <__aeabi_dadd+0x1c0>
    46b4:	2e00      	cmp	r6, #0
    46b6:	d130      	bne.n	471a <__aeabi_dadd+0x4e6>
    46b8:	0026      	movs	r6, r4
    46ba:	433e      	orrs	r6, r7
    46bc:	d067      	beq.n	478e <__aeabi_dadd+0x55a>
    46be:	43db      	mvns	r3, r3
    46c0:	469a      	mov	sl, r3
    46c2:	2b00      	cmp	r3, #0
    46c4:	d01c      	beq.n	4700 <__aeabi_dadd+0x4cc>
    46c6:	4e61      	ldr	r6, [pc, #388]	; (484c <__aeabi_dadd+0x618>)
    46c8:	42b0      	cmp	r0, r6
    46ca:	d060      	beq.n	478e <__aeabi_dadd+0x55a>
    46cc:	4653      	mov	r3, sl
    46ce:	2b38      	cmp	r3, #56	; 0x38
    46d0:	dd00      	ble.n	46d4 <__aeabi_dadd+0x4a0>
    46d2:	e096      	b.n	4802 <__aeabi_dadd+0x5ce>
    46d4:	2b1f      	cmp	r3, #31
    46d6:	dd00      	ble.n	46da <__aeabi_dadd+0x4a6>
    46d8:	e09f      	b.n	481a <__aeabi_dadd+0x5e6>
    46da:	2620      	movs	r6, #32
    46dc:	1af3      	subs	r3, r6, r3
    46de:	0026      	movs	r6, r4
    46e0:	409e      	lsls	r6, r3
    46e2:	469c      	mov	ip, r3
    46e4:	46b3      	mov	fp, r6
    46e6:	4653      	mov	r3, sl
    46e8:	003e      	movs	r6, r7
    46ea:	40de      	lsrs	r6, r3
    46ec:	0033      	movs	r3, r6
    46ee:	465e      	mov	r6, fp
    46f0:	431e      	orrs	r6, r3
    46f2:	4663      	mov	r3, ip
    46f4:	409f      	lsls	r7, r3
    46f6:	1e7b      	subs	r3, r7, #1
    46f8:	419f      	sbcs	r7, r3
    46fa:	4653      	mov	r3, sl
    46fc:	40dc      	lsrs	r4, r3
    46fe:	4337      	orrs	r7, r6
    4700:	18bf      	adds	r7, r7, r2
    4702:	4297      	cmp	r7, r2
    4704:	4192      	sbcs	r2, r2
    4706:	1864      	adds	r4, r4, r1
    4708:	4252      	negs	r2, r2
    470a:	18a4      	adds	r4, r4, r2
    470c:	0006      	movs	r6, r0
    470e:	e678      	b.n	4402 <__aeabi_dadd+0x1ce>
    4710:	4327      	orrs	r7, r4
    4712:	1e7c      	subs	r4, r7, #1
    4714:	41a7      	sbcs	r7, r4
    4716:	2400      	movs	r4, #0
    4718:	e737      	b.n	458a <__aeabi_dadd+0x356>
    471a:	4e4c      	ldr	r6, [pc, #304]	; (484c <__aeabi_dadd+0x618>)
    471c:	42b0      	cmp	r0, r6
    471e:	d036      	beq.n	478e <__aeabi_dadd+0x55a>
    4720:	2680      	movs	r6, #128	; 0x80
    4722:	425b      	negs	r3, r3
    4724:	0436      	lsls	r6, r6, #16
    4726:	469a      	mov	sl, r3
    4728:	4334      	orrs	r4, r6
    472a:	e7cf      	b.n	46cc <__aeabi_dadd+0x498>
    472c:	0018      	movs	r0, r3
    472e:	4310      	orrs	r0, r2
    4730:	d100      	bne.n	4734 <__aeabi_dadd+0x500>
    4732:	e603      	b.n	433c <__aeabi_dadd+0x108>
    4734:	1ab8      	subs	r0, r7, r2
    4736:	4684      	mov	ip, r0
    4738:	4567      	cmp	r7, ip
    473a:	41ad      	sbcs	r5, r5
    473c:	1ae0      	subs	r0, r4, r3
    473e:	426d      	negs	r5, r5
    4740:	1b40      	subs	r0, r0, r5
    4742:	0205      	lsls	r5, r0, #8
    4744:	d400      	bmi.n	4748 <__aeabi_dadd+0x514>
    4746:	e62c      	b.n	43a2 <__aeabi_dadd+0x16e>
    4748:	1bd7      	subs	r7, r2, r7
    474a:	42ba      	cmp	r2, r7
    474c:	4192      	sbcs	r2, r2
    474e:	1b1c      	subs	r4, r3, r4
    4750:	4252      	negs	r2, r2
    4752:	1aa4      	subs	r4, r4, r2
    4754:	46d8      	mov	r8, fp
    4756:	e5f1      	b.n	433c <__aeabi_dadd+0x108>
    4758:	0018      	movs	r0, r3
    475a:	4310      	orrs	r0, r2
    475c:	d100      	bne.n	4760 <__aeabi_dadd+0x52c>
    475e:	e763      	b.n	4628 <__aeabi_dadd+0x3f4>
    4760:	08f8      	lsrs	r0, r7, #3
    4762:	0767      	lsls	r7, r4, #29
    4764:	4307      	orrs	r7, r0
    4766:	2080      	movs	r0, #128	; 0x80
    4768:	08e4      	lsrs	r4, r4, #3
    476a:	0300      	lsls	r0, r0, #12
    476c:	4204      	tst	r4, r0
    476e:	d008      	beq.n	4782 <__aeabi_dadd+0x54e>
    4770:	08dd      	lsrs	r5, r3, #3
    4772:	4205      	tst	r5, r0
    4774:	d105      	bne.n	4782 <__aeabi_dadd+0x54e>
    4776:	08d2      	lsrs	r2, r2, #3
    4778:	0759      	lsls	r1, r3, #29
    477a:	4311      	orrs	r1, r2
    477c:	000f      	movs	r7, r1
    477e:	002c      	movs	r4, r5
    4780:	46d8      	mov	r8, fp
    4782:	0f7b      	lsrs	r3, r7, #29
    4784:	00e4      	lsls	r4, r4, #3
    4786:	431c      	orrs	r4, r3
    4788:	00ff      	lsls	r7, r7, #3
    478a:	4e30      	ldr	r6, [pc, #192]	; (484c <__aeabi_dadd+0x618>)
    478c:	e5d6      	b.n	433c <__aeabi_dadd+0x108>
    478e:	000c      	movs	r4, r1
    4790:	0017      	movs	r7, r2
    4792:	0006      	movs	r6, r0
    4794:	e5d2      	b.n	433c <__aeabi_dadd+0x108>
    4796:	2b00      	cmp	r3, #0
    4798:	d038      	beq.n	480c <__aeabi_dadd+0x5d8>
    479a:	000b      	movs	r3, r1
    479c:	4313      	orrs	r3, r2
    479e:	d100      	bne.n	47a2 <__aeabi_dadd+0x56e>
    47a0:	e742      	b.n	4628 <__aeabi_dadd+0x3f4>
    47a2:	08f8      	lsrs	r0, r7, #3
    47a4:	0767      	lsls	r7, r4, #29
    47a6:	4307      	orrs	r7, r0
    47a8:	2080      	movs	r0, #128	; 0x80
    47aa:	08e4      	lsrs	r4, r4, #3
    47ac:	0300      	lsls	r0, r0, #12
    47ae:	4204      	tst	r4, r0
    47b0:	d0e7      	beq.n	4782 <__aeabi_dadd+0x54e>
    47b2:	08cb      	lsrs	r3, r1, #3
    47b4:	4203      	tst	r3, r0
    47b6:	d1e4      	bne.n	4782 <__aeabi_dadd+0x54e>
    47b8:	08d2      	lsrs	r2, r2, #3
    47ba:	0749      	lsls	r1, r1, #29
    47bc:	4311      	orrs	r1, r2
    47be:	000f      	movs	r7, r1
    47c0:	001c      	movs	r4, r3
    47c2:	e7de      	b.n	4782 <__aeabi_dadd+0x54e>
    47c4:	2700      	movs	r7, #0
    47c6:	2400      	movs	r4, #0
    47c8:	e5d5      	b.n	4376 <__aeabi_dadd+0x142>
    47ca:	2100      	movs	r1, #0
    47cc:	e76b      	b.n	46a6 <__aeabi_dadd+0x472>
    47ce:	2500      	movs	r5, #0
    47d0:	2700      	movs	r7, #0
    47d2:	e5f3      	b.n	43bc <__aeabi_dadd+0x188>
    47d4:	464e      	mov	r6, r9
    47d6:	0025      	movs	r5, r4
    47d8:	3e20      	subs	r6, #32
    47da:	40f5      	lsrs	r5, r6
    47dc:	464b      	mov	r3, r9
    47de:	002e      	movs	r6, r5
    47e0:	2b20      	cmp	r3, #32
    47e2:	d02d      	beq.n	4840 <__aeabi_dadd+0x60c>
    47e4:	2540      	movs	r5, #64	; 0x40
    47e6:	1aed      	subs	r5, r5, r3
    47e8:	40ac      	lsls	r4, r5
    47ea:	4327      	orrs	r7, r4
    47ec:	1e7c      	subs	r4, r7, #1
    47ee:	41a7      	sbcs	r7, r4
    47f0:	2400      	movs	r4, #0
    47f2:	4337      	orrs	r7, r6
    47f4:	e6c9      	b.n	458a <__aeabi_dadd+0x356>
    47f6:	2480      	movs	r4, #128	; 0x80
    47f8:	2500      	movs	r5, #0
    47fa:	0324      	lsls	r4, r4, #12
    47fc:	4e13      	ldr	r6, [pc, #76]	; (484c <__aeabi_dadd+0x618>)
    47fe:	2700      	movs	r7, #0
    4800:	e5dc      	b.n	43bc <__aeabi_dadd+0x188>
    4802:	4327      	orrs	r7, r4
    4804:	1e7c      	subs	r4, r7, #1
    4806:	41a7      	sbcs	r7, r4
    4808:	2400      	movs	r4, #0
    480a:	e779      	b.n	4700 <__aeabi_dadd+0x4cc>
    480c:	000c      	movs	r4, r1
    480e:	0017      	movs	r7, r2
    4810:	4e0e      	ldr	r6, [pc, #56]	; (484c <__aeabi_dadd+0x618>)
    4812:	e593      	b.n	433c <__aeabi_dadd+0x108>
    4814:	000c      	movs	r4, r1
    4816:	0017      	movs	r7, r2
    4818:	e590      	b.n	433c <__aeabi_dadd+0x108>
    481a:	4656      	mov	r6, sl
    481c:	0023      	movs	r3, r4
    481e:	3e20      	subs	r6, #32
    4820:	40f3      	lsrs	r3, r6
    4822:	4699      	mov	r9, r3
    4824:	4653      	mov	r3, sl
    4826:	2b20      	cmp	r3, #32
    4828:	d00e      	beq.n	4848 <__aeabi_dadd+0x614>
    482a:	2340      	movs	r3, #64	; 0x40
    482c:	4656      	mov	r6, sl
    482e:	1b9b      	subs	r3, r3, r6
    4830:	409c      	lsls	r4, r3
    4832:	4327      	orrs	r7, r4
    4834:	1e7c      	subs	r4, r7, #1
    4836:	41a7      	sbcs	r7, r4
    4838:	464b      	mov	r3, r9
    483a:	2400      	movs	r4, #0
    483c:	431f      	orrs	r7, r3
    483e:	e75f      	b.n	4700 <__aeabi_dadd+0x4cc>
    4840:	2400      	movs	r4, #0
    4842:	e7d2      	b.n	47ea <__aeabi_dadd+0x5b6>
    4844:	0017      	movs	r7, r2
    4846:	e5b2      	b.n	43ae <__aeabi_dadd+0x17a>
    4848:	2400      	movs	r4, #0
    484a:	e7f2      	b.n	4832 <__aeabi_dadd+0x5fe>
    484c:	000007ff 	.word	0x000007ff
    4850:	ff7fffff 	.word	0xff7fffff

00004854 <__aeabi_dsub>:
    4854:	b5f0      	push	{r4, r5, r6, r7, lr}
    4856:	4646      	mov	r6, r8
    4858:	46d6      	mov	lr, sl
    485a:	464f      	mov	r7, r9
    485c:	030c      	lsls	r4, r1, #12
    485e:	b5c0      	push	{r6, r7, lr}
    4860:	0fcd      	lsrs	r5, r1, #31
    4862:	004e      	lsls	r6, r1, #1
    4864:	0a61      	lsrs	r1, r4, #9
    4866:	0f44      	lsrs	r4, r0, #29
    4868:	430c      	orrs	r4, r1
    486a:	00c1      	lsls	r1, r0, #3
    486c:	0058      	lsls	r0, r3, #1
    486e:	0d40      	lsrs	r0, r0, #21
    4870:	4684      	mov	ip, r0
    4872:	468a      	mov	sl, r1
    4874:	000f      	movs	r7, r1
    4876:	0319      	lsls	r1, r3, #12
    4878:	0f50      	lsrs	r0, r2, #29
    487a:	0a49      	lsrs	r1, r1, #9
    487c:	4301      	orrs	r1, r0
    487e:	48c6      	ldr	r0, [pc, #792]	; (4b98 <__aeabi_dsub+0x344>)
    4880:	0d76      	lsrs	r6, r6, #21
    4882:	46a8      	mov	r8, r5
    4884:	0fdb      	lsrs	r3, r3, #31
    4886:	00d2      	lsls	r2, r2, #3
    4888:	4584      	cmp	ip, r0
    488a:	d100      	bne.n	488e <__aeabi_dsub+0x3a>
    488c:	e0d8      	b.n	4a40 <__aeabi_dsub+0x1ec>
    488e:	2001      	movs	r0, #1
    4890:	4043      	eors	r3, r0
    4892:	42ab      	cmp	r3, r5
    4894:	d100      	bne.n	4898 <__aeabi_dsub+0x44>
    4896:	e0a6      	b.n	49e6 <__aeabi_dsub+0x192>
    4898:	4660      	mov	r0, ip
    489a:	1a35      	subs	r5, r6, r0
    489c:	2d00      	cmp	r5, #0
    489e:	dc00      	bgt.n	48a2 <__aeabi_dsub+0x4e>
    48a0:	e105      	b.n	4aae <__aeabi_dsub+0x25a>
    48a2:	2800      	cmp	r0, #0
    48a4:	d110      	bne.n	48c8 <__aeabi_dsub+0x74>
    48a6:	000b      	movs	r3, r1
    48a8:	4313      	orrs	r3, r2
    48aa:	d100      	bne.n	48ae <__aeabi_dsub+0x5a>
    48ac:	e0d7      	b.n	4a5e <__aeabi_dsub+0x20a>
    48ae:	1e6b      	subs	r3, r5, #1
    48b0:	2b00      	cmp	r3, #0
    48b2:	d000      	beq.n	48b6 <__aeabi_dsub+0x62>
    48b4:	e14b      	b.n	4b4e <__aeabi_dsub+0x2fa>
    48b6:	4653      	mov	r3, sl
    48b8:	1a9f      	subs	r7, r3, r2
    48ba:	45ba      	cmp	sl, r7
    48bc:	4180      	sbcs	r0, r0
    48be:	1a64      	subs	r4, r4, r1
    48c0:	4240      	negs	r0, r0
    48c2:	1a24      	subs	r4, r4, r0
    48c4:	2601      	movs	r6, #1
    48c6:	e01e      	b.n	4906 <__aeabi_dsub+0xb2>
    48c8:	4bb3      	ldr	r3, [pc, #716]	; (4b98 <__aeabi_dsub+0x344>)
    48ca:	429e      	cmp	r6, r3
    48cc:	d048      	beq.n	4960 <__aeabi_dsub+0x10c>
    48ce:	2380      	movs	r3, #128	; 0x80
    48d0:	041b      	lsls	r3, r3, #16
    48d2:	4319      	orrs	r1, r3
    48d4:	2d38      	cmp	r5, #56	; 0x38
    48d6:	dd00      	ble.n	48da <__aeabi_dsub+0x86>
    48d8:	e119      	b.n	4b0e <__aeabi_dsub+0x2ba>
    48da:	2d1f      	cmp	r5, #31
    48dc:	dd00      	ble.n	48e0 <__aeabi_dsub+0x8c>
    48de:	e14c      	b.n	4b7a <__aeabi_dsub+0x326>
    48e0:	2320      	movs	r3, #32
    48e2:	000f      	movs	r7, r1
    48e4:	1b5b      	subs	r3, r3, r5
    48e6:	0010      	movs	r0, r2
    48e8:	409a      	lsls	r2, r3
    48ea:	409f      	lsls	r7, r3
    48ec:	40e8      	lsrs	r0, r5
    48ee:	1e53      	subs	r3, r2, #1
    48f0:	419a      	sbcs	r2, r3
    48f2:	40e9      	lsrs	r1, r5
    48f4:	4307      	orrs	r7, r0
    48f6:	4317      	orrs	r7, r2
    48f8:	4653      	mov	r3, sl
    48fa:	1bdf      	subs	r7, r3, r7
    48fc:	1a61      	subs	r1, r4, r1
    48fe:	45ba      	cmp	sl, r7
    4900:	41a4      	sbcs	r4, r4
    4902:	4264      	negs	r4, r4
    4904:	1b0c      	subs	r4, r1, r4
    4906:	0223      	lsls	r3, r4, #8
    4908:	d400      	bmi.n	490c <__aeabi_dsub+0xb8>
    490a:	e0c5      	b.n	4a98 <__aeabi_dsub+0x244>
    490c:	0264      	lsls	r4, r4, #9
    490e:	0a65      	lsrs	r5, r4, #9
    4910:	2d00      	cmp	r5, #0
    4912:	d100      	bne.n	4916 <__aeabi_dsub+0xc2>
    4914:	e0f6      	b.n	4b04 <__aeabi_dsub+0x2b0>
    4916:	0028      	movs	r0, r5
    4918:	f000 fb8e 	bl	5038 <__clzsi2>
    491c:	0003      	movs	r3, r0
    491e:	3b08      	subs	r3, #8
    4920:	2b1f      	cmp	r3, #31
    4922:	dd00      	ble.n	4926 <__aeabi_dsub+0xd2>
    4924:	e0e9      	b.n	4afa <__aeabi_dsub+0x2a6>
    4926:	2220      	movs	r2, #32
    4928:	003c      	movs	r4, r7
    492a:	1ad2      	subs	r2, r2, r3
    492c:	409d      	lsls	r5, r3
    492e:	40d4      	lsrs	r4, r2
    4930:	409f      	lsls	r7, r3
    4932:	4325      	orrs	r5, r4
    4934:	429e      	cmp	r6, r3
    4936:	dd00      	ble.n	493a <__aeabi_dsub+0xe6>
    4938:	e0db      	b.n	4af2 <__aeabi_dsub+0x29e>
    493a:	1b9e      	subs	r6, r3, r6
    493c:	1c73      	adds	r3, r6, #1
    493e:	2b1f      	cmp	r3, #31
    4940:	dd00      	ble.n	4944 <__aeabi_dsub+0xf0>
    4942:	e10a      	b.n	4b5a <__aeabi_dsub+0x306>
    4944:	2220      	movs	r2, #32
    4946:	0038      	movs	r0, r7
    4948:	1ad2      	subs	r2, r2, r3
    494a:	0029      	movs	r1, r5
    494c:	4097      	lsls	r7, r2
    494e:	002c      	movs	r4, r5
    4950:	4091      	lsls	r1, r2
    4952:	40d8      	lsrs	r0, r3
    4954:	1e7a      	subs	r2, r7, #1
    4956:	4197      	sbcs	r7, r2
    4958:	40dc      	lsrs	r4, r3
    495a:	2600      	movs	r6, #0
    495c:	4301      	orrs	r1, r0
    495e:	430f      	orrs	r7, r1
    4960:	077b      	lsls	r3, r7, #29
    4962:	d009      	beq.n	4978 <__aeabi_dsub+0x124>
    4964:	230f      	movs	r3, #15
    4966:	403b      	ands	r3, r7
    4968:	2b04      	cmp	r3, #4
    496a:	d005      	beq.n	4978 <__aeabi_dsub+0x124>
    496c:	1d3b      	adds	r3, r7, #4
    496e:	42bb      	cmp	r3, r7
    4970:	41bf      	sbcs	r7, r7
    4972:	427f      	negs	r7, r7
    4974:	19e4      	adds	r4, r4, r7
    4976:	001f      	movs	r7, r3
    4978:	0223      	lsls	r3, r4, #8
    497a:	d525      	bpl.n	49c8 <__aeabi_dsub+0x174>
    497c:	4b86      	ldr	r3, [pc, #536]	; (4b98 <__aeabi_dsub+0x344>)
    497e:	3601      	adds	r6, #1
    4980:	429e      	cmp	r6, r3
    4982:	d100      	bne.n	4986 <__aeabi_dsub+0x132>
    4984:	e0af      	b.n	4ae6 <__aeabi_dsub+0x292>
    4986:	4b85      	ldr	r3, [pc, #532]	; (4b9c <__aeabi_dsub+0x348>)
    4988:	2501      	movs	r5, #1
    498a:	401c      	ands	r4, r3
    498c:	4643      	mov	r3, r8
    498e:	0762      	lsls	r2, r4, #29
    4990:	08ff      	lsrs	r7, r7, #3
    4992:	0264      	lsls	r4, r4, #9
    4994:	0576      	lsls	r6, r6, #21
    4996:	4317      	orrs	r7, r2
    4998:	0b24      	lsrs	r4, r4, #12
    499a:	0d76      	lsrs	r6, r6, #21
    499c:	401d      	ands	r5, r3
    499e:	2100      	movs	r1, #0
    49a0:	0324      	lsls	r4, r4, #12
    49a2:	0b23      	lsrs	r3, r4, #12
    49a4:	0d0c      	lsrs	r4, r1, #20
    49a6:	4a7e      	ldr	r2, [pc, #504]	; (4ba0 <__aeabi_dsub+0x34c>)
    49a8:	0524      	lsls	r4, r4, #20
    49aa:	431c      	orrs	r4, r3
    49ac:	4014      	ands	r4, r2
    49ae:	0533      	lsls	r3, r6, #20
    49b0:	4323      	orrs	r3, r4
    49b2:	005b      	lsls	r3, r3, #1
    49b4:	07ed      	lsls	r5, r5, #31
    49b6:	085b      	lsrs	r3, r3, #1
    49b8:	432b      	orrs	r3, r5
    49ba:	0038      	movs	r0, r7
    49bc:	0019      	movs	r1, r3
    49be:	bc1c      	pop	{r2, r3, r4}
    49c0:	4690      	mov	r8, r2
    49c2:	4699      	mov	r9, r3
    49c4:	46a2      	mov	sl, r4
    49c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49c8:	2501      	movs	r5, #1
    49ca:	4643      	mov	r3, r8
    49cc:	0762      	lsls	r2, r4, #29
    49ce:	08ff      	lsrs	r7, r7, #3
    49d0:	4317      	orrs	r7, r2
    49d2:	08e4      	lsrs	r4, r4, #3
    49d4:	401d      	ands	r5, r3
    49d6:	4b70      	ldr	r3, [pc, #448]	; (4b98 <__aeabi_dsub+0x344>)
    49d8:	429e      	cmp	r6, r3
    49da:	d036      	beq.n	4a4a <__aeabi_dsub+0x1f6>
    49dc:	0324      	lsls	r4, r4, #12
    49de:	0576      	lsls	r6, r6, #21
    49e0:	0b24      	lsrs	r4, r4, #12
    49e2:	0d76      	lsrs	r6, r6, #21
    49e4:	e7db      	b.n	499e <__aeabi_dsub+0x14a>
    49e6:	4663      	mov	r3, ip
    49e8:	1af3      	subs	r3, r6, r3
    49ea:	2b00      	cmp	r3, #0
    49ec:	dc00      	bgt.n	49f0 <__aeabi_dsub+0x19c>
    49ee:	e094      	b.n	4b1a <__aeabi_dsub+0x2c6>
    49f0:	4660      	mov	r0, ip
    49f2:	2800      	cmp	r0, #0
    49f4:	d035      	beq.n	4a62 <__aeabi_dsub+0x20e>
    49f6:	4868      	ldr	r0, [pc, #416]	; (4b98 <__aeabi_dsub+0x344>)
    49f8:	4286      	cmp	r6, r0
    49fa:	d0b1      	beq.n	4960 <__aeabi_dsub+0x10c>
    49fc:	2780      	movs	r7, #128	; 0x80
    49fe:	043f      	lsls	r7, r7, #16
    4a00:	4339      	orrs	r1, r7
    4a02:	2b38      	cmp	r3, #56	; 0x38
    4a04:	dc00      	bgt.n	4a08 <__aeabi_dsub+0x1b4>
    4a06:	e0fd      	b.n	4c04 <__aeabi_dsub+0x3b0>
    4a08:	430a      	orrs	r2, r1
    4a0a:	0017      	movs	r7, r2
    4a0c:	2100      	movs	r1, #0
    4a0e:	1e7a      	subs	r2, r7, #1
    4a10:	4197      	sbcs	r7, r2
    4a12:	4457      	add	r7, sl
    4a14:	4557      	cmp	r7, sl
    4a16:	4180      	sbcs	r0, r0
    4a18:	1909      	adds	r1, r1, r4
    4a1a:	4244      	negs	r4, r0
    4a1c:	190c      	adds	r4, r1, r4
    4a1e:	0223      	lsls	r3, r4, #8
    4a20:	d53a      	bpl.n	4a98 <__aeabi_dsub+0x244>
    4a22:	4b5d      	ldr	r3, [pc, #372]	; (4b98 <__aeabi_dsub+0x344>)
    4a24:	3601      	adds	r6, #1
    4a26:	429e      	cmp	r6, r3
    4a28:	d100      	bne.n	4a2c <__aeabi_dsub+0x1d8>
    4a2a:	e14b      	b.n	4cc4 <__aeabi_dsub+0x470>
    4a2c:	2201      	movs	r2, #1
    4a2e:	4b5b      	ldr	r3, [pc, #364]	; (4b9c <__aeabi_dsub+0x348>)
    4a30:	401c      	ands	r4, r3
    4a32:	087b      	lsrs	r3, r7, #1
    4a34:	4017      	ands	r7, r2
    4a36:	431f      	orrs	r7, r3
    4a38:	07e2      	lsls	r2, r4, #31
    4a3a:	4317      	orrs	r7, r2
    4a3c:	0864      	lsrs	r4, r4, #1
    4a3e:	e78f      	b.n	4960 <__aeabi_dsub+0x10c>
    4a40:	0008      	movs	r0, r1
    4a42:	4310      	orrs	r0, r2
    4a44:	d000      	beq.n	4a48 <__aeabi_dsub+0x1f4>
    4a46:	e724      	b.n	4892 <__aeabi_dsub+0x3e>
    4a48:	e721      	b.n	488e <__aeabi_dsub+0x3a>
    4a4a:	0023      	movs	r3, r4
    4a4c:	433b      	orrs	r3, r7
    4a4e:	d100      	bne.n	4a52 <__aeabi_dsub+0x1fe>
    4a50:	e1b9      	b.n	4dc6 <__aeabi_dsub+0x572>
    4a52:	2280      	movs	r2, #128	; 0x80
    4a54:	0312      	lsls	r2, r2, #12
    4a56:	4314      	orrs	r4, r2
    4a58:	0324      	lsls	r4, r4, #12
    4a5a:	0b24      	lsrs	r4, r4, #12
    4a5c:	e79f      	b.n	499e <__aeabi_dsub+0x14a>
    4a5e:	002e      	movs	r6, r5
    4a60:	e77e      	b.n	4960 <__aeabi_dsub+0x10c>
    4a62:	0008      	movs	r0, r1
    4a64:	4310      	orrs	r0, r2
    4a66:	d100      	bne.n	4a6a <__aeabi_dsub+0x216>
    4a68:	e0ca      	b.n	4c00 <__aeabi_dsub+0x3ac>
    4a6a:	1e58      	subs	r0, r3, #1
    4a6c:	4684      	mov	ip, r0
    4a6e:	2800      	cmp	r0, #0
    4a70:	d000      	beq.n	4a74 <__aeabi_dsub+0x220>
    4a72:	e0e7      	b.n	4c44 <__aeabi_dsub+0x3f0>
    4a74:	4452      	add	r2, sl
    4a76:	4552      	cmp	r2, sl
    4a78:	4180      	sbcs	r0, r0
    4a7a:	1864      	adds	r4, r4, r1
    4a7c:	4240      	negs	r0, r0
    4a7e:	1824      	adds	r4, r4, r0
    4a80:	0017      	movs	r7, r2
    4a82:	2601      	movs	r6, #1
    4a84:	0223      	lsls	r3, r4, #8
    4a86:	d507      	bpl.n	4a98 <__aeabi_dsub+0x244>
    4a88:	2602      	movs	r6, #2
    4a8a:	e7cf      	b.n	4a2c <__aeabi_dsub+0x1d8>
    4a8c:	4664      	mov	r4, ip
    4a8e:	432c      	orrs	r4, r5
    4a90:	d100      	bne.n	4a94 <__aeabi_dsub+0x240>
    4a92:	e1b3      	b.n	4dfc <__aeabi_dsub+0x5a8>
    4a94:	002c      	movs	r4, r5
    4a96:	4667      	mov	r7, ip
    4a98:	077b      	lsls	r3, r7, #29
    4a9a:	d000      	beq.n	4a9e <__aeabi_dsub+0x24a>
    4a9c:	e762      	b.n	4964 <__aeabi_dsub+0x110>
    4a9e:	0763      	lsls	r3, r4, #29
    4aa0:	08ff      	lsrs	r7, r7, #3
    4aa2:	431f      	orrs	r7, r3
    4aa4:	2501      	movs	r5, #1
    4aa6:	4643      	mov	r3, r8
    4aa8:	08e4      	lsrs	r4, r4, #3
    4aaa:	401d      	ands	r5, r3
    4aac:	e793      	b.n	49d6 <__aeabi_dsub+0x182>
    4aae:	2d00      	cmp	r5, #0
    4ab0:	d178      	bne.n	4ba4 <__aeabi_dsub+0x350>
    4ab2:	1c75      	adds	r5, r6, #1
    4ab4:	056d      	lsls	r5, r5, #21
    4ab6:	0d6d      	lsrs	r5, r5, #21
    4ab8:	2d01      	cmp	r5, #1
    4aba:	dc00      	bgt.n	4abe <__aeabi_dsub+0x26a>
    4abc:	e0f2      	b.n	4ca4 <__aeabi_dsub+0x450>
    4abe:	4650      	mov	r0, sl
    4ac0:	1a80      	subs	r0, r0, r2
    4ac2:	4582      	cmp	sl, r0
    4ac4:	41bf      	sbcs	r7, r7
    4ac6:	1a65      	subs	r5, r4, r1
    4ac8:	427f      	negs	r7, r7
    4aca:	1bed      	subs	r5, r5, r7
    4acc:	4684      	mov	ip, r0
    4ace:	0228      	lsls	r0, r5, #8
    4ad0:	d400      	bmi.n	4ad4 <__aeabi_dsub+0x280>
    4ad2:	e08c      	b.n	4bee <__aeabi_dsub+0x39a>
    4ad4:	4650      	mov	r0, sl
    4ad6:	1a17      	subs	r7, r2, r0
    4ad8:	42ba      	cmp	r2, r7
    4ada:	4192      	sbcs	r2, r2
    4adc:	1b0c      	subs	r4, r1, r4
    4ade:	4255      	negs	r5, r2
    4ae0:	1b65      	subs	r5, r4, r5
    4ae2:	4698      	mov	r8, r3
    4ae4:	e714      	b.n	4910 <__aeabi_dsub+0xbc>
    4ae6:	2501      	movs	r5, #1
    4ae8:	4643      	mov	r3, r8
    4aea:	2400      	movs	r4, #0
    4aec:	401d      	ands	r5, r3
    4aee:	2700      	movs	r7, #0
    4af0:	e755      	b.n	499e <__aeabi_dsub+0x14a>
    4af2:	4c2a      	ldr	r4, [pc, #168]	; (4b9c <__aeabi_dsub+0x348>)
    4af4:	1af6      	subs	r6, r6, r3
    4af6:	402c      	ands	r4, r5
    4af8:	e732      	b.n	4960 <__aeabi_dsub+0x10c>
    4afa:	003d      	movs	r5, r7
    4afc:	3828      	subs	r0, #40	; 0x28
    4afe:	4085      	lsls	r5, r0
    4b00:	2700      	movs	r7, #0
    4b02:	e717      	b.n	4934 <__aeabi_dsub+0xe0>
    4b04:	0038      	movs	r0, r7
    4b06:	f000 fa97 	bl	5038 <__clzsi2>
    4b0a:	3020      	adds	r0, #32
    4b0c:	e706      	b.n	491c <__aeabi_dsub+0xc8>
    4b0e:	430a      	orrs	r2, r1
    4b10:	0017      	movs	r7, r2
    4b12:	2100      	movs	r1, #0
    4b14:	1e7a      	subs	r2, r7, #1
    4b16:	4197      	sbcs	r7, r2
    4b18:	e6ee      	b.n	48f8 <__aeabi_dsub+0xa4>
    4b1a:	2b00      	cmp	r3, #0
    4b1c:	d000      	beq.n	4b20 <__aeabi_dsub+0x2cc>
    4b1e:	e0e5      	b.n	4cec <__aeabi_dsub+0x498>
    4b20:	1c73      	adds	r3, r6, #1
    4b22:	469c      	mov	ip, r3
    4b24:	055b      	lsls	r3, r3, #21
    4b26:	0d5b      	lsrs	r3, r3, #21
    4b28:	2b01      	cmp	r3, #1
    4b2a:	dc00      	bgt.n	4b2e <__aeabi_dsub+0x2da>
    4b2c:	e09f      	b.n	4c6e <__aeabi_dsub+0x41a>
    4b2e:	4b1a      	ldr	r3, [pc, #104]	; (4b98 <__aeabi_dsub+0x344>)
    4b30:	459c      	cmp	ip, r3
    4b32:	d100      	bne.n	4b36 <__aeabi_dsub+0x2e2>
    4b34:	e0c5      	b.n	4cc2 <__aeabi_dsub+0x46e>
    4b36:	4452      	add	r2, sl
    4b38:	4552      	cmp	r2, sl
    4b3a:	4180      	sbcs	r0, r0
    4b3c:	1864      	adds	r4, r4, r1
    4b3e:	4240      	negs	r0, r0
    4b40:	1824      	adds	r4, r4, r0
    4b42:	07e7      	lsls	r7, r4, #31
    4b44:	0852      	lsrs	r2, r2, #1
    4b46:	4317      	orrs	r7, r2
    4b48:	0864      	lsrs	r4, r4, #1
    4b4a:	4666      	mov	r6, ip
    4b4c:	e708      	b.n	4960 <__aeabi_dsub+0x10c>
    4b4e:	4812      	ldr	r0, [pc, #72]	; (4b98 <__aeabi_dsub+0x344>)
    4b50:	4285      	cmp	r5, r0
    4b52:	d100      	bne.n	4b56 <__aeabi_dsub+0x302>
    4b54:	e085      	b.n	4c62 <__aeabi_dsub+0x40e>
    4b56:	001d      	movs	r5, r3
    4b58:	e6bc      	b.n	48d4 <__aeabi_dsub+0x80>
    4b5a:	0029      	movs	r1, r5
    4b5c:	3e1f      	subs	r6, #31
    4b5e:	40f1      	lsrs	r1, r6
    4b60:	2b20      	cmp	r3, #32
    4b62:	d100      	bne.n	4b66 <__aeabi_dsub+0x312>
    4b64:	e07f      	b.n	4c66 <__aeabi_dsub+0x412>
    4b66:	2240      	movs	r2, #64	; 0x40
    4b68:	1ad3      	subs	r3, r2, r3
    4b6a:	409d      	lsls	r5, r3
    4b6c:	432f      	orrs	r7, r5
    4b6e:	1e7d      	subs	r5, r7, #1
    4b70:	41af      	sbcs	r7, r5
    4b72:	2400      	movs	r4, #0
    4b74:	430f      	orrs	r7, r1
    4b76:	2600      	movs	r6, #0
    4b78:	e78e      	b.n	4a98 <__aeabi_dsub+0x244>
    4b7a:	002b      	movs	r3, r5
    4b7c:	000f      	movs	r7, r1
    4b7e:	3b20      	subs	r3, #32
    4b80:	40df      	lsrs	r7, r3
    4b82:	2d20      	cmp	r5, #32
    4b84:	d071      	beq.n	4c6a <__aeabi_dsub+0x416>
    4b86:	2340      	movs	r3, #64	; 0x40
    4b88:	1b5d      	subs	r5, r3, r5
    4b8a:	40a9      	lsls	r1, r5
    4b8c:	430a      	orrs	r2, r1
    4b8e:	1e51      	subs	r1, r2, #1
    4b90:	418a      	sbcs	r2, r1
    4b92:	2100      	movs	r1, #0
    4b94:	4317      	orrs	r7, r2
    4b96:	e6af      	b.n	48f8 <__aeabi_dsub+0xa4>
    4b98:	000007ff 	.word	0x000007ff
    4b9c:	ff7fffff 	.word	0xff7fffff
    4ba0:	800fffff 	.word	0x800fffff
    4ba4:	2e00      	cmp	r6, #0
    4ba6:	d03e      	beq.n	4c26 <__aeabi_dsub+0x3d2>
    4ba8:	4eb3      	ldr	r6, [pc, #716]	; (4e78 <__aeabi_dsub+0x624>)
    4baa:	45b4      	cmp	ip, r6
    4bac:	d045      	beq.n	4c3a <__aeabi_dsub+0x3e6>
    4bae:	2680      	movs	r6, #128	; 0x80
    4bb0:	0436      	lsls	r6, r6, #16
    4bb2:	426d      	negs	r5, r5
    4bb4:	4334      	orrs	r4, r6
    4bb6:	2d38      	cmp	r5, #56	; 0x38
    4bb8:	dd00      	ble.n	4bbc <__aeabi_dsub+0x368>
    4bba:	e0a8      	b.n	4d0e <__aeabi_dsub+0x4ba>
    4bbc:	2d1f      	cmp	r5, #31
    4bbe:	dd00      	ble.n	4bc2 <__aeabi_dsub+0x36e>
    4bc0:	e11f      	b.n	4e02 <__aeabi_dsub+0x5ae>
    4bc2:	2620      	movs	r6, #32
    4bc4:	0027      	movs	r7, r4
    4bc6:	4650      	mov	r0, sl
    4bc8:	1b76      	subs	r6, r6, r5
    4bca:	40b7      	lsls	r7, r6
    4bcc:	40e8      	lsrs	r0, r5
    4bce:	4307      	orrs	r7, r0
    4bd0:	4650      	mov	r0, sl
    4bd2:	40b0      	lsls	r0, r6
    4bd4:	1e46      	subs	r6, r0, #1
    4bd6:	41b0      	sbcs	r0, r6
    4bd8:	40ec      	lsrs	r4, r5
    4bda:	4338      	orrs	r0, r7
    4bdc:	1a17      	subs	r7, r2, r0
    4bde:	42ba      	cmp	r2, r7
    4be0:	4192      	sbcs	r2, r2
    4be2:	1b0c      	subs	r4, r1, r4
    4be4:	4252      	negs	r2, r2
    4be6:	1aa4      	subs	r4, r4, r2
    4be8:	4666      	mov	r6, ip
    4bea:	4698      	mov	r8, r3
    4bec:	e68b      	b.n	4906 <__aeabi_dsub+0xb2>
    4bee:	4664      	mov	r4, ip
    4bf0:	4667      	mov	r7, ip
    4bf2:	432c      	orrs	r4, r5
    4bf4:	d000      	beq.n	4bf8 <__aeabi_dsub+0x3a4>
    4bf6:	e68b      	b.n	4910 <__aeabi_dsub+0xbc>
    4bf8:	2500      	movs	r5, #0
    4bfa:	2600      	movs	r6, #0
    4bfc:	2700      	movs	r7, #0
    4bfe:	e6ea      	b.n	49d6 <__aeabi_dsub+0x182>
    4c00:	001e      	movs	r6, r3
    4c02:	e6ad      	b.n	4960 <__aeabi_dsub+0x10c>
    4c04:	2b1f      	cmp	r3, #31
    4c06:	dc60      	bgt.n	4cca <__aeabi_dsub+0x476>
    4c08:	2720      	movs	r7, #32
    4c0a:	1af8      	subs	r0, r7, r3
    4c0c:	000f      	movs	r7, r1
    4c0e:	4684      	mov	ip, r0
    4c10:	4087      	lsls	r7, r0
    4c12:	0010      	movs	r0, r2
    4c14:	40d8      	lsrs	r0, r3
    4c16:	4307      	orrs	r7, r0
    4c18:	4660      	mov	r0, ip
    4c1a:	4082      	lsls	r2, r0
    4c1c:	1e50      	subs	r0, r2, #1
    4c1e:	4182      	sbcs	r2, r0
    4c20:	40d9      	lsrs	r1, r3
    4c22:	4317      	orrs	r7, r2
    4c24:	e6f5      	b.n	4a12 <__aeabi_dsub+0x1be>
    4c26:	0026      	movs	r6, r4
    4c28:	4650      	mov	r0, sl
    4c2a:	4306      	orrs	r6, r0
    4c2c:	d005      	beq.n	4c3a <__aeabi_dsub+0x3e6>
    4c2e:	43ed      	mvns	r5, r5
    4c30:	2d00      	cmp	r5, #0
    4c32:	d0d3      	beq.n	4bdc <__aeabi_dsub+0x388>
    4c34:	4e90      	ldr	r6, [pc, #576]	; (4e78 <__aeabi_dsub+0x624>)
    4c36:	45b4      	cmp	ip, r6
    4c38:	d1bd      	bne.n	4bb6 <__aeabi_dsub+0x362>
    4c3a:	000c      	movs	r4, r1
    4c3c:	0017      	movs	r7, r2
    4c3e:	4666      	mov	r6, ip
    4c40:	4698      	mov	r8, r3
    4c42:	e68d      	b.n	4960 <__aeabi_dsub+0x10c>
    4c44:	488c      	ldr	r0, [pc, #560]	; (4e78 <__aeabi_dsub+0x624>)
    4c46:	4283      	cmp	r3, r0
    4c48:	d00b      	beq.n	4c62 <__aeabi_dsub+0x40e>
    4c4a:	4663      	mov	r3, ip
    4c4c:	e6d9      	b.n	4a02 <__aeabi_dsub+0x1ae>
    4c4e:	2d00      	cmp	r5, #0
    4c50:	d000      	beq.n	4c54 <__aeabi_dsub+0x400>
    4c52:	e096      	b.n	4d82 <__aeabi_dsub+0x52e>
    4c54:	0008      	movs	r0, r1
    4c56:	4310      	orrs	r0, r2
    4c58:	d100      	bne.n	4c5c <__aeabi_dsub+0x408>
    4c5a:	e0e2      	b.n	4e22 <__aeabi_dsub+0x5ce>
    4c5c:	000c      	movs	r4, r1
    4c5e:	0017      	movs	r7, r2
    4c60:	4698      	mov	r8, r3
    4c62:	4e85      	ldr	r6, [pc, #532]	; (4e78 <__aeabi_dsub+0x624>)
    4c64:	e67c      	b.n	4960 <__aeabi_dsub+0x10c>
    4c66:	2500      	movs	r5, #0
    4c68:	e780      	b.n	4b6c <__aeabi_dsub+0x318>
    4c6a:	2100      	movs	r1, #0
    4c6c:	e78e      	b.n	4b8c <__aeabi_dsub+0x338>
    4c6e:	0023      	movs	r3, r4
    4c70:	4650      	mov	r0, sl
    4c72:	4303      	orrs	r3, r0
    4c74:	2e00      	cmp	r6, #0
    4c76:	d000      	beq.n	4c7a <__aeabi_dsub+0x426>
    4c78:	e0a8      	b.n	4dcc <__aeabi_dsub+0x578>
    4c7a:	2b00      	cmp	r3, #0
    4c7c:	d100      	bne.n	4c80 <__aeabi_dsub+0x42c>
    4c7e:	e0de      	b.n	4e3e <__aeabi_dsub+0x5ea>
    4c80:	000b      	movs	r3, r1
    4c82:	4313      	orrs	r3, r2
    4c84:	d100      	bne.n	4c88 <__aeabi_dsub+0x434>
    4c86:	e66b      	b.n	4960 <__aeabi_dsub+0x10c>
    4c88:	4452      	add	r2, sl
    4c8a:	4552      	cmp	r2, sl
    4c8c:	4180      	sbcs	r0, r0
    4c8e:	1864      	adds	r4, r4, r1
    4c90:	4240      	negs	r0, r0
    4c92:	1824      	adds	r4, r4, r0
    4c94:	0017      	movs	r7, r2
    4c96:	0223      	lsls	r3, r4, #8
    4c98:	d400      	bmi.n	4c9c <__aeabi_dsub+0x448>
    4c9a:	e6fd      	b.n	4a98 <__aeabi_dsub+0x244>
    4c9c:	4b77      	ldr	r3, [pc, #476]	; (4e7c <__aeabi_dsub+0x628>)
    4c9e:	4666      	mov	r6, ip
    4ca0:	401c      	ands	r4, r3
    4ca2:	e65d      	b.n	4960 <__aeabi_dsub+0x10c>
    4ca4:	0025      	movs	r5, r4
    4ca6:	4650      	mov	r0, sl
    4ca8:	4305      	orrs	r5, r0
    4caa:	2e00      	cmp	r6, #0
    4cac:	d1cf      	bne.n	4c4e <__aeabi_dsub+0x3fa>
    4cae:	2d00      	cmp	r5, #0
    4cb0:	d14f      	bne.n	4d52 <__aeabi_dsub+0x4fe>
    4cb2:	000c      	movs	r4, r1
    4cb4:	4314      	orrs	r4, r2
    4cb6:	d100      	bne.n	4cba <__aeabi_dsub+0x466>
    4cb8:	e0a0      	b.n	4dfc <__aeabi_dsub+0x5a8>
    4cba:	000c      	movs	r4, r1
    4cbc:	0017      	movs	r7, r2
    4cbe:	4698      	mov	r8, r3
    4cc0:	e64e      	b.n	4960 <__aeabi_dsub+0x10c>
    4cc2:	4666      	mov	r6, ip
    4cc4:	2400      	movs	r4, #0
    4cc6:	2700      	movs	r7, #0
    4cc8:	e685      	b.n	49d6 <__aeabi_dsub+0x182>
    4cca:	001f      	movs	r7, r3
    4ccc:	0008      	movs	r0, r1
    4cce:	3f20      	subs	r7, #32
    4cd0:	40f8      	lsrs	r0, r7
    4cd2:	0007      	movs	r7, r0
    4cd4:	2b20      	cmp	r3, #32
    4cd6:	d100      	bne.n	4cda <__aeabi_dsub+0x486>
    4cd8:	e08e      	b.n	4df8 <__aeabi_dsub+0x5a4>
    4cda:	2040      	movs	r0, #64	; 0x40
    4cdc:	1ac3      	subs	r3, r0, r3
    4cde:	4099      	lsls	r1, r3
    4ce0:	430a      	orrs	r2, r1
    4ce2:	1e51      	subs	r1, r2, #1
    4ce4:	418a      	sbcs	r2, r1
    4ce6:	2100      	movs	r1, #0
    4ce8:	4317      	orrs	r7, r2
    4cea:	e692      	b.n	4a12 <__aeabi_dsub+0x1be>
    4cec:	2e00      	cmp	r6, #0
    4cee:	d114      	bne.n	4d1a <__aeabi_dsub+0x4c6>
    4cf0:	0026      	movs	r6, r4
    4cf2:	4650      	mov	r0, sl
    4cf4:	4306      	orrs	r6, r0
    4cf6:	d062      	beq.n	4dbe <__aeabi_dsub+0x56a>
    4cf8:	43db      	mvns	r3, r3
    4cfa:	2b00      	cmp	r3, #0
    4cfc:	d15c      	bne.n	4db8 <__aeabi_dsub+0x564>
    4cfe:	1887      	adds	r7, r0, r2
    4d00:	4297      	cmp	r7, r2
    4d02:	4192      	sbcs	r2, r2
    4d04:	1864      	adds	r4, r4, r1
    4d06:	4252      	negs	r2, r2
    4d08:	18a4      	adds	r4, r4, r2
    4d0a:	4666      	mov	r6, ip
    4d0c:	e687      	b.n	4a1e <__aeabi_dsub+0x1ca>
    4d0e:	4650      	mov	r0, sl
    4d10:	4320      	orrs	r0, r4
    4d12:	1e44      	subs	r4, r0, #1
    4d14:	41a0      	sbcs	r0, r4
    4d16:	2400      	movs	r4, #0
    4d18:	e760      	b.n	4bdc <__aeabi_dsub+0x388>
    4d1a:	4e57      	ldr	r6, [pc, #348]	; (4e78 <__aeabi_dsub+0x624>)
    4d1c:	45b4      	cmp	ip, r6
    4d1e:	d04e      	beq.n	4dbe <__aeabi_dsub+0x56a>
    4d20:	2680      	movs	r6, #128	; 0x80
    4d22:	0436      	lsls	r6, r6, #16
    4d24:	425b      	negs	r3, r3
    4d26:	4334      	orrs	r4, r6
    4d28:	2b38      	cmp	r3, #56	; 0x38
    4d2a:	dd00      	ble.n	4d2e <__aeabi_dsub+0x4da>
    4d2c:	e07f      	b.n	4e2e <__aeabi_dsub+0x5da>
    4d2e:	2b1f      	cmp	r3, #31
    4d30:	dd00      	ble.n	4d34 <__aeabi_dsub+0x4e0>
    4d32:	e08b      	b.n	4e4c <__aeabi_dsub+0x5f8>
    4d34:	2620      	movs	r6, #32
    4d36:	0027      	movs	r7, r4
    4d38:	4650      	mov	r0, sl
    4d3a:	1af6      	subs	r6, r6, r3
    4d3c:	40b7      	lsls	r7, r6
    4d3e:	40d8      	lsrs	r0, r3
    4d40:	4307      	orrs	r7, r0
    4d42:	4650      	mov	r0, sl
    4d44:	40b0      	lsls	r0, r6
    4d46:	1e46      	subs	r6, r0, #1
    4d48:	41b0      	sbcs	r0, r6
    4d4a:	4307      	orrs	r7, r0
    4d4c:	40dc      	lsrs	r4, r3
    4d4e:	18bf      	adds	r7, r7, r2
    4d50:	e7d6      	b.n	4d00 <__aeabi_dsub+0x4ac>
    4d52:	000d      	movs	r5, r1
    4d54:	4315      	orrs	r5, r2
    4d56:	d100      	bne.n	4d5a <__aeabi_dsub+0x506>
    4d58:	e602      	b.n	4960 <__aeabi_dsub+0x10c>
    4d5a:	4650      	mov	r0, sl
    4d5c:	1a80      	subs	r0, r0, r2
    4d5e:	4582      	cmp	sl, r0
    4d60:	41bf      	sbcs	r7, r7
    4d62:	1a65      	subs	r5, r4, r1
    4d64:	427f      	negs	r7, r7
    4d66:	1bed      	subs	r5, r5, r7
    4d68:	4684      	mov	ip, r0
    4d6a:	0228      	lsls	r0, r5, #8
    4d6c:	d400      	bmi.n	4d70 <__aeabi_dsub+0x51c>
    4d6e:	e68d      	b.n	4a8c <__aeabi_dsub+0x238>
    4d70:	4650      	mov	r0, sl
    4d72:	1a17      	subs	r7, r2, r0
    4d74:	42ba      	cmp	r2, r7
    4d76:	4192      	sbcs	r2, r2
    4d78:	1b0c      	subs	r4, r1, r4
    4d7a:	4252      	negs	r2, r2
    4d7c:	1aa4      	subs	r4, r4, r2
    4d7e:	4698      	mov	r8, r3
    4d80:	e5ee      	b.n	4960 <__aeabi_dsub+0x10c>
    4d82:	000d      	movs	r5, r1
    4d84:	4315      	orrs	r5, r2
    4d86:	d100      	bne.n	4d8a <__aeabi_dsub+0x536>
    4d88:	e76b      	b.n	4c62 <__aeabi_dsub+0x40e>
    4d8a:	4650      	mov	r0, sl
    4d8c:	0767      	lsls	r7, r4, #29
    4d8e:	08c0      	lsrs	r0, r0, #3
    4d90:	4307      	orrs	r7, r0
    4d92:	2080      	movs	r0, #128	; 0x80
    4d94:	08e4      	lsrs	r4, r4, #3
    4d96:	0300      	lsls	r0, r0, #12
    4d98:	4204      	tst	r4, r0
    4d9a:	d007      	beq.n	4dac <__aeabi_dsub+0x558>
    4d9c:	08cd      	lsrs	r5, r1, #3
    4d9e:	4205      	tst	r5, r0
    4da0:	d104      	bne.n	4dac <__aeabi_dsub+0x558>
    4da2:	002c      	movs	r4, r5
    4da4:	4698      	mov	r8, r3
    4da6:	08d7      	lsrs	r7, r2, #3
    4da8:	0749      	lsls	r1, r1, #29
    4daa:	430f      	orrs	r7, r1
    4dac:	0f7b      	lsrs	r3, r7, #29
    4dae:	00e4      	lsls	r4, r4, #3
    4db0:	431c      	orrs	r4, r3
    4db2:	00ff      	lsls	r7, r7, #3
    4db4:	4e30      	ldr	r6, [pc, #192]	; (4e78 <__aeabi_dsub+0x624>)
    4db6:	e5d3      	b.n	4960 <__aeabi_dsub+0x10c>
    4db8:	4e2f      	ldr	r6, [pc, #188]	; (4e78 <__aeabi_dsub+0x624>)
    4dba:	45b4      	cmp	ip, r6
    4dbc:	d1b4      	bne.n	4d28 <__aeabi_dsub+0x4d4>
    4dbe:	000c      	movs	r4, r1
    4dc0:	0017      	movs	r7, r2
    4dc2:	4666      	mov	r6, ip
    4dc4:	e5cc      	b.n	4960 <__aeabi_dsub+0x10c>
    4dc6:	2700      	movs	r7, #0
    4dc8:	2400      	movs	r4, #0
    4dca:	e5e8      	b.n	499e <__aeabi_dsub+0x14a>
    4dcc:	2b00      	cmp	r3, #0
    4dce:	d039      	beq.n	4e44 <__aeabi_dsub+0x5f0>
    4dd0:	000b      	movs	r3, r1
    4dd2:	4313      	orrs	r3, r2
    4dd4:	d100      	bne.n	4dd8 <__aeabi_dsub+0x584>
    4dd6:	e744      	b.n	4c62 <__aeabi_dsub+0x40e>
    4dd8:	08c0      	lsrs	r0, r0, #3
    4dda:	0767      	lsls	r7, r4, #29
    4ddc:	4307      	orrs	r7, r0
    4dde:	2080      	movs	r0, #128	; 0x80
    4de0:	08e4      	lsrs	r4, r4, #3
    4de2:	0300      	lsls	r0, r0, #12
    4de4:	4204      	tst	r4, r0
    4de6:	d0e1      	beq.n	4dac <__aeabi_dsub+0x558>
    4de8:	08cb      	lsrs	r3, r1, #3
    4dea:	4203      	tst	r3, r0
    4dec:	d1de      	bne.n	4dac <__aeabi_dsub+0x558>
    4dee:	08d7      	lsrs	r7, r2, #3
    4df0:	0749      	lsls	r1, r1, #29
    4df2:	430f      	orrs	r7, r1
    4df4:	001c      	movs	r4, r3
    4df6:	e7d9      	b.n	4dac <__aeabi_dsub+0x558>
    4df8:	2100      	movs	r1, #0
    4dfa:	e771      	b.n	4ce0 <__aeabi_dsub+0x48c>
    4dfc:	2500      	movs	r5, #0
    4dfe:	2700      	movs	r7, #0
    4e00:	e5e9      	b.n	49d6 <__aeabi_dsub+0x182>
    4e02:	002e      	movs	r6, r5
    4e04:	0027      	movs	r7, r4
    4e06:	3e20      	subs	r6, #32
    4e08:	40f7      	lsrs	r7, r6
    4e0a:	2d20      	cmp	r5, #32
    4e0c:	d02f      	beq.n	4e6e <__aeabi_dsub+0x61a>
    4e0e:	2640      	movs	r6, #64	; 0x40
    4e10:	1b75      	subs	r5, r6, r5
    4e12:	40ac      	lsls	r4, r5
    4e14:	4650      	mov	r0, sl
    4e16:	4320      	orrs	r0, r4
    4e18:	1e44      	subs	r4, r0, #1
    4e1a:	41a0      	sbcs	r0, r4
    4e1c:	2400      	movs	r4, #0
    4e1e:	4338      	orrs	r0, r7
    4e20:	e6dc      	b.n	4bdc <__aeabi_dsub+0x388>
    4e22:	2480      	movs	r4, #128	; 0x80
    4e24:	2500      	movs	r5, #0
    4e26:	0324      	lsls	r4, r4, #12
    4e28:	4e13      	ldr	r6, [pc, #76]	; (4e78 <__aeabi_dsub+0x624>)
    4e2a:	2700      	movs	r7, #0
    4e2c:	e5d3      	b.n	49d6 <__aeabi_dsub+0x182>
    4e2e:	4650      	mov	r0, sl
    4e30:	4320      	orrs	r0, r4
    4e32:	0007      	movs	r7, r0
    4e34:	1e78      	subs	r0, r7, #1
    4e36:	4187      	sbcs	r7, r0
    4e38:	2400      	movs	r4, #0
    4e3a:	18bf      	adds	r7, r7, r2
    4e3c:	e760      	b.n	4d00 <__aeabi_dsub+0x4ac>
    4e3e:	000c      	movs	r4, r1
    4e40:	0017      	movs	r7, r2
    4e42:	e58d      	b.n	4960 <__aeabi_dsub+0x10c>
    4e44:	000c      	movs	r4, r1
    4e46:	0017      	movs	r7, r2
    4e48:	4e0b      	ldr	r6, [pc, #44]	; (4e78 <__aeabi_dsub+0x624>)
    4e4a:	e589      	b.n	4960 <__aeabi_dsub+0x10c>
    4e4c:	001e      	movs	r6, r3
    4e4e:	0027      	movs	r7, r4
    4e50:	3e20      	subs	r6, #32
    4e52:	40f7      	lsrs	r7, r6
    4e54:	2b20      	cmp	r3, #32
    4e56:	d00c      	beq.n	4e72 <__aeabi_dsub+0x61e>
    4e58:	2640      	movs	r6, #64	; 0x40
    4e5a:	1af3      	subs	r3, r6, r3
    4e5c:	409c      	lsls	r4, r3
    4e5e:	4650      	mov	r0, sl
    4e60:	4320      	orrs	r0, r4
    4e62:	1e44      	subs	r4, r0, #1
    4e64:	41a0      	sbcs	r0, r4
    4e66:	4307      	orrs	r7, r0
    4e68:	2400      	movs	r4, #0
    4e6a:	18bf      	adds	r7, r7, r2
    4e6c:	e748      	b.n	4d00 <__aeabi_dsub+0x4ac>
    4e6e:	2400      	movs	r4, #0
    4e70:	e7d0      	b.n	4e14 <__aeabi_dsub+0x5c0>
    4e72:	2400      	movs	r4, #0
    4e74:	e7f3      	b.n	4e5e <__aeabi_dsub+0x60a>
    4e76:	46c0      	nop			; (mov r8, r8)
    4e78:	000007ff 	.word	0x000007ff
    4e7c:	ff7fffff 	.word	0xff7fffff

00004e80 <__aeabi_f2d>:
    4e80:	0041      	lsls	r1, r0, #1
    4e82:	0e09      	lsrs	r1, r1, #24
    4e84:	1c4b      	adds	r3, r1, #1
    4e86:	b570      	push	{r4, r5, r6, lr}
    4e88:	b2db      	uxtb	r3, r3
    4e8a:	0246      	lsls	r6, r0, #9
    4e8c:	0a75      	lsrs	r5, r6, #9
    4e8e:	0fc4      	lsrs	r4, r0, #31
    4e90:	2b01      	cmp	r3, #1
    4e92:	dd14      	ble.n	4ebe <__aeabi_f2d+0x3e>
    4e94:	23e0      	movs	r3, #224	; 0xe0
    4e96:	009b      	lsls	r3, r3, #2
    4e98:	076d      	lsls	r5, r5, #29
    4e9a:	0b36      	lsrs	r6, r6, #12
    4e9c:	18cb      	adds	r3, r1, r3
    4e9e:	2100      	movs	r1, #0
    4ea0:	0d0a      	lsrs	r2, r1, #20
    4ea2:	0028      	movs	r0, r5
    4ea4:	0512      	lsls	r2, r2, #20
    4ea6:	4d1c      	ldr	r5, [pc, #112]	; (4f18 <__aeabi_f2d+0x98>)
    4ea8:	4332      	orrs	r2, r6
    4eaa:	055b      	lsls	r3, r3, #21
    4eac:	402a      	ands	r2, r5
    4eae:	085b      	lsrs	r3, r3, #1
    4eb0:	4313      	orrs	r3, r2
    4eb2:	005b      	lsls	r3, r3, #1
    4eb4:	07e4      	lsls	r4, r4, #31
    4eb6:	085b      	lsrs	r3, r3, #1
    4eb8:	4323      	orrs	r3, r4
    4eba:	0019      	movs	r1, r3
    4ebc:	bd70      	pop	{r4, r5, r6, pc}
    4ebe:	2900      	cmp	r1, #0
    4ec0:	d114      	bne.n	4eec <__aeabi_f2d+0x6c>
    4ec2:	2d00      	cmp	r5, #0
    4ec4:	d01e      	beq.n	4f04 <__aeabi_f2d+0x84>
    4ec6:	0028      	movs	r0, r5
    4ec8:	f000 f8b6 	bl	5038 <__clzsi2>
    4ecc:	280a      	cmp	r0, #10
    4ece:	dc1c      	bgt.n	4f0a <__aeabi_f2d+0x8a>
    4ed0:	230b      	movs	r3, #11
    4ed2:	002a      	movs	r2, r5
    4ed4:	1a1b      	subs	r3, r3, r0
    4ed6:	40da      	lsrs	r2, r3
    4ed8:	0003      	movs	r3, r0
    4eda:	3315      	adds	r3, #21
    4edc:	409d      	lsls	r5, r3
    4ede:	4b0f      	ldr	r3, [pc, #60]	; (4f1c <__aeabi_f2d+0x9c>)
    4ee0:	0312      	lsls	r2, r2, #12
    4ee2:	1a1b      	subs	r3, r3, r0
    4ee4:	055b      	lsls	r3, r3, #21
    4ee6:	0b16      	lsrs	r6, r2, #12
    4ee8:	0d5b      	lsrs	r3, r3, #21
    4eea:	e7d8      	b.n	4e9e <__aeabi_f2d+0x1e>
    4eec:	2d00      	cmp	r5, #0
    4eee:	d006      	beq.n	4efe <__aeabi_f2d+0x7e>
    4ef0:	0b32      	lsrs	r2, r6, #12
    4ef2:	2680      	movs	r6, #128	; 0x80
    4ef4:	0336      	lsls	r6, r6, #12
    4ef6:	076d      	lsls	r5, r5, #29
    4ef8:	4316      	orrs	r6, r2
    4efa:	4b09      	ldr	r3, [pc, #36]	; (4f20 <__aeabi_f2d+0xa0>)
    4efc:	e7cf      	b.n	4e9e <__aeabi_f2d+0x1e>
    4efe:	4b08      	ldr	r3, [pc, #32]	; (4f20 <__aeabi_f2d+0xa0>)
    4f00:	2600      	movs	r6, #0
    4f02:	e7cc      	b.n	4e9e <__aeabi_f2d+0x1e>
    4f04:	2300      	movs	r3, #0
    4f06:	2600      	movs	r6, #0
    4f08:	e7c9      	b.n	4e9e <__aeabi_f2d+0x1e>
    4f0a:	0003      	movs	r3, r0
    4f0c:	002a      	movs	r2, r5
    4f0e:	3b0b      	subs	r3, #11
    4f10:	409a      	lsls	r2, r3
    4f12:	2500      	movs	r5, #0
    4f14:	e7e3      	b.n	4ede <__aeabi_f2d+0x5e>
    4f16:	46c0      	nop			; (mov r8, r8)
    4f18:	800fffff 	.word	0x800fffff
    4f1c:	00000389 	.word	0x00000389
    4f20:	000007ff 	.word	0x000007ff

00004f24 <__aeabi_d2f>:
    4f24:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f26:	004c      	lsls	r4, r1, #1
    4f28:	0d64      	lsrs	r4, r4, #21
    4f2a:	030b      	lsls	r3, r1, #12
    4f2c:	1c62      	adds	r2, r4, #1
    4f2e:	0f45      	lsrs	r5, r0, #29
    4f30:	0a5b      	lsrs	r3, r3, #9
    4f32:	0552      	lsls	r2, r2, #21
    4f34:	432b      	orrs	r3, r5
    4f36:	0fc9      	lsrs	r1, r1, #31
    4f38:	00c5      	lsls	r5, r0, #3
    4f3a:	0d52      	lsrs	r2, r2, #21
    4f3c:	2a01      	cmp	r2, #1
    4f3e:	dd28      	ble.n	4f92 <__aeabi_d2f+0x6e>
    4f40:	4a3a      	ldr	r2, [pc, #232]	; (502c <__aeabi_d2f+0x108>)
    4f42:	18a6      	adds	r6, r4, r2
    4f44:	2efe      	cmp	r6, #254	; 0xfe
    4f46:	dc1b      	bgt.n	4f80 <__aeabi_d2f+0x5c>
    4f48:	2e00      	cmp	r6, #0
    4f4a:	dd3e      	ble.n	4fca <__aeabi_d2f+0xa6>
    4f4c:	0180      	lsls	r0, r0, #6
    4f4e:	0002      	movs	r2, r0
    4f50:	1e50      	subs	r0, r2, #1
    4f52:	4182      	sbcs	r2, r0
    4f54:	0f6d      	lsrs	r5, r5, #29
    4f56:	432a      	orrs	r2, r5
    4f58:	00db      	lsls	r3, r3, #3
    4f5a:	4313      	orrs	r3, r2
    4f5c:	075a      	lsls	r2, r3, #29
    4f5e:	d004      	beq.n	4f6a <__aeabi_d2f+0x46>
    4f60:	220f      	movs	r2, #15
    4f62:	401a      	ands	r2, r3
    4f64:	2a04      	cmp	r2, #4
    4f66:	d000      	beq.n	4f6a <__aeabi_d2f+0x46>
    4f68:	3304      	adds	r3, #4
    4f6a:	2280      	movs	r2, #128	; 0x80
    4f6c:	04d2      	lsls	r2, r2, #19
    4f6e:	401a      	ands	r2, r3
    4f70:	d05a      	beq.n	5028 <__aeabi_d2f+0x104>
    4f72:	3601      	adds	r6, #1
    4f74:	2eff      	cmp	r6, #255	; 0xff
    4f76:	d003      	beq.n	4f80 <__aeabi_d2f+0x5c>
    4f78:	019b      	lsls	r3, r3, #6
    4f7a:	0a5b      	lsrs	r3, r3, #9
    4f7c:	b2f4      	uxtb	r4, r6
    4f7e:	e001      	b.n	4f84 <__aeabi_d2f+0x60>
    4f80:	24ff      	movs	r4, #255	; 0xff
    4f82:	2300      	movs	r3, #0
    4f84:	0258      	lsls	r0, r3, #9
    4f86:	05e4      	lsls	r4, r4, #23
    4f88:	0a40      	lsrs	r0, r0, #9
    4f8a:	07c9      	lsls	r1, r1, #31
    4f8c:	4320      	orrs	r0, r4
    4f8e:	4308      	orrs	r0, r1
    4f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f92:	2c00      	cmp	r4, #0
    4f94:	d007      	beq.n	4fa6 <__aeabi_d2f+0x82>
    4f96:	431d      	orrs	r5, r3
    4f98:	d0f2      	beq.n	4f80 <__aeabi_d2f+0x5c>
    4f9a:	2080      	movs	r0, #128	; 0x80
    4f9c:	00db      	lsls	r3, r3, #3
    4f9e:	0480      	lsls	r0, r0, #18
    4fa0:	4303      	orrs	r3, r0
    4fa2:	26ff      	movs	r6, #255	; 0xff
    4fa4:	e7da      	b.n	4f5c <__aeabi_d2f+0x38>
    4fa6:	432b      	orrs	r3, r5
    4fa8:	d003      	beq.n	4fb2 <__aeabi_d2f+0x8e>
    4faa:	2305      	movs	r3, #5
    4fac:	08db      	lsrs	r3, r3, #3
    4fae:	2cff      	cmp	r4, #255	; 0xff
    4fb0:	d003      	beq.n	4fba <__aeabi_d2f+0x96>
    4fb2:	025b      	lsls	r3, r3, #9
    4fb4:	0a5b      	lsrs	r3, r3, #9
    4fb6:	b2e4      	uxtb	r4, r4
    4fb8:	e7e4      	b.n	4f84 <__aeabi_d2f+0x60>
    4fba:	2b00      	cmp	r3, #0
    4fbc:	d032      	beq.n	5024 <__aeabi_d2f+0x100>
    4fbe:	2080      	movs	r0, #128	; 0x80
    4fc0:	03c0      	lsls	r0, r0, #15
    4fc2:	4303      	orrs	r3, r0
    4fc4:	025b      	lsls	r3, r3, #9
    4fc6:	0a5b      	lsrs	r3, r3, #9
    4fc8:	e7dc      	b.n	4f84 <__aeabi_d2f+0x60>
    4fca:	0032      	movs	r2, r6
    4fcc:	3217      	adds	r2, #23
    4fce:	db14      	blt.n	4ffa <__aeabi_d2f+0xd6>
    4fd0:	2280      	movs	r2, #128	; 0x80
    4fd2:	271e      	movs	r7, #30
    4fd4:	0412      	lsls	r2, r2, #16
    4fd6:	4313      	orrs	r3, r2
    4fd8:	1bbf      	subs	r7, r7, r6
    4fda:	2f1f      	cmp	r7, #31
    4fdc:	dc0f      	bgt.n	4ffe <__aeabi_d2f+0xda>
    4fde:	4a14      	ldr	r2, [pc, #80]	; (5030 <__aeabi_d2f+0x10c>)
    4fe0:	4694      	mov	ip, r2
    4fe2:	4464      	add	r4, ip
    4fe4:	002a      	movs	r2, r5
    4fe6:	40a5      	lsls	r5, r4
    4fe8:	002e      	movs	r6, r5
    4fea:	40a3      	lsls	r3, r4
    4fec:	1e75      	subs	r5, r6, #1
    4fee:	41ae      	sbcs	r6, r5
    4ff0:	40fa      	lsrs	r2, r7
    4ff2:	4333      	orrs	r3, r6
    4ff4:	4313      	orrs	r3, r2
    4ff6:	2600      	movs	r6, #0
    4ff8:	e7b0      	b.n	4f5c <__aeabi_d2f+0x38>
    4ffa:	2400      	movs	r4, #0
    4ffc:	e7d5      	b.n	4faa <__aeabi_d2f+0x86>
    4ffe:	2202      	movs	r2, #2
    5000:	4252      	negs	r2, r2
    5002:	1b96      	subs	r6, r2, r6
    5004:	001a      	movs	r2, r3
    5006:	40f2      	lsrs	r2, r6
    5008:	2f20      	cmp	r7, #32
    500a:	d009      	beq.n	5020 <__aeabi_d2f+0xfc>
    500c:	4809      	ldr	r0, [pc, #36]	; (5034 <__aeabi_d2f+0x110>)
    500e:	4684      	mov	ip, r0
    5010:	4464      	add	r4, ip
    5012:	40a3      	lsls	r3, r4
    5014:	432b      	orrs	r3, r5
    5016:	1e5d      	subs	r5, r3, #1
    5018:	41ab      	sbcs	r3, r5
    501a:	2600      	movs	r6, #0
    501c:	4313      	orrs	r3, r2
    501e:	e79d      	b.n	4f5c <__aeabi_d2f+0x38>
    5020:	2300      	movs	r3, #0
    5022:	e7f7      	b.n	5014 <__aeabi_d2f+0xf0>
    5024:	2300      	movs	r3, #0
    5026:	e7ad      	b.n	4f84 <__aeabi_d2f+0x60>
    5028:	0034      	movs	r4, r6
    502a:	e7bf      	b.n	4fac <__aeabi_d2f+0x88>
    502c:	fffffc80 	.word	0xfffffc80
    5030:	fffffc82 	.word	0xfffffc82
    5034:	fffffca2 	.word	0xfffffca2

00005038 <__clzsi2>:
    5038:	211c      	movs	r1, #28
    503a:	2301      	movs	r3, #1
    503c:	041b      	lsls	r3, r3, #16
    503e:	4298      	cmp	r0, r3
    5040:	d301      	bcc.n	5046 <__clzsi2+0xe>
    5042:	0c00      	lsrs	r0, r0, #16
    5044:	3910      	subs	r1, #16
    5046:	0a1b      	lsrs	r3, r3, #8
    5048:	4298      	cmp	r0, r3
    504a:	d301      	bcc.n	5050 <__clzsi2+0x18>
    504c:	0a00      	lsrs	r0, r0, #8
    504e:	3908      	subs	r1, #8
    5050:	091b      	lsrs	r3, r3, #4
    5052:	4298      	cmp	r0, r3
    5054:	d301      	bcc.n	505a <__clzsi2+0x22>
    5056:	0900      	lsrs	r0, r0, #4
    5058:	3904      	subs	r1, #4
    505a:	a202      	add	r2, pc, #8	; (adr r2, 5064 <__clzsi2+0x2c>)
    505c:	5c10      	ldrb	r0, [r2, r0]
    505e:	1840      	adds	r0, r0, r1
    5060:	4770      	bx	lr
    5062:	46c0      	nop			; (mov r8, r8)
    5064:	02020304 	.word	0x02020304
    5068:	01010101 	.word	0x01010101
	...

00005074 <__clzdi2>:
    5074:	b510      	push	{r4, lr}
    5076:	2900      	cmp	r1, #0
    5078:	d103      	bne.n	5082 <__clzdi2+0xe>
    507a:	f7ff ffdd 	bl	5038 <__clzsi2>
    507e:	3020      	adds	r0, #32
    5080:	e002      	b.n	5088 <__clzdi2+0x14>
    5082:	1c08      	adds	r0, r1, #0
    5084:	f7ff ffd8 	bl	5038 <__clzsi2>
    5088:	bd10      	pop	{r4, pc}
    508a:	46c0      	nop			; (mov r8, r8)

0000508c <__libc_init_array>:
    508c:	b570      	push	{r4, r5, r6, lr}
    508e:	2600      	movs	r6, #0
    5090:	4d0c      	ldr	r5, [pc, #48]	; (50c4 <__libc_init_array+0x38>)
    5092:	4c0d      	ldr	r4, [pc, #52]	; (50c8 <__libc_init_array+0x3c>)
    5094:	1b64      	subs	r4, r4, r5
    5096:	10a4      	asrs	r4, r4, #2
    5098:	42a6      	cmp	r6, r4
    509a:	d109      	bne.n	50b0 <__libc_init_array+0x24>
    509c:	2600      	movs	r6, #0
    509e:	f000 fdaf 	bl	5c00 <_init>
    50a2:	4d0a      	ldr	r5, [pc, #40]	; (50cc <__libc_init_array+0x40>)
    50a4:	4c0a      	ldr	r4, [pc, #40]	; (50d0 <__libc_init_array+0x44>)
    50a6:	1b64      	subs	r4, r4, r5
    50a8:	10a4      	asrs	r4, r4, #2
    50aa:	42a6      	cmp	r6, r4
    50ac:	d105      	bne.n	50ba <__libc_init_array+0x2e>
    50ae:	bd70      	pop	{r4, r5, r6, pc}
    50b0:	00b3      	lsls	r3, r6, #2
    50b2:	58eb      	ldr	r3, [r5, r3]
    50b4:	4798      	blx	r3
    50b6:	3601      	adds	r6, #1
    50b8:	e7ee      	b.n	5098 <__libc_init_array+0xc>
    50ba:	00b3      	lsls	r3, r6, #2
    50bc:	58eb      	ldr	r3, [r5, r3]
    50be:	4798      	blx	r3
    50c0:	3601      	adds	r6, #1
    50c2:	e7f2      	b.n	50aa <__libc_init_array+0x1e>
    50c4:	00005c0c 	.word	0x00005c0c
    50c8:	00005c0c 	.word	0x00005c0c
    50cc:	00005c0c 	.word	0x00005c0c
    50d0:	00005c10 	.word	0x00005c10

000050d4 <malloc>:
    50d4:	b510      	push	{r4, lr}
    50d6:	4b03      	ldr	r3, [pc, #12]	; (50e4 <malloc+0x10>)
    50d8:	0001      	movs	r1, r0
    50da:	6818      	ldr	r0, [r3, #0]
    50dc:	f000 f860 	bl	51a0 <_malloc_r>
    50e0:	bd10      	pop	{r4, pc}
    50e2:	46c0      	nop			; (mov r8, r8)
    50e4:	2000001c 	.word	0x2000001c

000050e8 <memcpy>:
    50e8:	2300      	movs	r3, #0
    50ea:	b510      	push	{r4, lr}
    50ec:	429a      	cmp	r2, r3
    50ee:	d100      	bne.n	50f2 <memcpy+0xa>
    50f0:	bd10      	pop	{r4, pc}
    50f2:	5ccc      	ldrb	r4, [r1, r3]
    50f4:	54c4      	strb	r4, [r0, r3]
    50f6:	3301      	adds	r3, #1
    50f8:	e7f8      	b.n	50ec <memcpy+0x4>

000050fa <memset>:
    50fa:	0003      	movs	r3, r0
    50fc:	1882      	adds	r2, r0, r2
    50fe:	4293      	cmp	r3, r2
    5100:	d100      	bne.n	5104 <memset+0xa>
    5102:	4770      	bx	lr
    5104:	7019      	strb	r1, [r3, #0]
    5106:	3301      	adds	r3, #1
    5108:	e7f9      	b.n	50fe <memset+0x4>
	...

0000510c <_free_r>:
    510c:	b570      	push	{r4, r5, r6, lr}
    510e:	0005      	movs	r5, r0
    5110:	2900      	cmp	r1, #0
    5112:	d010      	beq.n	5136 <_free_r+0x2a>
    5114:	1f0c      	subs	r4, r1, #4
    5116:	6823      	ldr	r3, [r4, #0]
    5118:	2b00      	cmp	r3, #0
    511a:	da00      	bge.n	511e <_free_r+0x12>
    511c:	18e4      	adds	r4, r4, r3
    511e:	0028      	movs	r0, r5
    5120:	f000 f8df 	bl	52e2 <__malloc_lock>
    5124:	4a1d      	ldr	r2, [pc, #116]	; (519c <_free_r+0x90>)
    5126:	6813      	ldr	r3, [r2, #0]
    5128:	2b00      	cmp	r3, #0
    512a:	d105      	bne.n	5138 <_free_r+0x2c>
    512c:	6063      	str	r3, [r4, #4]
    512e:	6014      	str	r4, [r2, #0]
    5130:	0028      	movs	r0, r5
    5132:	f000 f8d7 	bl	52e4 <__malloc_unlock>
    5136:	bd70      	pop	{r4, r5, r6, pc}
    5138:	42a3      	cmp	r3, r4
    513a:	d909      	bls.n	5150 <_free_r+0x44>
    513c:	6821      	ldr	r1, [r4, #0]
    513e:	1860      	adds	r0, r4, r1
    5140:	4283      	cmp	r3, r0
    5142:	d1f3      	bne.n	512c <_free_r+0x20>
    5144:	6818      	ldr	r0, [r3, #0]
    5146:	685b      	ldr	r3, [r3, #4]
    5148:	1841      	adds	r1, r0, r1
    514a:	6021      	str	r1, [r4, #0]
    514c:	e7ee      	b.n	512c <_free_r+0x20>
    514e:	0013      	movs	r3, r2
    5150:	685a      	ldr	r2, [r3, #4]
    5152:	2a00      	cmp	r2, #0
    5154:	d001      	beq.n	515a <_free_r+0x4e>
    5156:	42a2      	cmp	r2, r4
    5158:	d9f9      	bls.n	514e <_free_r+0x42>
    515a:	6819      	ldr	r1, [r3, #0]
    515c:	1858      	adds	r0, r3, r1
    515e:	42a0      	cmp	r0, r4
    5160:	d10b      	bne.n	517a <_free_r+0x6e>
    5162:	6820      	ldr	r0, [r4, #0]
    5164:	1809      	adds	r1, r1, r0
    5166:	1858      	adds	r0, r3, r1
    5168:	6019      	str	r1, [r3, #0]
    516a:	4282      	cmp	r2, r0
    516c:	d1e0      	bne.n	5130 <_free_r+0x24>
    516e:	6810      	ldr	r0, [r2, #0]
    5170:	6852      	ldr	r2, [r2, #4]
    5172:	1841      	adds	r1, r0, r1
    5174:	6019      	str	r1, [r3, #0]
    5176:	605a      	str	r2, [r3, #4]
    5178:	e7da      	b.n	5130 <_free_r+0x24>
    517a:	42a0      	cmp	r0, r4
    517c:	d902      	bls.n	5184 <_free_r+0x78>
    517e:	230c      	movs	r3, #12
    5180:	602b      	str	r3, [r5, #0]
    5182:	e7d5      	b.n	5130 <_free_r+0x24>
    5184:	6821      	ldr	r1, [r4, #0]
    5186:	1860      	adds	r0, r4, r1
    5188:	4282      	cmp	r2, r0
    518a:	d103      	bne.n	5194 <_free_r+0x88>
    518c:	6810      	ldr	r0, [r2, #0]
    518e:	6852      	ldr	r2, [r2, #4]
    5190:	1841      	adds	r1, r0, r1
    5192:	6021      	str	r1, [r4, #0]
    5194:	6062      	str	r2, [r4, #4]
    5196:	605c      	str	r4, [r3, #4]
    5198:	e7ca      	b.n	5130 <_free_r+0x24>
    519a:	46c0      	nop			; (mov r8, r8)
    519c:	20001428 	.word	0x20001428

000051a0 <_malloc_r>:
    51a0:	2303      	movs	r3, #3
    51a2:	b570      	push	{r4, r5, r6, lr}
    51a4:	1ccd      	adds	r5, r1, #3
    51a6:	439d      	bics	r5, r3
    51a8:	3508      	adds	r5, #8
    51aa:	0006      	movs	r6, r0
    51ac:	2d0c      	cmp	r5, #12
    51ae:	d21e      	bcs.n	51ee <_malloc_r+0x4e>
    51b0:	250c      	movs	r5, #12
    51b2:	42a9      	cmp	r1, r5
    51b4:	d81d      	bhi.n	51f2 <_malloc_r+0x52>
    51b6:	0030      	movs	r0, r6
    51b8:	f000 f893 	bl	52e2 <__malloc_lock>
    51bc:	4a25      	ldr	r2, [pc, #148]	; (5254 <_malloc_r+0xb4>)
    51be:	6814      	ldr	r4, [r2, #0]
    51c0:	0021      	movs	r1, r4
    51c2:	2900      	cmp	r1, #0
    51c4:	d119      	bne.n	51fa <_malloc_r+0x5a>
    51c6:	4c24      	ldr	r4, [pc, #144]	; (5258 <_malloc_r+0xb8>)
    51c8:	6823      	ldr	r3, [r4, #0]
    51ca:	2b00      	cmp	r3, #0
    51cc:	d103      	bne.n	51d6 <_malloc_r+0x36>
    51ce:	0030      	movs	r0, r6
    51d0:	f000 f844 	bl	525c <_sbrk_r>
    51d4:	6020      	str	r0, [r4, #0]
    51d6:	0029      	movs	r1, r5
    51d8:	0030      	movs	r0, r6
    51da:	f000 f83f 	bl	525c <_sbrk_r>
    51de:	1c43      	adds	r3, r0, #1
    51e0:	d12c      	bne.n	523c <_malloc_r+0x9c>
    51e2:	230c      	movs	r3, #12
    51e4:	0030      	movs	r0, r6
    51e6:	6033      	str	r3, [r6, #0]
    51e8:	f000 f87c 	bl	52e4 <__malloc_unlock>
    51ec:	e003      	b.n	51f6 <_malloc_r+0x56>
    51ee:	2d00      	cmp	r5, #0
    51f0:	dadf      	bge.n	51b2 <_malloc_r+0x12>
    51f2:	230c      	movs	r3, #12
    51f4:	6033      	str	r3, [r6, #0]
    51f6:	2000      	movs	r0, #0
    51f8:	bd70      	pop	{r4, r5, r6, pc}
    51fa:	680b      	ldr	r3, [r1, #0]
    51fc:	1b5b      	subs	r3, r3, r5
    51fe:	d41a      	bmi.n	5236 <_malloc_r+0x96>
    5200:	2b0b      	cmp	r3, #11
    5202:	d903      	bls.n	520c <_malloc_r+0x6c>
    5204:	600b      	str	r3, [r1, #0]
    5206:	18cc      	adds	r4, r1, r3
    5208:	6025      	str	r5, [r4, #0]
    520a:	e003      	b.n	5214 <_malloc_r+0x74>
    520c:	428c      	cmp	r4, r1
    520e:	d10e      	bne.n	522e <_malloc_r+0x8e>
    5210:	6863      	ldr	r3, [r4, #4]
    5212:	6013      	str	r3, [r2, #0]
    5214:	0030      	movs	r0, r6
    5216:	f000 f865 	bl	52e4 <__malloc_unlock>
    521a:	0020      	movs	r0, r4
    521c:	2207      	movs	r2, #7
    521e:	300b      	adds	r0, #11
    5220:	1d23      	adds	r3, r4, #4
    5222:	4390      	bics	r0, r2
    5224:	1ac3      	subs	r3, r0, r3
    5226:	d0e7      	beq.n	51f8 <_malloc_r+0x58>
    5228:	425a      	negs	r2, r3
    522a:	50e2      	str	r2, [r4, r3]
    522c:	e7e4      	b.n	51f8 <_malloc_r+0x58>
    522e:	684b      	ldr	r3, [r1, #4]
    5230:	6063      	str	r3, [r4, #4]
    5232:	000c      	movs	r4, r1
    5234:	e7ee      	b.n	5214 <_malloc_r+0x74>
    5236:	000c      	movs	r4, r1
    5238:	6849      	ldr	r1, [r1, #4]
    523a:	e7c2      	b.n	51c2 <_malloc_r+0x22>
    523c:	2303      	movs	r3, #3
    523e:	1cc4      	adds	r4, r0, #3
    5240:	439c      	bics	r4, r3
    5242:	42a0      	cmp	r0, r4
    5244:	d0e0      	beq.n	5208 <_malloc_r+0x68>
    5246:	1a21      	subs	r1, r4, r0
    5248:	0030      	movs	r0, r6
    524a:	f000 f807 	bl	525c <_sbrk_r>
    524e:	1c43      	adds	r3, r0, #1
    5250:	d1da      	bne.n	5208 <_malloc_r+0x68>
    5252:	e7c6      	b.n	51e2 <_malloc_r+0x42>
    5254:	20001428 	.word	0x20001428
    5258:	2000142c 	.word	0x2000142c

0000525c <_sbrk_r>:
    525c:	2300      	movs	r3, #0
    525e:	b570      	push	{r4, r5, r6, lr}
    5260:	4c06      	ldr	r4, [pc, #24]	; (527c <_sbrk_r+0x20>)
    5262:	0005      	movs	r5, r0
    5264:	0008      	movs	r0, r1
    5266:	6023      	str	r3, [r4, #0]
    5268:	f7fd fcce 	bl	2c08 <_sbrk>
    526c:	1c43      	adds	r3, r0, #1
    526e:	d103      	bne.n	5278 <_sbrk_r+0x1c>
    5270:	6823      	ldr	r3, [r4, #0]
    5272:	2b00      	cmp	r3, #0
    5274:	d000      	beq.n	5278 <_sbrk_r+0x1c>
    5276:	602b      	str	r3, [r5, #0]
    5278:	bd70      	pop	{r4, r5, r6, pc}
    527a:	46c0      	nop			; (mov r8, r8)
    527c:	20001e34 	.word	0x20001e34

00005280 <siprintf>:
    5280:	b40e      	push	{r1, r2, r3}
    5282:	b510      	push	{r4, lr}
    5284:	b09d      	sub	sp, #116	; 0x74
    5286:	a902      	add	r1, sp, #8
    5288:	9002      	str	r0, [sp, #8]
    528a:	6108      	str	r0, [r1, #16]
    528c:	480b      	ldr	r0, [pc, #44]	; (52bc <siprintf+0x3c>)
    528e:	2482      	movs	r4, #130	; 0x82
    5290:	6088      	str	r0, [r1, #8]
    5292:	6148      	str	r0, [r1, #20]
    5294:	2001      	movs	r0, #1
    5296:	4240      	negs	r0, r0
    5298:	ab1f      	add	r3, sp, #124	; 0x7c
    529a:	81c8      	strh	r0, [r1, #14]
    529c:	4808      	ldr	r0, [pc, #32]	; (52c0 <siprintf+0x40>)
    529e:	cb04      	ldmia	r3!, {r2}
    52a0:	00a4      	lsls	r4, r4, #2
    52a2:	6800      	ldr	r0, [r0, #0]
    52a4:	9301      	str	r3, [sp, #4]
    52a6:	818c      	strh	r4, [r1, #12]
    52a8:	f000 f880 	bl	53ac <_svfiprintf_r>
    52ac:	2300      	movs	r3, #0
    52ae:	9a02      	ldr	r2, [sp, #8]
    52b0:	7013      	strb	r3, [r2, #0]
    52b2:	b01d      	add	sp, #116	; 0x74
    52b4:	bc10      	pop	{r4}
    52b6:	bc08      	pop	{r3}
    52b8:	b003      	add	sp, #12
    52ba:	4718      	bx	r3
    52bc:	7fffffff 	.word	0x7fffffff
    52c0:	2000001c 	.word	0x2000001c

000052c4 <strcpy>:
    52c4:	1c03      	adds	r3, r0, #0
    52c6:	780a      	ldrb	r2, [r1, #0]
    52c8:	3101      	adds	r1, #1
    52ca:	701a      	strb	r2, [r3, #0]
    52cc:	3301      	adds	r3, #1
    52ce:	2a00      	cmp	r2, #0
    52d0:	d1f9      	bne.n	52c6 <strcpy+0x2>
    52d2:	4770      	bx	lr

000052d4 <strlen>:
    52d4:	2300      	movs	r3, #0
    52d6:	5cc2      	ldrb	r2, [r0, r3]
    52d8:	3301      	adds	r3, #1
    52da:	2a00      	cmp	r2, #0
    52dc:	d1fb      	bne.n	52d6 <strlen+0x2>
    52de:	1e58      	subs	r0, r3, #1
    52e0:	4770      	bx	lr

000052e2 <__malloc_lock>:
    52e2:	4770      	bx	lr

000052e4 <__malloc_unlock>:
    52e4:	4770      	bx	lr
	...

000052e8 <__ssputs_r>:
    52e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    52ea:	688e      	ldr	r6, [r1, #8]
    52ec:	b085      	sub	sp, #20
    52ee:	0007      	movs	r7, r0
    52f0:	000c      	movs	r4, r1
    52f2:	9203      	str	r2, [sp, #12]
    52f4:	9301      	str	r3, [sp, #4]
    52f6:	429e      	cmp	r6, r3
    52f8:	d839      	bhi.n	536e <__ssputs_r+0x86>
    52fa:	2390      	movs	r3, #144	; 0x90
    52fc:	898a      	ldrh	r2, [r1, #12]
    52fe:	00db      	lsls	r3, r3, #3
    5300:	421a      	tst	r2, r3
    5302:	d034      	beq.n	536e <__ssputs_r+0x86>
    5304:	2503      	movs	r5, #3
    5306:	6909      	ldr	r1, [r1, #16]
    5308:	6823      	ldr	r3, [r4, #0]
    530a:	1a5b      	subs	r3, r3, r1
    530c:	9302      	str	r3, [sp, #8]
    530e:	6963      	ldr	r3, [r4, #20]
    5310:	9802      	ldr	r0, [sp, #8]
    5312:	435d      	muls	r5, r3
    5314:	0feb      	lsrs	r3, r5, #31
    5316:	195d      	adds	r5, r3, r5
    5318:	9b01      	ldr	r3, [sp, #4]
    531a:	106d      	asrs	r5, r5, #1
    531c:	3301      	adds	r3, #1
    531e:	181b      	adds	r3, r3, r0
    5320:	42ab      	cmp	r3, r5
    5322:	d900      	bls.n	5326 <__ssputs_r+0x3e>
    5324:	001d      	movs	r5, r3
    5326:	0553      	lsls	r3, r2, #21
    5328:	d532      	bpl.n	5390 <__ssputs_r+0xa8>
    532a:	0029      	movs	r1, r5
    532c:	0038      	movs	r0, r7
    532e:	f7ff ff37 	bl	51a0 <_malloc_r>
    5332:	1e06      	subs	r6, r0, #0
    5334:	d109      	bne.n	534a <__ssputs_r+0x62>
    5336:	230c      	movs	r3, #12
    5338:	603b      	str	r3, [r7, #0]
    533a:	2340      	movs	r3, #64	; 0x40
    533c:	2001      	movs	r0, #1
    533e:	89a2      	ldrh	r2, [r4, #12]
    5340:	4240      	negs	r0, r0
    5342:	4313      	orrs	r3, r2
    5344:	81a3      	strh	r3, [r4, #12]
    5346:	b005      	add	sp, #20
    5348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    534a:	9a02      	ldr	r2, [sp, #8]
    534c:	6921      	ldr	r1, [r4, #16]
    534e:	f7ff fecb 	bl	50e8 <memcpy>
    5352:	89a3      	ldrh	r3, [r4, #12]
    5354:	4a14      	ldr	r2, [pc, #80]	; (53a8 <__ssputs_r+0xc0>)
    5356:	401a      	ands	r2, r3
    5358:	2380      	movs	r3, #128	; 0x80
    535a:	4313      	orrs	r3, r2
    535c:	81a3      	strh	r3, [r4, #12]
    535e:	9b02      	ldr	r3, [sp, #8]
    5360:	6126      	str	r6, [r4, #16]
    5362:	18f6      	adds	r6, r6, r3
    5364:	6026      	str	r6, [r4, #0]
    5366:	6165      	str	r5, [r4, #20]
    5368:	9e01      	ldr	r6, [sp, #4]
    536a:	1aed      	subs	r5, r5, r3
    536c:	60a5      	str	r5, [r4, #8]
    536e:	9b01      	ldr	r3, [sp, #4]
    5370:	42b3      	cmp	r3, r6
    5372:	d200      	bcs.n	5376 <__ssputs_r+0x8e>
    5374:	001e      	movs	r6, r3
    5376:	0032      	movs	r2, r6
    5378:	9903      	ldr	r1, [sp, #12]
    537a:	6820      	ldr	r0, [r4, #0]
    537c:	f000 faad 	bl	58da <memmove>
    5380:	68a3      	ldr	r3, [r4, #8]
    5382:	2000      	movs	r0, #0
    5384:	1b9b      	subs	r3, r3, r6
    5386:	60a3      	str	r3, [r4, #8]
    5388:	6823      	ldr	r3, [r4, #0]
    538a:	199e      	adds	r6, r3, r6
    538c:	6026      	str	r6, [r4, #0]
    538e:	e7da      	b.n	5346 <__ssputs_r+0x5e>
    5390:	002a      	movs	r2, r5
    5392:	0038      	movs	r0, r7
    5394:	f000 fab3 	bl	58fe <_realloc_r>
    5398:	1e06      	subs	r6, r0, #0
    539a:	d1e0      	bne.n	535e <__ssputs_r+0x76>
    539c:	6921      	ldr	r1, [r4, #16]
    539e:	0038      	movs	r0, r7
    53a0:	f7ff feb4 	bl	510c <_free_r>
    53a4:	e7c7      	b.n	5336 <__ssputs_r+0x4e>
    53a6:	46c0      	nop			; (mov r8, r8)
    53a8:	fffffb7f 	.word	0xfffffb7f

000053ac <_svfiprintf_r>:
    53ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    53ae:	b09f      	sub	sp, #124	; 0x7c
    53b0:	9002      	str	r0, [sp, #8]
    53b2:	9305      	str	r3, [sp, #20]
    53b4:	898b      	ldrh	r3, [r1, #12]
    53b6:	000f      	movs	r7, r1
    53b8:	0016      	movs	r6, r2
    53ba:	061b      	lsls	r3, r3, #24
    53bc:	d511      	bpl.n	53e2 <_svfiprintf_r+0x36>
    53be:	690b      	ldr	r3, [r1, #16]
    53c0:	2b00      	cmp	r3, #0
    53c2:	d10e      	bne.n	53e2 <_svfiprintf_r+0x36>
    53c4:	2140      	movs	r1, #64	; 0x40
    53c6:	f7ff feeb 	bl	51a0 <_malloc_r>
    53ca:	6038      	str	r0, [r7, #0]
    53cc:	6138      	str	r0, [r7, #16]
    53ce:	2800      	cmp	r0, #0
    53d0:	d105      	bne.n	53de <_svfiprintf_r+0x32>
    53d2:	230c      	movs	r3, #12
    53d4:	9a02      	ldr	r2, [sp, #8]
    53d6:	3801      	subs	r0, #1
    53d8:	6013      	str	r3, [r2, #0]
    53da:	b01f      	add	sp, #124	; 0x7c
    53dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53de:	2340      	movs	r3, #64	; 0x40
    53e0:	617b      	str	r3, [r7, #20]
    53e2:	2300      	movs	r3, #0
    53e4:	ad06      	add	r5, sp, #24
    53e6:	616b      	str	r3, [r5, #20]
    53e8:	3320      	adds	r3, #32
    53ea:	766b      	strb	r3, [r5, #25]
    53ec:	3310      	adds	r3, #16
    53ee:	76ab      	strb	r3, [r5, #26]
    53f0:	0034      	movs	r4, r6
    53f2:	7823      	ldrb	r3, [r4, #0]
    53f4:	2b00      	cmp	r3, #0
    53f6:	d147      	bne.n	5488 <_svfiprintf_r+0xdc>
    53f8:	1ba3      	subs	r3, r4, r6
    53fa:	9304      	str	r3, [sp, #16]
    53fc:	d00d      	beq.n	541a <_svfiprintf_r+0x6e>
    53fe:	1ba3      	subs	r3, r4, r6
    5400:	0032      	movs	r2, r6
    5402:	0039      	movs	r1, r7
    5404:	9802      	ldr	r0, [sp, #8]
    5406:	f7ff ff6f 	bl	52e8 <__ssputs_r>
    540a:	1c43      	adds	r3, r0, #1
    540c:	d100      	bne.n	5410 <_svfiprintf_r+0x64>
    540e:	e0b5      	b.n	557c <_svfiprintf_r+0x1d0>
    5410:	696a      	ldr	r2, [r5, #20]
    5412:	9b04      	ldr	r3, [sp, #16]
    5414:	4694      	mov	ip, r2
    5416:	4463      	add	r3, ip
    5418:	616b      	str	r3, [r5, #20]
    541a:	7823      	ldrb	r3, [r4, #0]
    541c:	2b00      	cmp	r3, #0
    541e:	d100      	bne.n	5422 <_svfiprintf_r+0x76>
    5420:	e0ac      	b.n	557c <_svfiprintf_r+0x1d0>
    5422:	2201      	movs	r2, #1
    5424:	2300      	movs	r3, #0
    5426:	4252      	negs	r2, r2
    5428:	606a      	str	r2, [r5, #4]
    542a:	a902      	add	r1, sp, #8
    542c:	3254      	adds	r2, #84	; 0x54
    542e:	1852      	adds	r2, r2, r1
    5430:	3401      	adds	r4, #1
    5432:	602b      	str	r3, [r5, #0]
    5434:	60eb      	str	r3, [r5, #12]
    5436:	60ab      	str	r3, [r5, #8]
    5438:	7013      	strb	r3, [r2, #0]
    543a:	65ab      	str	r3, [r5, #88]	; 0x58
    543c:	4e58      	ldr	r6, [pc, #352]	; (55a0 <_svfiprintf_r+0x1f4>)
    543e:	2205      	movs	r2, #5
    5440:	7821      	ldrb	r1, [r4, #0]
    5442:	0030      	movs	r0, r6
    5444:	f000 fa3e 	bl	58c4 <memchr>
    5448:	1c62      	adds	r2, r4, #1
    544a:	2800      	cmp	r0, #0
    544c:	d120      	bne.n	5490 <_svfiprintf_r+0xe4>
    544e:	6829      	ldr	r1, [r5, #0]
    5450:	06cb      	lsls	r3, r1, #27
    5452:	d504      	bpl.n	545e <_svfiprintf_r+0xb2>
    5454:	2353      	movs	r3, #83	; 0x53
    5456:	ae02      	add	r6, sp, #8
    5458:	3020      	adds	r0, #32
    545a:	199b      	adds	r3, r3, r6
    545c:	7018      	strb	r0, [r3, #0]
    545e:	070b      	lsls	r3, r1, #28
    5460:	d504      	bpl.n	546c <_svfiprintf_r+0xc0>
    5462:	2353      	movs	r3, #83	; 0x53
    5464:	202b      	movs	r0, #43	; 0x2b
    5466:	ae02      	add	r6, sp, #8
    5468:	199b      	adds	r3, r3, r6
    546a:	7018      	strb	r0, [r3, #0]
    546c:	7823      	ldrb	r3, [r4, #0]
    546e:	2b2a      	cmp	r3, #42	; 0x2a
    5470:	d016      	beq.n	54a0 <_svfiprintf_r+0xf4>
    5472:	2000      	movs	r0, #0
    5474:	210a      	movs	r1, #10
    5476:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5478:	7822      	ldrb	r2, [r4, #0]
    547a:	3a30      	subs	r2, #48	; 0x30
    547c:	2a09      	cmp	r2, #9
    547e:	d955      	bls.n	552c <_svfiprintf_r+0x180>
    5480:	2800      	cmp	r0, #0
    5482:	d015      	beq.n	54b0 <_svfiprintf_r+0x104>
    5484:	9309      	str	r3, [sp, #36]	; 0x24
    5486:	e013      	b.n	54b0 <_svfiprintf_r+0x104>
    5488:	2b25      	cmp	r3, #37	; 0x25
    548a:	d0b5      	beq.n	53f8 <_svfiprintf_r+0x4c>
    548c:	3401      	adds	r4, #1
    548e:	e7b0      	b.n	53f2 <_svfiprintf_r+0x46>
    5490:	2301      	movs	r3, #1
    5492:	1b80      	subs	r0, r0, r6
    5494:	4083      	lsls	r3, r0
    5496:	6829      	ldr	r1, [r5, #0]
    5498:	0014      	movs	r4, r2
    549a:	430b      	orrs	r3, r1
    549c:	602b      	str	r3, [r5, #0]
    549e:	e7cd      	b.n	543c <_svfiprintf_r+0x90>
    54a0:	9b05      	ldr	r3, [sp, #20]
    54a2:	1d18      	adds	r0, r3, #4
    54a4:	681b      	ldr	r3, [r3, #0]
    54a6:	9005      	str	r0, [sp, #20]
    54a8:	2b00      	cmp	r3, #0
    54aa:	db39      	blt.n	5520 <_svfiprintf_r+0x174>
    54ac:	9309      	str	r3, [sp, #36]	; 0x24
    54ae:	0014      	movs	r4, r2
    54b0:	7823      	ldrb	r3, [r4, #0]
    54b2:	2b2e      	cmp	r3, #46	; 0x2e
    54b4:	d10b      	bne.n	54ce <_svfiprintf_r+0x122>
    54b6:	7863      	ldrb	r3, [r4, #1]
    54b8:	1c62      	adds	r2, r4, #1
    54ba:	2b2a      	cmp	r3, #42	; 0x2a
    54bc:	d13e      	bne.n	553c <_svfiprintf_r+0x190>
    54be:	9b05      	ldr	r3, [sp, #20]
    54c0:	3402      	adds	r4, #2
    54c2:	1d1a      	adds	r2, r3, #4
    54c4:	681b      	ldr	r3, [r3, #0]
    54c6:	9205      	str	r2, [sp, #20]
    54c8:	2b00      	cmp	r3, #0
    54ca:	db34      	blt.n	5536 <_svfiprintf_r+0x18a>
    54cc:	9307      	str	r3, [sp, #28]
    54ce:	4e35      	ldr	r6, [pc, #212]	; (55a4 <_svfiprintf_r+0x1f8>)
    54d0:	7821      	ldrb	r1, [r4, #0]
    54d2:	2203      	movs	r2, #3
    54d4:	0030      	movs	r0, r6
    54d6:	f000 f9f5 	bl	58c4 <memchr>
    54da:	2800      	cmp	r0, #0
    54dc:	d006      	beq.n	54ec <_svfiprintf_r+0x140>
    54de:	2340      	movs	r3, #64	; 0x40
    54e0:	1b80      	subs	r0, r0, r6
    54e2:	4083      	lsls	r3, r0
    54e4:	682a      	ldr	r2, [r5, #0]
    54e6:	3401      	adds	r4, #1
    54e8:	4313      	orrs	r3, r2
    54ea:	602b      	str	r3, [r5, #0]
    54ec:	7821      	ldrb	r1, [r4, #0]
    54ee:	2206      	movs	r2, #6
    54f0:	482d      	ldr	r0, [pc, #180]	; (55a8 <_svfiprintf_r+0x1fc>)
    54f2:	1c66      	adds	r6, r4, #1
    54f4:	7629      	strb	r1, [r5, #24]
    54f6:	f000 f9e5 	bl	58c4 <memchr>
    54fa:	2800      	cmp	r0, #0
    54fc:	d046      	beq.n	558c <_svfiprintf_r+0x1e0>
    54fe:	4b2b      	ldr	r3, [pc, #172]	; (55ac <_svfiprintf_r+0x200>)
    5500:	2b00      	cmp	r3, #0
    5502:	d12f      	bne.n	5564 <_svfiprintf_r+0x1b8>
    5504:	6829      	ldr	r1, [r5, #0]
    5506:	9b05      	ldr	r3, [sp, #20]
    5508:	2207      	movs	r2, #7
    550a:	05c9      	lsls	r1, r1, #23
    550c:	d528      	bpl.n	5560 <_svfiprintf_r+0x1b4>
    550e:	189b      	adds	r3, r3, r2
    5510:	4393      	bics	r3, r2
    5512:	3308      	adds	r3, #8
    5514:	9305      	str	r3, [sp, #20]
    5516:	696b      	ldr	r3, [r5, #20]
    5518:	9a03      	ldr	r2, [sp, #12]
    551a:	189b      	adds	r3, r3, r2
    551c:	616b      	str	r3, [r5, #20]
    551e:	e767      	b.n	53f0 <_svfiprintf_r+0x44>
    5520:	425b      	negs	r3, r3
    5522:	60eb      	str	r3, [r5, #12]
    5524:	2302      	movs	r3, #2
    5526:	430b      	orrs	r3, r1
    5528:	602b      	str	r3, [r5, #0]
    552a:	e7c0      	b.n	54ae <_svfiprintf_r+0x102>
    552c:	434b      	muls	r3, r1
    552e:	3401      	adds	r4, #1
    5530:	189b      	adds	r3, r3, r2
    5532:	2001      	movs	r0, #1
    5534:	e7a0      	b.n	5478 <_svfiprintf_r+0xcc>
    5536:	2301      	movs	r3, #1
    5538:	425b      	negs	r3, r3
    553a:	e7c7      	b.n	54cc <_svfiprintf_r+0x120>
    553c:	2300      	movs	r3, #0
    553e:	0014      	movs	r4, r2
    5540:	200a      	movs	r0, #10
    5542:	001a      	movs	r2, r3
    5544:	606b      	str	r3, [r5, #4]
    5546:	7821      	ldrb	r1, [r4, #0]
    5548:	3930      	subs	r1, #48	; 0x30
    554a:	2909      	cmp	r1, #9
    554c:	d903      	bls.n	5556 <_svfiprintf_r+0x1aa>
    554e:	2b00      	cmp	r3, #0
    5550:	d0bd      	beq.n	54ce <_svfiprintf_r+0x122>
    5552:	9207      	str	r2, [sp, #28]
    5554:	e7bb      	b.n	54ce <_svfiprintf_r+0x122>
    5556:	4342      	muls	r2, r0
    5558:	3401      	adds	r4, #1
    555a:	1852      	adds	r2, r2, r1
    555c:	2301      	movs	r3, #1
    555e:	e7f2      	b.n	5546 <_svfiprintf_r+0x19a>
    5560:	3307      	adds	r3, #7
    5562:	e7d5      	b.n	5510 <_svfiprintf_r+0x164>
    5564:	ab05      	add	r3, sp, #20
    5566:	9300      	str	r3, [sp, #0]
    5568:	003a      	movs	r2, r7
    556a:	4b11      	ldr	r3, [pc, #68]	; (55b0 <_svfiprintf_r+0x204>)
    556c:	0029      	movs	r1, r5
    556e:	9802      	ldr	r0, [sp, #8]
    5570:	e000      	b.n	5574 <_svfiprintf_r+0x1c8>
    5572:	bf00      	nop
    5574:	9003      	str	r0, [sp, #12]
    5576:	9b03      	ldr	r3, [sp, #12]
    5578:	3301      	adds	r3, #1
    557a:	d1cc      	bne.n	5516 <_svfiprintf_r+0x16a>
    557c:	89bb      	ldrh	r3, [r7, #12]
    557e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5580:	065b      	lsls	r3, r3, #25
    5582:	d400      	bmi.n	5586 <_svfiprintf_r+0x1da>
    5584:	e729      	b.n	53da <_svfiprintf_r+0x2e>
    5586:	2001      	movs	r0, #1
    5588:	4240      	negs	r0, r0
    558a:	e726      	b.n	53da <_svfiprintf_r+0x2e>
    558c:	ab05      	add	r3, sp, #20
    558e:	9300      	str	r3, [sp, #0]
    5590:	003a      	movs	r2, r7
    5592:	4b07      	ldr	r3, [pc, #28]	; (55b0 <_svfiprintf_r+0x204>)
    5594:	0029      	movs	r1, r5
    5596:	9802      	ldr	r0, [sp, #8]
    5598:	f000 f87a 	bl	5690 <_printf_i>
    559c:	e7ea      	b.n	5574 <_svfiprintf_r+0x1c8>
    559e:	46c0      	nop			; (mov r8, r8)
    55a0:	00005bcc 	.word	0x00005bcc
    55a4:	00005bd2 	.word	0x00005bd2
    55a8:	00005bd6 	.word	0x00005bd6
    55ac:	00000000 	.word	0x00000000
    55b0:	000052e9 	.word	0x000052e9

000055b4 <_printf_common>:
    55b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    55b6:	0015      	movs	r5, r2
    55b8:	9301      	str	r3, [sp, #4]
    55ba:	688a      	ldr	r2, [r1, #8]
    55bc:	690b      	ldr	r3, [r1, #16]
    55be:	9000      	str	r0, [sp, #0]
    55c0:	000c      	movs	r4, r1
    55c2:	4293      	cmp	r3, r2
    55c4:	da00      	bge.n	55c8 <_printf_common+0x14>
    55c6:	0013      	movs	r3, r2
    55c8:	0022      	movs	r2, r4
    55ca:	602b      	str	r3, [r5, #0]
    55cc:	3243      	adds	r2, #67	; 0x43
    55ce:	7812      	ldrb	r2, [r2, #0]
    55d0:	2a00      	cmp	r2, #0
    55d2:	d001      	beq.n	55d8 <_printf_common+0x24>
    55d4:	3301      	adds	r3, #1
    55d6:	602b      	str	r3, [r5, #0]
    55d8:	6823      	ldr	r3, [r4, #0]
    55da:	069b      	lsls	r3, r3, #26
    55dc:	d502      	bpl.n	55e4 <_printf_common+0x30>
    55de:	682b      	ldr	r3, [r5, #0]
    55e0:	3302      	adds	r3, #2
    55e2:	602b      	str	r3, [r5, #0]
    55e4:	2706      	movs	r7, #6
    55e6:	6823      	ldr	r3, [r4, #0]
    55e8:	401f      	ands	r7, r3
    55ea:	d027      	beq.n	563c <_printf_common+0x88>
    55ec:	0023      	movs	r3, r4
    55ee:	3343      	adds	r3, #67	; 0x43
    55f0:	781b      	ldrb	r3, [r3, #0]
    55f2:	1e5a      	subs	r2, r3, #1
    55f4:	4193      	sbcs	r3, r2
    55f6:	6822      	ldr	r2, [r4, #0]
    55f8:	0692      	lsls	r2, r2, #26
    55fa:	d430      	bmi.n	565e <_printf_common+0xaa>
    55fc:	0022      	movs	r2, r4
    55fe:	9901      	ldr	r1, [sp, #4]
    5600:	3243      	adds	r2, #67	; 0x43
    5602:	9800      	ldr	r0, [sp, #0]
    5604:	9e08      	ldr	r6, [sp, #32]
    5606:	47b0      	blx	r6
    5608:	1c43      	adds	r3, r0, #1
    560a:	d025      	beq.n	5658 <_printf_common+0xa4>
    560c:	2306      	movs	r3, #6
    560e:	6820      	ldr	r0, [r4, #0]
    5610:	682a      	ldr	r2, [r5, #0]
    5612:	68e1      	ldr	r1, [r4, #12]
    5614:	4003      	ands	r3, r0
    5616:	2500      	movs	r5, #0
    5618:	2b04      	cmp	r3, #4
    561a:	d103      	bne.n	5624 <_printf_common+0x70>
    561c:	1a8d      	subs	r5, r1, r2
    561e:	43eb      	mvns	r3, r5
    5620:	17db      	asrs	r3, r3, #31
    5622:	401d      	ands	r5, r3
    5624:	68a3      	ldr	r3, [r4, #8]
    5626:	6922      	ldr	r2, [r4, #16]
    5628:	4293      	cmp	r3, r2
    562a:	dd01      	ble.n	5630 <_printf_common+0x7c>
    562c:	1a9b      	subs	r3, r3, r2
    562e:	18ed      	adds	r5, r5, r3
    5630:	2700      	movs	r7, #0
    5632:	42bd      	cmp	r5, r7
    5634:	d120      	bne.n	5678 <_printf_common+0xc4>
    5636:	2000      	movs	r0, #0
    5638:	e010      	b.n	565c <_printf_common+0xa8>
    563a:	3701      	adds	r7, #1
    563c:	68e3      	ldr	r3, [r4, #12]
    563e:	682a      	ldr	r2, [r5, #0]
    5640:	1a9b      	subs	r3, r3, r2
    5642:	429f      	cmp	r7, r3
    5644:	dad2      	bge.n	55ec <_printf_common+0x38>
    5646:	0022      	movs	r2, r4
    5648:	2301      	movs	r3, #1
    564a:	3219      	adds	r2, #25
    564c:	9901      	ldr	r1, [sp, #4]
    564e:	9800      	ldr	r0, [sp, #0]
    5650:	9e08      	ldr	r6, [sp, #32]
    5652:	47b0      	blx	r6
    5654:	1c43      	adds	r3, r0, #1
    5656:	d1f0      	bne.n	563a <_printf_common+0x86>
    5658:	2001      	movs	r0, #1
    565a:	4240      	negs	r0, r0
    565c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    565e:	2030      	movs	r0, #48	; 0x30
    5660:	18e1      	adds	r1, r4, r3
    5662:	3143      	adds	r1, #67	; 0x43
    5664:	7008      	strb	r0, [r1, #0]
    5666:	0021      	movs	r1, r4
    5668:	1c5a      	adds	r2, r3, #1
    566a:	3145      	adds	r1, #69	; 0x45
    566c:	7809      	ldrb	r1, [r1, #0]
    566e:	18a2      	adds	r2, r4, r2
    5670:	3243      	adds	r2, #67	; 0x43
    5672:	3302      	adds	r3, #2
    5674:	7011      	strb	r1, [r2, #0]
    5676:	e7c1      	b.n	55fc <_printf_common+0x48>
    5678:	0022      	movs	r2, r4
    567a:	2301      	movs	r3, #1
    567c:	321a      	adds	r2, #26
    567e:	9901      	ldr	r1, [sp, #4]
    5680:	9800      	ldr	r0, [sp, #0]
    5682:	9e08      	ldr	r6, [sp, #32]
    5684:	47b0      	blx	r6
    5686:	1c43      	adds	r3, r0, #1
    5688:	d0e6      	beq.n	5658 <_printf_common+0xa4>
    568a:	3701      	adds	r7, #1
    568c:	e7d1      	b.n	5632 <_printf_common+0x7e>
	...

00005690 <_printf_i>:
    5690:	b5f0      	push	{r4, r5, r6, r7, lr}
    5692:	b08b      	sub	sp, #44	; 0x2c
    5694:	9206      	str	r2, [sp, #24]
    5696:	000a      	movs	r2, r1
    5698:	3243      	adds	r2, #67	; 0x43
    569a:	9307      	str	r3, [sp, #28]
    569c:	9005      	str	r0, [sp, #20]
    569e:	9204      	str	r2, [sp, #16]
    56a0:	7e0a      	ldrb	r2, [r1, #24]
    56a2:	000c      	movs	r4, r1
    56a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    56a6:	2a6e      	cmp	r2, #110	; 0x6e
    56a8:	d100      	bne.n	56ac <_printf_i+0x1c>
    56aa:	e08f      	b.n	57cc <_printf_i+0x13c>
    56ac:	d817      	bhi.n	56de <_printf_i+0x4e>
    56ae:	2a63      	cmp	r2, #99	; 0x63
    56b0:	d02c      	beq.n	570c <_printf_i+0x7c>
    56b2:	d808      	bhi.n	56c6 <_printf_i+0x36>
    56b4:	2a00      	cmp	r2, #0
    56b6:	d100      	bne.n	56ba <_printf_i+0x2a>
    56b8:	e099      	b.n	57ee <_printf_i+0x15e>
    56ba:	2a58      	cmp	r2, #88	; 0x58
    56bc:	d054      	beq.n	5768 <_printf_i+0xd8>
    56be:	0026      	movs	r6, r4
    56c0:	3642      	adds	r6, #66	; 0x42
    56c2:	7032      	strb	r2, [r6, #0]
    56c4:	e029      	b.n	571a <_printf_i+0x8a>
    56c6:	2a64      	cmp	r2, #100	; 0x64
    56c8:	d001      	beq.n	56ce <_printf_i+0x3e>
    56ca:	2a69      	cmp	r2, #105	; 0x69
    56cc:	d1f7      	bne.n	56be <_printf_i+0x2e>
    56ce:	6821      	ldr	r1, [r4, #0]
    56d0:	681a      	ldr	r2, [r3, #0]
    56d2:	0608      	lsls	r0, r1, #24
    56d4:	d523      	bpl.n	571e <_printf_i+0x8e>
    56d6:	1d11      	adds	r1, r2, #4
    56d8:	6019      	str	r1, [r3, #0]
    56da:	6815      	ldr	r5, [r2, #0]
    56dc:	e025      	b.n	572a <_printf_i+0x9a>
    56de:	2a73      	cmp	r2, #115	; 0x73
    56e0:	d100      	bne.n	56e4 <_printf_i+0x54>
    56e2:	e088      	b.n	57f6 <_printf_i+0x166>
    56e4:	d808      	bhi.n	56f8 <_printf_i+0x68>
    56e6:	2a6f      	cmp	r2, #111	; 0x6f
    56e8:	d029      	beq.n	573e <_printf_i+0xae>
    56ea:	2a70      	cmp	r2, #112	; 0x70
    56ec:	d1e7      	bne.n	56be <_printf_i+0x2e>
    56ee:	2220      	movs	r2, #32
    56f0:	6809      	ldr	r1, [r1, #0]
    56f2:	430a      	orrs	r2, r1
    56f4:	6022      	str	r2, [r4, #0]
    56f6:	e003      	b.n	5700 <_printf_i+0x70>
    56f8:	2a75      	cmp	r2, #117	; 0x75
    56fa:	d020      	beq.n	573e <_printf_i+0xae>
    56fc:	2a78      	cmp	r2, #120	; 0x78
    56fe:	d1de      	bne.n	56be <_printf_i+0x2e>
    5700:	0022      	movs	r2, r4
    5702:	2178      	movs	r1, #120	; 0x78
    5704:	3245      	adds	r2, #69	; 0x45
    5706:	7011      	strb	r1, [r2, #0]
    5708:	4a6c      	ldr	r2, [pc, #432]	; (58bc <_printf_i+0x22c>)
    570a:	e030      	b.n	576e <_printf_i+0xde>
    570c:	000e      	movs	r6, r1
    570e:	681a      	ldr	r2, [r3, #0]
    5710:	3642      	adds	r6, #66	; 0x42
    5712:	1d11      	adds	r1, r2, #4
    5714:	6019      	str	r1, [r3, #0]
    5716:	6813      	ldr	r3, [r2, #0]
    5718:	7033      	strb	r3, [r6, #0]
    571a:	2301      	movs	r3, #1
    571c:	e079      	b.n	5812 <_printf_i+0x182>
    571e:	0649      	lsls	r1, r1, #25
    5720:	d5d9      	bpl.n	56d6 <_printf_i+0x46>
    5722:	1d11      	adds	r1, r2, #4
    5724:	6019      	str	r1, [r3, #0]
    5726:	2300      	movs	r3, #0
    5728:	5ed5      	ldrsh	r5, [r2, r3]
    572a:	2d00      	cmp	r5, #0
    572c:	da03      	bge.n	5736 <_printf_i+0xa6>
    572e:	232d      	movs	r3, #45	; 0x2d
    5730:	9a04      	ldr	r2, [sp, #16]
    5732:	426d      	negs	r5, r5
    5734:	7013      	strb	r3, [r2, #0]
    5736:	4b62      	ldr	r3, [pc, #392]	; (58c0 <_printf_i+0x230>)
    5738:	270a      	movs	r7, #10
    573a:	9303      	str	r3, [sp, #12]
    573c:	e02f      	b.n	579e <_printf_i+0x10e>
    573e:	6820      	ldr	r0, [r4, #0]
    5740:	6819      	ldr	r1, [r3, #0]
    5742:	0605      	lsls	r5, r0, #24
    5744:	d503      	bpl.n	574e <_printf_i+0xbe>
    5746:	1d08      	adds	r0, r1, #4
    5748:	6018      	str	r0, [r3, #0]
    574a:	680d      	ldr	r5, [r1, #0]
    574c:	e005      	b.n	575a <_printf_i+0xca>
    574e:	0640      	lsls	r0, r0, #25
    5750:	d5f9      	bpl.n	5746 <_printf_i+0xb6>
    5752:	680d      	ldr	r5, [r1, #0]
    5754:	1d08      	adds	r0, r1, #4
    5756:	6018      	str	r0, [r3, #0]
    5758:	b2ad      	uxth	r5, r5
    575a:	4b59      	ldr	r3, [pc, #356]	; (58c0 <_printf_i+0x230>)
    575c:	2708      	movs	r7, #8
    575e:	9303      	str	r3, [sp, #12]
    5760:	2a6f      	cmp	r2, #111	; 0x6f
    5762:	d018      	beq.n	5796 <_printf_i+0x106>
    5764:	270a      	movs	r7, #10
    5766:	e016      	b.n	5796 <_printf_i+0x106>
    5768:	3145      	adds	r1, #69	; 0x45
    576a:	700a      	strb	r2, [r1, #0]
    576c:	4a54      	ldr	r2, [pc, #336]	; (58c0 <_printf_i+0x230>)
    576e:	9203      	str	r2, [sp, #12]
    5770:	681a      	ldr	r2, [r3, #0]
    5772:	6821      	ldr	r1, [r4, #0]
    5774:	1d10      	adds	r0, r2, #4
    5776:	6018      	str	r0, [r3, #0]
    5778:	6815      	ldr	r5, [r2, #0]
    577a:	0608      	lsls	r0, r1, #24
    577c:	d522      	bpl.n	57c4 <_printf_i+0x134>
    577e:	07cb      	lsls	r3, r1, #31
    5780:	d502      	bpl.n	5788 <_printf_i+0xf8>
    5782:	2320      	movs	r3, #32
    5784:	4319      	orrs	r1, r3
    5786:	6021      	str	r1, [r4, #0]
    5788:	2710      	movs	r7, #16
    578a:	2d00      	cmp	r5, #0
    578c:	d103      	bne.n	5796 <_printf_i+0x106>
    578e:	2320      	movs	r3, #32
    5790:	6822      	ldr	r2, [r4, #0]
    5792:	439a      	bics	r2, r3
    5794:	6022      	str	r2, [r4, #0]
    5796:	0023      	movs	r3, r4
    5798:	2200      	movs	r2, #0
    579a:	3343      	adds	r3, #67	; 0x43
    579c:	701a      	strb	r2, [r3, #0]
    579e:	6863      	ldr	r3, [r4, #4]
    57a0:	60a3      	str	r3, [r4, #8]
    57a2:	2b00      	cmp	r3, #0
    57a4:	db5c      	blt.n	5860 <_printf_i+0x1d0>
    57a6:	2204      	movs	r2, #4
    57a8:	6821      	ldr	r1, [r4, #0]
    57aa:	4391      	bics	r1, r2
    57ac:	6021      	str	r1, [r4, #0]
    57ae:	2d00      	cmp	r5, #0
    57b0:	d158      	bne.n	5864 <_printf_i+0x1d4>
    57b2:	9e04      	ldr	r6, [sp, #16]
    57b4:	2b00      	cmp	r3, #0
    57b6:	d064      	beq.n	5882 <_printf_i+0x1f2>
    57b8:	0026      	movs	r6, r4
    57ba:	9b03      	ldr	r3, [sp, #12]
    57bc:	3642      	adds	r6, #66	; 0x42
    57be:	781b      	ldrb	r3, [r3, #0]
    57c0:	7033      	strb	r3, [r6, #0]
    57c2:	e05e      	b.n	5882 <_printf_i+0x1f2>
    57c4:	0648      	lsls	r0, r1, #25
    57c6:	d5da      	bpl.n	577e <_printf_i+0xee>
    57c8:	b2ad      	uxth	r5, r5
    57ca:	e7d8      	b.n	577e <_printf_i+0xee>
    57cc:	6809      	ldr	r1, [r1, #0]
    57ce:	681a      	ldr	r2, [r3, #0]
    57d0:	0608      	lsls	r0, r1, #24
    57d2:	d505      	bpl.n	57e0 <_printf_i+0x150>
    57d4:	1d11      	adds	r1, r2, #4
    57d6:	6019      	str	r1, [r3, #0]
    57d8:	6813      	ldr	r3, [r2, #0]
    57da:	6962      	ldr	r2, [r4, #20]
    57dc:	601a      	str	r2, [r3, #0]
    57de:	e006      	b.n	57ee <_printf_i+0x15e>
    57e0:	0649      	lsls	r1, r1, #25
    57e2:	d5f7      	bpl.n	57d4 <_printf_i+0x144>
    57e4:	1d11      	adds	r1, r2, #4
    57e6:	6019      	str	r1, [r3, #0]
    57e8:	6813      	ldr	r3, [r2, #0]
    57ea:	8aa2      	ldrh	r2, [r4, #20]
    57ec:	801a      	strh	r2, [r3, #0]
    57ee:	2300      	movs	r3, #0
    57f0:	9e04      	ldr	r6, [sp, #16]
    57f2:	6123      	str	r3, [r4, #16]
    57f4:	e054      	b.n	58a0 <_printf_i+0x210>
    57f6:	681a      	ldr	r2, [r3, #0]
    57f8:	1d11      	adds	r1, r2, #4
    57fa:	6019      	str	r1, [r3, #0]
    57fc:	6816      	ldr	r6, [r2, #0]
    57fe:	2100      	movs	r1, #0
    5800:	6862      	ldr	r2, [r4, #4]
    5802:	0030      	movs	r0, r6
    5804:	f000 f85e 	bl	58c4 <memchr>
    5808:	2800      	cmp	r0, #0
    580a:	d001      	beq.n	5810 <_printf_i+0x180>
    580c:	1b80      	subs	r0, r0, r6
    580e:	6060      	str	r0, [r4, #4]
    5810:	6863      	ldr	r3, [r4, #4]
    5812:	6123      	str	r3, [r4, #16]
    5814:	2300      	movs	r3, #0
    5816:	9a04      	ldr	r2, [sp, #16]
    5818:	7013      	strb	r3, [r2, #0]
    581a:	e041      	b.n	58a0 <_printf_i+0x210>
    581c:	6923      	ldr	r3, [r4, #16]
    581e:	0032      	movs	r2, r6
    5820:	9906      	ldr	r1, [sp, #24]
    5822:	9805      	ldr	r0, [sp, #20]
    5824:	9d07      	ldr	r5, [sp, #28]
    5826:	47a8      	blx	r5
    5828:	1c43      	adds	r3, r0, #1
    582a:	d043      	beq.n	58b4 <_printf_i+0x224>
    582c:	6823      	ldr	r3, [r4, #0]
    582e:	2500      	movs	r5, #0
    5830:	079b      	lsls	r3, r3, #30
    5832:	d40f      	bmi.n	5854 <_printf_i+0x1c4>
    5834:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5836:	68e0      	ldr	r0, [r4, #12]
    5838:	4298      	cmp	r0, r3
    583a:	da3d      	bge.n	58b8 <_printf_i+0x228>
    583c:	0018      	movs	r0, r3
    583e:	e03b      	b.n	58b8 <_printf_i+0x228>
    5840:	0022      	movs	r2, r4
    5842:	2301      	movs	r3, #1
    5844:	3219      	adds	r2, #25
    5846:	9906      	ldr	r1, [sp, #24]
    5848:	9805      	ldr	r0, [sp, #20]
    584a:	9e07      	ldr	r6, [sp, #28]
    584c:	47b0      	blx	r6
    584e:	1c43      	adds	r3, r0, #1
    5850:	d030      	beq.n	58b4 <_printf_i+0x224>
    5852:	3501      	adds	r5, #1
    5854:	68e3      	ldr	r3, [r4, #12]
    5856:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5858:	1a9b      	subs	r3, r3, r2
    585a:	429d      	cmp	r5, r3
    585c:	dbf0      	blt.n	5840 <_printf_i+0x1b0>
    585e:	e7e9      	b.n	5834 <_printf_i+0x1a4>
    5860:	2d00      	cmp	r5, #0
    5862:	d0a9      	beq.n	57b8 <_printf_i+0x128>
    5864:	9e04      	ldr	r6, [sp, #16]
    5866:	0028      	movs	r0, r5
    5868:	0039      	movs	r1, r7
    586a:	f7fd ff67 	bl	373c <__aeabi_uidivmod>
    586e:	9b03      	ldr	r3, [sp, #12]
    5870:	3e01      	subs	r6, #1
    5872:	5c5b      	ldrb	r3, [r3, r1]
    5874:	0028      	movs	r0, r5
    5876:	7033      	strb	r3, [r6, #0]
    5878:	0039      	movs	r1, r7
    587a:	f7fd fed9 	bl	3630 <__udivsi3>
    587e:	1e05      	subs	r5, r0, #0
    5880:	d1f1      	bne.n	5866 <_printf_i+0x1d6>
    5882:	2f08      	cmp	r7, #8
    5884:	d109      	bne.n	589a <_printf_i+0x20a>
    5886:	6823      	ldr	r3, [r4, #0]
    5888:	07db      	lsls	r3, r3, #31
    588a:	d506      	bpl.n	589a <_printf_i+0x20a>
    588c:	6863      	ldr	r3, [r4, #4]
    588e:	6922      	ldr	r2, [r4, #16]
    5890:	4293      	cmp	r3, r2
    5892:	dc02      	bgt.n	589a <_printf_i+0x20a>
    5894:	2330      	movs	r3, #48	; 0x30
    5896:	3e01      	subs	r6, #1
    5898:	7033      	strb	r3, [r6, #0]
    589a:	9b04      	ldr	r3, [sp, #16]
    589c:	1b9b      	subs	r3, r3, r6
    589e:	6123      	str	r3, [r4, #16]
    58a0:	9b07      	ldr	r3, [sp, #28]
    58a2:	aa09      	add	r2, sp, #36	; 0x24
    58a4:	9300      	str	r3, [sp, #0]
    58a6:	0021      	movs	r1, r4
    58a8:	9b06      	ldr	r3, [sp, #24]
    58aa:	9805      	ldr	r0, [sp, #20]
    58ac:	f7ff fe82 	bl	55b4 <_printf_common>
    58b0:	1c43      	adds	r3, r0, #1
    58b2:	d1b3      	bne.n	581c <_printf_i+0x18c>
    58b4:	2001      	movs	r0, #1
    58b6:	4240      	negs	r0, r0
    58b8:	b00b      	add	sp, #44	; 0x2c
    58ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58bc:	00005bee 	.word	0x00005bee
    58c0:	00005bdd 	.word	0x00005bdd

000058c4 <memchr>:
    58c4:	b2c9      	uxtb	r1, r1
    58c6:	1882      	adds	r2, r0, r2
    58c8:	4290      	cmp	r0, r2
    58ca:	d101      	bne.n	58d0 <memchr+0xc>
    58cc:	2000      	movs	r0, #0
    58ce:	4770      	bx	lr
    58d0:	7803      	ldrb	r3, [r0, #0]
    58d2:	428b      	cmp	r3, r1
    58d4:	d0fb      	beq.n	58ce <memchr+0xa>
    58d6:	3001      	adds	r0, #1
    58d8:	e7f6      	b.n	58c8 <memchr+0x4>

000058da <memmove>:
    58da:	b510      	push	{r4, lr}
    58dc:	4288      	cmp	r0, r1
    58de:	d902      	bls.n	58e6 <memmove+0xc>
    58e0:	188b      	adds	r3, r1, r2
    58e2:	4298      	cmp	r0, r3
    58e4:	d308      	bcc.n	58f8 <memmove+0x1e>
    58e6:	2300      	movs	r3, #0
    58e8:	429a      	cmp	r2, r3
    58ea:	d007      	beq.n	58fc <memmove+0x22>
    58ec:	5ccc      	ldrb	r4, [r1, r3]
    58ee:	54c4      	strb	r4, [r0, r3]
    58f0:	3301      	adds	r3, #1
    58f2:	e7f9      	b.n	58e8 <memmove+0xe>
    58f4:	5c8b      	ldrb	r3, [r1, r2]
    58f6:	5483      	strb	r3, [r0, r2]
    58f8:	3a01      	subs	r2, #1
    58fa:	d2fb      	bcs.n	58f4 <memmove+0x1a>
    58fc:	bd10      	pop	{r4, pc}

000058fe <_realloc_r>:
    58fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5900:	0007      	movs	r7, r0
    5902:	000d      	movs	r5, r1
    5904:	0016      	movs	r6, r2
    5906:	2900      	cmp	r1, #0
    5908:	d105      	bne.n	5916 <_realloc_r+0x18>
    590a:	0011      	movs	r1, r2
    590c:	f7ff fc48 	bl	51a0 <_malloc_r>
    5910:	0004      	movs	r4, r0
    5912:	0020      	movs	r0, r4
    5914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5916:	2a00      	cmp	r2, #0
    5918:	d103      	bne.n	5922 <_realloc_r+0x24>
    591a:	f7ff fbf7 	bl	510c <_free_r>
    591e:	0034      	movs	r4, r6
    5920:	e7f7      	b.n	5912 <_realloc_r+0x14>
    5922:	f000 f812 	bl	594a <_malloc_usable_size_r>
    5926:	002c      	movs	r4, r5
    5928:	4286      	cmp	r6, r0
    592a:	d9f2      	bls.n	5912 <_realloc_r+0x14>
    592c:	0031      	movs	r1, r6
    592e:	0038      	movs	r0, r7
    5930:	f7ff fc36 	bl	51a0 <_malloc_r>
    5934:	1e04      	subs	r4, r0, #0
    5936:	d0ec      	beq.n	5912 <_realloc_r+0x14>
    5938:	0029      	movs	r1, r5
    593a:	0032      	movs	r2, r6
    593c:	f7ff fbd4 	bl	50e8 <memcpy>
    5940:	0029      	movs	r1, r5
    5942:	0038      	movs	r0, r7
    5944:	f7ff fbe2 	bl	510c <_free_r>
    5948:	e7e3      	b.n	5912 <_realloc_r+0x14>

0000594a <_malloc_usable_size_r>:
    594a:	1f0b      	subs	r3, r1, #4
    594c:	681b      	ldr	r3, [r3, #0]
    594e:	1f18      	subs	r0, r3, #4
    5950:	2b00      	cmp	r3, #0
    5952:	da01      	bge.n	5958 <_malloc_usable_size_r+0xe>
    5954:	580b      	ldr	r3, [r1, r0]
    5956:	18c0      	adds	r0, r0, r3
    5958:	4770      	bx	lr
    595a:	0000      	movs	r0, r0
    595c:	00000000 	.word	0x00000000
    5960:	00000040 	.word	0x00000040
    5964:	00000014 	.word	0x00000014
    5968:	00000054 	.word	0x00000054
    596c:	00000598 	.word	0x00000598
    5970:	000005aa 	.word	0x000005aa
    5974:	000005dc 	.word	0x000005dc
    5978:	0000060c 	.word	0x0000060c
    597c:	0000062c 	.word	0x0000062c
    5980:	0000065c 	.word	0x0000065c
    5984:	42000400 	.word	0x42000400
    5988:	42000800 	.word	0x42000800
    598c:	42000c00 	.word	0x42000c00
    5990:	42001000 	.word	0x42001000
    5994:	42001400 	.word	0x42001400
    5998:	42001800 	.word	0x42001800

0000599c <_tcc_apbcmasks>:
    599c:	00000200 00000400 00000800              ............

000059a8 <_tcc_cc_nums>:
    59a8:	00020204                                ....

000059ac <_tcc_gclk_ids>:
    59ac:	001d1c1c                                ....

000059b0 <_tcc_maxs>:
    59b0:	00ffffff 00ffffff 0000ffff              ............

000059bc <_tcc_ow_nums>:
    59bc:	00020408                                ....

000059c0 <_tcc_intflag>:
    59c0:	00000001 00000002 00000004 00000008     ................
    59d0:	00001000 00002000 00004000 00008000     ..... ...@......
    59e0:	00010000 00020000 00040000 00080000     ................

000059f0 <tcc_interrupt_vectors.14047>:
    59f0:	00131211 00001d82 00001dbc 00001dcc     ................
    5a00:	00001dea 00001ddc 756c3325 3330252e     ........%3lu.%03
    5a10:	0000756c 20202020 20202020 00000020     lu..         ...
    5a20:	20202020 00000000 00643625 756c3625         ....%6d.%6lu
    5a30:	00000000 20202020 00202020 4f525245     ....       .ERRO
    5a40:	00393952 73256325 73257325 00000000     R99.%c%s%s%s....
    5a50:	73257325 00007325 000026c6 000026c2     %s%s%s...&...&..
    5a60:	000026c2 000026f4 000026f4 000026de     .&...&...&...&..
    5a70:	000026cc 000026e4 20001e1c 20001e00     .&...&..... ... 
    5a80:	20001de8 20001dd0 20001d94 200000e4     ... ... ... ... 
    5a90:	2000034c 200005b4 2000081c 20000a84     L.. ... ... ... 
    5aa0:	54544553 53474e49 00000000 4e414843     SETTINGS....CHAN
    5ab0:	204c454e 00000031 4e414843 204c454e     NEL 1...CHANNEL 
    5ac0:	00000032 4e414843 204c454e 00000033     2...CHANNEL 3...
    5ad0:	4e414843 204c454e 00000034 4e414843     CHANNEL 4...CHAN
    5ae0:	204c454e 00000035 544e4f43 54534152     NEL 5...CONTRAST
    5af0:	00000000 47495242 454e5448 00000053     ....BRIGHTNES...
    5b00:	45444f4d 00000000 4b434142 00000000     MODE....BACK....
    5b10:	25584d44 00000064 25584d44 64252d64     DMX%d...DMX%d-%d
    5b20:	00000000 54415453 435f4349 00000048     ....STATIC_CH...
    5b30:	20584d44 20204843 00000020 4556454c     DMX CH   ...LEVE
    5b40:	2020204c 00000020 736d2020 00000000     L    ...  ms....
    5b50:	41545441 20204b43 00000020 41434544     ATTACK   ...DECA
    5b60:	20202059 00000020 54535553 204e4941     Y    ...SUSTAIN 
    5b70:	00000020 454c4552 20455341 00000020      ...RELEASE  ...
    5b80:	4b434142 20202020 00000020 00003c7c     BACK     ...|<..
    5b90:	00003bcc 00003bcc 00003bca 00003c6e     .;...;...;..n<..
    5ba0:	00003c6e 00003c64 00003bca 00003c6e     n<..d<...;..n<..
    5bb0:	00003c64 00003c6e 00003bca 00003c74     d<..n<...;..t<..
    5bc0:	00003c74 00003c74 00003d04 2b302d23     t<..t<...=..#-0+
    5bd0:	6c680020 6665004c 47464567 32313000      .hlL.efgEFG.012
    5be0:	36353433 41393837 45444342 31300046     3456789ABCDEF.01
    5bf0:	35343332 39383736 64636261 00006665     23456789abcdef..

00005c00 <_init>:
    5c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c02:	46c0      	nop			; (mov r8, r8)
    5c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5c06:	bc08      	pop	{r3}
    5c08:	469e      	mov	lr, r3
    5c0a:	4770      	bx	lr

00005c0c <__init_array_start>:
    5c0c:	000000e5 	.word	0x000000e5

00005c10 <_fini>:
    5c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c12:	46c0      	nop			; (mov r8, r8)
    5c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5c16:	bc08      	pop	{r3}
    5c18:	469e      	mov	lr, r3
    5c1a:	4770      	bx	lr

00005c1c <__fini_array_start>:
    5c1c:	000000bd 	.word	0x000000bd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
    UNUSED(n);

    __asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
        "SUB r0, r0, #1 \n"
#endif
        "CMP r0, #0  \n"
        "BNE loop         "
    );
}
2000000a:	4770      	bx	lr

2000000c <cycles_per_ms>:
2000000c:	1f40 0000                                   @...

20000010 <cycles_per_us>:
20000010:	0008 0000                                   ....

20000014 <g_interrupt_enabled>:
20000014:	0101                                             .

20000015 <key_pressed>:
20000015:	0001 ec00                                        ...

20000018 <selected_menu>:
20000018:	0cec 2000                                   ... 

2000001c <_impure_ptr>:
2000001c:	0020 2000                                    .. 

20000020 <impure_data>:
	...
