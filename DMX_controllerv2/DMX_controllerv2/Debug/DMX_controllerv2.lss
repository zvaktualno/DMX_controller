
DMX_controllerv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008a8c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00008a8c  00008a8c  00018a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000088  20000000  00008a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000022d8  20000088  00008b1c  00020088  2**2
                  ALLOC
  4 .stack        00002000  20002360  0000adf4  00020088  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  7 .debug_info   0006bce9  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000087ba  00000000  00000000  0008bdf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000cd5e  00000000  00000000  000945ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000df8  00000000  00000000  000a130a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001158  00000000  00000000  000a2102  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00029074  00000000  00000000  000a325a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001fd4e  00000000  00000000  000cc2ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a62a3  00000000  00000000  000ec01c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000286c  00000000  00000000  001922c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 43 00 20 89 49 00 00 35 4a 00 00 39 4a 00 00     `C. .I..5J..9J..
	...
      2c:	3d 4a 00 00 00 00 00 00 00 00 00 00 41 4a 00 00     =J..........AJ..
      3c:	45 4a 00 00 85 49 00 00 85 49 00 00 85 49 00 00     EJ...I...I...I..
      4c:	59 12 00 00 85 49 00 00 85 49 00 00 85 49 00 00     Y....I...I...I..
      5c:	85 49 00 00 85 49 00 00 e5 30 00 00 f5 30 00 00     .I...I...0...0..
      6c:	05 31 00 00 15 31 00 00 25 31 00 00 35 31 00 00     .1...1..%1..51..
      7c:	85 49 00 00 85 49 00 00 0d 2a 00 00 1d 2a 00 00     .I...I...*...*..
      8c:	2d 2a 00 00 b9 06 00 00 c9 06 00 00 d9 06 00 00     -*..............
      9c:	e9 06 00 00 f9 06 00 00 d9 11 00 00 e9 11 00 00     ................
      ac:	cd 31 00 00 e5 1f 00 00 85 49 00 00 85 49 00 00     .1.......I...I..

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000088 	.word	0x20000088
      dc:	00000000 	.word	0x00000000
      e0:	00008a94 	.word	0x00008a94

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	2000008c 	.word	0x2000008c
     110:	00008a94 	.word	0x00008a94
     114:	00008a94 	.word	0x00008a94
     118:	00000000 	.word	0x00000000

0000011c <lcd_pulseEnable>:
    port_pin_set_output_level(PIN_LCD_D7, (value >> 7) & 0x01);
    lcd_pulseEnable();
}

void lcd_pulseEnable(void)
{
     11c:	b5f0      	push	{r4, r5, r6, r7, lr}
     11e:	46d6      	mov	lr, sl
     120:	464f      	mov	r7, r9
     122:	4646      	mov	r6, r8
     124:	b5c0      	push	{r6, r7, lr}
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     126:	2680      	movs	r6, #128	; 0x80
     128:	2382      	movs	r3, #130	; 0x82
     12a:	05db      	lsls	r3, r3, #23
     12c:	4698      	mov	r8, r3
     12e:	44b0      	add	r8, r6
     130:	4643      	mov	r3, r8
     132:	619e      	str	r6, [r3, #24]
    port_pin_set_output_level(PIN_LCD_EN, 1);
    delay_us(1);
     134:	2000      	movs	r0, #0
     136:	4f13      	ldr	r7, [pc, #76]	; (184 <lcd_pulseEnable+0x68>)
     138:	47b8      	blx	r7
     13a:	0002      	movs	r2, r0
     13c:	2300      	movs	r3, #0
     13e:	4c12      	ldr	r4, [pc, #72]	; (188 <lcd_pulseEnable+0x6c>)
     140:	2500      	movs	r5, #0
     142:	1912      	adds	r2, r2, r4
     144:	416b      	adcs	r3, r5
     146:	0010      	movs	r0, r2
     148:	0019      	movs	r1, r3
     14a:	4b10      	ldr	r3, [pc, #64]	; (18c <lcd_pulseEnable+0x70>)
     14c:	4699      	mov	r9, r3
     14e:	4a10      	ldr	r2, [pc, #64]	; (190 <lcd_pulseEnable+0x74>)
     150:	2300      	movs	r3, #0
     152:	47c8      	blx	r9
     154:	4b0f      	ldr	r3, [pc, #60]	; (194 <lcd_pulseEnable+0x78>)
     156:	469a      	mov	sl, r3
     158:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
     15a:	4643      	mov	r3, r8
     15c:	615e      	str	r6, [r3, #20]
    port_pin_set_output_level(PIN_LCD_EN, 0);
    delay_us(50);
     15e:	2000      	movs	r0, #0
     160:	47b8      	blx	r7
     162:	2232      	movs	r2, #50	; 0x32
     164:	2300      	movs	r3, #0
     166:	2100      	movs	r1, #0
     168:	4e0b      	ldr	r6, [pc, #44]	; (198 <lcd_pulseEnable+0x7c>)
     16a:	47b0      	blx	r6
     16c:	1900      	adds	r0, r0, r4
     16e:	4169      	adcs	r1, r5
     170:	4a07      	ldr	r2, [pc, #28]	; (190 <lcd_pulseEnable+0x74>)
     172:	2300      	movs	r3, #0
     174:	47c8      	blx	r9
     176:	47d0      	blx	sl
}
     178:	bc1c      	pop	{r2, r3, r4}
     17a:	4690      	mov	r8, r2
     17c:	4699      	mov	r9, r3
     17e:	46a2      	mov	sl, r4
     180:	bdf0      	pop	{r4, r5, r6, r7, pc}
     182:	46c0      	nop			; (mov r8, r8)
     184:	00004751 	.word	0x00004751
     188:	006acfbf 	.word	0x006acfbf
     18c:	000057a1 	.word	0x000057a1
     190:	006acfc0 	.word	0x006acfc0
     194:	20000001 	.word	0x20000001
     198:	000057e1 	.word	0x000057e1

0000019c <lcd_write8bits>:
{
     19c:	b510      	push	{r4, lr}
	if (level) {
     19e:	07c3      	lsls	r3, r0, #31
     1a0:	d529      	bpl.n	1f6 <lcd_write8bits+0x5a>
		port_base->OUTSET.reg = pin_mask;
     1a2:	2240      	movs	r2, #64	; 0x40
     1a4:	4b24      	ldr	r3, [pc, #144]	; (238 <lcd_write8bits+0x9c>)
     1a6:	619a      	str	r2, [r3, #24]
	if (level) {
     1a8:	0783      	lsls	r3, r0, #30
     1aa:	d528      	bpl.n	1fe <lcd_write8bits+0x62>
		port_base->OUTSET.reg = pin_mask;
     1ac:	2220      	movs	r2, #32
     1ae:	4b22      	ldr	r3, [pc, #136]	; (238 <lcd_write8bits+0x9c>)
     1b0:	619a      	str	r2, [r3, #24]
	if (level) {
     1b2:	0743      	lsls	r3, r0, #29
     1b4:	d527      	bpl.n	206 <lcd_write8bits+0x6a>
		port_base->OUTSET.reg = pin_mask;
     1b6:	2210      	movs	r2, #16
     1b8:	4b1f      	ldr	r3, [pc, #124]	; (238 <lcd_write8bits+0x9c>)
     1ba:	619a      	str	r2, [r3, #24]
	if (level) {
     1bc:	0703      	lsls	r3, r0, #28
     1be:	d526      	bpl.n	20e <lcd_write8bits+0x72>
		port_base->OUTSET.reg = pin_mask;
     1c0:	2208      	movs	r2, #8
     1c2:	4b1d      	ldr	r3, [pc, #116]	; (238 <lcd_write8bits+0x9c>)
     1c4:	619a      	str	r2, [r3, #24]
	if (level) {
     1c6:	06c3      	lsls	r3, r0, #27
     1c8:	d525      	bpl.n	216 <lcd_write8bits+0x7a>
		port_base->OUTSET.reg = pin_mask;
     1ca:	2204      	movs	r2, #4
     1cc:	4b1a      	ldr	r3, [pc, #104]	; (238 <lcd_write8bits+0x9c>)
     1ce:	619a      	str	r2, [r3, #24]
	if (level) {
     1d0:	0683      	lsls	r3, r0, #26
     1d2:	d524      	bpl.n	21e <lcd_write8bits+0x82>
		port_base->OUTSET.reg = pin_mask;
     1d4:	2202      	movs	r2, #2
     1d6:	4b18      	ldr	r3, [pc, #96]	; (238 <lcd_write8bits+0x9c>)
     1d8:	619a      	str	r2, [r3, #24]
	if (level) {
     1da:	0643      	lsls	r3, r0, #25
     1dc:	d523      	bpl.n	226 <lcd_write8bits+0x8a>
		port_base->OUTSET.reg = pin_mask;
     1de:	2201      	movs	r2, #1
     1e0:	4b15      	ldr	r3, [pc, #84]	; (238 <lcd_write8bits+0x9c>)
     1e2:	619a      	str	r2, [r3, #24]
	if (level) {
     1e4:	09c0      	lsrs	r0, r0, #7
     1e6:	d122      	bne.n	22e <lcd_write8bits+0x92>
		port_base->OUTCLR.reg = pin_mask;
     1e8:	2280      	movs	r2, #128	; 0x80
     1ea:	0612      	lsls	r2, r2, #24
     1ec:	4b12      	ldr	r3, [pc, #72]	; (238 <lcd_write8bits+0x9c>)
     1ee:	615a      	str	r2, [r3, #20]
    lcd_pulseEnable();
     1f0:	4b12      	ldr	r3, [pc, #72]	; (23c <lcd_write8bits+0xa0>)
     1f2:	4798      	blx	r3
}
     1f4:	bd10      	pop	{r4, pc}
     1f6:	2240      	movs	r2, #64	; 0x40
     1f8:	4b0f      	ldr	r3, [pc, #60]	; (238 <lcd_write8bits+0x9c>)
     1fa:	615a      	str	r2, [r3, #20]
     1fc:	e7d4      	b.n	1a8 <lcd_write8bits+0xc>
     1fe:	2220      	movs	r2, #32
     200:	4b0d      	ldr	r3, [pc, #52]	; (238 <lcd_write8bits+0x9c>)
     202:	615a      	str	r2, [r3, #20]
     204:	e7d5      	b.n	1b2 <lcd_write8bits+0x16>
     206:	2210      	movs	r2, #16
     208:	4b0b      	ldr	r3, [pc, #44]	; (238 <lcd_write8bits+0x9c>)
     20a:	615a      	str	r2, [r3, #20]
     20c:	e7d6      	b.n	1bc <lcd_write8bits+0x20>
     20e:	2208      	movs	r2, #8
     210:	4b09      	ldr	r3, [pc, #36]	; (238 <lcd_write8bits+0x9c>)
     212:	615a      	str	r2, [r3, #20]
     214:	e7d7      	b.n	1c6 <lcd_write8bits+0x2a>
     216:	2204      	movs	r2, #4
     218:	4b07      	ldr	r3, [pc, #28]	; (238 <lcd_write8bits+0x9c>)
     21a:	615a      	str	r2, [r3, #20]
     21c:	e7d8      	b.n	1d0 <lcd_write8bits+0x34>
     21e:	2202      	movs	r2, #2
     220:	4b05      	ldr	r3, [pc, #20]	; (238 <lcd_write8bits+0x9c>)
     222:	615a      	str	r2, [r3, #20]
     224:	e7d9      	b.n	1da <lcd_write8bits+0x3e>
     226:	2201      	movs	r2, #1
     228:	4b03      	ldr	r3, [pc, #12]	; (238 <lcd_write8bits+0x9c>)
     22a:	615a      	str	r2, [r3, #20]
     22c:	e7da      	b.n	1e4 <lcd_write8bits+0x48>
		port_base->OUTSET.reg = pin_mask;
     22e:	2280      	movs	r2, #128	; 0x80
     230:	0612      	lsls	r2, r2, #24
     232:	4b01      	ldr	r3, [pc, #4]	; (238 <lcd_write8bits+0x9c>)
     234:	619a      	str	r2, [r3, #24]
     236:	e7db      	b.n	1f0 <lcd_write8bits+0x54>
     238:	41000080 	.word	0x41000080
     23c:	0000011d 	.word	0x0000011d

00000240 <lcd_send>:
{
     240:	b510      	push	{r4, lr}
	if (level) {
     242:	2900      	cmp	r1, #0
     244:	d118      	bne.n	278 <lcd_send+0x38>
		port_base->OUTCLR.reg = pin_mask;
     246:	2280      	movs	r2, #128	; 0x80
     248:	0092      	lsls	r2, r2, #2
     24a:	4b0e      	ldr	r3, [pc, #56]	; (284 <lcd_send+0x44>)
     24c:	615a      	str	r2, [r3, #20]
    lcd_write8bits(value);
     24e:	4b0e      	ldr	r3, [pc, #56]	; (288 <lcd_send+0x48>)
     250:	4798      	blx	r3
    delay_us(50);
     252:	2000      	movs	r0, #0
     254:	4b0d      	ldr	r3, [pc, #52]	; (28c <lcd_send+0x4c>)
     256:	4798      	blx	r3
     258:	2232      	movs	r2, #50	; 0x32
     25a:	2300      	movs	r3, #0
     25c:	2100      	movs	r1, #0
     25e:	4c0c      	ldr	r4, [pc, #48]	; (290 <lcd_send+0x50>)
     260:	47a0      	blx	r4
     262:	4a0c      	ldr	r2, [pc, #48]	; (294 <lcd_send+0x54>)
     264:	2300      	movs	r3, #0
     266:	1880      	adds	r0, r0, r2
     268:	4159      	adcs	r1, r3
     26a:	4a0b      	ldr	r2, [pc, #44]	; (298 <lcd_send+0x58>)
     26c:	2300      	movs	r3, #0
     26e:	4c0b      	ldr	r4, [pc, #44]	; (29c <lcd_send+0x5c>)
     270:	47a0      	blx	r4
     272:	4b0b      	ldr	r3, [pc, #44]	; (2a0 <lcd_send+0x60>)
     274:	4798      	blx	r3
}
     276:	bd10      	pop	{r4, pc}
		port_base->OUTSET.reg = pin_mask;
     278:	2280      	movs	r2, #128	; 0x80
     27a:	0092      	lsls	r2, r2, #2
     27c:	4b01      	ldr	r3, [pc, #4]	; (284 <lcd_send+0x44>)
     27e:	619a      	str	r2, [r3, #24]
     280:	e7e5      	b.n	24e <lcd_send+0xe>
     282:	46c0      	nop			; (mov r8, r8)
     284:	41000080 	.word	0x41000080
     288:	0000019d 	.word	0x0000019d
     28c:	00004751 	.word	0x00004751
     290:	000057e1 	.word	0x000057e1
     294:	006acfbf 	.word	0x006acfbf
     298:	006acfc0 	.word	0x006acfc0
     29c:	000057a1 	.word	0x000057a1
     2a0:	20000001 	.word	0x20000001

000002a4 <lcd_command>:
{
     2a4:	b510      	push	{r4, lr}
    lcd_send(value, 0);
     2a6:	2100      	movs	r1, #0
     2a8:	4b01      	ldr	r3, [pc, #4]	; (2b0 <lcd_command+0xc>)
     2aa:	4798      	blx	r3
}
     2ac:	bd10      	pop	{r4, pc}
     2ae:	46c0      	nop			; (mov r8, r8)
     2b0:	00000241 	.word	0x00000241

000002b4 <lcd_clear>:
{
     2b4:	b510      	push	{r4, lr}
    lcd_command(LCD_CLEARDISPLAY);
     2b6:	2001      	movs	r0, #1
     2b8:	4b0b      	ldr	r3, [pc, #44]	; (2e8 <lcd_clear+0x34>)
     2ba:	4798      	blx	r3
    delay_us(3);
     2bc:	2000      	movs	r0, #0
     2be:	4b0b      	ldr	r3, [pc, #44]	; (2ec <lcd_clear+0x38>)
     2c0:	4798      	blx	r3
     2c2:	0002      	movs	r2, r0
     2c4:	2300      	movs	r3, #0
     2c6:	0019      	movs	r1, r3
     2c8:	1880      	adds	r0, r0, r2
     2ca:	4159      	adcs	r1, r3
     2cc:	1880      	adds	r0, r0, r2
     2ce:	4159      	adcs	r1, r3
     2d0:	4a07      	ldr	r2, [pc, #28]	; (2f0 <lcd_clear+0x3c>)
     2d2:	2300      	movs	r3, #0
     2d4:	1880      	adds	r0, r0, r2
     2d6:	4159      	adcs	r1, r3
     2d8:	4a06      	ldr	r2, [pc, #24]	; (2f4 <lcd_clear+0x40>)
     2da:	2300      	movs	r3, #0
     2dc:	4c06      	ldr	r4, [pc, #24]	; (2f8 <lcd_clear+0x44>)
     2de:	47a0      	blx	r4
     2e0:	4b06      	ldr	r3, [pc, #24]	; (2fc <lcd_clear+0x48>)
     2e2:	4798      	blx	r3
}
     2e4:	bd10      	pop	{r4, pc}
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	000002a5 	.word	0x000002a5
     2ec:	00004751 	.word	0x00004751
     2f0:	006acfbf 	.word	0x006acfbf
     2f4:	006acfc0 	.word	0x006acfc0
     2f8:	000057a1 	.word	0x000057a1
     2fc:	20000001 	.word	0x20000001

00000300 <lcd_home>:
{
     300:	b510      	push	{r4, lr}
    lcd_command(LCD_RETURNHOME);
     302:	2002      	movs	r0, #2
     304:	4b0b      	ldr	r3, [pc, #44]	; (334 <lcd_home+0x34>)
     306:	4798      	blx	r3
    delay_us(3);
     308:	2000      	movs	r0, #0
     30a:	4b0b      	ldr	r3, [pc, #44]	; (338 <lcd_home+0x38>)
     30c:	4798      	blx	r3
     30e:	0002      	movs	r2, r0
     310:	2300      	movs	r3, #0
     312:	0019      	movs	r1, r3
     314:	1880      	adds	r0, r0, r2
     316:	4159      	adcs	r1, r3
     318:	1880      	adds	r0, r0, r2
     31a:	4159      	adcs	r1, r3
     31c:	4a07      	ldr	r2, [pc, #28]	; (33c <lcd_home+0x3c>)
     31e:	2300      	movs	r3, #0
     320:	1880      	adds	r0, r0, r2
     322:	4159      	adcs	r1, r3
     324:	4a06      	ldr	r2, [pc, #24]	; (340 <lcd_home+0x40>)
     326:	2300      	movs	r3, #0
     328:	4c06      	ldr	r4, [pc, #24]	; (344 <lcd_home+0x44>)
     32a:	47a0      	blx	r4
     32c:	4b06      	ldr	r3, [pc, #24]	; (348 <lcd_home+0x48>)
     32e:	4798      	blx	r3
}
     330:	bd10      	pop	{r4, pc}
     332:	46c0      	nop			; (mov r8, r8)
     334:	000002a5 	.word	0x000002a5
     338:	00004751 	.word	0x00004751
     33c:	006acfbf 	.word	0x006acfbf
     340:	006acfc0 	.word	0x006acfc0
     344:	000057a1 	.word	0x000057a1
     348:	20000001 	.word	0x20000001

0000034c <lcd_begin>:
{
     34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     34e:	46de      	mov	lr, fp
     350:	4657      	mov	r7, sl
     352:	464e      	mov	r6, r9
     354:	4645      	mov	r5, r8
     356:	b5e0      	push	{r5, r6, r7, lr}
    _displayfunction = LCD_2LINE | LCD_8BITMODE | LCD_5x8DOTS;
     358:	4d38      	ldr	r5, [pc, #224]	; (43c <lcd_begin+0xf0>)
     35a:	2318      	movs	r3, #24
     35c:	702b      	strb	r3, [r5, #0]
    delay_ms(50);
     35e:	2000      	movs	r0, #0
     360:	4b37      	ldr	r3, [pc, #220]	; (440 <lcd_begin+0xf4>)
     362:	469b      	mov	fp, r3
     364:	4798      	blx	r3
     366:	4b37      	ldr	r3, [pc, #220]	; (444 <lcd_begin+0xf8>)
     368:	469a      	mov	sl, r3
     36a:	2232      	movs	r2, #50	; 0x32
     36c:	2300      	movs	r3, #0
     36e:	2100      	movs	r1, #0
     370:	47d0      	blx	sl
     372:	4e35      	ldr	r6, [pc, #212]	; (448 <lcd_begin+0xfc>)
     374:	2700      	movs	r7, #0
     376:	1980      	adds	r0, r0, r6
     378:	4179      	adcs	r1, r7
     37a:	4b34      	ldr	r3, [pc, #208]	; (44c <lcd_begin+0x100>)
     37c:	4699      	mov	r9, r3
     37e:	4a34      	ldr	r2, [pc, #208]	; (450 <lcd_begin+0x104>)
     380:	2300      	movs	r3, #0
     382:	47c8      	blx	r9
     384:	4b33      	ldr	r3, [pc, #204]	; (454 <lcd_begin+0x108>)
     386:	4698      	mov	r8, r3
     388:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     38a:	2280      	movs	r2, #128	; 0x80
     38c:	2382      	movs	r3, #130	; 0x82
     38e:	05db      	lsls	r3, r3, #23
     390:	18d3      	adds	r3, r2, r3
     392:	2180      	movs	r1, #128	; 0x80
     394:	0089      	lsls	r1, r1, #2
     396:	6159      	str	r1, [r3, #20]
     398:	3901      	subs	r1, #1
     39a:	39ff      	subs	r1, #255	; 0xff
     39c:	6159      	str	r1, [r3, #20]
     39e:	615a      	str	r2, [r3, #20]
    delay_ms(50);
     3a0:	2000      	movs	r0, #0
     3a2:	47d8      	blx	fp
     3a4:	2232      	movs	r2, #50	; 0x32
     3a6:	2300      	movs	r3, #0
     3a8:	2100      	movs	r1, #0
     3aa:	47d0      	blx	sl
     3ac:	1980      	adds	r0, r0, r6
     3ae:	4179      	adcs	r1, r7
     3b0:	4a27      	ldr	r2, [pc, #156]	; (450 <lcd_begin+0x104>)
     3b2:	2300      	movs	r3, #0
     3b4:	47c8      	blx	r9
     3b6:	47c0      	blx	r8
    lcd_command(LCD_FUNCTIONSET | _displayfunction);
     3b8:	2620      	movs	r6, #32
     3ba:	7828      	ldrb	r0, [r5, #0]
     3bc:	4330      	orrs	r0, r6
     3be:	b2c0      	uxtb	r0, r0
     3c0:	4c25      	ldr	r4, [pc, #148]	; (458 <lcd_begin+0x10c>)
     3c2:	47a0      	blx	r4
    delay_us(4500);
     3c4:	2000      	movs	r0, #0
     3c6:	47d8      	blx	fp
     3c8:	4a24      	ldr	r2, [pc, #144]	; (45c <lcd_begin+0x110>)
     3ca:	2300      	movs	r3, #0
     3cc:	2100      	movs	r1, #0
     3ce:	47d0      	blx	sl
     3d0:	4a23      	ldr	r2, [pc, #140]	; (460 <lcd_begin+0x114>)
     3d2:	2300      	movs	r3, #0
     3d4:	1880      	adds	r0, r0, r2
     3d6:	4159      	adcs	r1, r3
     3d8:	4a22      	ldr	r2, [pc, #136]	; (464 <lcd_begin+0x118>)
     3da:	2300      	movs	r3, #0
     3dc:	47c8      	blx	r9
     3de:	47c0      	blx	r8
    lcd_command(LCD_FUNCTIONSET | _displayfunction);
     3e0:	7828      	ldrb	r0, [r5, #0]
     3e2:	4330      	orrs	r0, r6
     3e4:	b2c0      	uxtb	r0, r0
     3e6:	47a0      	blx	r4
    delay_us(150);
     3e8:	2000      	movs	r0, #0
     3ea:	47d8      	blx	fp
     3ec:	2296      	movs	r2, #150	; 0x96
     3ee:	2300      	movs	r3, #0
     3f0:	2100      	movs	r1, #0
     3f2:	47d0      	blx	sl
     3f4:	4a1a      	ldr	r2, [pc, #104]	; (460 <lcd_begin+0x114>)
     3f6:	2300      	movs	r3, #0
     3f8:	1880      	adds	r0, r0, r2
     3fa:	4159      	adcs	r1, r3
     3fc:	4a19      	ldr	r2, [pc, #100]	; (464 <lcd_begin+0x118>)
     3fe:	2300      	movs	r3, #0
     400:	47c8      	blx	r9
     402:	47c0      	blx	r8
    lcd_command(LCD_FUNCTIONSET | _displayfunction);
     404:	7828      	ldrb	r0, [r5, #0]
     406:	4330      	orrs	r0, r6
     408:	b2c0      	uxtb	r0, r0
     40a:	47a0      	blx	r4
    lcd_command(LCD_FUNCTIONSET | _displayfunction);
     40c:	7828      	ldrb	r0, [r5, #0]
     40e:	4330      	orrs	r0, r6
     410:	b2c0      	uxtb	r0, r0
     412:	47a0      	blx	r4
    _displaycontrol = LCD_DISPLAYON | LCD_CURSORON | LCD_BLINKOFF;
     414:	2206      	movs	r2, #6
     416:	4b14      	ldr	r3, [pc, #80]	; (468 <lcd_begin+0x11c>)
     418:	701a      	strb	r2, [r3, #0]
    lcd_command(LCD_DISPLAYCONTROL | _displaycontrol);
     41a:	200e      	movs	r0, #14
     41c:	47a0      	blx	r4
    lcd_clear();
     41e:	4b13      	ldr	r3, [pc, #76]	; (46c <lcd_begin+0x120>)
     420:	4798      	blx	r3
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     422:	2202      	movs	r2, #2
     424:	4b12      	ldr	r3, [pc, #72]	; (470 <lcd_begin+0x124>)
     426:	701a      	strb	r2, [r3, #0]
    lcd_command(LCD_ENTRYMODESET | _displaymode);
     428:	2006      	movs	r0, #6
     42a:	47a0      	blx	r4
    lcd_home();
     42c:	4b11      	ldr	r3, [pc, #68]	; (474 <lcd_begin+0x128>)
     42e:	4798      	blx	r3
}
     430:	bc3c      	pop	{r2, r3, r4, r5}
     432:	4690      	mov	r8, r2
     434:	4699      	mov	r9, r3
     436:	46a2      	mov	sl, r4
     438:	46ab      	mov	fp, r5
     43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     43c:	200000a5 	.word	0x200000a5
     440:	00004751 	.word	0x00004751
     444:	000057e1 	.word	0x000057e1
     448:	00001b57 	.word	0x00001b57
     44c:	000057a1 	.word	0x000057a1
     450:	00001b58 	.word	0x00001b58
     454:	20000001 	.word	0x20000001
     458:	000002a5 	.word	0x000002a5
     45c:	00001194 	.word	0x00001194
     460:	006acfbf 	.word	0x006acfbf
     464:	006acfc0 	.word	0x006acfc0
     468:	200000a4 	.word	0x200000a4
     46c:	000002b5 	.word	0x000002b5
     470:	200000a6 	.word	0x200000a6
     474:	00000301 	.word	0x00000301

00000478 <lcd_setCursor>:
{
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	b084      	sub	sp, #16
    int row_offsets[] = {0x00, 0x40, 0x14, 0x54};
     47c:	466a      	mov	r2, sp
     47e:	4b0b      	ldr	r3, [pc, #44]	; (4ac <lcd_setCursor+0x34>)
     480:	cb70      	ldmia	r3!, {r4, r5, r6}
     482:	c270      	stmia	r2!, {r4, r5, r6}
     484:	681b      	ldr	r3, [r3, #0]
     486:	6013      	str	r3, [r2, #0]
    if (row > 3 || col > 19)
     488:	2903      	cmp	r1, #3
     48a:	d801      	bhi.n	490 <lcd_setCursor+0x18>
     48c:	2813      	cmp	r0, #19
     48e:	d901      	bls.n	494 <lcd_setCursor+0x1c>
}
     490:	b004      	add	sp, #16
     492:	bd70      	pop	{r4, r5, r6, pc}
    lcd_command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
     494:	0089      	lsls	r1, r1, #2
     496:	466b      	mov	r3, sp
     498:	58cb      	ldr	r3, [r1, r3]
     49a:	18c0      	adds	r0, r0, r3
     49c:	2380      	movs	r3, #128	; 0x80
     49e:	425b      	negs	r3, r3
     4a0:	4318      	orrs	r0, r3
     4a2:	b2c0      	uxtb	r0, r0
     4a4:	4b02      	ldr	r3, [pc, #8]	; (4b0 <lcd_setCursor+0x38>)
     4a6:	4798      	blx	r3
     4a8:	e7f2      	b.n	490 <lcd_setCursor+0x18>
     4aa:	46c0      	nop			; (mov r8, r8)
     4ac:	00008570 	.word	0x00008570
     4b0:	000002a5 	.word	0x000002a5

000004b4 <lcd_noCursor>:
{
     4b4:	b510      	push	{r4, lr}
    _displaycontrol &= ~LCD_CURSORON;
     4b6:	4b05      	ldr	r3, [pc, #20]	; (4cc <lcd_noCursor+0x18>)
     4b8:	7818      	ldrb	r0, [r3, #0]
     4ba:	2202      	movs	r2, #2
     4bc:	4390      	bics	r0, r2
     4be:	7018      	strb	r0, [r3, #0]
    lcd_command(LCD_DISPLAYCONTROL | _displaycontrol);
     4c0:	2308      	movs	r3, #8
     4c2:	4318      	orrs	r0, r3
     4c4:	4b02      	ldr	r3, [pc, #8]	; (4d0 <lcd_noCursor+0x1c>)
     4c6:	4798      	blx	r3
}
     4c8:	bd10      	pop	{r4, pc}
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	200000a4 	.word	0x200000a4
     4d0:	000002a5 	.word	0x000002a5

000004d4 <lcd_write>:
{
     4d4:	b510      	push	{r4, lr}
    lcd_send(value, 1);
     4d6:	2101      	movs	r1, #1
     4d8:	4b01      	ldr	r3, [pc, #4]	; (4e0 <lcd_write+0xc>)
     4da:	4798      	blx	r3
}
     4dc:	bd10      	pop	{r4, pc}
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	00000241 	.word	0x00000241

000004e4 <lcd_printstr>:
{
    /*manka*/
}

void lcd_printstr(char *str)
{
     4e4:	b570      	push	{r4, r5, r6, lr}
     4e6:	0004      	movs	r4, r0
    while (*str)
     4e8:	7800      	ldrb	r0, [r0, #0]
     4ea:	2800      	cmp	r0, #0
     4ec:	d005      	beq.n	4fa <lcd_printstr+0x16>
    {
        lcd_write(*str++);
     4ee:	4d03      	ldr	r5, [pc, #12]	; (4fc <lcd_printstr+0x18>)
     4f0:	3401      	adds	r4, #1
     4f2:	47a8      	blx	r5
    while (*str)
     4f4:	7820      	ldrb	r0, [r4, #0]
     4f6:	2800      	cmp	r0, #0
     4f8:	d1fa      	bne.n	4f0 <lcd_printstr+0xc>
    }
     4fa:	bd70      	pop	{r4, r5, r6, pc}
     4fc:	000004d5 	.word	0x000004d5

00000500 <adsr_process>:
#include "config.h"

#define MAX_32BIT_VALUE 0xFFFFFFFF

void adsr_process(ADSR *adsr)
{
     500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     502:	0004      	movs	r4, r0
    switch(adsr->state) {
     504:	2330      	movs	r3, #48	; 0x30
     506:	5cc2      	ldrb	r2, [r0, r3]
     508:	2a05      	cmp	r2, #5
     50a:	d80c      	bhi.n	526 <adsr_process+0x26>
     50c:	0093      	lsls	r3, r2, #2
     50e:	4a43      	ldr	r2, [pc, #268]	; (61c <adsr_process+0x11c>)
     510:	58d3      	ldr	r3, [r2, r3]
     512:	469f      	mov	pc, r3
        case START:
            adsr->attack_counter = 0;
     514:	2300      	movs	r3, #0
     516:	6103      	str	r3, [r0, #16]
            adsr->sustain_counter = 0;
     518:	6243      	str	r3, [r0, #36]	; 0x24
            adsr->decay_counter = 0;
     51a:	6183      	str	r3, [r0, #24]
            adsr->release_counter = 0;
     51c:	62c3      	str	r3, [r0, #44]	; 0x2c
            adsr->state = ATTACK;
     51e:	2101      	movs	r1, #1
     520:	2230      	movs	r2, #48	; 0x30
     522:	5481      	strb	r1, [r0, r2]
            adsr->value = 0;
     524:	6043      	str	r3, [r0, #4]
            break;
        case END:
            adsr->value=0;
            break;
    }
}
     526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(adsr->attack==0) {
     528:	68c6      	ldr	r6, [r0, #12]
     52a:	2e00      	cmp	r6, #0
     52c:	d016      	beq.n	55c <adsr_process+0x5c>
            adsr->value = MAX_32BIT_VALUE / adsr->attack  * adsr->attack_counter;
     52e:	6905      	ldr	r5, [r0, #16]
     530:	0031      	movs	r1, r6
     532:	2001      	movs	r0, #1
     534:	4240      	negs	r0, r0
     536:	4b3a      	ldr	r3, [pc, #232]	; (620 <adsr_process+0x120>)
     538:	4798      	blx	r3
     53a:	4368      	muls	r0, r5
     53c:	6060      	str	r0, [r4, #4]
            adsr->attack_counter += adsr->interval;
     53e:	68a3      	ldr	r3, [r4, #8]
     540:	469c      	mov	ip, r3
     542:	4465      	add	r5, ip
     544:	6125      	str	r5, [r4, #16]
            if(adsr->attack_counter > adsr->attack) {
     546:	42ae      	cmp	r6, r5
     548:	d2ed      	bcs.n	526 <adsr_process+0x26>
                adsr->value = MAX_32BIT_VALUE; //max value
     54a:	2301      	movs	r3, #1
     54c:	425b      	negs	r3, r3
     54e:	6063      	str	r3, [r4, #4]
                adsr->state = DECAY;
     550:	2202      	movs	r2, #2
     552:	3331      	adds	r3, #49	; 0x31
     554:	54e2      	strb	r2, [r4, r3]
                adsr->attack_counter = 0;
     556:	2300      	movs	r3, #0
     558:	6123      	str	r3, [r4, #16]
     55a:	e7e4      	b.n	526 <adsr_process+0x26>
                adsr->value = MAX_32BIT_VALUE;
     55c:	2301      	movs	r3, #1
     55e:	425b      	negs	r3, r3
     560:	6043      	str	r3, [r0, #4]
                adsr->state = DECAY;
     562:	2202      	movs	r2, #2
     564:	3331      	adds	r3, #49	; 0x31
     566:	54c2      	strb	r2, [r0, r3]
                break;
     568:	e7dd      	b.n	526 <adsr_process+0x26>
            if(adsr->decay==0) {
     56a:	6946      	ldr	r6, [r0, #20]
     56c:	2e00      	cmp	r6, #0
     56e:	d016      	beq.n	59e <adsr_process+0x9e>
            adsr->value =  MAX_32BIT_VALUE - (MAX_32BIT_VALUE - (adsr->sustain_level<<24)) / adsr->decay * adsr->decay_counter ;
     570:	6a03      	ldr	r3, [r0, #32]
     572:	061f      	lsls	r7, r3, #24
     574:	6985      	ldr	r5, [r0, #24]
     576:	43f8      	mvns	r0, r7
     578:	0031      	movs	r1, r6
     57a:	4b29      	ldr	r3, [pc, #164]	; (620 <adsr_process+0x120>)
     57c:	4798      	blx	r3
     57e:	4368      	muls	r0, r5
     580:	43c0      	mvns	r0, r0
     582:	6060      	str	r0, [r4, #4]
            adsr->decay_counter += adsr->interval;
     584:	68a3      	ldr	r3, [r4, #8]
     586:	469c      	mov	ip, r3
     588:	4465      	add	r5, ip
     58a:	61a5      	str	r5, [r4, #24]
            if(adsr->decay_counter > adsr->decay) {
     58c:	42ae      	cmp	r6, r5
     58e:	d2ca      	bcs.n	526 <adsr_process+0x26>
                adsr->value = adsr->sustain_level<<24;
     590:	6067      	str	r7, [r4, #4]
                adsr->state = SUSTAIN;
     592:	2203      	movs	r2, #3
     594:	2330      	movs	r3, #48	; 0x30
     596:	54e2      	strb	r2, [r4, r3]
                adsr->decay_counter = 0;
     598:	2300      	movs	r3, #0
     59a:	61a3      	str	r3, [r4, #24]
     59c:	e7c3      	b.n	526 <adsr_process+0x26>
                adsr->value = adsr->sustain_level;
     59e:	6a03      	ldr	r3, [r0, #32]
     5a0:	6043      	str	r3, [r0, #4]
                adsr->state = SUSTAIN;
     5a2:	2203      	movs	r2, #3
     5a4:	2330      	movs	r3, #48	; 0x30
     5a6:	54c2      	strb	r2, [r0, r3]
                break;
     5a8:	e7bd      	b.n	526 <adsr_process+0x26>
            if(adsr->sustain==0) {
     5aa:	69c2      	ldr	r2, [r0, #28]
     5ac:	2a00      	cmp	r2, #0
     5ae:	d00f      	beq.n	5d0 <adsr_process+0xd0>
            adsr->value = adsr->sustain_level<<24;
     5b0:	6a03      	ldr	r3, [r0, #32]
     5b2:	061b      	lsls	r3, r3, #24
     5b4:	6043      	str	r3, [r0, #4]
            adsr->sustain_counter += adsr->interval;
     5b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
     5b8:	6881      	ldr	r1, [r0, #8]
     5ba:	468c      	mov	ip, r1
     5bc:	4463      	add	r3, ip
     5be:	6243      	str	r3, [r0, #36]	; 0x24
            if(adsr->sustain_counter > adsr->sustain) {
     5c0:	429a      	cmp	r2, r3
     5c2:	d2b0      	bcs.n	526 <adsr_process+0x26>
                adsr->state = RELEASE;
     5c4:	2204      	movs	r2, #4
     5c6:	2330      	movs	r3, #48	; 0x30
     5c8:	54c2      	strb	r2, [r0, r3]
                adsr->sustain_counter = 0;
     5ca:	2300      	movs	r3, #0
     5cc:	6243      	str	r3, [r0, #36]	; 0x24
     5ce:	e7aa      	b.n	526 <adsr_process+0x26>
                adsr->state = RELEASE;
     5d0:	3204      	adds	r2, #4
     5d2:	2330      	movs	r3, #48	; 0x30
     5d4:	54c2      	strb	r2, [r0, r3]
                break;
     5d6:	e7a6      	b.n	526 <adsr_process+0x26>
            if(adsr->release==0) {
     5d8:	6a87      	ldr	r7, [r0, #40]	; 0x28
     5da:	2f00      	cmp	r7, #0
     5dc:	d017      	beq.n	60e <adsr_process+0x10e>
            adsr->value = ((adsr->sustain_level<<24) - (adsr->sustain_level<<24) / adsr->release * adsr->release_counter);
     5de:	6a03      	ldr	r3, [r0, #32]
     5e0:	061d      	lsls	r5, r3, #24
     5e2:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
     5e4:	0039      	movs	r1, r7
     5e6:	0028      	movs	r0, r5
     5e8:	4b0d      	ldr	r3, [pc, #52]	; (620 <adsr_process+0x120>)
     5ea:	4798      	blx	r3
     5ec:	4370      	muls	r0, r6
     5ee:	1a2d      	subs	r5, r5, r0
     5f0:	6065      	str	r5, [r4, #4]
            adsr->release_counter += adsr->interval;
     5f2:	68a3      	ldr	r3, [r4, #8]
     5f4:	469c      	mov	ip, r3
     5f6:	4466      	add	r6, ip
     5f8:	62e6      	str	r6, [r4, #44]	; 0x2c
            if(adsr->release_counter > adsr->release) {
     5fa:	42b7      	cmp	r7, r6
     5fc:	d300      	bcc.n	600 <adsr_process+0x100>
     5fe:	e792      	b.n	526 <adsr_process+0x26>
                adsr->value = 0;
     600:	2300      	movs	r3, #0
     602:	6063      	str	r3, [r4, #4]
                adsr->state = END;
     604:	2105      	movs	r1, #5
     606:	2230      	movs	r2, #48	; 0x30
     608:	54a1      	strb	r1, [r4, r2]
                adsr->release_counter = 0;
     60a:	62e3      	str	r3, [r4, #44]	; 0x2c
     60c:	e78b      	b.n	526 <adsr_process+0x26>
                adsr->state = END;
     60e:	2205      	movs	r2, #5
     610:	2330      	movs	r3, #48	; 0x30
     612:	54c2      	strb	r2, [r0, r3]
                break;
     614:	e787      	b.n	526 <adsr_process+0x26>
            adsr->value=0;
     616:	2300      	movs	r3, #0
     618:	6043      	str	r3, [r0, #4]
}
     61a:	e784      	b.n	526 <adsr_process+0x26>
     61c:	00008580 	.word	0x00008580
     620:	00005615 	.word	0x00005615

00000624 <adsr_get_value>:
uint8_t adsr_get_value(ADSR *adsr)
{
    return adsr->value >> 24;
     624:	79c0      	ldrb	r0, [r0, #7]
}
     626:	4770      	bx	lr

00000628 <adsr_trigger>:

void adsr_trigger(ADSR *adsr)
{
    adsr->state=START;
     628:	2200      	movs	r2, #0
     62a:	2330      	movs	r3, #48	; 0x30
     62c:	54c2      	strb	r2, [r0, r3]
}
     62e:	4770      	bx	lr

00000630 <adsr_init>:

void adsr_init(ADSR *adsr, uint32_t interval)
{
    adsr->attack_counter = 0;
     630:	2300      	movs	r3, #0
     632:	6103      	str	r3, [r0, #16]
    adsr->decay_counter = 0;
     634:	6183      	str	r3, [r0, #24]
    adsr->sustain_counter = 0;
     636:	6243      	str	r3, [r0, #36]	; 0x24
    adsr->release_counter = 0;
     638:	62c3      	str	r3, [r0, #44]	; 0x2c
    adsr->value = 0;
     63a:	6043      	str	r3, [r0, #4]
    adsr->state = END;
     63c:	2205      	movs	r2, #5
     63e:	3330      	adds	r3, #48	; 0x30
     640:	54c2      	strb	r2, [r0, r3]
    adsr->interval=interval;
     642:	6081      	str	r1, [r0, #8]
    adsr->attack=100;
     644:	3334      	adds	r3, #52	; 0x34
     646:	60c3      	str	r3, [r0, #12]
    adsr->decay=100;
     648:	6143      	str	r3, [r0, #20]
    adsr->sustain=100;
     64a:	61c3      	str	r3, [r0, #28]
    adsr->release=100;
     64c:	6283      	str	r3, [r0, #40]	; 0x28
    adsr->sustain_level=128;
     64e:	331c      	adds	r3, #28
     650:	6203      	str	r3, [r0, #32]




     652:	4770      	bx	lr

00000654 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     654:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     656:	0080      	lsls	r0, r0, #2
     658:	4b16      	ldr	r3, [pc, #88]	; (6b4 <_tc_interrupt_handler+0x60>)
     65a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     65c:	6823      	ldr	r3, [r4, #0]
     65e:	7a9d      	ldrb	r5, [r3, #10]
     660:	7e22      	ldrb	r2, [r4, #24]
     662:	7e63      	ldrb	r3, [r4, #25]
     664:	4013      	ands	r3, r2
     666:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     668:	07eb      	lsls	r3, r5, #31
     66a:	d406      	bmi.n	67a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     66c:	07ab      	lsls	r3, r5, #30
     66e:	d40b      	bmi.n	688 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     670:	06eb      	lsls	r3, r5, #27
     672:	d410      	bmi.n	696 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     674:	06ab      	lsls	r3, r5, #26
     676:	d415      	bmi.n	6a4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     678:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     67a:	0020      	movs	r0, r4
     67c:	68a3      	ldr	r3, [r4, #8]
     67e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     680:	2301      	movs	r3, #1
     682:	6822      	ldr	r2, [r4, #0]
     684:	7293      	strb	r3, [r2, #10]
     686:	e7f1      	b.n	66c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     688:	0020      	movs	r0, r4
     68a:	68e3      	ldr	r3, [r4, #12]
     68c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     68e:	2302      	movs	r3, #2
     690:	6822      	ldr	r2, [r4, #0]
     692:	7293      	strb	r3, [r2, #10]
     694:	e7ec      	b.n	670 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     696:	0020      	movs	r0, r4
     698:	6923      	ldr	r3, [r4, #16]
     69a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     69c:	2310      	movs	r3, #16
     69e:	6822      	ldr	r2, [r4, #0]
     6a0:	7293      	strb	r3, [r2, #10]
     6a2:	e7e7      	b.n	674 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     6a4:	0020      	movs	r0, r4
     6a6:	6963      	ldr	r3, [r4, #20]
     6a8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     6aa:	6823      	ldr	r3, [r4, #0]
     6ac:	2220      	movs	r2, #32
     6ae:	729a      	strb	r2, [r3, #10]
}
     6b0:	e7e2      	b.n	678 <_tc_interrupt_handler+0x24>
     6b2:	46c0      	nop			; (mov r8, r8)
     6b4:	2000143c 	.word	0x2000143c

000006b8 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     6b8:	b510      	push	{r4, lr}
     6ba:	2000      	movs	r0, #0
     6bc:	4b01      	ldr	r3, [pc, #4]	; (6c4 <TC0_Handler+0xc>)
     6be:	4798      	blx	r3
     6c0:	bd10      	pop	{r4, pc}
     6c2:	46c0      	nop			; (mov r8, r8)
     6c4:	00000655 	.word	0x00000655

000006c8 <TC1_Handler>:
     6c8:	b510      	push	{r4, lr}
     6ca:	2001      	movs	r0, #1
     6cc:	4b01      	ldr	r3, [pc, #4]	; (6d4 <TC1_Handler+0xc>)
     6ce:	4798      	blx	r3
     6d0:	bd10      	pop	{r4, pc}
     6d2:	46c0      	nop			; (mov r8, r8)
     6d4:	00000655 	.word	0x00000655

000006d8 <TC2_Handler>:
     6d8:	b510      	push	{r4, lr}
     6da:	2002      	movs	r0, #2
     6dc:	4b01      	ldr	r3, [pc, #4]	; (6e4 <TC2_Handler+0xc>)
     6de:	4798      	blx	r3
     6e0:	bd10      	pop	{r4, pc}
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	00000655 	.word	0x00000655

000006e8 <TC3_Handler>:
     6e8:	b510      	push	{r4, lr}
     6ea:	2003      	movs	r0, #3
     6ec:	4b01      	ldr	r3, [pc, #4]	; (6f4 <TC3_Handler+0xc>)
     6ee:	4798      	blx	r3
     6f0:	bd10      	pop	{r4, pc}
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	00000655 	.word	0x00000655

000006f8 <TC4_Handler>:
     6f8:	b510      	push	{r4, lr}
     6fa:	2004      	movs	r0, #4
     6fc:	4b01      	ldr	r3, [pc, #4]	; (704 <TC4_Handler+0xc>)
     6fe:	4798      	blx	r3
     700:	bd10      	pop	{r4, pc}
     702:	46c0      	nop			; (mov r8, r8)
     704:	00000655 	.word	0x00000655

00000708 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     708:	b530      	push	{r4, r5, lr}
     70a:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     70c:	a901      	add	r1, sp, #4
     70e:	4b0c      	ldr	r3, [pc, #48]	; (740 <_tc_get_inst_index+0x38>)
     710:	000a      	movs	r2, r1
     712:	cb32      	ldmia	r3!, {r1, r4, r5}
     714:	c232      	stmia	r2!, {r1, r4, r5}
     716:	cb12      	ldmia	r3!, {r1, r4}
     718:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     71a:	9b01      	ldr	r3, [sp, #4]
     71c:	4298      	cmp	r0, r3
     71e:	d00b      	beq.n	738 <_tc_get_inst_index+0x30>
     720:	2301      	movs	r3, #1
     722:	a901      	add	r1, sp, #4
     724:	009a      	lsls	r2, r3, #2
     726:	5852      	ldr	r2, [r2, r1]
     728:	4282      	cmp	r2, r0
     72a:	d006      	beq.n	73a <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     72c:	3301      	adds	r3, #1
     72e:	2b05      	cmp	r3, #5
     730:	d1f8      	bne.n	724 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     732:	2000      	movs	r0, #0
}
     734:	b007      	add	sp, #28
     736:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     738:	2300      	movs	r3, #0
			return i;
     73a:	b2d8      	uxtb	r0, r3
     73c:	e7fa      	b.n	734 <_tc_get_inst_index+0x2c>
     73e:	46c0      	nop			; (mov r8, r8)
     740:	00008598 	.word	0x00008598

00000744 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     744:	b5f0      	push	{r4, r5, r6, r7, lr}
     746:	46c6      	mov	lr, r8
     748:	b500      	push	{lr}
     74a:	b08e      	sub	sp, #56	; 0x38
     74c:	0004      	movs	r4, r0
     74e:	000d      	movs	r5, r1
     750:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     752:	0008      	movs	r0, r1
     754:	4ba7      	ldr	r3, [pc, #668]	; (9f4 <tc_init+0x2b0>)
     756:	4798      	blx	r3
     758:	4680      	mov	r8, r0

#if (SAMC20) || (SAMC21)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
     75a:	ab0c      	add	r3, sp, #48	; 0x30
     75c:	221e      	movs	r2, #30
     75e:	701a      	strb	r2, [r3, #0]
     760:	705a      	strb	r2, [r3, #1]
     762:	3201      	adds	r2, #1
     764:	709a      	strb	r2, [r3, #2]
     766:	70da      	strb	r2, [r3, #3]
     768:	3201      	adds	r2, #1
     76a:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
     76c:	a902      	add	r1, sp, #8
     76e:	4ba2      	ldr	r3, [pc, #648]	; (9f8 <tc_init+0x2b4>)
     770:	3314      	adds	r3, #20
     772:	000a      	movs	r2, r1
     774:	cb83      	ldmia	r3!, {r0, r1, r7}
     776:	c283      	stmia	r2!, {r0, r1, r7}
     778:	cb83      	ldmia	r3!, {r0, r1, r7}
     77a:	c283      	stmia	r2!, {r0, r1, r7}
     77c:	cb83      	ldmia	r3!, {r0, r1, r7}
     77e:	c283      	stmia	r2!, {r0, r1, r7}
     780:	681b      	ldr	r3, [r3, #0]
     782:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     784:	2300      	movs	r3, #0
     786:	60a3      	str	r3, [r4, #8]
     788:	60e3      	str	r3, [r4, #12]
     78a:	6123      	str	r3, [r4, #16]
     78c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     78e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     790:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     792:	4643      	mov	r3, r8
     794:	009a      	lsls	r2, r3, #2
     796:	4b99      	ldr	r3, [pc, #612]	; (9fc <tc_init+0x2b8>)
     798:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     79a:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     79c:	2334      	movs	r3, #52	; 0x34
     79e:	5cf3      	ldrb	r3, [r6, r3]
     7a0:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     7a2:	78f3      	ldrb	r3, [r6, #3]
     7a4:	2b08      	cmp	r3, #8
     7a6:	d008      	beq.n	7ba <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     7a8:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     7aa:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     7ac:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     7ae:	07db      	lsls	r3, r3, #31
     7b0:	d508      	bpl.n	7c4 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     7b2:	b00e      	add	sp, #56	; 0x38
     7b4:	bc04      	pop	{r2}
     7b6:	4690      	mov	r8, r2
     7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     7ba:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     7bc:	4642      	mov	r2, r8
     7be:	07d2      	lsls	r2, r2, #31
     7c0:	d4f7      	bmi.n	7b2 <tc_init+0x6e>
     7c2:	e7f1      	b.n	7a8 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     7c4:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
     7c6:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     7c8:	079b      	lsls	r3, r3, #30
     7ca:	d4f2      	bmi.n	7b2 <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     7cc:	682b      	ldr	r3, [r5, #0]
     7ce:	079b      	lsls	r3, r3, #30
     7d0:	d4ef      	bmi.n	7b2 <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
     7d2:	7c33      	ldrb	r3, [r6, #16]
     7d4:	2b00      	cmp	r3, #0
     7d6:	d000      	beq.n	7da <tc_init+0x96>
     7d8:	e08e      	b.n	8f8 <tc_init+0x1b4>
	if (config->pwm_channel[1].enabled) {
     7da:	7f33      	ldrb	r3, [r6, #28]
     7dc:	2b00      	cmp	r3, #0
     7de:	d000      	beq.n	7e2 <tc_init+0x9e>
     7e0:	e096      	b.n	910 <tc_init+0x1cc>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
     7e2:	4643      	mov	r3, r8
     7e4:	005a      	lsls	r2, r3, #1
     7e6:	a902      	add	r1, sp, #8
     7e8:	1c53      	adds	r3, r2, #1
     7ea:	009b      	lsls	r3, r3, #2
     7ec:	5858      	ldr	r0, [r3, r1]
     7ee:	4643      	mov	r3, r8
     7f0:	00db      	lsls	r3, r3, #3
     7f2:	585b      	ldr	r3, [r3, r1]
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
     7f4:	b2d9      	uxtb	r1, r3
     7f6:	2901      	cmp	r1, #1
     7f8:	d100      	bne.n	7fc <tc_init+0xb8>
     7fa:	e09e      	b.n	93a <tc_init+0x1f6>
     7fc:	2900      	cmp	r1, #0
     7fe:	d100      	bne.n	802 <tc_init+0xbe>
     800:	e096      	b.n	930 <tc_init+0x1ec>
     802:	2902      	cmp	r1, #2
     804:	d100      	bne.n	808 <tc_init+0xc4>
     806:	e09d      	b.n	944 <tc_init+0x200>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
     808:	78f3      	ldrb	r3, [r6, #3]
     80a:	2b08      	cmp	r3, #8
     80c:	d100      	bne.n	810 <tc_init+0xcc>
     80e:	e09e      	b.n	94e <tc_init+0x20a>
	gclk_chan_config.source_generator = config->clock_source;
     810:	7833      	ldrb	r3, [r6, #0]
     812:	466a      	mov	r2, sp
     814:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     816:	ab0c      	add	r3, sp, #48	; 0x30
     818:	4642      	mov	r2, r8
     81a:	5c9f      	ldrb	r7, [r3, r2]
     81c:	4669      	mov	r1, sp
     81e:	0038      	movs	r0, r7
     820:	4b77      	ldr	r3, [pc, #476]	; (a00 <tc_init+0x2bc>)
     822:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     824:	0038      	movs	r0, r7
     826:	4b77      	ldr	r3, [pc, #476]	; (a04 <tc_init+0x2c0>)
     828:	4798      	blx	r3
			(uint32_t)config->counter_size |
     82a:	78f3      	ldrb	r3, [r6, #3]
     82c:	79f2      	ldrb	r2, [r6, #7]
     82e:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
     830:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
     832:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
     834:	7a72      	ldrb	r2, [r6, #9]
     836:	2a00      	cmp	r2, #0
     838:	d002      	beq.n	840 <tc_init+0xfc>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
     83a:	2280      	movs	r2, #128	; 0x80
     83c:	0252      	lsls	r2, r2, #9
     83e:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
     840:	7ab2      	ldrb	r2, [r6, #10]
     842:	2a00      	cmp	r2, #0
     844:	d002      	beq.n	84c <tc_init+0x108>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
     846:	2280      	movs	r2, #128	; 0x80
     848:	0292      	lsls	r2, r2, #10
     84a:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
     84c:	7af2      	ldrb	r2, [r6, #11]
     84e:	2a00      	cmp	r2, #0
     850:	d002      	beq.n	858 <tc_init+0x114>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
     852:	2280      	movs	r2, #128	; 0x80
     854:	0352      	lsls	r2, r2, #13
     856:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
     858:	7b32      	ldrb	r2, [r6, #12]
     85a:	2a00      	cmp	r2, #0
     85c:	d002      	beq.n	864 <tc_init+0x120>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
     85e:	2280      	movs	r2, #128	; 0x80
     860:	0392      	lsls	r2, r2, #14
     862:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
     864:	7871      	ldrb	r1, [r6, #1]
     866:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
     868:	78b2      	ldrb	r2, [r6, #2]
     86a:	01d2      	lsls	r2, r2, #7
     86c:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
     86e:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     870:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
     872:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     874:	2b00      	cmp	r3, #0
     876:	d1fc      	bne.n	872 <tc_init+0x12e>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     878:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     87a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     87c:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     87e:	2b00      	cmp	r3, #0
     880:	d1fc      	bne.n	87c <tc_init+0x138>
	hw->COUNT8.WAVE.reg = config->wave_generation;
     882:	79b3      	ldrb	r3, [r6, #6]
     884:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
     886:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     888:	1e4b      	subs	r3, r1, #1
     88a:	4199      	sbcs	r1, r3
     88c:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     88e:	7bb3      	ldrb	r3, [r6, #14]
     890:	2b00      	cmp	r3, #0
     892:	d001      	beq.n	898 <tc_init+0x154>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     894:	2301      	movs	r3, #1
     896:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     898:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     89a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     89c:	2b00      	cmp	r3, #0
     89e:	d1fc      	bne.n	89a <tc_init+0x156>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     8a0:	33ff      	adds	r3, #255	; 0xff
     8a2:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     8a4:	2900      	cmp	r1, #0
     8a6:	d004      	beq.n	8b2 <tc_init+0x16e>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     8a8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     8aa:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
     8ac:	2b00      	cmp	r3, #0
     8ae:	d1fc      	bne.n	8aa <tc_init+0x166>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     8b0:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
     8b2:	7a33      	ldrb	r3, [r6, #8]
     8b4:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     8b6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     8b8:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     8ba:	2b00      	cmp	r3, #0
     8bc:	d1fc      	bne.n	8b8 <tc_init+0x174>
	switch (module_inst->counter_size) {
     8be:	7923      	ldrb	r3, [r4, #4]
     8c0:	2b04      	cmp	r3, #4
     8c2:	d067      	beq.n	994 <tc_init+0x250>
     8c4:	2b08      	cmp	r3, #8
     8c6:	d100      	bne.n	8ca <tc_init+0x186>
     8c8:	e081      	b.n	9ce <tc_init+0x28a>
	return STATUS_ERR_INVALID_ARG;
     8ca:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     8cc:	2b00      	cmp	r3, #0
     8ce:	d000      	beq.n	8d2 <tc_init+0x18e>
     8d0:	e76f      	b.n	7b2 <tc_init+0x6e>
     8d2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     8d4:	2b00      	cmp	r3, #0
     8d6:	d1fc      	bne.n	8d2 <tc_init+0x18e>
				= config->counter_16_bit.value;
     8d8:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     8da:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     8dc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     8de:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     8e0:	2b00      	cmp	r3, #0
     8e2:	d1fc      	bne.n	8de <tc_init+0x19a>
					config->counter_16_bit.compare_capture_channel[0];
     8e4:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     8e6:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     8e8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     8ea:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     8ec:	2b00      	cmp	r3, #0
     8ee:	d1fc      	bne.n	8ea <tc_init+0x1a6>
					config->counter_16_bit.compare_capture_channel[1];
     8f0:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     8f2:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
     8f4:	2000      	movs	r0, #0
     8f6:	e75c      	b.n	7b2 <tc_init+0x6e>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     8f8:	a901      	add	r1, sp, #4
     8fa:	2301      	movs	r3, #1
     8fc:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     8fe:	2200      	movs	r2, #0
     900:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     902:	7e32      	ldrb	r2, [r6, #24]
     904:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     906:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     908:	7d30      	ldrb	r0, [r6, #20]
     90a:	4b3f      	ldr	r3, [pc, #252]	; (a08 <tc_init+0x2c4>)
     90c:	4798      	blx	r3
     90e:	e764      	b.n	7da <tc_init+0x96>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     910:	a901      	add	r1, sp, #4
     912:	2301      	movs	r3, #1
     914:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     916:	2200      	movs	r2, #0
     918:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     91a:	3224      	adds	r2, #36	; 0x24
     91c:	18b2      	adds	r2, r6, r2
     91e:	7812      	ldrb	r2, [r2, #0]
     920:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     922:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     924:	331f      	adds	r3, #31
     926:	18f3      	adds	r3, r6, r3
     928:	7818      	ldrb	r0, [r3, #0]
     92a:	4b37      	ldr	r3, [pc, #220]	; (a08 <tc_init+0x2c4>)
     92c:	4798      	blx	r3
     92e:	e758      	b.n	7e2 <tc_init+0x9e>
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     930:	4936      	ldr	r1, [pc, #216]	; (a0c <tc_init+0x2c8>)
     932:	694b      	ldr	r3, [r1, #20]
     934:	4318      	orrs	r0, r3
     936:	6148      	str	r0, [r1, #20]
     938:	e766      	b.n	808 <tc_init+0xc4>
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
     93a:	4934      	ldr	r1, [pc, #208]	; (a0c <tc_init+0x2c8>)
     93c:	698b      	ldr	r3, [r1, #24]
     93e:	4318      	orrs	r0, r3
     940:	6188      	str	r0, [r1, #24]
     942:	e761      	b.n	808 <tc_init+0xc4>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     944:	4b31      	ldr	r3, [pc, #196]	; (a0c <tc_init+0x2c8>)
     946:	69d9      	ldr	r1, [r3, #28]
     948:	4308      	orrs	r0, r1
     94a:	61d8      	str	r0, [r3, #28]
     94c:	e75c      	b.n	808 <tc_init+0xc4>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
     94e:	4643      	mov	r3, r8
     950:	3301      	adds	r3, #1
     952:	2b04      	cmp	r3, #4
     954:	dd00      	ble.n	958 <tc_init+0x214>
     956:	e75b      	b.n	810 <tc_init+0xcc>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
     958:	ab02      	add	r3, sp, #8
     95a:	1cd1      	adds	r1, r2, #3
     95c:	0089      	lsls	r1, r1, #2
     95e:	58c9      	ldr	r1, [r1, r3]
     960:	3202      	adds	r2, #2
     962:	0092      	lsls	r2, r2, #2
     964:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
     966:	b2da      	uxtb	r2, r3
     968:	2a01      	cmp	r2, #1
     96a:	d00e      	beq.n	98a <tc_init+0x246>
     96c:	2a00      	cmp	r2, #0
     96e:	d007      	beq.n	980 <tc_init+0x23c>
     970:	2a02      	cmp	r2, #2
     972:	d000      	beq.n	976 <tc_init+0x232>
     974:	e74c      	b.n	810 <tc_init+0xcc>
			MCLK->APBCMASK.reg |= mask;
     976:	4b25      	ldr	r3, [pc, #148]	; (a0c <tc_init+0x2c8>)
     978:	69da      	ldr	r2, [r3, #28]
     97a:	4311      	orrs	r1, r2
     97c:	61d9      	str	r1, [r3, #28]
     97e:	e747      	b.n	810 <tc_init+0xcc>
			MCLK->APBAMASK.reg |= mask;
     980:	4a22      	ldr	r2, [pc, #136]	; (a0c <tc_init+0x2c8>)
     982:	6953      	ldr	r3, [r2, #20]
     984:	4319      	orrs	r1, r3
     986:	6151      	str	r1, [r2, #20]
     988:	e742      	b.n	810 <tc_init+0xcc>
			MCLK->APBBMASK.reg |= mask;
     98a:	4a20      	ldr	r2, [pc, #128]	; (a0c <tc_init+0x2c8>)
     98c:	6993      	ldr	r3, [r2, #24]
     98e:	4319      	orrs	r1, r3
     990:	6191      	str	r1, [r2, #24]
     992:	e73d      	b.n	810 <tc_init+0xcc>
     994:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     996:	2b00      	cmp	r3, #0
     998:	d1fc      	bne.n	994 <tc_init+0x250>
					config->counter_8_bit.value;
     99a:	3328      	adds	r3, #40	; 0x28
     99c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     99e:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     9a0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     9a2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     9a4:	2b00      	cmp	r3, #0
     9a6:	d1fc      	bne.n	9a2 <tc_init+0x25e>
					config->counter_8_bit.period;
     9a8:	3329      	adds	r3, #41	; 0x29
     9aa:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     9ac:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     9ae:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     9b0:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     9b2:	2b00      	cmp	r3, #0
     9b4:	d1fc      	bne.n	9b0 <tc_init+0x26c>
					config->counter_8_bit.compare_capture_channel[0];
     9b6:	332a      	adds	r3, #42	; 0x2a
     9b8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     9ba:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     9bc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     9be:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     9c0:	2b00      	cmp	r3, #0
     9c2:	d1fc      	bne.n	9be <tc_init+0x27a>
					config->counter_8_bit.compare_capture_channel[1];
     9c4:	332b      	adds	r3, #43	; 0x2b
     9c6:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     9c8:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
     9ca:	2000      	movs	r0, #0
     9cc:	e6f1      	b.n	7b2 <tc_init+0x6e>
     9ce:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     9d0:	2b00      	cmp	r3, #0
     9d2:	d1fc      	bne.n	9ce <tc_init+0x28a>
				= config->counter_32_bit.value;
     9d4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     9d6:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     9d8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     9da:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     9dc:	2b00      	cmp	r3, #0
     9de:	d1fc      	bne.n	9da <tc_init+0x296>
			hw->COUNT32.CC[0].reg =
     9e0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     9e2:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     9e4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     9e6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     9e8:	2b00      	cmp	r3, #0
     9ea:	d1fc      	bne.n	9e6 <tc_init+0x2a2>
					config->counter_32_bit.compare_capture_channel[1];
     9ec:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     9ee:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
     9f0:	2000      	movs	r0, #0
     9f2:	e6de      	b.n	7b2 <tc_init+0x6e>
     9f4:	00000709 	.word	0x00000709
     9f8:	00008598 	.word	0x00008598
     9fc:	2000143c 	.word	0x2000143c
     a00:	0000482d 	.word	0x0000482d
     a04:	000047bd 	.word	0x000047bd
     a08:	00004929 	.word	0x00004929
     a0c:	40000800 	.word	0x40000800

00000a10 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
     a10:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     a12:	6804      	ldr	r4, [r0, #0]
     a14:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
     a16:	2b00      	cmp	r3, #0
     a18:	d1fc      	bne.n	a14 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
     a1a:	7903      	ldrb	r3, [r0, #4]
     a1c:	2b04      	cmp	r3, #4
     a1e:	d006      	beq.n	a2e <tc_set_compare_value+0x1e>
     a20:	2b08      	cmp	r3, #8
     a22:	d028      	beq.n	a76 <tc_set_compare_value+0x66>
     a24:	2b00      	cmp	r3, #0
     a26:	d013      	beq.n	a50 <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     a28:	2317      	movs	r3, #23
}
     a2a:	0018      	movs	r0, r3
     a2c:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
     a2e:	2317      	movs	r3, #23
			if (channel_index <
     a30:	2901      	cmp	r1, #1
     a32:	d8fa      	bhi.n	a2a <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
     a34:	7e83      	ldrb	r3, [r0, #26]
     a36:	2b00      	cmp	r3, #0
     a38:	d005      	beq.n	a46 <tc_set_compare_value+0x36>
							(uint8_t)compare;
     a3a:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
     a3c:	1861      	adds	r1, r4, r1
     a3e:	3130      	adds	r1, #48	; 0x30
     a40:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
     a42:	2300      	movs	r3, #0
     a44:	e7f1      	b.n	a2a <tc_set_compare_value+0x1a>
							(uint8_t)compare;
     a46:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
     a48:	1864      	adds	r4, r4, r1
     a4a:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
     a4c:	2300      	movs	r3, #0
     a4e:	e7ec      	b.n	a2a <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
     a50:	2317      	movs	r3, #23
			if (channel_index <
     a52:	2901      	cmp	r1, #1
     a54:	d8e9      	bhi.n	a2a <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
     a56:	7e83      	ldrb	r3, [r0, #26]
     a58:	2b00      	cmp	r3, #0
     a5a:	d005      	beq.n	a68 <tc_set_compare_value+0x58>
							(uint16_t)compare;
     a5c:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
     a5e:	3118      	adds	r1, #24
     a60:	0049      	lsls	r1, r1, #1
     a62:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
     a64:	2300      	movs	r3, #0
     a66:	e7e0      	b.n	a2a <tc_set_compare_value+0x1a>
							(uint16_t)compare;
     a68:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
     a6a:	310c      	adds	r1, #12
     a6c:	0049      	lsls	r1, r1, #1
     a6e:	1864      	adds	r4, r4, r1
     a70:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
     a72:	2300      	movs	r3, #0
     a74:	e7d9      	b.n	a2a <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
     a76:	2317      	movs	r3, #23
			if (channel_index <
     a78:	2901      	cmp	r1, #1
     a7a:	d8d6      	bhi.n	a2a <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
     a7c:	7e83      	ldrb	r3, [r0, #26]
     a7e:	2b00      	cmp	r3, #0
     a80:	d105      	bne.n	a8e <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
     a82:	3106      	adds	r1, #6
     a84:	0089      	lsls	r1, r1, #2
     a86:	1864      	adds	r4, r4, r1
     a88:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
     a8a:	2300      	movs	r3, #0
     a8c:	e7cd      	b.n	a2a <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
     a8e:	310c      	adds	r1, #12
     a90:	0089      	lsls	r1, r1, #2
     a92:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
     a94:	2300      	movs	r3, #0
     a96:	e7c8      	b.n	a2a <tc_set_compare_value+0x1a>

00000a98 <tc_set_top_value>:
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(top_value);

	Tc *const tc_module = module_inst->hw;
     a98:	6802      	ldr	r2, [r0, #0]
     a9a:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
     a9c:	2b00      	cmp	r3, #0
     a9e:	d1fc      	bne.n	a9a <tc_set_top_value+0x2>
		/* Wait for sync */
	}

	switch (module_inst->counter_size) {
     aa0:	7903      	ldrb	r3, [r0, #4]
     aa2:	2b04      	cmp	r3, #4
     aa4:	d005      	beq.n	ab2 <tc_set_top_value+0x1a>
     aa6:	2b08      	cmp	r3, #8
     aa8:	d01a      	beq.n	ae0 <tc_set_top_value+0x48>
     aaa:	2b00      	cmp	r3, #0
     aac:	d00d      	beq.n	aca <tc_set_top_value+0x32>
			}
			return STATUS_OK;

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     aae:	2017      	movs	r0, #23
	}
}
     ab0:	4770      	bx	lr
			if (module_inst->double_buffering_enabled){
     ab2:	7e83      	ldrb	r3, [r0, #26]
     ab4:	2b00      	cmp	r3, #0
     ab6:	d004      	beq.n	ac2 <tc_set_top_value+0x2a>
				tc_module->COUNT8.PERBUF.reg = (uint8_t)top_value;
     ab8:	b2c9      	uxtb	r1, r1
     aba:	232f      	movs	r3, #47	; 0x2f
     abc:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
     abe:	2000      	movs	r0, #0
     ac0:	e7f6      	b.n	ab0 <tc_set_top_value+0x18>
				tc_module->COUNT8.PER.reg = (uint8_t)top_value;
     ac2:	b2c9      	uxtb	r1, r1
     ac4:	76d1      	strb	r1, [r2, #27]
			return STATUS_OK;
     ac6:	2000      	movs	r0, #0
     ac8:	e7f2      	b.n	ab0 <tc_set_top_value+0x18>
			if (module_inst->double_buffering_enabled){
     aca:	7e83      	ldrb	r3, [r0, #26]
     acc:	2b00      	cmp	r3, #0
     ace:	d003      	beq.n	ad8 <tc_set_top_value+0x40>
				tc_module->COUNT16.CCBUF[0].reg = (uint16_t)top_value;
     ad0:	b289      	uxth	r1, r1
     ad2:	8611      	strh	r1, [r2, #48]	; 0x30
			return STATUS_OK;
     ad4:	2000      	movs	r0, #0
     ad6:	e7eb      	b.n	ab0 <tc_set_top_value+0x18>
				tc_module->COUNT16.CC[0].reg = (uint16_t)top_value;
     ad8:	b289      	uxth	r1, r1
     ada:	8391      	strh	r1, [r2, #28]
			return STATUS_OK;
     adc:	2000      	movs	r0, #0
     ade:	e7e7      	b.n	ab0 <tc_set_top_value+0x18>
			if (module_inst->double_buffering_enabled){
     ae0:	7e83      	ldrb	r3, [r0, #26]
     ae2:	2b00      	cmp	r3, #0
     ae4:	d102      	bne.n	aec <tc_set_top_value+0x54>
				tc_module->COUNT32.CC[0].reg = (uint32_t)top_value;
     ae6:	61d1      	str	r1, [r2, #28]
			return STATUS_OK;
     ae8:	2000      	movs	r0, #0
     aea:	e7e1      	b.n	ab0 <tc_set_top_value+0x18>
				tc_module->COUNT32.CCBUF[0].reg = (uint32_t)top_value;
     aec:	6311      	str	r1, [r2, #48]	; 0x30
			return STATUS_OK;
     aee:	2000      	movs	r0, #0
     af0:	e7de      	b.n	ab0 <tc_set_top_value+0x18>
	...

00000af4 <button_read>:
{
    //button_state |= (port_pin_get_input_level(PIN_SW2)<<1)|(!port_pin_get_input_level(PIN_SW1)<<0);
}

TIPKA button_read(void)
{
     af4:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
     af6:	2282      	movs	r2, #130	; 0x82
     af8:	05d2      	lsls	r2, r2, #23
     afa:	6a13      	ldr	r3, [r2, #32]
     afc:	6a12      	ldr	r2, [r2, #32]
     afe:	0b5b      	lsrs	r3, r3, #13
     b00:	2101      	movs	r1, #1
     b02:	400b      	ands	r3, r1
    button_state = (port_pin_get_input_level(PIN_SW2)<<1) | (!port_pin_get_input_level(PIN_SW1)<<0);
     b04:	005b      	lsls	r3, r3, #1
     b06:	0b12      	lsrs	r2, r2, #12
     b08:	404a      	eors	r2, r1
     b0a:	400a      	ands	r2, r1
     b0c:	4313      	orrs	r3, r2
     b0e:	4a06      	ldr	r2, [pc, #24]	; (b28 <button_read+0x34>)
     b10:	7013      	strb	r3, [r2, #0]

    uint8_t pressed_keys = (button_state ^ previous_button_state) & button_state;
     b12:	4806      	ldr	r0, [pc, #24]	; (b2c <button_read+0x38>)
     b14:	7802      	ldrb	r2, [r0, #0]
     b16:	001c      	movs	r4, r3
     b18:	4394      	bics	r4, r2
    uint8_t released_keys = (button_state ^ previous_button_state) & previous_button_state;
    previous_button_state=button_state;
     b1a:	7003      	strb	r3, [r0, #0]
    if(pressed_keys & (1<<0)) {
        return BUTTON_1;
     b1c:	2001      	movs	r0, #1
    if(pressed_keys & (1<<0)) {
     b1e:	4221      	tst	r1, r4
     b20:	d101      	bne.n	b26 <button_read+0x32>
    if(pressed_keys & (1<<1)) {
        return BUTTON_2;
    }

    pressed_keys &=~(released_keys);
    return BUTTON_NONE;
     b22:	0862      	lsrs	r2, r4, #1
     b24:	0050      	lsls	r0, r2, #1
    if((button_state>>1)&1) {
        button_state &=~(1<<1);
        return BUTTON_2;
    }
    return BUTTON_NONE;*/
     b26:	bd10      	pop	{r4, pc}
     b28:	200000a7 	.word	0x200000a7
     b2c:	200000a8 	.word	0x200000a8

00000b30 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     b30:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     b32:	2000      	movs	r0, #0
     b34:	4b08      	ldr	r3, [pc, #32]	; (b58 <delay_init+0x28>)
     b36:	4798      	blx	r3
     b38:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     b3a:	4c08      	ldr	r4, [pc, #32]	; (b5c <delay_init+0x2c>)
     b3c:	21fa      	movs	r1, #250	; 0xfa
     b3e:	0089      	lsls	r1, r1, #2
     b40:	47a0      	blx	r4
     b42:	4b07      	ldr	r3, [pc, #28]	; (b60 <delay_init+0x30>)
     b44:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     b46:	4907      	ldr	r1, [pc, #28]	; (b64 <delay_init+0x34>)
     b48:	0028      	movs	r0, r5
     b4a:	47a0      	blx	r4
     b4c:	4b06      	ldr	r3, [pc, #24]	; (b68 <delay_init+0x38>)
     b4e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     b50:	2205      	movs	r2, #5
     b52:	4b06      	ldr	r3, [pc, #24]	; (b6c <delay_init+0x3c>)
     b54:	601a      	str	r2, [r3, #0]
}
     b56:	bd70      	pop	{r4, r5, r6, pc}
     b58:	00004751 	.word	0x00004751
     b5c:	00005615 	.word	0x00005615
     b60:	2000000c 	.word	0x2000000c
     b64:	000f4240 	.word	0x000f4240
     b68:	20000010 	.word	0x20000010
     b6c:	e000e010 	.word	0xe000e010

00000b70 <_adc_get_inst_index>:
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
		if (hw == adc_modules[i]) {
     b70:	4b06      	ldr	r3, [pc, #24]	; (b8c <_adc_get_inst_index+0x1c>)
     b72:	4298      	cmp	r0, r3
     b74:	d008      	beq.n	b88 <_adc_get_inst_index+0x18>
     b76:	4a06      	ldr	r2, [pc, #24]	; (b90 <_adc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     b78:	2300      	movs	r3, #0
		if (hw == adc_modules[i]) {
     b7a:	4290      	cmp	r0, r2
     b7c:	d001      	beq.n	b82 <_adc_get_inst_index+0x12>
}
     b7e:	0018      	movs	r0, r3
     b80:	4770      	bx	lr
     b82:	3301      	adds	r3, #1
			return i;
     b84:	b2db      	uxtb	r3, r3
     b86:	e7fa      	b.n	b7e <_adc_get_inst_index+0xe>
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     b88:	2300      	movs	r3, #0
     b8a:	e7fb      	b.n	b84 <_adc_get_inst_index+0x14>
     b8c:	42004400 	.word	0x42004400
     b90:	42004800 	.word	0x42004800

00000b94 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     b94:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     b96:	2300      	movs	r3, #0
     b98:	2200      	movs	r2, #0
     b9a:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     b9c:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     b9e:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     ba0:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     ba2:	2100      	movs	r1, #0
     ba4:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     ba6:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     ba8:	61c3      	str	r3, [r0, #28]
#if SAMR30 || SAMR34 || SAMR35
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     baa:	2401      	movs	r4, #1
     bac:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     bae:	24c0      	movs	r4, #192	; 0xc0
     bb0:	0164      	lsls	r4, r4, #5
     bb2:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     bb4:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     bb6:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     bb8:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     bba:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     bbc:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     bbe:	242a      	movs	r4, #42	; 0x2a
     bc0:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     bc2:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     bc4:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     bc6:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     bc8:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     bca:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     bcc:	3c06      	subs	r4, #6
     bce:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     bd0:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     bd2:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     bd4:	7541      	strb	r1, [r0, #21]
}
     bd6:	bd10      	pop	{r4, pc}

00000bd8 <adc_set_window_mode>:
void adc_set_window_mode(
		struct adc_module *const module_inst,
		const enum adc_window_mode window_mode,
		const int16_t window_lower_value,
		const int16_t window_upper_value)
{
     bd8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     bda:	6805      	ldr	r5, [r0, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
     bdc:	8c2c      	ldrh	r4, [r5, #32]
     bde:	b2a4      	uxth	r4, r4

	while (adc_is_syncing(module_inst)) {
     be0:	2c00      	cmp	r4, #0
     be2:	d1fb      	bne.n	bdc <adc_set_window_mode+0x4>
		/* Wait for synchronization */
	}

	/* Set window mode */
	uint32_t ctrlc = adc_module->CTRLC.reg;
     be4:	896c      	ldrh	r4, [r5, #10]
	ctrlc = (ctrlc & (~ADC_CTRLC_WINMODE_Msk)) | window_mode;
     be6:	4e0c      	ldr	r6, [pc, #48]	; (c18 <adc_set_window_mode+0x40>)
     be8:	4034      	ands	r4, r6
	adc_module->CTRLC.reg = ctrlc;
     bea:	4321      	orrs	r1, r4
     bec:	8169      	strh	r1, [r5, #10]
	Adc *const adc_module = module_inst->hw;
     bee:	6804      	ldr	r4, [r0, #0]
	if (adc_module->SYNCBUSY.reg) {
     bf0:	8c21      	ldrh	r1, [r4, #32]
     bf2:	b289      	uxth	r1, r1

	while (adc_is_syncing(module_inst)) {
     bf4:	2900      	cmp	r1, #0
     bf6:	d1fb      	bne.n	bf0 <adc_set_window_mode+0x18>
		/* Wait for synchronization */
	}

	/* Set lower window monitor threshold value */
	adc_module->WINLT.reg = window_lower_value;
     bf8:	b292      	uxth	r2, r2
     bfa:	81ea      	strh	r2, [r5, #14]
	Adc *const adc_module = module_inst->hw;
     bfc:	6801      	ldr	r1, [r0, #0]
	if (adc_module->SYNCBUSY.reg) {
     bfe:	8c0a      	ldrh	r2, [r1, #32]
     c00:	b292      	uxth	r2, r2

	while (adc_is_syncing(module_inst)) {
     c02:	2a00      	cmp	r2, #0
     c04:	d1fb      	bne.n	bfe <adc_set_window_mode+0x26>
		/* Wait for synchronization */
	}

	/* Set upper window monitor threshold value */
	adc_module->WINUT.reg = window_upper_value;
     c06:	b29b      	uxth	r3, r3
     c08:	822b      	strh	r3, [r5, #16]
	Adc *const adc_module = module_inst->hw;
     c0a:	6802      	ldr	r2, [r0, #0]
	if (adc_module->SYNCBUSY.reg) {
     c0c:	8c13      	ldrh	r3, [r2, #32]
     c0e:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     c10:	2b00      	cmp	r3, #0
     c12:	d1fb      	bne.n	c0c <adc_set_window_mode+0x34>
		/* Wait for synchronization */
	}
}
     c14:	bd70      	pop	{r4, r5, r6, pc}
     c16:	46c0      	nop			; (mov r8, r8)
     c18:	fffff8ff 	.word	0xfffff8ff

00000c1c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c1e:	46de      	mov	lr, fp
     c20:	4657      	mov	r7, sl
     c22:	464e      	mov	r6, r9
     c24:	4645      	mov	r5, r8
     c26:	b5e0      	push	{r5, r6, r7, lr}
     c28:	b09f      	sub	sp, #124	; 0x7c
     c2a:	0005      	movs	r5, r0
     c2c:	000e      	movs	r6, r1
     c2e:	0017      	movs	r7, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     c30:	0008      	movs	r0, r1
     c32:	4b98      	ldr	r3, [pc, #608]	; (e94 <adc_init+0x278>)
     c34:	4798      	blx	r3
     c36:	0004      	movs	r4, r0
     c38:	9001      	str	r0, [sp, #4]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     c3a:	602e      	str	r6, [r5, #0]
			MCLK->APBCMASK.reg |= mask;
     c3c:	4a96      	ldr	r2, [pc, #600]	; (e98 <adc_init+0x27c>)
     c3e:	69d3      	ldr	r3, [r2, #28]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_ADC);
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
     c40:	0080      	lsls	r0, r0, #2
     c42:	4996      	ldr	r1, [pc, #600]	; (e9c <adc_init+0x280>)
     c44:	5841      	ldr	r1, [r0, r1]
     c46:	430b      	orrs	r3, r1
     c48:	61d3      	str	r3, [r2, #28]
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     c4a:	7833      	ldrb	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     c4c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     c4e:	07db      	lsls	r3, r3, #31
     c50:	d506      	bpl.n	c60 <adc_init+0x44>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     c52:	b01f      	add	sp, #124	; 0x7c
     c54:	bc3c      	pop	{r2, r3, r4, r5}
     c56:	4690      	mov	r8, r2
     c58:	4699      	mov	r9, r3
     c5a:	46a2      	mov	sl, r4
     c5c:	46ab      	mov	fp, r5
     c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Adc *const adc_module = module_inst->hw;
     c60:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     c62:	8c13      	ldrh	r3, [r2, #32]
     c64:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     c66:	2b00      	cmp	r3, #0
     c68:	d1fb      	bne.n	c62 <adc_init+0x46>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     c6a:	7833      	ldrb	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     c6c:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     c6e:	079b      	lsls	r3, r3, #30
     c70:	d4ef      	bmi.n	c52 <adc_init+0x36>
	module_inst->reference = config->reference;
     c72:	787b      	ldrb	r3, [r7, #1]
     c74:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     c76:	2b00      	cmp	r3, #0
     c78:	d104      	bne.n	c84 <adc_init+0x68>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     c7a:	4a89      	ldr	r2, [pc, #548]	; (ea0 <adc_init+0x284>)
     c7c:	69d3      	ldr	r3, [r2, #28]
     c7e:	2104      	movs	r1, #4
     c80:	430b      	orrs	r3, r1
     c82:	61d3      	str	r3, [r2, #28]
		module_inst->callback[i] = NULL;
     c84:	2300      	movs	r3, #0
     c86:	60ab      	str	r3, [r5, #8]
     c88:	60eb      	str	r3, [r5, #12]
     c8a:	612b      	str	r3, [r5, #16]
	module_inst->registered_callback_mask = 0;
     c8c:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
     c8e:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
     c90:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
     c92:	772b      	strb	r3, [r5, #28]
	_adc_instances[instance] = module_inst;
     c94:	00a3      	lsls	r3, r4, #2
     c96:	4a83      	ldr	r2, [pc, #524]	; (ea4 <adc_init+0x288>)
     c98:	509d      	str	r5, [r3, r2]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     c9a:	232a      	movs	r3, #42	; 0x2a
     c9c:	5cfb      	ldrb	r3, [r7, r3]
     c9e:	2b00      	cmp	r3, #0
     ca0:	d105      	bne.n	cae <adc_init+0x92>
     ca2:	7b3b      	ldrb	r3, [r7, #12]
     ca4:	2b00      	cmp	r3, #0
     ca6:	d102      	bne.n	cae <adc_init+0x92>
		module_inst->software_trigger = true;
     ca8:	3301      	adds	r3, #1
     caa:	776b      	strb	r3, [r5, #29]
     cac:	e001      	b.n	cb2 <adc_init+0x96>
		module_inst->software_trigger = false;
     cae:	2300      	movs	r3, #0
     cb0:	776b      	strb	r3, [r5, #29]
	Adc *const adc_module = module_inst->hw;
     cb2:	682b      	ldr	r3, [r5, #0]
     cb4:	469a      	mov	sl, r3
	gclk_chan_conf.source_generator = config->clock_source;
     cb6:	783b      	ldrb	r3, [r7, #0]
     cb8:	aa04      	add	r2, sp, #16
     cba:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     cbc:	4b7a      	ldr	r3, [pc, #488]	; (ea8 <adc_init+0x28c>)
     cbe:	5d1e      	ldrb	r6, [r3, r4]
     cc0:	0011      	movs	r1, r2
     cc2:	0030      	movs	r0, r6
     cc4:	4b79      	ldr	r3, [pc, #484]	; (eac <adc_init+0x290>)
     cc6:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     cc8:	0030      	movs	r0, r6
     cca:	4b79      	ldr	r3, [pc, #484]	; (eb0 <adc_init+0x294>)
     ccc:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
     cce:	793b      	ldrb	r3, [r7, #4]
     cd0:	4698      	mov	r8, r3
	const uint32_t pinmapping0[] = {
     cd2:	ae06      	add	r6, sp, #24
     cd4:	4b77      	ldr	r3, [pc, #476]	; (eb4 <adc_init+0x298>)
     cd6:	469c      	mov	ip, r3
     cd8:	0032      	movs	r2, r6
     cda:	0019      	movs	r1, r3
     cdc:	c949      	ldmia	r1!, {r0, r3, r6}
     cde:	c249      	stmia	r2!, {r0, r3, r6}
     ce0:	c949      	ldmia	r1!, {r0, r3, r6}
     ce2:	c249      	stmia	r2!, {r0, r3, r6}
     ce4:	c949      	ldmia	r1!, {r0, r3, r6}
     ce6:	c249      	stmia	r2!, {r0, r3, r6}
     ce8:	c949      	ldmia	r1!, {r0, r3, r6}
     cea:	c249      	stmia	r2!, {r0, r3, r6}
	const uint32_t pinmapping1[] = {
     cec:	a912      	add	r1, sp, #72	; 0x48
     cee:	4663      	mov	r3, ip
     cf0:	3330      	adds	r3, #48	; 0x30
     cf2:	000a      	movs	r2, r1
     cf4:	cb43      	ldmia	r3!, {r0, r1, r6}
     cf6:	c243      	stmia	r2!, {r0, r1, r6}
     cf8:	cb43      	ldmia	r3!, {r0, r1, r6}
     cfa:	c243      	stmia	r2!, {r0, r1, r6}
     cfc:	cb43      	ldmia	r3!, {r0, r1, r6}
     cfe:	c243      	stmia	r2!, {r0, r1, r6}
     d00:	cb43      	ldmia	r3!, {r0, r1, r6}
     d02:	c243      	stmia	r2!, {r0, r1, r6}
	switch(index) {
     d04:	9b01      	ldr	r3, [sp, #4]
     d06:	2b00      	cmp	r3, #0
     d08:	d004      	beq.n	d14 <adc_init+0xf8>
		pinmapping = pinmapping1;
     d0a:	a912      	add	r1, sp, #72	; 0x48
	switch(index) {
     d0c:	2b01      	cmp	r3, #1
     d0e:	d002      	beq.n	d16 <adc_init+0xfa>
	const uint32_t *pinmapping = NULL;;
     d10:	2100      	movs	r1, #0
     d12:	e000      	b.n	d16 <adc_init+0xfa>
		pinmapping = pinmapping0;
     d14:	a906      	add	r1, sp, #24
	if (pin <= _adc_extchannel_msb[index]) {
     d16:	00a3      	lsls	r3, r4, #2
     d18:	4a67      	ldr	r2, [pc, #412]	; (eb8 <adc_init+0x29c>)
     d1a:	589b      	ldr	r3, [r3, r2]
     d1c:	469b      	mov	fp, r3
     d1e:	4598      	cmp	r8, r3
     d20:	d922      	bls.n	d68 <adc_init+0x14c>
	_adc_configure_ain_pin(index, config->negative_input);
     d22:	88fb      	ldrh	r3, [r7, #6]
     d24:	4698      	mov	r8, r3
	const uint32_t pinmapping0[] = {
     d26:	ae06      	add	r6, sp, #24
     d28:	4b62      	ldr	r3, [pc, #392]	; (eb4 <adc_init+0x298>)
     d2a:	469c      	mov	ip, r3
     d2c:	0032      	movs	r2, r6
     d2e:	0019      	movs	r1, r3
     d30:	c949      	ldmia	r1!, {r0, r3, r6}
     d32:	c249      	stmia	r2!, {r0, r3, r6}
     d34:	c949      	ldmia	r1!, {r0, r3, r6}
     d36:	c249      	stmia	r2!, {r0, r3, r6}
     d38:	c949      	ldmia	r1!, {r0, r3, r6}
     d3a:	c249      	stmia	r2!, {r0, r3, r6}
     d3c:	c949      	ldmia	r1!, {r0, r3, r6}
     d3e:	c249      	stmia	r2!, {r0, r3, r6}
	const uint32_t pinmapping1[] = {
     d40:	a912      	add	r1, sp, #72	; 0x48
     d42:	4663      	mov	r3, ip
     d44:	3330      	adds	r3, #48	; 0x30
     d46:	000a      	movs	r2, r1
     d48:	cb43      	ldmia	r3!, {r0, r1, r6}
     d4a:	c243      	stmia	r2!, {r0, r1, r6}
     d4c:	cb43      	ldmia	r3!, {r0, r1, r6}
     d4e:	c243      	stmia	r2!, {r0, r1, r6}
     d50:	cb43      	ldmia	r3!, {r0, r1, r6}
     d52:	c243      	stmia	r2!, {r0, r1, r6}
     d54:	cb43      	ldmia	r3!, {r0, r1, r6}
     d56:	c243      	stmia	r2!, {r0, r1, r6}
	switch(index) {
     d58:	9a01      	ldr	r2, [sp, #4]
     d5a:	2a00      	cmp	r2, #0
     d5c:	d012      	beq.n	d84 <adc_init+0x168>
		pinmapping = pinmapping1;
     d5e:	ab12      	add	r3, sp, #72	; 0x48
	switch(index) {
     d60:	2a01      	cmp	r2, #1
     d62:	d010      	beq.n	d86 <adc_init+0x16a>
	const uint32_t *pinmapping = NULL;;
     d64:	2300      	movs	r3, #0
     d66:	e00e      	b.n	d86 <adc_init+0x16a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     d68:	4643      	mov	r3, r8
     d6a:	0098      	lsls	r0, r3, #2
     d6c:	5840      	ldr	r0, [r0, r1]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d6e:	a905      	add	r1, sp, #20
     d70:	2300      	movs	r3, #0
     d72:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     d74:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     d76:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     d78:	3301      	adds	r3, #1
     d7a:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     d7c:	b2c0      	uxtb	r0, r0
     d7e:	4b4f      	ldr	r3, [pc, #316]	; (ebc <adc_init+0x2a0>)
     d80:	4798      	blx	r3
     d82:	e7ce      	b.n	d22 <adc_init+0x106>
		pinmapping = pinmapping0;
     d84:	ab06      	add	r3, sp, #24
	if (pin <= _adc_extchannel_msb[index]) {
     d86:	45d8      	cmp	r8, fp
     d88:	d90a      	bls.n	da0 <adc_init+0x184>
     d8a:	2100      	movs	r1, #0
     d8c:	2600      	movs	r6, #0
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     d8e:	2301      	movs	r3, #1
     d90:	4699      	mov	r9, r3
	const uint32_t pinmapping0[] = {
     d92:	4b48      	ldr	r3, [pc, #288]	; (eb4 <adc_init+0x298>)
     d94:	4698      	mov	r8, r3
		system_pinmux_pin_set_config(pin_map_result, &config);
     d96:	9403      	str	r4, [sp, #12]
     d98:	465b      	mov	r3, fp
     d9a:	9302      	str	r3, [sp, #8]
     d9c:	46ab      	mov	fp, r5
     d9e:	e020      	b.n	de2 <adc_init+0x1c6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     da0:	4642      	mov	r2, r8
     da2:	0090      	lsls	r0, r2, #2
     da4:	58c0      	ldr	r0, [r0, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     da6:	a905      	add	r1, sp, #20
     da8:	2300      	movs	r3, #0
     daa:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     dac:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     dae:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     db0:	3301      	adds	r3, #1
     db2:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     db4:	b2c0      	uxtb	r0, r0
     db6:	4b41      	ldr	r3, [pc, #260]	; (ebc <adc_init+0x2a0>)
     db8:	4798      	blx	r3
     dba:	e7e6      	b.n	d8a <adc_init+0x16e>
		pinmapping = pinmapping0;
     dbc:	ab06      	add	r3, sp, #24
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     dbe:	0089      	lsls	r1, r1, #2
     dc0:	58c8      	ldr	r0, [r1, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     dc2:	a905      	add	r1, sp, #20
     dc4:	2300      	movs	r3, #0
     dc6:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     dc8:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     dca:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     dcc:	464b      	mov	r3, r9
     dce:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     dd0:	b2c0      	uxtb	r0, r0
     dd2:	4b3a      	ldr	r3, [pc, #232]	; (ebc <adc_init+0x2a0>)
     dd4:	4798      	blx	r3
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     dd6:	3601      	adds	r6, #1
     dd8:	b2f6      	uxtb	r6, r6
     dda:	0031      	movs	r1, r6
     ddc:	9b02      	ldr	r3, [sp, #8]
     dde:	429e      	cmp	r6, r3
     de0:	d823      	bhi.n	e2a <adc_init+0x20e>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     de2:	464b      	mov	r3, r9
     de4:	40b3      	lsls	r3, r6
     de6:	693a      	ldr	r2, [r7, #16]
     de8:	421a      	tst	r2, r3
     dea:	d0f4      	beq.n	dd6 <adc_init+0x1ba>
	const uint32_t pinmapping0[] = {
     dec:	a806      	add	r0, sp, #24
     dee:	0003      	movs	r3, r0
     df0:	4642      	mov	r2, r8
     df2:	ca31      	ldmia	r2!, {r0, r4, r5}
     df4:	c331      	stmia	r3!, {r0, r4, r5}
     df6:	ca31      	ldmia	r2!, {r0, r4, r5}
     df8:	c331      	stmia	r3!, {r0, r4, r5}
     dfa:	ca31      	ldmia	r2!, {r0, r4, r5}
     dfc:	c331      	stmia	r3!, {r0, r4, r5}
     dfe:	ca31      	ldmia	r2!, {r0, r4, r5}
     e00:	c331      	stmia	r3!, {r0, r4, r5}
	const uint32_t pinmapping1[] = {
     e02:	a812      	add	r0, sp, #72	; 0x48
     e04:	4643      	mov	r3, r8
     e06:	3330      	adds	r3, #48	; 0x30
     e08:	0002      	movs	r2, r0
     e0a:	cb31      	ldmia	r3!, {r0, r4, r5}
     e0c:	c231      	stmia	r2!, {r0, r4, r5}
     e0e:	cb31      	ldmia	r3!, {r0, r4, r5}
     e10:	c231      	stmia	r2!, {r0, r4, r5}
     e12:	cb31      	ldmia	r3!, {r0, r4, r5}
     e14:	c231      	stmia	r2!, {r0, r4, r5}
     e16:	cb31      	ldmia	r3!, {r0, r4, r5}
     e18:	c231      	stmia	r2!, {r0, r4, r5}
	switch(index) {
     e1a:	9a01      	ldr	r2, [sp, #4]
     e1c:	2a00      	cmp	r2, #0
     e1e:	d0cd      	beq.n	dbc <adc_init+0x1a0>
		pinmapping = pinmapping1;
     e20:	ab12      	add	r3, sp, #72	; 0x48
	switch(index) {
     e22:	2a01      	cmp	r2, #1
     e24:	d0cb      	beq.n	dbe <adc_init+0x1a2>
	const uint32_t *pinmapping = NULL;;
     e26:	2300      	movs	r3, #0
     e28:	e7c9      	b.n	dbe <adc_init+0x1a2>
     e2a:	465d      	mov	r5, fp
     e2c:	9c03      	ldr	r4, [sp, #12]
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     e2e:	7b7b      	ldrb	r3, [r7, #13]
     e30:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     e32:	7bba      	ldrb	r2, [r7, #14]
     e34:	01d2      	lsls	r2, r2, #7
     e36:	4313      	orrs	r3, r2
     e38:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     e3a:	4652      	mov	r2, sl
     e3c:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     e3e:	7d3b      	ldrb	r3, [r7, #20]
     e40:	01db      	lsls	r3, r3, #7
			| (config->reference);
     e42:	787a      	ldrb	r2, [r7, #1]
     e44:	4313      	orrs	r3, r2
     e46:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     e48:	4652      	mov	r2, sl
     e4a:	7093      	strb	r3, [r2, #2]
	switch (config->resolution) {
     e4c:	78fb      	ldrb	r3, [r7, #3]
     e4e:	2b34      	cmp	r3, #52	; 0x34
     e50:	d900      	bls.n	e54 <adc_init+0x238>
     e52:	e14f      	b.n	10f4 <adc_init+0x4d8>
     e54:	009b      	lsls	r3, r3, #2
     e56:	4a1a      	ldr	r2, [pc, #104]	; (ec0 <adc_init+0x2a4>)
     e58:	58d3      	ldr	r3, [r2, r3]
     e5a:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     e5c:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     e5e:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_4;
     e60:	2102      	movs	r1, #2
     e62:	e032      	b.n	eca <adc_init+0x2ae>
		adjres = config->divide_result;
     e64:	7a79      	ldrb	r1, [r7, #9]
		accumulate = config->accumulate_samples;
     e66:	7a3a      	ldrb	r2, [r7, #8]
		resolution = ADC_RESOLUTION_16BIT;
     e68:	2610      	movs	r6, #16
     e6a:	e02e      	b.n	eca <adc_init+0x2ae>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     e6c:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     e6e:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_2;
     e70:	2101      	movs	r1, #1
     e72:	e02a      	b.n	eca <adc_init+0x2ae>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     e74:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
     e76:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     e78:	2100      	movs	r1, #0
     e7a:	e026      	b.n	eca <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     e7c:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
     e7e:	2630      	movs	r6, #48	; 0x30
	uint8_t adjres = 0;
     e80:	2100      	movs	r1, #0
     e82:	e022      	b.n	eca <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     e84:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
     e86:	2620      	movs	r6, #32
	uint8_t adjres = 0;
     e88:	2100      	movs	r1, #0
     e8a:	e01e      	b.n	eca <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     e8c:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
     e8e:	2600      	movs	r6, #0
	uint8_t adjres = 0;
     e90:	2100      	movs	r1, #0
     e92:	e01a      	b.n	eca <adc_init+0x2ae>
     e94:	00000b71 	.word	0x00000b71
     e98:	40000800 	.word	0x40000800
     e9c:	00008708 	.word	0x00008708
     ea0:	40001800 	.word	0x40001800
     ea4:	20001450 	.word	0x20001450
     ea8:	00008730 	.word	0x00008730
     eac:	0000482d 	.word	0x0000482d
     eb0:	000047bd 	.word	0x000047bd
     eb4:	000086a8 	.word	0x000086a8
     eb8:	00008728 	.word	0x00008728
     ebc:	00004929 	.word	0x00004929
     ec0:	000085d4 	.word	0x000085d4
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     ec4:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
     ec6:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_2;
     ec8:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     eca:	0109      	lsls	r1, r1, #4
     ecc:	2370      	movs	r3, #112	; 0x70
     ece:	400b      	ands	r3, r1
     ed0:	4313      	orrs	r3, r2
     ed2:	4652      	mov	r2, sl
     ed4:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     ed6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     ed8:	8c13      	ldrh	r3, [r2, #32]
     eda:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     edc:	2b00      	cmp	r3, #0
     ede:	d1fb      	bne.n	ed8 <adc_init+0x2bc>
	if (config->sample_length > 63) {
     ee0:	7d7b      	ldrb	r3, [r7, #21]
		return STATUS_ERR_INVALID_ARG;
     ee2:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     ee4:	2b3f      	cmp	r3, #63	; 0x3f
     ee6:	d900      	bls.n	eea <adc_init+0x2ce>
     ee8:	e6b3      	b.n	c52 <adc_init+0x36>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     eea:	7bfa      	ldrb	r2, [r7, #15]
     eec:	01d2      	lsls	r2, r2, #7
     eee:	4313      	orrs	r3, r2
     ef0:	b2db      	uxtb	r3, r3
		adc_module->SAMPCTRL.reg =
     ef2:	4652      	mov	r2, sl
     ef4:	7353      	strb	r3, [r2, #13]
	Adc *const adc_module = module_inst->hw;
     ef6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     ef8:	8c13      	ldrh	r3, [r2, #32]
     efa:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     efc:	2b00      	cmp	r3, #0
     efe:	d1fb      	bne.n	ef8 <adc_init+0x2dc>
			config->clock_prescaler;
     f00:	78bb      	ldrb	r3, [r7, #2]
	adc_module->CTRLB.reg =
     f02:	4652      	mov	r2, sl
     f04:	7053      	strb	r3, [r2, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     f06:	2324      	movs	r3, #36	; 0x24
     f08:	5cfb      	ldrb	r3, [r7, r3]
     f0a:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     f0c:	7b3a      	ldrb	r2, [r7, #12]
     f0e:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     f10:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     f12:	7afb      	ldrb	r3, [r7, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     f14:	4313      	orrs	r3, r2
     f16:	7aba      	ldrb	r2, [r7, #10]
     f18:	0052      	lsls	r2, r2, #1
     f1a:	4313      	orrs	r3, r2
     f1c:	4333      	orrs	r3, r6
	adc_module->CTRLC.reg =
     f1e:	4652      	mov	r2, sl
     f20:	8153      	strh	r3, [r2, #10]
	Adc *const adc_module = module_inst->hw;
     f22:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     f24:	8c13      	ldrh	r3, [r2, #32]
     f26:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     f28:	2b00      	cmp	r3, #0
     f2a:	d1fb      	bne.n	f24 <adc_init+0x308>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     f2c:	8b3b      	ldrh	r3, [r7, #24]
     f2e:	2b00      	cmp	r3, #0
     f30:	d020      	beq.n	f74 <adc_init+0x358>
		switch (resolution) {
     f32:	2e10      	cmp	r6, #16
     f34:	d100      	bne.n	f38 <adc_init+0x31c>
     f36:	e0bf      	b.n	10b8 <adc_init+0x49c>
     f38:	d800      	bhi.n	f3c <adc_init+0x320>
     f3a:	e07f      	b.n	103c <adc_init+0x420>
     f3c:	2e20      	cmp	r6, #32
     f3e:	d100      	bne.n	f42 <adc_init+0x326>
     f40:	e09c      	b.n	107c <adc_init+0x460>
     f42:	2e30      	cmp	r6, #48	; 0x30
     f44:	d116      	bne.n	f74 <adc_init+0x358>
			if (config->differential_mode &&
     f46:	7afa      	ldrb	r2, [r7, #11]
     f48:	2a00      	cmp	r2, #0
     f4a:	d00a      	beq.n	f62 <adc_init+0x346>
					(config->window.window_lower_value > 127 ||
     f4c:	69fa      	ldr	r2, [r7, #28]
     f4e:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     f50:	2017      	movs	r0, #23
			if (config->differential_mode &&
     f52:	2aff      	cmp	r2, #255	; 0xff
     f54:	d900      	bls.n	f58 <adc_init+0x33c>
     f56:	e67c      	b.n	c52 <adc_init+0x36>
					config->window.window_lower_value < -128 ||
     f58:	6a3a      	ldr	r2, [r7, #32]
     f5a:	3280      	adds	r2, #128	; 0x80
     f5c:	2aff      	cmp	r2, #255	; 0xff
     f5e:	d900      	bls.n	f62 <adc_init+0x346>
     f60:	e677      	b.n	c52 <adc_init+0x36>
				return STATUS_ERR_INVALID_ARG;
     f62:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     f64:	69fa      	ldr	r2, [r7, #28]
     f66:	2aff      	cmp	r2, #255	; 0xff
     f68:	dd00      	ble.n	f6c <adc_init+0x350>
     f6a:	e672      	b.n	c52 <adc_init+0x36>
     f6c:	6a3a      	ldr	r2, [r7, #32]
     f6e:	2aff      	cmp	r2, #255	; 0xff
     f70:	dd00      	ble.n	f74 <adc_init+0x358>
     f72:	e66e      	b.n	c52 <adc_init+0x36>
	adc_module->CTRLC.reg |= config->window.window_mode;
     f74:	4652      	mov	r2, sl
     f76:	8952      	ldrh	r2, [r2, #10]
     f78:	4313      	orrs	r3, r2
     f7a:	4652      	mov	r2, sl
     f7c:	8153      	strh	r3, [r2, #10]
	Adc *const adc_module = module_inst->hw;
     f7e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     f80:	8c13      	ldrh	r3, [r2, #32]
     f82:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     f84:	2b00      	cmp	r3, #0
     f86:	d1fb      	bne.n	f80 <adc_init+0x364>
	adc_module->WINLT.reg =
     f88:	8bbb      	ldrh	r3, [r7, #28]
     f8a:	4652      	mov	r2, sl
     f8c:	81d3      	strh	r3, [r2, #14]
	Adc *const adc_module = module_inst->hw;
     f8e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     f90:	8c13      	ldrh	r3, [r2, #32]
     f92:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     f94:	2b00      	cmp	r3, #0
     f96:	d1fb      	bne.n	f90 <adc_init+0x374>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     f98:	8c3b      	ldrh	r3, [r7, #32]
     f9a:	4652      	mov	r2, sl
     f9c:	8213      	strh	r3, [r2, #16]
	Adc *const adc_module = module_inst->hw;
     f9e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     fa0:	8c13      	ldrh	r3, [r2, #32]
     fa2:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     fa4:	2b00      	cmp	r3, #0
     fa6:	d1fb      	bne.n	fa0 <adc_init+0x384>
			config->positive_input;
     fa8:	793b      	ldrb	r3, [r7, #4]
			config->negative_input |
     faa:	88fa      	ldrh	r2, [r7, #6]
     fac:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     fae:	4652      	mov	r2, sl
     fb0:	8113      	strh	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     fb2:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     fb4:	8c13      	ldrh	r3, [r2, #32]
     fb6:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     fb8:	2b00      	cmp	r3, #0
     fba:	d1fb      	bne.n	fb4 <adc_init+0x398>
	adc_module->EVCTRL.reg = config->event_action;
     fbc:	332a      	adds	r3, #42	; 0x2a
     fbe:	5cfb      	ldrb	r3, [r7, r3]
     fc0:	4652      	mov	r2, sl
     fc2:	70d3      	strb	r3, [r2, #3]
	adc_module->INTENCLR.reg =
     fc4:	2307      	movs	r3, #7
     fc6:	7113      	strb	r3, [r2, #4]
	if (config->correction.correction_enable){
     fc8:	331d      	adds	r3, #29
     fca:	5cfb      	ldrb	r3, [r7, r3]
     fcc:	2b00      	cmp	r3, #0
     fce:	d01d      	beq.n	100c <adc_init+0x3f0>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     fd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     fd2:	4a49      	ldr	r2, [pc, #292]	; (10f8 <adc_init+0x4dc>)
			return STATUS_ERR_INVALID_ARG;
     fd4:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     fd6:	4293      	cmp	r3, r2
     fd8:	d900      	bls.n	fdc <adc_init+0x3c0>
     fda:	e63a      	b.n	c52 <adc_init+0x36>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     fdc:	4652      	mov	r2, sl
     fde:	8253      	strh	r3, [r2, #18]
	Adc *const adc_module = module_inst->hw;
     fe0:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     fe2:	8c13      	ldrh	r3, [r2, #32]
     fe4:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     fe6:	2b00      	cmp	r3, #0
     fe8:	d1fb      	bne.n	fe2 <adc_init+0x3c6>
		if (config->correction.offset_correction > 2047 ||
     fea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
     fec:	2380      	movs	r3, #128	; 0x80
     fee:	011b      	lsls	r3, r3, #4
     ff0:	18d3      	adds	r3, r2, r3
     ff2:	4941      	ldr	r1, [pc, #260]	; (10f8 <adc_init+0x4dc>)
     ff4:	b29b      	uxth	r3, r3
			return STATUS_ERR_INVALID_ARG;
     ff6:	2017      	movs	r0, #23
		if (config->correction.offset_correction > 2047 ||
     ff8:	428b      	cmp	r3, r1
     ffa:	d900      	bls.n	ffe <adc_init+0x3e2>
     ffc:	e629      	b.n	c52 <adc_init+0x36>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     ffe:	4653      	mov	r3, sl
    1000:	829a      	strh	r2, [r3, #20]
	Adc *const adc_module = module_inst->hw;
    1002:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    1004:	8c13      	ldrh	r3, [r2, #32]
    1006:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
    1008:	2b00      	cmp	r3, #0
    100a:	d1fb      	bne.n	1004 <adc_init+0x3e8>
			ADC_CALIB_BIASREFBUF(
    100c:	00a2      	lsls	r2, r4, #2
    100e:	4b3b      	ldr	r3, [pc, #236]	; (10fc <adc_init+0x4e0>)
    1010:	58d3      	ldr	r3, [r2, r3]
    1012:	493b      	ldr	r1, [pc, #236]	; (1100 <adc_init+0x4e4>)
    1014:	5d09      	ldrb	r1, [r1, r4]
    1016:	681b      	ldr	r3, [r3, #0]
    1018:	40cb      	lsrs	r3, r1
    101a:	021b      	lsls	r3, r3, #8
    101c:	21e0      	movs	r1, #224	; 0xe0
    101e:	00c9      	lsls	r1, r1, #3
    1020:	400b      	ands	r3, r1
			ADC_CALIB_BIASCOMP(
    1022:	4938      	ldr	r1, [pc, #224]	; (1104 <adc_init+0x4e8>)
    1024:	5852      	ldr	r2, [r2, r1]
    1026:	4938      	ldr	r1, [pc, #224]	; (1108 <adc_init+0x4ec>)
    1028:	5d09      	ldrb	r1, [r1, r4]
    102a:	6812      	ldr	r2, [r2, #0]
    102c:	40ca      	lsrs	r2, r1
    102e:	2107      	movs	r1, #7
    1030:	400a      	ands	r2, r1
			) |
    1032:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    1034:	4652      	mov	r2, sl
    1036:	8593      	strh	r3, [r2, #44]	; 0x2c
	return STATUS_OK;
    1038:	2000      	movs	r0, #0
    103a:	e60a      	b.n	c52 <adc_init+0x36>
		switch (resolution) {
    103c:	2e00      	cmp	r6, #0
    103e:	d199      	bne.n	f74 <adc_init+0x358>
			if (config->differential_mode &&
    1040:	7afa      	ldrb	r2, [r7, #11]
    1042:	2a00      	cmp	r2, #0
    1044:	d00f      	beq.n	1066 <adc_init+0x44a>
					(config->window.window_lower_value > 2047 ||
    1046:	69fa      	ldr	r2, [r7, #28]
    1048:	2180      	movs	r1, #128	; 0x80
    104a:	0109      	lsls	r1, r1, #4
    104c:	468c      	mov	ip, r1
    104e:	4462      	add	r2, ip
			if (config->differential_mode &&
    1050:	4929      	ldr	r1, [pc, #164]	; (10f8 <adc_init+0x4dc>)
				return STATUS_ERR_INVALID_ARG;
    1052:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1054:	428a      	cmp	r2, r1
    1056:	d900      	bls.n	105a <adc_init+0x43e>
    1058:	e5fb      	b.n	c52 <adc_init+0x36>
					config->window.window_lower_value < -2048 ||
    105a:	6a3a      	ldr	r2, [r7, #32]
    105c:	4462      	add	r2, ip
    105e:	4926      	ldr	r1, [pc, #152]	; (10f8 <adc_init+0x4dc>)
    1060:	428a      	cmp	r2, r1
    1062:	d900      	bls.n	1066 <adc_init+0x44a>
    1064:	e5f5      	b.n	c52 <adc_init+0x36>
			} else if (config->window.window_lower_value > 4095 ||
    1066:	4a24      	ldr	r2, [pc, #144]	; (10f8 <adc_init+0x4dc>)
				return STATUS_ERR_INVALID_ARG;
    1068:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    106a:	69f9      	ldr	r1, [r7, #28]
    106c:	4291      	cmp	r1, r2
    106e:	dd00      	ble.n	1072 <adc_init+0x456>
    1070:	e5ef      	b.n	c52 <adc_init+0x36>
    1072:	6a39      	ldr	r1, [r7, #32]
    1074:	4291      	cmp	r1, r2
    1076:	dd00      	ble.n	107a <adc_init+0x45e>
    1078:	e5eb      	b.n	c52 <adc_init+0x36>
    107a:	e77b      	b.n	f74 <adc_init+0x358>
			if (config->differential_mode &&
    107c:	7afa      	ldrb	r2, [r7, #11]
    107e:	2a00      	cmp	r2, #0
    1080:	d00f      	beq.n	10a2 <adc_init+0x486>
					(config->window.window_lower_value > 511 ||
    1082:	69fa      	ldr	r2, [r7, #28]
    1084:	2180      	movs	r1, #128	; 0x80
    1086:	0089      	lsls	r1, r1, #2
    1088:	468c      	mov	ip, r1
    108a:	4462      	add	r2, ip
			if (config->differential_mode &&
    108c:	491f      	ldr	r1, [pc, #124]	; (110c <adc_init+0x4f0>)
				return STATUS_ERR_INVALID_ARG;
    108e:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1090:	428a      	cmp	r2, r1
    1092:	d900      	bls.n	1096 <adc_init+0x47a>
    1094:	e5dd      	b.n	c52 <adc_init+0x36>
					config->window.window_lower_value < -512 ||
    1096:	6a3a      	ldr	r2, [r7, #32]
    1098:	4462      	add	r2, ip
    109a:	491c      	ldr	r1, [pc, #112]	; (110c <adc_init+0x4f0>)
    109c:	428a      	cmp	r2, r1
    109e:	d900      	bls.n	10a2 <adc_init+0x486>
    10a0:	e5d7      	b.n	c52 <adc_init+0x36>
			} else if (config->window.window_lower_value > 1023 ||
    10a2:	4a1a      	ldr	r2, [pc, #104]	; (110c <adc_init+0x4f0>)
				return STATUS_ERR_INVALID_ARG;
    10a4:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    10a6:	69f9      	ldr	r1, [r7, #28]
    10a8:	4291      	cmp	r1, r2
    10aa:	dd00      	ble.n	10ae <adc_init+0x492>
    10ac:	e5d1      	b.n	c52 <adc_init+0x36>
    10ae:	6a39      	ldr	r1, [r7, #32]
    10b0:	4291      	cmp	r1, r2
    10b2:	dd00      	ble.n	10b6 <adc_init+0x49a>
    10b4:	e5cd      	b.n	c52 <adc_init+0x36>
    10b6:	e75d      	b.n	f74 <adc_init+0x358>
			if (config->differential_mode &&
    10b8:	7afa      	ldrb	r2, [r7, #11]
    10ba:	2a00      	cmp	r2, #0
    10bc:	d00f      	beq.n	10de <adc_init+0x4c2>
					(config->window.window_lower_value > 32767 ||
    10be:	69fa      	ldr	r2, [r7, #28]
    10c0:	2180      	movs	r1, #128	; 0x80
    10c2:	0209      	lsls	r1, r1, #8
    10c4:	468c      	mov	ip, r1
    10c6:	4462      	add	r2, ip
			if (config->differential_mode &&
    10c8:	4911      	ldr	r1, [pc, #68]	; (1110 <adc_init+0x4f4>)
				return STATUS_ERR_INVALID_ARG;
    10ca:	2017      	movs	r0, #23
			if (config->differential_mode &&
    10cc:	428a      	cmp	r2, r1
    10ce:	d900      	bls.n	10d2 <adc_init+0x4b6>
    10d0:	e5bf      	b.n	c52 <adc_init+0x36>
					config->window.window_lower_value < -32768 ||
    10d2:	6a3a      	ldr	r2, [r7, #32]
    10d4:	4462      	add	r2, ip
    10d6:	490e      	ldr	r1, [pc, #56]	; (1110 <adc_init+0x4f4>)
    10d8:	428a      	cmp	r2, r1
    10da:	d900      	bls.n	10de <adc_init+0x4c2>
    10dc:	e5b9      	b.n	c52 <adc_init+0x36>
			} else if (config->window.window_lower_value > 65535 ||
    10de:	4a0c      	ldr	r2, [pc, #48]	; (1110 <adc_init+0x4f4>)
				return STATUS_ERR_INVALID_ARG;
    10e0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    10e2:	69f9      	ldr	r1, [r7, #28]
    10e4:	4291      	cmp	r1, r2
    10e6:	dd00      	ble.n	10ea <adc_init+0x4ce>
    10e8:	e5b3      	b.n	c52 <adc_init+0x36>
    10ea:	6a39      	ldr	r1, [r7, #32]
    10ec:	4291      	cmp	r1, r2
    10ee:	dd00      	ble.n	10f2 <adc_init+0x4d6>
    10f0:	e5af      	b.n	c52 <adc_init+0x36>
    10f2:	e73f      	b.n	f74 <adc_init+0x358>
		return STATUS_ERR_INVALID_ARG;
    10f4:	2017      	movs	r0, #23
    10f6:	e5ac      	b.n	c52 <adc_init+0x36>
    10f8:	00000fff 	.word	0x00000fff
    10fc:	0000871c 	.word	0x0000871c
    1100:	00008724 	.word	0x00008724
    1104:	00008710 	.word	0x00008710
    1108:	00008718 	.word	0x00008718
    110c:	000003ff 	.word	0x000003ff
    1110:	0000ffff 	.word	0x0000ffff

00001114 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    1114:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    1116:	0080      	lsls	r0, r0, #2
    1118:	4b2e      	ldr	r3, [pc, #184]	; (11d4 <_adc_interrupt_handler+0xc0>)
    111a:	58c4      	ldr	r4, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    111c:	6823      	ldr	r3, [r4, #0]
    111e:	799a      	ldrb	r2, [r3, #6]
    1120:	795d      	ldrb	r5, [r3, #5]
    1122:	4015      	ands	r5, r2

	if (flags & ADC_INTFLAG_RESRDY) {
    1124:	07ea      	lsls	r2, r5, #31
    1126:	d52a      	bpl.n	117e <_adc_interrupt_handler+0x6a>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1128:	2201      	movs	r2, #1
    112a:	719a      	strb	r2, [r3, #6]

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
    112c:	6962      	ldr	r2, [r4, #20]
    112e:	1c93      	adds	r3, r2, #2
    1130:	6163      	str	r3, [r4, #20]
    1132:	6823      	ldr	r3, [r4, #0]
    1134:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1136:	b29b      	uxth	r3, r3
    1138:	8013      	strh	r3, [r2, #0]

		if (--module->remaining_conversions > 0) {
    113a:	8b23      	ldrh	r3, [r4, #24]
    113c:	3b01      	subs	r3, #1
    113e:	b29b      	uxth	r3, r3
    1140:	8323      	strh	r3, [r4, #24]
    1142:	2b00      	cmp	r3, #0
    1144:	d015      	beq.n	1172 <_adc_interrupt_handler+0x5e>
			if (module->software_trigger == true
    1146:	7f63      	ldrb	r3, [r4, #29]
    1148:	2b00      	cmp	r3, #0
    114a:	d018      	beq.n	117e <_adc_interrupt_handler+0x6a>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
    114c:	6822      	ldr	r2, [r4, #0]
    114e:	79d3      	ldrb	r3, [r2, #7]
    1150:	b25b      	sxtb	r3, r3
    1152:	2b00      	cmp	r3, #0
    1154:	db13      	blt.n	117e <_adc_interrupt_handler+0x6a>
    1156:	8c13      	ldrh	r3, [r2, #32]
    1158:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    115a:	2b00      	cmp	r3, #0
    115c:	d1fb      	bne.n	1156 <_adc_interrupt_handler+0x42>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    115e:	7e13      	ldrb	r3, [r2, #24]
    1160:	2102      	movs	r1, #2
    1162:	430b      	orrs	r3, r1
    1164:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
    1166:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
    1168:	8c13      	ldrh	r3, [r2, #32]
    116a:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    116c:	2b00      	cmp	r3, #0
    116e:	d1fb      	bne.n	1168 <_adc_interrupt_handler+0x54>
    1170:	e005      	b.n	117e <_adc_interrupt_handler+0x6a>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    1172:	2301      	movs	r3, #1
    1174:	6822      	ldr	r2, [r4, #0]
    1176:	7113      	strb	r3, [r2, #4]
				adc_start_conversion(module);
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
			if (module->job_status == STATUS_BUSY) {
    1178:	7f23      	ldrb	r3, [r4, #28]
    117a:	2b05      	cmp	r3, #5
    117c:	d016      	beq.n	11ac <_adc_interrupt_handler+0x98>
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    117e:	076b      	lsls	r3, r5, #29
    1180:	d508      	bpl.n	1194 <_adc_interrupt_handler+0x80>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1182:	2304      	movs	r3, #4
    1184:	6822      	ldr	r2, [r4, #0]
    1186:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    1188:	7ee3      	ldrb	r3, [r4, #27]
    118a:	079b      	lsls	r3, r3, #30
    118c:	d502      	bpl.n	1194 <_adc_interrupt_handler+0x80>
    118e:	7ea3      	ldrb	r3, [r4, #26]
    1190:	079b      	lsls	r3, r3, #30
    1192:	d417      	bmi.n	11c4 <_adc_interrupt_handler+0xb0>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    1194:	07ab      	lsls	r3, r5, #30
    1196:	d508      	bpl.n	11aa <_adc_interrupt_handler+0x96>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    1198:	2302      	movs	r3, #2
    119a:	6822      	ldr	r2, [r4, #0]
    119c:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    119e:	7ee3      	ldrb	r3, [r4, #27]
    11a0:	075b      	lsls	r3, r3, #29
    11a2:	d502      	bpl.n	11aa <_adc_interrupt_handler+0x96>
    11a4:	7ea3      	ldrb	r3, [r4, #26]
    11a6:	075b      	lsls	r3, r3, #29
    11a8:	d410      	bmi.n	11cc <_adc_interrupt_handler+0xb8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
		}
	}
}
    11aa:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
    11ac:	2300      	movs	r3, #0
    11ae:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
    11b0:	7ee3      	ldrb	r3, [r4, #27]
    11b2:	07db      	lsls	r3, r3, #31
    11b4:	d5e3      	bpl.n	117e <_adc_interrupt_handler+0x6a>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    11b6:	7ea3      	ldrb	r3, [r4, #26]
    11b8:	07db      	lsls	r3, r3, #31
    11ba:	d5e0      	bpl.n	117e <_adc_interrupt_handler+0x6a>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    11bc:	0020      	movs	r0, r4
    11be:	68a3      	ldr	r3, [r4, #8]
    11c0:	4798      	blx	r3
    11c2:	e7dc      	b.n	117e <_adc_interrupt_handler+0x6a>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    11c4:	0020      	movs	r0, r4
    11c6:	68e3      	ldr	r3, [r4, #12]
    11c8:	4798      	blx	r3
    11ca:	e7e3      	b.n	1194 <_adc_interrupt_handler+0x80>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    11cc:	6923      	ldr	r3, [r4, #16]
    11ce:	0020      	movs	r0, r4
    11d0:	4798      	blx	r3
}
    11d2:	e7ea      	b.n	11aa <_adc_interrupt_handler+0x96>
    11d4:	20001450 	.word	0x20001450

000011d8 <ADC0_Handler>:
		void ADC##n##_Handler(void) \
		{ \
			_adc_interrupt_handler(n); \
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
    11d8:	b510      	push	{r4, lr}
    11da:	2000      	movs	r0, #0
    11dc:	4b01      	ldr	r3, [pc, #4]	; (11e4 <ADC0_Handler+0xc>)
    11de:	4798      	blx	r3
    11e0:	bd10      	pop	{r4, pc}
    11e2:	46c0      	nop			; (mov r8, r8)
    11e4:	00001115 	.word	0x00001115

000011e8 <ADC1_Handler>:
    11e8:	b510      	push	{r4, lr}
    11ea:	2001      	movs	r0, #1
    11ec:	4b01      	ldr	r3, [pc, #4]	; (11f4 <ADC1_Handler+0xc>)
    11ee:	4798      	blx	r3
    11f0:	bd10      	pop	{r4, pc}
    11f2:	46c0      	nop			; (mov r8, r8)
    11f4:	00001115 	.word	0x00001115

000011f8 <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    11f8:	1c93      	adds	r3, r2, #2
    11fa:	009b      	lsls	r3, r3, #2
    11fc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
    11fe:	2301      	movs	r3, #1
    1200:	4093      	lsls	r3, r2
    1202:	001a      	movs	r2, r3
    1204:	7e83      	ldrb	r3, [r0, #26]
    1206:	4313      	orrs	r3, r2
    1208:	7683      	strb	r3, [r0, #26]
}
    120a:	4770      	bx	lr

0000120c <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
    120c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    120e:	8b03      	ldrh	r3, [r0, #24]
    1210:	b29b      	uxth	r3, r3
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
    1212:	2405      	movs	r4, #5
	if(module_inst->remaining_conversions != 0 ||
    1214:	2b00      	cmp	r3, #0
    1216:	d001      	beq.n	121c <adc_read_buffer_job+0x10>
	if(module_inst->software_trigger == true) {
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
}
    1218:	0020      	movs	r0, r4
    121a:	bd10      	pop	{r4, pc}
			module_inst->job_status == STATUS_BUSY){
    121c:	7f03      	ldrb	r3, [r0, #28]
	if(module_inst->remaining_conversions != 0 ||
    121e:	2b05      	cmp	r3, #5
    1220:	d0fa      	beq.n	1218 <adc_read_buffer_job+0xc>
	module_inst->job_status = STATUS_BUSY;
    1222:	2305      	movs	r3, #5
    1224:	7703      	strb	r3, [r0, #28]
	module_inst->remaining_conversions = samples;
    1226:	8302      	strh	r2, [r0, #24]
	module_inst->job_buffer = buffer;
    1228:	6141      	str	r1, [r0, #20]
	adc_module->INTENSET.reg = interrupt;
    122a:	3b04      	subs	r3, #4
    122c:	6802      	ldr	r2, [r0, #0]
    122e:	7153      	strb	r3, [r2, #5]
	if(module_inst->software_trigger == true) {
    1230:	7f43      	ldrb	r3, [r0, #29]
	return STATUS_OK;
    1232:	2400      	movs	r4, #0
	if(module_inst->software_trigger == true) {
    1234:	2b00      	cmp	r3, #0
    1236:	d0ef      	beq.n	1218 <adc_read_buffer_job+0xc>
	Adc *const adc_module = module_inst->hw;
    1238:	6802      	ldr	r2, [r0, #0]
    123a:	8c13      	ldrh	r3, [r2, #32]
    123c:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    123e:	2b00      	cmp	r3, #0
    1240:	d1fb      	bne.n	123a <adc_read_buffer_job+0x2e>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1242:	7e13      	ldrb	r3, [r2, #24]
    1244:	2102      	movs	r1, #2
    1246:	430b      	orrs	r3, r1
    1248:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
    124a:	6802      	ldr	r2, [r0, #0]
	if (adc_module->SYNCBUSY.reg) {
    124c:	8c13      	ldrh	r3, [r2, #32]
    124e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    1250:	2b00      	cmp	r3, #0
    1252:	d1fb      	bne.n	124c <adc_read_buffer_job+0x40>
	return STATUS_OK;
    1254:	2400      	movs	r4, #0
    1256:	e7df      	b.n	1218 <adc_read_buffer_job+0xc>

00001258 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1258:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    125a:	2200      	movs	r2, #0
    125c:	4b10      	ldr	r3, [pc, #64]	; (12a0 <EIC_Handler+0x48>)
    125e:	701a      	strb	r2, [r3, #0]
    1260:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1262:	4910      	ldr	r1, [pc, #64]	; (12a4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1264:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1266:	4e10      	ldr	r6, [pc, #64]	; (12a8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1268:	4c0d      	ldr	r4, [pc, #52]	; (12a0 <EIC_Handler+0x48>)
    126a:	e00a      	b.n	1282 <EIC_Handler+0x2a>
		return eics[eic_index];
    126c:	490d      	ldr	r1, [pc, #52]	; (12a4 <EIC_Handler+0x4c>)
    126e:	e008      	b.n	1282 <EIC_Handler+0x2a>
    1270:	7823      	ldrb	r3, [r4, #0]
    1272:	3301      	adds	r3, #1
    1274:	b2db      	uxtb	r3, r3
    1276:	7023      	strb	r3, [r4, #0]
    1278:	2b0f      	cmp	r3, #15
    127a:	d810      	bhi.n	129e <EIC_Handler+0x46>
		return NULL;
    127c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    127e:	2b1f      	cmp	r3, #31
    1280:	d9f4      	bls.n	126c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    1282:	0028      	movs	r0, r5
    1284:	4018      	ands	r0, r3
    1286:	2201      	movs	r2, #1
    1288:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    128a:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    128c:	4210      	tst	r0, r2
    128e:	d0ef      	beq.n	1270 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1290:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1292:	009b      	lsls	r3, r3, #2
    1294:	599b      	ldr	r3, [r3, r6]
    1296:	2b00      	cmp	r3, #0
    1298:	d0ea      	beq.n	1270 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    129a:	4798      	blx	r3
    129c:	e7e8      	b.n	1270 <EIC_Handler+0x18>
			}
		}
	}
}
    129e:	bd70      	pop	{r4, r5, r6, pc}
    12a0:	20001458 	.word	0x20001458
    12a4:	40002800 	.word	0x40002800
    12a8:	2000145c 	.word	0x2000145c

000012ac <_extint_enable>:
{
    Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

    /* Enable all EIC hardware modules. */
    for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
        eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    12ac:	4a06      	ldr	r2, [pc, #24]	; (12c8 <_extint_enable+0x1c>)
    12ae:	7813      	ldrb	r3, [r2, #0]
    12b0:	2102      	movs	r1, #2
    12b2:	430b      	orrs	r3, r1
    12b4:	7013      	strb	r3, [r2, #0]
                || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)) {
    12b6:	2001      	movs	r0, #1
        if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    12b8:	6853      	ldr	r3, [r2, #4]
    12ba:	4219      	tst	r1, r3
    12bc:	d1fc      	bne.n	12b8 <_extint_enable+0xc>
                || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)) {
    12be:	6853      	ldr	r3, [r2, #4]
    12c0:	4218      	tst	r0, r3
    12c2:	d1f9      	bne.n	12b8 <_extint_enable+0xc>
    }

    while (extint_is_syncing()) {
        /* Wait for all hardware modules to complete synchronization */
    }
}
    12c4:	4770      	bx	lr
    12c6:	46c0      	nop			; (mov r8, r8)
    12c8:	40002800 	.word	0x40002800

000012cc <_system_extint_init>:
{
    12cc:	b500      	push	{lr}
    12ce:	b083      	sub	sp, #12
			MCLK->APBAMASK.reg |= mask;
    12d0:	4a17      	ldr	r2, [pc, #92]	; (1330 <_system_extint_init+0x64>)
    12d2:	6951      	ldr	r1, [r2, #20]
    12d4:	2380      	movs	r3, #128	; 0x80
    12d6:	00db      	lsls	r3, r3, #3
    12d8:	430b      	orrs	r3, r1
    12da:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    12dc:	a901      	add	r1, sp, #4
    12de:	2300      	movs	r3, #0
    12e0:	700b      	strb	r3, [r1, #0]
    system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    12e2:	2002      	movs	r0, #2
    12e4:	4b13      	ldr	r3, [pc, #76]	; (1334 <_system_extint_init+0x68>)
    12e6:	4798      	blx	r3
    system_gclk_chan_enable(EIC_GCLK_ID);
    12e8:	2002      	movs	r0, #2
    12ea:	4b13      	ldr	r3, [pc, #76]	; (1338 <_system_extint_init+0x6c>)
    12ec:	4798      	blx	r3
        eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    12ee:	4a13      	ldr	r2, [pc, #76]	; (133c <_system_extint_init+0x70>)
    12f0:	7813      	ldrb	r3, [r2, #0]
    12f2:	2101      	movs	r1, #1
    12f4:	430b      	orrs	r3, r1
    12f6:	7013      	strb	r3, [r2, #0]
        if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    12f8:	3101      	adds	r1, #1
                || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)) {
    12fa:	2001      	movs	r0, #1
        if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    12fc:	6853      	ldr	r3, [r2, #4]
    12fe:	4219      	tst	r1, r3
    1300:	d1fc      	bne.n	12fc <_system_extint_init+0x30>
                || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)) {
    1302:	6853      	ldr	r3, [r2, #4]
    1304:	4218      	tst	r0, r3
    1306:	d1f9      	bne.n	12fc <_system_extint_init+0x30>
        eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
    1308:	4a0c      	ldr	r2, [pc, #48]	; (133c <_system_extint_init+0x70>)
    130a:	7813      	ldrb	r3, [r2, #0]
    130c:	2110      	movs	r1, #16
    130e:	438b      	bics	r3, r1
    1310:	7013      	strb	r3, [r2, #0]
    1312:	4b0b      	ldr	r3, [pc, #44]	; (1340 <_system_extint_init+0x74>)
    1314:	0019      	movs	r1, r3
    1316:	3140      	adds	r1, #64	; 0x40
        _extint_dev.callbacks[j] = NULL;
    1318:	2200      	movs	r2, #0
    131a:	c304      	stmia	r3!, {r2}
    for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    131c:	428b      	cmp	r3, r1
    131e:	d1fc      	bne.n	131a <_system_extint_init+0x4e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1320:	2208      	movs	r2, #8
    1322:	4b08      	ldr	r3, [pc, #32]	; (1344 <_system_extint_init+0x78>)
    1324:	601a      	str	r2, [r3, #0]
    _extint_enable();
    1326:	4b08      	ldr	r3, [pc, #32]	; (1348 <_system_extint_init+0x7c>)
    1328:	4798      	blx	r3
}
    132a:	b003      	add	sp, #12
    132c:	bd00      	pop	{pc}
    132e:	46c0      	nop			; (mov r8, r8)
    1330:	40000800 	.word	0x40000800
    1334:	0000482d 	.word	0x0000482d
    1338:	000047bd 	.word	0x000047bd
    133c:	40002800 	.word	0x40002800
    1340:	2000145c 	.word	0x2000145c
    1344:	e000e100 	.word	0xe000e100
    1348:	000012ad 	.word	0x000012ad

0000134c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    134c:	b5f0      	push	{r4, r5, r6, r7, lr}
    134e:	46d6      	mov	lr, sl
    1350:	464f      	mov	r7, r9
    1352:	4646      	mov	r6, r8
    1354:	b5c0      	push	{r6, r7, lr}
    1356:	b08a      	sub	sp, #40	; 0x28
    1358:	0006      	movs	r6, r0
    135a:	000f      	movs	r7, r1
    135c:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    135e:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1360:	0008      	movs	r0, r1
    1362:	4ba2      	ldr	r3, [pc, #648]	; (15ec <i2c_master_init+0x2a0>)
    1364:	4798      	blx	r3
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    1366:	1c45      	adds	r5, r0, #1
	if (sercom_index == 5) {
    1368:	2805      	cmp	r0, #5
    136a:	d01e      	beq.n	13aa <i2c_master_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    136c:	3013      	adds	r0, #19
			MCLK->APBCMASK.reg |= mask;
    136e:	4aa0      	ldr	r2, [pc, #640]	; (15f0 <i2c_master_init+0x2a4>)
    1370:	69d1      	ldr	r1, [r2, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1372:	2301      	movs	r3, #1
    1374:	40ab      	lsls	r3, r5
    1376:	430b      	orrs	r3, r1
    1378:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    137a:	a909      	add	r1, sp, #36	; 0x24
    137c:	7b23      	ldrb	r3, [r4, #12]
    137e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1380:	b2c5      	uxtb	r5, r0
    1382:	0028      	movs	r0, r5
    1384:	4b9b      	ldr	r3, [pc, #620]	; (15f4 <i2c_master_init+0x2a8>)
    1386:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1388:	0028      	movs	r0, r5
    138a:	4b9b      	ldr	r3, [pc, #620]	; (15f8 <i2c_master_init+0x2ac>)
    138c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    138e:	7b20      	ldrb	r0, [r4, #12]
    1390:	2100      	movs	r1, #0
    1392:	4b9a      	ldr	r3, [pc, #616]	; (15fc <i2c_master_init+0x2b0>)
    1394:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1396:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    1398:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    139a:	079b      	lsls	r3, r3, #30
    139c:	d507      	bpl.n	13ae <i2c_master_init+0x62>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    139e:	b00a      	add	sp, #40	; 0x28
    13a0:	bc1c      	pop	{r2, r3, r4}
    13a2:	4690      	mov	r8, r2
    13a4:	4699      	mov	r9, r3
    13a6:	46a2      	mov	sl, r4
    13a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    13aa:	2019      	movs	r0, #25
    13ac:	e7df      	b.n	136e <i2c_master_init+0x22>
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    13ae:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    13b0:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    13b2:	07db      	lsls	r3, r3, #31
    13b4:	d4f3      	bmi.n	139e <i2c_master_init+0x52>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    13b6:	6830      	ldr	r0, [r6, #0]
    13b8:	4b8c      	ldr	r3, [pc, #560]	; (15ec <i2c_master_init+0x2a0>)
    13ba:	4699      	mov	r9, r3
    13bc:	4798      	blx	r3
    13be:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    13c0:	498f      	ldr	r1, [pc, #572]	; (1600 <i2c_master_init+0x2b4>)
    13c2:	4b90      	ldr	r3, [pc, #576]	; (1604 <i2c_master_init+0x2b8>)
    13c4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    13c6:	00ad      	lsls	r5, r5, #2
    13c8:	4b8f      	ldr	r3, [pc, #572]	; (1608 <i2c_master_init+0x2bc>)
    13ca:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
    13cc:	2300      	movs	r3, #0
    13ce:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
    13d0:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
    13d2:	2500      	movs	r5, #0
    13d4:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
    13d6:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
    13d8:	2225      	movs	r2, #37	; 0x25
    13da:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
    13dc:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    13de:	3314      	adds	r3, #20
    13e0:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13e2:	6833      	ldr	r3, [r6, #0]
    13e4:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    13e6:	0018      	movs	r0, r3
    13e8:	47c8      	blx	r9
    13ea:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
    13ec:	2380      	movs	r3, #128	; 0x80
    13ee:	aa08      	add	r2, sp, #32
    13f0:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    13f2:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    13f4:	2301      	movs	r3, #1
    13f6:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    13f8:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    13fa:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    13fc:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    13fe:	2800      	cmp	r0, #0
    1400:	d100      	bne.n	1404 <i2c_master_init+0xb8>
    1402:	e0af      	b.n	1564 <i2c_master_init+0x218>
	pin_conf.mux_position = pad0 & 0xFFFF;
    1404:	ab08      	add	r3, sp, #32
    1406:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1408:	2302      	movs	r3, #2
    140a:	aa08      	add	r2, sp, #32
    140c:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    140e:	0c00      	lsrs	r0, r0, #16
    1410:	b2c0      	uxtb	r0, r0
    1412:	0011      	movs	r1, r2
    1414:	4b7d      	ldr	r3, [pc, #500]	; (160c <i2c_master_init+0x2c0>)
    1416:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    1418:	2f00      	cmp	r7, #0
    141a:	d100      	bne.n	141e <i2c_master_init+0xd2>
    141c:	e0a7      	b.n	156e <i2c_master_init+0x222>
	pin_conf.mux_position = pad1 & 0xFFFF;
    141e:	ab08      	add	r3, sp, #32
    1420:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1422:	2302      	movs	r3, #2
    1424:	aa08      	add	r2, sp, #32
    1426:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1428:	0c3f      	lsrs	r7, r7, #16
    142a:	b2f8      	uxtb	r0, r7
    142c:	0011      	movs	r1, r2
    142e:	4b77      	ldr	r3, [pc, #476]	; (160c <i2c_master_init+0x2c0>)
    1430:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    1432:	8aa3      	ldrh	r3, [r4, #20]
    1434:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    1436:	8ae3      	ldrh	r3, [r4, #22]
    1438:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    143a:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    143c:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    143e:	2b00      	cmp	r3, #0
    1440:	d104      	bne.n	144c <i2c_master_init+0x100>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1442:	4b73      	ldr	r3, [pc, #460]	; (1610 <i2c_master_init+0x2c4>)
    1444:	789b      	ldrb	r3, [r3, #2]
    1446:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1448:	0fdb      	lsrs	r3, r3, #31
    144a:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    144c:	68a1      	ldr	r1, [r4, #8]
    144e:	6923      	ldr	r3, [r4, #16]
    1450:	430b      	orrs	r3, r1
    1452:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    1454:	2224      	movs	r2, #36	; 0x24
    1456:	5ca2      	ldrb	r2, [r4, r2]
    1458:	2a00      	cmp	r2, #0
    145a:	d002      	beq.n	1462 <i2c_master_init+0x116>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    145c:	2280      	movs	r2, #128	; 0x80
    145e:	05d2      	lsls	r2, r2, #23
    1460:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    1462:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1464:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    1466:	222c      	movs	r2, #44	; 0x2c
    1468:	5ca2      	ldrb	r2, [r4, r2]
    146a:	2a00      	cmp	r2, #0
    146c:	d103      	bne.n	1476 <i2c_master_init+0x12a>
    146e:	2280      	movs	r2, #128	; 0x80
    1470:	0492      	lsls	r2, r2, #18
    1472:	4291      	cmp	r1, r2
    1474:	d102      	bne.n	147c <i2c_master_init+0x130>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1476:	2280      	movs	r2, #128	; 0x80
    1478:	0512      	lsls	r2, r2, #20
    147a:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    147c:	222d      	movs	r2, #45	; 0x2d
    147e:	5ca2      	ldrb	r2, [r4, r2]
    1480:	2a00      	cmp	r2, #0
    1482:	d002      	beq.n	148a <i2c_master_init+0x13e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    1484:	2280      	movs	r2, #128	; 0x80
    1486:	0412      	lsls	r2, r2, #16
    1488:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    148a:	222e      	movs	r2, #46	; 0x2e
    148c:	5ca2      	ldrb	r2, [r4, r2]
    148e:	2a00      	cmp	r2, #0
    1490:	d002      	beq.n	1498 <i2c_master_init+0x14c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    1492:	2280      	movs	r2, #128	; 0x80
    1494:	03d2      	lsls	r2, r2, #15
    1496:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    1498:	4642      	mov	r2, r8
    149a:	6812      	ldr	r2, [r2, #0]
    149c:	4313      	orrs	r3, r2
    149e:	4642      	mov	r2, r8
    14a0:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    14a2:	2380      	movs	r3, #128	; 0x80
    14a4:	005b      	lsls	r3, r3, #1
    14a6:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    14a8:	464d      	mov	r5, r9
    14aa:	3513      	adds	r5, #19
    14ac:	b2e8      	uxtb	r0, r5
    14ae:	4b59      	ldr	r3, [pc, #356]	; (1614 <i2c_master_init+0x2c8>)
    14b0:	4798      	blx	r3
    14b2:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    14b4:	23fa      	movs	r3, #250	; 0xfa
    14b6:	009b      	lsls	r3, r3, #2
    14b8:	6822      	ldr	r2, [r4, #0]
    14ba:	435a      	muls	r2, r3
    14bc:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    14be:	6863      	ldr	r3, [r4, #4]
    14c0:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    14c2:	4d55      	ldr	r5, [pc, #340]	; (1618 <i2c_master_init+0x2cc>)
    14c4:	47a8      	blx	r5
    14c6:	9000      	str	r0, [sp, #0]
    14c8:	9101      	str	r1, [sp, #4]
    14ca:	464b      	mov	r3, r9
    14cc:	0058      	lsls	r0, r3, #1
    14ce:	47a8      	blx	r5
    14d0:	9002      	str	r0, [sp, #8]
    14d2:	9103      	str	r1, [sp, #12]
    14d4:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    14d6:	47a8      	blx	r5
    14d8:	9004      	str	r0, [sp, #16]
    14da:	9105      	str	r1, [sp, #20]
    14dc:	4f4f      	ldr	r7, [pc, #316]	; (161c <i2c_master_init+0x2d0>)
    14de:	4a50      	ldr	r2, [pc, #320]	; (1620 <i2c_master_init+0x2d4>)
    14e0:	4b50      	ldr	r3, [pc, #320]	; (1624 <i2c_master_init+0x2d8>)
    14e2:	9800      	ldr	r0, [sp, #0]
    14e4:	9901      	ldr	r1, [sp, #4]
    14e6:	47b8      	blx	r7
    14e8:	0002      	movs	r2, r0
    14ea:	000b      	movs	r3, r1
    14ec:	9804      	ldr	r0, [sp, #16]
    14ee:	9905      	ldr	r1, [sp, #20]
    14f0:	47b8      	blx	r7
    14f2:	4e4d      	ldr	r6, [pc, #308]	; (1628 <i2c_master_init+0x2dc>)
    14f4:	2200      	movs	r2, #0
    14f6:	4b4d      	ldr	r3, [pc, #308]	; (162c <i2c_master_init+0x2e0>)
    14f8:	47b0      	blx	r6
    14fa:	9004      	str	r0, [sp, #16]
    14fc:	9105      	str	r1, [sp, #20]
    14fe:	4648      	mov	r0, r9
    1500:	47a8      	blx	r5
    1502:	0002      	movs	r2, r0
    1504:	000b      	movs	r3, r1
    1506:	9804      	ldr	r0, [sp, #16]
    1508:	9905      	ldr	r1, [sp, #20]
    150a:	47b8      	blx	r7
    150c:	0002      	movs	r2, r0
    150e:	000b      	movs	r3, r1
    1510:	4d47      	ldr	r5, [pc, #284]	; (1630 <i2c_master_init+0x2e4>)
    1512:	9800      	ldr	r0, [sp, #0]
    1514:	9901      	ldr	r1, [sp, #4]
    1516:	47a8      	blx	r5
    1518:	9a02      	ldr	r2, [sp, #8]
    151a:	9b03      	ldr	r3, [sp, #12]
    151c:	47b0      	blx	r6
    151e:	2200      	movs	r2, #0
    1520:	4b44      	ldr	r3, [pc, #272]	; (1634 <i2c_master_init+0x2e8>)
    1522:	47a8      	blx	r5
    1524:	9a02      	ldr	r2, [sp, #8]
    1526:	9b03      	ldr	r3, [sp, #12]
    1528:	4d43      	ldr	r5, [pc, #268]	; (1638 <i2c_master_init+0x2ec>)
    152a:	47a8      	blx	r5
    152c:	4b43      	ldr	r3, [pc, #268]	; (163c <i2c_master_init+0x2f0>)
    152e:	4798      	blx	r3
    1530:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    1532:	2380      	movs	r3, #128	; 0x80
    1534:	049b      	lsls	r3, r3, #18
    1536:	68a2      	ldr	r2, [r4, #8]
    1538:	429a      	cmp	r2, r3
    153a:	d01e      	beq.n	157a <i2c_master_init+0x22e>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    153c:	0003      	movs	r3, r0
    153e:	2040      	movs	r0, #64	; 0x40
    1540:	2dff      	cmp	r5, #255	; 0xff
    1542:	d900      	bls.n	1546 <i2c_master_init+0x1fa>
    1544:	e72b      	b.n	139e <i2c_master_init+0x52>
	int32_t tmp_baudlow_hs = 0;
    1546:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    1548:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    154a:	25ff      	movs	r5, #255	; 0xff
    154c:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    154e:	0624      	lsls	r4, r4, #24
    1550:	4325      	orrs	r5, r4
    1552:	0400      	lsls	r0, r0, #16
    1554:	23ff      	movs	r3, #255	; 0xff
    1556:	041b      	lsls	r3, r3, #16
    1558:	4018      	ands	r0, r3
    155a:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    155c:	4643      	mov	r3, r8
    155e:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    1560:	2000      	movs	r0, #0
    1562:	e71c      	b.n	139e <i2c_master_init+0x52>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    1564:	2100      	movs	r1, #0
    1566:	4640      	mov	r0, r8
    1568:	4b35      	ldr	r3, [pc, #212]	; (1640 <i2c_master_init+0x2f4>)
    156a:	4798      	blx	r3
    156c:	e74a      	b.n	1404 <i2c_master_init+0xb8>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    156e:	2101      	movs	r1, #1
    1570:	4640      	mov	r0, r8
    1572:	4b33      	ldr	r3, [pc, #204]	; (1640 <i2c_master_init+0x2f4>)
    1574:	4798      	blx	r3
    1576:	0007      	movs	r7, r0
    1578:	e751      	b.n	141e <i2c_master_init+0xd2>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    157a:	26fa      	movs	r6, #250	; 0xfa
    157c:	00b6      	lsls	r6, r6, #2
    157e:	4653      	mov	r3, sl
    1580:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    1582:	9800      	ldr	r0, [sp, #0]
    1584:	9901      	ldr	r1, [sp, #4]
    1586:	0002      	movs	r2, r0
    1588:	000b      	movs	r3, r1
    158a:	4c27      	ldr	r4, [pc, #156]	; (1628 <i2c_master_init+0x2dc>)
    158c:	47a0      	blx	r4
    158e:	9000      	str	r0, [sp, #0]
    1590:	9101      	str	r1, [sp, #4]
    1592:	0030      	movs	r0, r6
    1594:	4b20      	ldr	r3, [pc, #128]	; (1618 <i2c_master_init+0x2cc>)
    1596:	4798      	blx	r3
    1598:	2200      	movs	r2, #0
    159a:	4b2a      	ldr	r3, [pc, #168]	; (1644 <i2c_master_init+0x2f8>)
    159c:	47b8      	blx	r7
    159e:	0002      	movs	r2, r0
    15a0:	000b      	movs	r3, r1
    15a2:	9800      	ldr	r0, [sp, #0]
    15a4:	9901      	ldr	r1, [sp, #4]
    15a6:	4c24      	ldr	r4, [pc, #144]	; (1638 <i2c_master_init+0x2ec>)
    15a8:	47a0      	blx	r4
    15aa:	2200      	movs	r2, #0
    15ac:	4b21      	ldr	r3, [pc, #132]	; (1634 <i2c_master_init+0x2e8>)
    15ae:	4c20      	ldr	r4, [pc, #128]	; (1630 <i2c_master_init+0x2e4>)
    15b0:	47a0      	blx	r4
    15b2:	4b22      	ldr	r3, [pc, #136]	; (163c <i2c_master_init+0x2f0>)
    15b4:	4798      	blx	r3
    15b6:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    15b8:	d00c      	beq.n	15d4 <i2c_master_init+0x288>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    15ba:	0031      	movs	r1, r6
    15bc:	9807      	ldr	r0, [sp, #28]
    15be:	4b22      	ldr	r3, [pc, #136]	; (1648 <i2c_master_init+0x2fc>)
    15c0:	4798      	blx	r3
    15c2:	3802      	subs	r0, #2
    15c4:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    15c6:	002b      	movs	r3, r5
    15c8:	2dff      	cmp	r5, #255	; 0xff
    15ca:	d80c      	bhi.n	15e6 <i2c_master_init+0x29a>
    15cc:	28ff      	cmp	r0, #255	; 0xff
    15ce:	d9bc      	bls.n	154a <i2c_master_init+0x1fe>
    15d0:	2040      	movs	r0, #64	; 0x40
    15d2:	e6e4      	b.n	139e <i2c_master_init+0x52>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    15d4:	0071      	lsls	r1, r6, #1
    15d6:	1e48      	subs	r0, r1, #1
    15d8:	9b07      	ldr	r3, [sp, #28]
    15da:	469c      	mov	ip, r3
    15dc:	4460      	add	r0, ip
    15de:	4b1a      	ldr	r3, [pc, #104]	; (1648 <i2c_master_init+0x2fc>)
    15e0:	4798      	blx	r3
    15e2:	3801      	subs	r0, #1
    15e4:	e7ef      	b.n	15c6 <i2c_master_init+0x27a>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    15e6:	2040      	movs	r0, #64	; 0x40
    15e8:	e6d9      	b.n	139e <i2c_master_init+0x52>
    15ea:	46c0      	nop			; (mov r8, r8)
    15ec:	000023cd 	.word	0x000023cd
    15f0:	40000800 	.word	0x40000800
    15f4:	0000482d 	.word	0x0000482d
    15f8:	000047bd 	.word	0x000047bd
    15fc:	00002205 	.word	0x00002205
    1600:	00001929 	.word	0x00001929
    1604:	00003079 	.word	0x00003079
    1608:	200018fc 	.word	0x200018fc
    160c:	00004929 	.word	0x00004929
    1610:	41002000 	.word	0x41002000
    1614:	00004851 	.word	0x00004851
    1618:	00007a35 	.word	0x00007a35
    161c:	00006ea1 	.word	0x00006ea1
    1620:	e826d695 	.word	0xe826d695
    1624:	3e112e0b 	.word	0x3e112e0b
    1628:	00006219 	.word	0x00006219
    162c:	40240000 	.word	0x40240000
    1630:	000073a1 	.word	0x000073a1
    1634:	3ff00000 	.word	0x3ff00000
    1638:	00006839 	.word	0x00006839
    163c:	000079cd 	.word	0x000079cd
    1640:	00002251 	.word	0x00002251
    1644:	40080000 	.word	0x40080000
    1648:	00005615 	.word	0x00005615

0000164c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    164c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    164e:	7e1a      	ldrb	r2, [r3, #24]
    1650:	0792      	lsls	r2, r2, #30
    1652:	d507      	bpl.n	1664 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1654:	2202      	movs	r2, #2
    1656:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1658:	8b5b      	ldrh	r3, [r3, #26]
    165a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    165c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    165e:	17db      	asrs	r3, r3, #31
    1660:	4018      	ands	r0, r3
}
    1662:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1664:	8b5a      	ldrh	r2, [r3, #26]
    1666:	0752      	lsls	r2, r2, #29
    1668:	d506      	bpl.n	1678 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    166a:	6859      	ldr	r1, [r3, #4]
    166c:	22c0      	movs	r2, #192	; 0xc0
    166e:	0292      	lsls	r2, r2, #10
    1670:	430a      	orrs	r2, r1
    1672:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    1674:	2018      	movs	r0, #24
    1676:	e7f4      	b.n	1662 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    1678:	2000      	movs	r0, #0
    167a:	e7f2      	b.n	1662 <_i2c_master_address_response+0x16>

0000167c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    167c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    167e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1680:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1682:	2401      	movs	r4, #1
    1684:	2502      	movs	r5, #2
    1686:	7e11      	ldrb	r1, [r2, #24]
    1688:	4221      	tst	r1, r4
    168a:	d10b      	bne.n	16a4 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    168c:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    168e:	4229      	tst	r1, r5
    1690:	d106      	bne.n	16a0 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    1692:	3301      	adds	r3, #1
    1694:	b29b      	uxth	r3, r3
    1696:	8901      	ldrh	r1, [r0, #8]
    1698:	4299      	cmp	r1, r3
    169a:	d8f4      	bhi.n	1686 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    169c:	2012      	movs	r0, #18
    169e:	e002      	b.n	16a6 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    16a0:	2000      	movs	r0, #0
    16a2:	e000      	b.n	16a6 <_i2c_master_wait_for_bus+0x2a>
    16a4:	2000      	movs	r0, #0
}
    16a6:	bd30      	pop	{r4, r5, pc}

000016a8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    16a8:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16aa:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    16ac:	6862      	ldr	r2, [r4, #4]
    16ae:	2380      	movs	r3, #128	; 0x80
    16b0:	02db      	lsls	r3, r3, #11
    16b2:	4313      	orrs	r3, r2
    16b4:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    16b6:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    16b8:	4b02      	ldr	r3, [pc, #8]	; (16c4 <_i2c_master_send_hs_master_code+0x1c>)
    16ba:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    16bc:	2301      	movs	r3, #1
    16be:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    16c0:	bd10      	pop	{r4, pc}
    16c2:	46c0      	nop			; (mov r8, r8)
    16c4:	0000167d 	.word	0x0000167d

000016c8 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    16c8:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    16ca:	2207      	movs	r2, #7
    16cc:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    16ce:	421a      	tst	r2, r3
    16d0:	d1fc      	bne.n	16cc <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    16d2:	4770      	bx	lr

000016d4 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    16d4:	b570      	push	{r4, r5, r6, lr}
    16d6:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16d8:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    16da:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    16dc:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    16de:	8b83      	ldrh	r3, [r0, #28]
    16e0:	1aed      	subs	r5, r5, r3
    16e2:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    16e4:	8b83      	ldrh	r3, [r0, #28]
    16e6:	3b01      	subs	r3, #1
    16e8:	b29b      	uxth	r3, r3
    16ea:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    16ec:	0113      	lsls	r3, r2, #4
    16ee:	d51d      	bpl.n	172c <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    16f0:	7ac3      	ldrb	r3, [r0, #11]
    16f2:	2b00      	cmp	r3, #0
    16f4:	d003      	beq.n	16fe <_i2c_master_read+0x2a>
    16f6:	8b83      	ldrh	r3, [r0, #28]
    16f8:	b29b      	uxth	r3, r3
    16fa:	2b01      	cmp	r3, #1
    16fc:	d010      	beq.n	1720 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    16fe:	8ba3      	ldrh	r3, [r4, #28]
    1700:	b29b      	uxth	r3, r3
    1702:	2b00      	cmp	r3, #0
    1704:	d102      	bne.n	170c <_i2c_master_read+0x38>
		if (module->send_stop) {
    1706:	7aa3      	ldrb	r3, [r4, #10]
    1708:	2b00      	cmp	r3, #0
    170a:	d11c      	bne.n	1746 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    170c:	0020      	movs	r0, r4
    170e:	4b12      	ldr	r3, [pc, #72]	; (1758 <_i2c_master_read+0x84>)
    1710:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1712:	6a23      	ldr	r3, [r4, #32]
    1714:	195d      	adds	r5, r3, r5
    1716:	2328      	movs	r3, #40	; 0x28
    1718:	5cf3      	ldrb	r3, [r6, r3]
    171a:	b2db      	uxtb	r3, r3
    171c:	702b      	strb	r3, [r5, #0]
}
    171e:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1720:	6872      	ldr	r2, [r6, #4]
    1722:	2380      	movs	r3, #128	; 0x80
    1724:	02db      	lsls	r3, r3, #11
    1726:	4313      	orrs	r3, r2
    1728:	6073      	str	r3, [r6, #4]
    172a:	e7e8      	b.n	16fe <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    172c:	7ac3      	ldrb	r3, [r0, #11]
    172e:	2b00      	cmp	r3, #0
    1730:	d0e5      	beq.n	16fe <_i2c_master_read+0x2a>
    1732:	8b83      	ldrh	r3, [r0, #28]
    1734:	b29b      	uxth	r3, r3
    1736:	2b00      	cmp	r3, #0
    1738:	d1e1      	bne.n	16fe <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    173a:	6872      	ldr	r2, [r6, #4]
    173c:	2380      	movs	r3, #128	; 0x80
    173e:	02db      	lsls	r3, r3, #11
    1740:	4313      	orrs	r3, r2
    1742:	6073      	str	r3, [r6, #4]
    1744:	e7db      	b.n	16fe <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    1746:	0020      	movs	r0, r4
    1748:	4b03      	ldr	r3, [pc, #12]	; (1758 <_i2c_master_read+0x84>)
    174a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    174c:	6872      	ldr	r2, [r6, #4]
    174e:	23c0      	movs	r3, #192	; 0xc0
    1750:	029b      	lsls	r3, r3, #10
    1752:	4313      	orrs	r3, r2
    1754:	6073      	str	r3, [r6, #4]
    1756:	e7d9      	b.n	170c <_i2c_master_read+0x38>
    1758:	000016c9 	.word	0x000016c9

0000175c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    175c:	b570      	push	{r4, r5, r6, lr}
    175e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1760:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1762:	8b6b      	ldrh	r3, [r5, #26]
    1764:	075b      	lsls	r3, r3, #29
    1766:	d503      	bpl.n	1770 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1768:	221e      	movs	r2, #30
    176a:	2325      	movs	r3, #37	; 0x25
    176c:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    176e:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    1770:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    1772:	8b83      	ldrh	r3, [r0, #28]
    1774:	1af6      	subs	r6, r6, r3
    1776:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    1778:	8b83      	ldrh	r3, [r0, #28]
    177a:	3b01      	subs	r3, #1
    177c:	b29b      	uxth	r3, r3
    177e:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    1780:	4b04      	ldr	r3, [pc, #16]	; (1794 <_i2c_master_write+0x38>)
    1782:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1784:	6a23      	ldr	r3, [r4, #32]
    1786:	199e      	adds	r6, r3, r6
    1788:	7833      	ldrb	r3, [r6, #0]
    178a:	b2db      	uxtb	r3, r3
    178c:	2228      	movs	r2, #40	; 0x28
    178e:	54ab      	strb	r3, [r5, r2]
    1790:	e7ed      	b.n	176e <_i2c_master_write+0x12>
    1792:	46c0      	nop			; (mov r8, r8)
    1794:	000016c9 	.word	0x000016c9

00001798 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1798:	b570      	push	{r4, r5, r6, lr}
    179a:	0005      	movs	r5, r0
    179c:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    179e:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    17a0:	7a4b      	ldrb	r3, [r1, #9]
    17a2:	2b00      	cmp	r3, #0
    17a4:	d11a      	bne.n	17dc <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    17a6:	6873      	ldr	r3, [r6, #4]
    17a8:	4a13      	ldr	r2, [pc, #76]	; (17f8 <_i2c_master_write_packet+0x60>)
    17aa:	4013      	ands	r3, r2
    17ac:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
    17ae:	6863      	ldr	r3, [r4, #4]
    17b0:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
    17b2:	8863      	ldrh	r3, [r4, #2]
    17b4:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
    17b6:	2200      	movs	r2, #0
    17b8:	2324      	movs	r3, #36	; 0x24
    17ba:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
    17bc:	3205      	adds	r2, #5
    17be:	3301      	adds	r3, #1
    17c0:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
    17c2:	3b22      	subs	r3, #34	; 0x22
    17c4:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
    17c6:	7a23      	ldrb	r3, [r4, #8]
    17c8:	2b00      	cmp	r3, #0
    17ca:	d10b      	bne.n	17e4 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17cc:	8823      	ldrh	r3, [r4, #0]
    17ce:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    17d0:	7a62      	ldrb	r2, [r4, #9]
    17d2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17d4:	4313      	orrs	r3, r2
    17d6:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
    17d8:	2000      	movs	r0, #0
    17da:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    17dc:	7a89      	ldrb	r1, [r1, #10]
    17de:	4b07      	ldr	r3, [pc, #28]	; (17fc <_i2c_master_write_packet+0x64>)
    17e0:	4798      	blx	r3
    17e2:	e7e0      	b.n	17a6 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17e4:	8823      	ldrh	r3, [r4, #0]
    17e6:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    17e8:	7a62      	ldrb	r2, [r4, #9]
    17ea:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17ec:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    17ee:	2280      	movs	r2, #128	; 0x80
    17f0:	0212      	lsls	r2, r2, #8
    17f2:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17f4:	6273      	str	r3, [r6, #36]	; 0x24
    17f6:	e7ef      	b.n	17d8 <_i2c_master_write_packet+0x40>
    17f8:	fffbffff 	.word	0xfffbffff
    17fc:	000016a9 	.word	0x000016a9

00001800 <_i2c_master_read_packet>:
{
    1800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1802:	0005      	movs	r5, r0
    1804:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1806:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
    1808:	684b      	ldr	r3, [r1, #4]
    180a:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
    180c:	884b      	ldrh	r3, [r1, #2]
    180e:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
    1810:	2201      	movs	r2, #1
    1812:	2324      	movs	r3, #36	; 0x24
    1814:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
    1816:	3204      	adds	r2, #4
    1818:	3301      	adds	r3, #1
    181a:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    181c:	6837      	ldr	r7, [r6, #0]
    181e:	013f      	lsls	r7, r7, #4
    1820:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
    1822:	7a4b      	ldrb	r3, [r1, #9]
    1824:	2b00      	cmp	r3, #0
    1826:	d117      	bne.n	1858 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1828:	2f00      	cmp	r7, #0
    182a:	d002      	beq.n	1832 <_i2c_master_read_packet+0x32>
    182c:	8863      	ldrh	r3, [r4, #2]
    182e:	2b01      	cmp	r3, #1
    1830:	d016      	beq.n	1860 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1832:	6873      	ldr	r3, [r6, #4]
    1834:	4a20      	ldr	r2, [pc, #128]	; (18b8 <_i2c_master_read_packet+0xb8>)
    1836:	4013      	ands	r3, r2
    1838:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
    183a:	7a23      	ldrb	r3, [r4, #8]
    183c:	2b00      	cmp	r3, #0
    183e:	d115      	bne.n	186c <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
    1840:	2303      	movs	r3, #3
    1842:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1844:	8823      	ldrh	r3, [r4, #0]
    1846:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1848:	7a62      	ldrb	r2, [r4, #9]
    184a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    184c:	4313      	orrs	r3, r2
    184e:	2201      	movs	r2, #1
    1850:	4313      	orrs	r3, r2
    1852:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
    1854:	2000      	movs	r0, #0
}
    1856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1858:	7a89      	ldrb	r1, [r1, #10]
    185a:	4b18      	ldr	r3, [pc, #96]	; (18bc <_i2c_master_read_packet+0xbc>)
    185c:	4798      	blx	r3
    185e:	e7e3      	b.n	1828 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1860:	6872      	ldr	r2, [r6, #4]
    1862:	2380      	movs	r3, #128	; 0x80
    1864:	02db      	lsls	r3, r3, #11
    1866:	4313      	orrs	r3, r2
    1868:	6073      	str	r3, [r6, #4]
    186a:	e7e6      	b.n	183a <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
    186c:	8823      	ldrh	r3, [r4, #0]
    186e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1870:	7a62      	ldrb	r2, [r4, #9]
    1872:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    1874:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1876:	2280      	movs	r2, #128	; 0x80
    1878:	0212      	lsls	r2, r2, #8
    187a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    187c:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    187e:	0028      	movs	r0, r5
    1880:	4b0f      	ldr	r3, [pc, #60]	; (18c0 <_i2c_master_read_packet+0xc0>)
    1882:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1884:	6873      	ldr	r3, [r6, #4]
    1886:	4a0c      	ldr	r2, [pc, #48]	; (18b8 <_i2c_master_read_packet+0xb8>)
    1888:	4013      	ands	r3, r2
    188a:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
    188c:	2800      	cmp	r0, #0
    188e:	d1e2      	bne.n	1856 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
    1890:	0028      	movs	r0, r5
    1892:	4b0c      	ldr	r3, [pc, #48]	; (18c4 <_i2c_master_read_packet+0xc4>)
    1894:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
    1896:	2800      	cmp	r0, #0
    1898:	d1dd      	bne.n	1856 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
    189a:	2303      	movs	r3, #3
    189c:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    189e:	8823      	ldrh	r3, [r4, #0]
    18a0:	0a1b      	lsrs	r3, r3, #8
    18a2:	2278      	movs	r2, #120	; 0x78
    18a4:	4313      	orrs	r3, r2
    18a6:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    18a8:	7a62      	ldrb	r2, [r4, #9]
    18aa:	0392      	lsls	r2, r2, #14
    18ac:	2101      	movs	r1, #1
    18ae:	430a      	orrs	r2, r1
    18b0:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    18b2:	6273      	str	r3, [r6, #36]	; 0x24
    18b4:	e7cf      	b.n	1856 <_i2c_master_read_packet+0x56>
    18b6:	46c0      	nop			; (mov r8, r8)
    18b8:	fffbffff 	.word	0xfffbffff
    18bc:	000016a9 	.word	0x000016a9
    18c0:	0000167d 	.word	0x0000167d
    18c4:	0000164d 	.word	0x0000164d

000018c8 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
    18c8:	1c93      	adds	r3, r2, #2
    18ca:	009b      	lsls	r3, r3, #2
    18cc:	18c3      	adds	r3, r0, r3
    18ce:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
    18d0:	7e03      	ldrb	r3, [r0, #24]
    18d2:	2101      	movs	r1, #1
    18d4:	4091      	lsls	r1, r2
    18d6:	430b      	orrs	r3, r1
    18d8:	b2db      	uxtb	r3, r3
    18da:	7603      	strb	r3, [r0, #24]
}
    18dc:	4770      	bx	lr
	...

000018e0 <i2c_master_read_packet_job>:
{
    18e0:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    18e2:	8b83      	ldrh	r3, [r0, #28]
    18e4:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    18e6:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    18e8:	2b00      	cmp	r3, #0
    18ea:	d001      	beq.n	18f0 <i2c_master_read_packet_job+0x10>
}
    18ec:	0010      	movs	r0, r2
    18ee:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    18f0:	3301      	adds	r3, #1
    18f2:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    18f4:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    18f6:	4b02      	ldr	r3, [pc, #8]	; (1900 <i2c_master_read_packet_job+0x20>)
    18f8:	4798      	blx	r3
    18fa:	0002      	movs	r2, r0
    18fc:	e7f6      	b.n	18ec <i2c_master_read_packet_job+0xc>
    18fe:	46c0      	nop			; (mov r8, r8)
    1900:	00001801 	.word	0x00001801

00001904 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1904:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
    1906:	8b83      	ldrh	r3, [r0, #28]
    1908:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    190a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    190c:	2b00      	cmp	r3, #0
    190e:	d001      	beq.n	1914 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
    1910:	0010      	movs	r0, r2
    1912:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    1914:	3301      	adds	r3, #1
    1916:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    1918:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    191a:	4b02      	ldr	r3, [pc, #8]	; (1924 <i2c_master_write_packet_job+0x20>)
    191c:	4798      	blx	r3
    191e:	0002      	movs	r2, r0
    1920:	e7f6      	b.n	1910 <i2c_master_write_packet_job+0xc>
    1922:	46c0      	nop			; (mov r8, r8)
    1924:	00001799 	.word	0x00001799

00001928 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1928:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    192a:	0080      	lsls	r0, r0, #2
    192c:	4b75      	ldr	r3, [pc, #468]	; (1b04 <_i2c_master_interrupt_handler+0x1dc>)
    192e:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1930:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1932:	682b      	ldr	r3, [r5, #0]
    1934:	011b      	lsls	r3, r3, #4
    1936:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1938:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    193a:	7e26      	ldrb	r6, [r4, #24]
    193c:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    193e:	8b63      	ldrh	r3, [r4, #26]
    1940:	b29b      	uxth	r3, r3
    1942:	2b00      	cmp	r3, #0
    1944:	d103      	bne.n	194e <_i2c_master_interrupt_handler+0x26>
    1946:	8ba3      	ldrh	r3, [r4, #28]
    1948:	b29b      	uxth	r3, r3
    194a:	2b00      	cmp	r3, #0
    194c:	d123      	bne.n	1996 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    194e:	8b63      	ldrh	r3, [r4, #26]
    1950:	b29b      	uxth	r3, r3
    1952:	2b00      	cmp	r3, #0
    1954:	d008      	beq.n	1968 <_i2c_master_interrupt_handler+0x40>
    1956:	8ba3      	ldrh	r3, [r4, #28]
    1958:	b29b      	uxth	r3, r3
    195a:	2b00      	cmp	r3, #0
    195c:	d104      	bne.n	1968 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    195e:	3325      	adds	r3, #37	; 0x25
    1960:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1962:	2b05      	cmp	r3, #5
    1964:	d100      	bne.n	1968 <_i2c_master_interrupt_handler+0x40>
    1966:	e06d      	b.n	1a44 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1968:	8b63      	ldrh	r3, [r4, #26]
    196a:	b29b      	uxth	r3, r3
    196c:	2b00      	cmp	r3, #0
    196e:	d024      	beq.n	19ba <_i2c_master_interrupt_handler+0x92>
    1970:	8ba3      	ldrh	r3, [r4, #28]
    1972:	b29b      	uxth	r3, r3
    1974:	2b00      	cmp	r3, #0
    1976:	d020      	beq.n	19ba <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1978:	8b6b      	ldrh	r3, [r5, #26]
    197a:	069b      	lsls	r3, r3, #26
    197c:	d500      	bpl.n	1980 <_i2c_master_interrupt_handler+0x58>
    197e:	e081      	b.n	1a84 <_i2c_master_interrupt_handler+0x15c>
    1980:	2a00      	cmp	r2, #0
    1982:	d004      	beq.n	198e <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1984:	8ba3      	ldrh	r3, [r4, #28]
    1986:	b29b      	uxth	r3, r3
    1988:	2b01      	cmp	r3, #1
    198a:	d100      	bne.n	198e <_i2c_master_interrupt_handler+0x66>
    198c:	e07a      	b.n	1a84 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    198e:	2241      	movs	r2, #65	; 0x41
    1990:	2325      	movs	r3, #37	; 0x25
    1992:	54e2      	strb	r2, [r4, r3]
    1994:	e011      	b.n	19ba <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1996:	7e2b      	ldrb	r3, [r5, #24]
    1998:	07db      	lsls	r3, r3, #31
    199a:	d507      	bpl.n	19ac <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    199c:	2301      	movs	r3, #1
    199e:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    19a0:	8b6b      	ldrh	r3, [r5, #26]
    19a2:	079b      	lsls	r3, r3, #30
    19a4:	d52e      	bpl.n	1a04 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    19a6:	2241      	movs	r2, #65	; 0x41
    19a8:	2325      	movs	r3, #37	; 0x25
    19aa:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    19ac:	8ba3      	ldrh	r3, [r4, #28]
    19ae:	b29b      	uxth	r3, r3
    19b0:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    19b2:	2325      	movs	r3, #37	; 0x25
    19b4:	5ce3      	ldrb	r3, [r4, r3]
    19b6:	2b05      	cmp	r3, #5
    19b8:	d038      	beq.n	1a2c <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    19ba:	8b63      	ldrh	r3, [r4, #26]
    19bc:	b29b      	uxth	r3, r3
    19be:	2b00      	cmp	r3, #0
    19c0:	d007      	beq.n	19d2 <_i2c_master_interrupt_handler+0xaa>
    19c2:	8ba3      	ldrh	r3, [r4, #28]
    19c4:	b29b      	uxth	r3, r3
    19c6:	2b00      	cmp	r3, #0
    19c8:	d103      	bne.n	19d2 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    19ca:	3325      	adds	r3, #37	; 0x25
    19cc:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    19ce:	2b05      	cmp	r3, #5
    19d0:	d064      	beq.n	1a9c <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    19d2:	2325      	movs	r3, #37	; 0x25
    19d4:	5ce3      	ldrb	r3, [r4, r3]
    19d6:	2b05      	cmp	r3, #5
    19d8:	d013      	beq.n	1a02 <_i2c_master_interrupt_handler+0xda>
    19da:	2325      	movs	r3, #37	; 0x25
    19dc:	5ce3      	ldrb	r3, [r4, r3]
    19de:	2b00      	cmp	r3, #0
    19e0:	d00f      	beq.n	1a02 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    19e2:	2303      	movs	r3, #3
    19e4:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    19e6:	2300      	movs	r3, #0
    19e8:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    19ea:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    19ec:	3325      	adds	r3, #37	; 0x25
    19ee:	5ce3      	ldrb	r3, [r4, r3]
    19f0:	2b41      	cmp	r3, #65	; 0x41
    19f2:	d003      	beq.n	19fc <_i2c_master_interrupt_handler+0xd4>
    19f4:	7aa3      	ldrb	r3, [r4, #10]
    19f6:	2b00      	cmp	r3, #0
    19f8:	d000      	beq.n	19fc <_i2c_master_interrupt_handler+0xd4>
    19fa:	e075      	b.n	1ae8 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    19fc:	0773      	lsls	r3, r6, #29
    19fe:	d500      	bpl.n	1a02 <_i2c_master_interrupt_handler+0xda>
    1a00:	e07b      	b.n	1afa <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    1a02:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1a04:	8b6b      	ldrh	r3, [r5, #26]
    1a06:	075b      	lsls	r3, r3, #29
    1a08:	d5d0      	bpl.n	19ac <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1a0a:	2218      	movs	r2, #24
    1a0c:	2325      	movs	r3, #37	; 0x25
    1a0e:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    1a10:	2300      	movs	r3, #0
    1a12:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    1a14:	7aa3      	ldrb	r3, [r4, #10]
    1a16:	2b00      	cmp	r3, #0
    1a18:	d0c8      	beq.n	19ac <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    1a1a:	0020      	movs	r0, r4
    1a1c:	4b3a      	ldr	r3, [pc, #232]	; (1b08 <_i2c_master_interrupt_handler+0x1e0>)
    1a1e:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a20:	686a      	ldr	r2, [r5, #4]
    1a22:	23c0      	movs	r3, #192	; 0xc0
    1a24:	029b      	lsls	r3, r3, #10
    1a26:	4313      	orrs	r3, r2
    1a28:	606b      	str	r3, [r5, #4]
    1a2a:	e7bf      	b.n	19ac <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1a2c:	331f      	adds	r3, #31
    1a2e:	5ce3      	ldrb	r3, [r4, r3]
    1a30:	2b00      	cmp	r3, #0
    1a32:	d003      	beq.n	1a3c <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    1a34:	0020      	movs	r0, r4
    1a36:	4b35      	ldr	r3, [pc, #212]	; (1b0c <_i2c_master_interrupt_handler+0x1e4>)
    1a38:	4798      	blx	r3
    1a3a:	e7be      	b.n	19ba <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    1a3c:	0020      	movs	r0, r4
    1a3e:	4b34      	ldr	r3, [pc, #208]	; (1b10 <_i2c_master_interrupt_handler+0x1e8>)
    1a40:	4798      	blx	r3
    1a42:	e7ba      	b.n	19ba <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1a44:	331f      	adds	r3, #31
    1a46:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1a48:	2b00      	cmp	r3, #0
    1a4a:	d000      	beq.n	1a4e <_i2c_master_interrupt_handler+0x126>
    1a4c:	e78c      	b.n	1968 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    1a4e:	3303      	adds	r3, #3
    1a50:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1a52:	2300      	movs	r3, #0
    1a54:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1a56:	3325      	adds	r3, #37	; 0x25
    1a58:	2200      	movs	r2, #0
    1a5a:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    1a5c:	7aa3      	ldrb	r3, [r4, #10]
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d107      	bne.n	1a72 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1a62:	2301      	movs	r3, #1
    1a64:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1a66:	07f3      	lsls	r3, r6, #31
    1a68:	d5a7      	bpl.n	19ba <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1a6a:	68e3      	ldr	r3, [r4, #12]
    1a6c:	0020      	movs	r0, r4
    1a6e:	4798      	blx	r3
    1a70:	e7a3      	b.n	19ba <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    1a72:	0020      	movs	r0, r4
    1a74:	4b24      	ldr	r3, [pc, #144]	; (1b08 <_i2c_master_interrupt_handler+0x1e0>)
    1a76:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a78:	686a      	ldr	r2, [r5, #4]
    1a7a:	23c0      	movs	r3, #192	; 0xc0
    1a7c:	029b      	lsls	r3, r3, #10
    1a7e:	4313      	orrs	r3, r2
    1a80:	606b      	str	r3, [r5, #4]
    1a82:	e7f0      	b.n	1a66 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1a84:	2324      	movs	r3, #36	; 0x24
    1a86:	5ce3      	ldrb	r3, [r4, r3]
    1a88:	2b00      	cmp	r3, #0
    1a8a:	d103      	bne.n	1a94 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    1a8c:	0020      	movs	r0, r4
    1a8e:	4b20      	ldr	r3, [pc, #128]	; (1b10 <_i2c_master_interrupt_handler+0x1e8>)
    1a90:	4798      	blx	r3
    1a92:	e792      	b.n	19ba <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    1a94:	0020      	movs	r0, r4
    1a96:	4b1d      	ldr	r3, [pc, #116]	; (1b0c <_i2c_master_interrupt_handler+0x1e4>)
    1a98:	4798      	blx	r3
    1a9a:	e78e      	b.n	19ba <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1a9c:	331f      	adds	r3, #31
    1a9e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1aa0:	2b01      	cmp	r3, #1
    1aa2:	d196      	bne.n	19d2 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1aa4:	7e2b      	ldrb	r3, [r5, #24]
    1aa6:	079b      	lsls	r3, r3, #30
    1aa8:	d501      	bpl.n	1aae <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1aaa:	2302      	movs	r3, #2
    1aac:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    1aae:	2303      	movs	r3, #3
    1ab0:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1ab2:	2300      	movs	r3, #0
    1ab4:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1ab6:	3325      	adds	r3, #37	; 0x25
    1ab8:	2200      	movs	r2, #0
    1aba:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1abc:	07b3      	lsls	r3, r6, #30
    1abe:	d503      	bpl.n	1ac8 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1ac0:	2324      	movs	r3, #36	; 0x24
    1ac2:	5ce3      	ldrb	r3, [r4, r3]
    1ac4:	2b01      	cmp	r3, #1
    1ac6:	d00b      	beq.n	1ae0 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1ac8:	07f3      	lsls	r3, r6, #31
    1aca:	d400      	bmi.n	1ace <_i2c_master_interrupt_handler+0x1a6>
    1acc:	e781      	b.n	19d2 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1ace:	2324      	movs	r3, #36	; 0x24
    1ad0:	5ce3      	ldrb	r3, [r4, r3]
    1ad2:	2b00      	cmp	r3, #0
    1ad4:	d000      	beq.n	1ad8 <_i2c_master_interrupt_handler+0x1b0>
    1ad6:	e77c      	b.n	19d2 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1ad8:	68e3      	ldr	r3, [r4, #12]
    1ada:	0020      	movs	r0, r4
    1adc:	4798      	blx	r3
    1ade:	e778      	b.n	19d2 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1ae0:	6923      	ldr	r3, [r4, #16]
    1ae2:	0020      	movs	r0, r4
    1ae4:	4798      	blx	r3
    1ae6:	e774      	b.n	19d2 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    1ae8:	0020      	movs	r0, r4
    1aea:	4b07      	ldr	r3, [pc, #28]	; (1b08 <_i2c_master_interrupt_handler+0x1e0>)
    1aec:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1aee:	686a      	ldr	r2, [r5, #4]
    1af0:	23e0      	movs	r3, #224	; 0xe0
    1af2:	02db      	lsls	r3, r3, #11
    1af4:	4313      	orrs	r3, r2
    1af6:	606b      	str	r3, [r5, #4]
    1af8:	e780      	b.n	19fc <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1afa:	6963      	ldr	r3, [r4, #20]
    1afc:	0020      	movs	r0, r4
    1afe:	4798      	blx	r3
}
    1b00:	e77f      	b.n	1a02 <_i2c_master_interrupt_handler+0xda>
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	200018fc 	.word	0x200018fc
    1b08:	000016c9 	.word	0x000016c9
    1b0c:	000016d5 	.word	0x000016d5
    1b10:	0000175d 	.word	0x0000175d

00001b14 <DMX_transmit_enable>:
    DMX_flags &= ~(1 << DMX_RXR);
}

void DMX_transmit_enable(void)
{
    DMX_flags |= (1 << DMX_TXR);
    1b14:	4a02      	ldr	r2, [pc, #8]	; (1b20 <DMX_transmit_enable+0xc>)
    1b16:	7813      	ldrb	r3, [r2, #0]
    1b18:	2104      	movs	r1, #4
    1b1a:	430b      	orrs	r3, r1
    1b1c:	7013      	strb	r3, [r2, #0]
}
    1b1e:	4770      	bx	lr
    1b20:	200018ac 	.word	0x200018ac

00001b24 <configure_DMX>:
{
    1b24:	b530      	push	{r4, r5, lr}
    1b26:	b093      	sub	sp, #76	; 0x4c
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1b28:	2380      	movs	r3, #128	; 0x80
    1b2a:	05db      	lsls	r3, r3, #23
    1b2c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1b2e:	2300      	movs	r3, #0
    1b30:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1b32:	22ff      	movs	r2, #255	; 0xff
    1b34:	4669      	mov	r1, sp
    1b36:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1b38:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1b3a:	2201      	movs	r2, #1
    1b3c:	212c      	movs	r1, #44	; 0x2c
    1b3e:	4668      	mov	r0, sp
    1b40:	5442      	strb	r2, [r0, r1]
	config->transmitter_enable = true;
    1b42:	3101      	adds	r1, #1
    1b44:	5442      	strb	r2, [r0, r1]
	config->clock_polarity_inverted = false;
    1b46:	322d      	adds	r2, #45	; 0x2d
    1b48:	5483      	strb	r3, [r0, r2]
	config->use_external_clock = false;
    1b4a:	3201      	adds	r2, #1
    1b4c:	5483      	strb	r3, [r0, r2]
	config->ext_clock_freq   = 0;
    1b4e:	930c      	str	r3, [sp, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1b50:	3205      	adds	r2, #5
    1b52:	5483      	strb	r3, [r0, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1b54:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1b56:	2200      	movs	r2, #0
    1b58:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1b5a:	76c2      	strb	r2, [r0, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    1b5c:	9307      	str	r3, [sp, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    1b5e:	8403      	strh	r3, [r0, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    1b60:	8443      	strh	r3, [r0, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1b62:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1b64:	2324      	movs	r3, #36	; 0x24
    1b66:	54c2      	strb	r2, [r0, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1b68:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    1b6a:	2313      	movs	r3, #19
    1b6c:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1b6e:	3313      	adds	r3, #19
    1b70:	54c2      	strb	r2, [r0, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    1b72:	3b01      	subs	r3, #1
    1b74:	54c2      	strb	r2, [r0, r3]
    config_usart.baudrate    =					250000;
    1b76:	4b28      	ldr	r3, [pc, #160]	; (1c18 <configure_DMX+0xf4>)
    1b78:	930a      	str	r3, [sp, #40]	; 0x28
    config_usart.mux_setting =					USART_RX_1_TX_0_XCK_1;
    1b7a:	2380      	movs	r3, #128	; 0x80
    1b7c:	035b      	lsls	r3, r3, #13
    1b7e:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 =					PINMUX_PB16C_SERCOM5_PAD0;
    1b80:	4b26      	ldr	r3, [pc, #152]	; (1c1c <configure_DMX+0xf8>)
    1b82:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad1 =					PINMUX_PB17C_SERCOM5_PAD1;
    1b84:	4b26      	ldr	r3, [pc, #152]	; (1c20 <configure_DMX+0xfc>)
    1b86:	930f      	str	r3, [sp, #60]	; 0x3c
    config_usart.pinmux_pad2 =					PINMUX_UNUSED;
    1b88:	2301      	movs	r3, #1
    1b8a:	425b      	negs	r3, r3
    1b8c:	9310      	str	r3, [sp, #64]	; 0x40
    config_usart.pinmux_pad3 =					PINMUX_UNUSED;
    1b8e:	9311      	str	r3, [sp, #68]	; 0x44
    config_usart.stopbits =						USART_STOPBITS_2;
    1b90:	3341      	adds	r3, #65	; 0x41
    1b92:	7283      	strb	r3, [r0, #10]
    config_usart.generator_source =				GCLK_GENERATOR_3;
    1b94:	2203      	movs	r2, #3
    1b96:	3b0b      	subs	r3, #11
    1b98:	54c2      	strb	r2, [r0, r3]
    while (usart_init(&DMX_instance, DMX_MODULE, &config_usart) != STATUS_OK);
    1b9a:	4d22      	ldr	r5, [pc, #136]	; (1c24 <configure_DMX+0x100>)
    1b9c:	4c22      	ldr	r4, [pc, #136]	; (1c28 <configure_DMX+0x104>)
    1b9e:	466a      	mov	r2, sp
    1ba0:	4922      	ldr	r1, [pc, #136]	; (1c2c <configure_DMX+0x108>)
    1ba2:	0028      	movs	r0, r5
    1ba4:	47a0      	blx	r4
    1ba6:	2800      	cmp	r0, #0
    1ba8:	d1f9      	bne.n	1b9e <configure_DMX+0x7a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1baa:	4d1e      	ldr	r5, [pc, #120]	; (1c24 <configure_DMX+0x100>)
    1bac:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1bae:	0020      	movs	r0, r4
    1bb0:	4b1f      	ldr	r3, [pc, #124]	; (1c30 <configure_DMX+0x10c>)
    1bb2:	4798      	blx	r3
    1bb4:	231f      	movs	r3, #31
    1bb6:	4018      	ands	r0, r3
    1bb8:	3b1e      	subs	r3, #30
    1bba:	4083      	lsls	r3, r0
    1bbc:	4a1d      	ldr	r2, [pc, #116]	; (1c34 <configure_DMX+0x110>)
    1bbe:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1bc0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1bc2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d1fc      	bne.n	1bc2 <configure_DMX+0x9e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1bc8:	6823      	ldr	r3, [r4, #0]
    1bca:	2202      	movs	r2, #2
    1bcc:	4313      	orrs	r3, r2
    1bce:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1bd0:	4b14      	ldr	r3, [pc, #80]	; (1c24 <configure_DMX+0x100>)
    1bd2:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    1bd4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1bd6:	2a00      	cmp	r2, #0
    1bd8:	d1fc      	bne.n	1bd4 <configure_DMX+0xb0>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    1bda:	6859      	ldr	r1, [r3, #4]
    1bdc:	2280      	movs	r2, #128	; 0x80
    1bde:	0252      	lsls	r2, r2, #9
    1be0:	430a      	orrs	r2, r1
    1be2:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    1be4:	2101      	movs	r1, #1
    1be6:	4a0f      	ldr	r2, [pc, #60]	; (1c24 <configure_DMX+0x100>)
    1be8:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    1bea:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1bec:	2a00      	cmp	r2, #0
    1bee:	d1fc      	bne.n	1bea <configure_DMX+0xc6>
    delay_ms(1);
    1bf0:	2000      	movs	r0, #0
    1bf2:	4b11      	ldr	r3, [pc, #68]	; (1c38 <configure_DMX+0x114>)
    1bf4:	4798      	blx	r3
    1bf6:	0002      	movs	r2, r0
    1bf8:	2300      	movs	r3, #0
    1bfa:	4810      	ldr	r0, [pc, #64]	; (1c3c <configure_DMX+0x118>)
    1bfc:	2100      	movs	r1, #0
    1bfe:	1880      	adds	r0, r0, r2
    1c00:	4159      	adcs	r1, r3
    1c02:	4a0f      	ldr	r2, [pc, #60]	; (1c40 <configure_DMX+0x11c>)
    1c04:	2300      	movs	r3, #0
    1c06:	4c0f      	ldr	r4, [pc, #60]	; (1c44 <configure_DMX+0x120>)
    1c08:	47a0      	blx	r4
    1c0a:	4b0f      	ldr	r3, [pc, #60]	; (1c48 <configure_DMX+0x124>)
    1c0c:	4798      	blx	r3
    DMX_transmit_enable();
    1c0e:	4b0f      	ldr	r3, [pc, #60]	; (1c4c <configure_DMX+0x128>)
    1c10:	4798      	blx	r3
}
    1c12:	b013      	add	sp, #76	; 0x4c
    1c14:	bd30      	pop	{r4, r5, pc}
    1c16:	46c0      	nop			; (mov r8, r8)
    1c18:	0003d090 	.word	0x0003d090
    1c1c:	00300002 	.word	0x00300002
    1c20:	00310002 	.word	0x00310002
    1c24:	200018b0 	.word	0x200018b0
    1c28:	00002a3d 	.word	0x00002a3d
    1c2c:	42001800 	.word	0x42001800
    1c30:	000030b5 	.word	0x000030b5
    1c34:	e000e100 	.word	0xe000e100
    1c38:	00004751 	.word	0x00004751
    1c3c:	00001b57 	.word	0x00001b57
    1c40:	00001b58 	.word	0x00001b58
    1c44:	000057a1 	.word	0x000057a1
    1c48:	20000001 	.word	0x20000001
    1c4c:	00001b15 	.word	0x00001b15

00001c50 <DMX_change_baudrate>:
    /* usart_register_callback(&DMX_instance, DMX_transmit_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
     usart_enable_callback(&DMX_instance, USART_CALLBACK_BUFFER_TRANSMITTED);*/
}

void DMX_change_baudrate(uint32_t baud)
{
    1c50:	b510      	push	{r4, lr}
    float part = 1.0 - 16.0 * baud / 48000000;
    1c52:	4b22      	ldr	r3, [pc, #136]	; (1cdc <DMX_change_baudrate+0x8c>)
    1c54:	4798      	blx	r3
    1c56:	2200      	movs	r2, #0
    1c58:	4b21      	ldr	r3, [pc, #132]	; (1ce0 <DMX_change_baudrate+0x90>)
    1c5a:	4c22      	ldr	r4, [pc, #136]	; (1ce4 <DMX_change_baudrate+0x94>)
    1c5c:	47a0      	blx	r4
    1c5e:	2200      	movs	r2, #0
    1c60:	4b21      	ldr	r3, [pc, #132]	; (1ce8 <DMX_change_baudrate+0x98>)
    1c62:	4c22      	ldr	r4, [pc, #136]	; (1cec <DMX_change_baudrate+0x9c>)
    1c64:	47a0      	blx	r4
    1c66:	0002      	movs	r2, r0
    1c68:	000b      	movs	r3, r1
    1c6a:	2000      	movs	r0, #0
    1c6c:	4920      	ldr	r1, [pc, #128]	; (1cf0 <DMX_change_baudrate+0xa0>)
    1c6e:	4c21      	ldr	r4, [pc, #132]	; (1cf4 <DMX_change_baudrate+0xa4>)
    1c70:	47a0      	blx	r4
    1c72:	4b21      	ldr	r3, [pc, #132]	; (1cf8 <DMX_change_baudrate+0xa8>)
    1c74:	4798      	blx	r3
    uint16_t baudrate = (uint16_t)(65536 * part);
    1c76:	218f      	movs	r1, #143	; 0x8f
    1c78:	05c9      	lsls	r1, r1, #23
    1c7a:	4b20      	ldr	r3, [pc, #128]	; (1cfc <DMX_change_baudrate+0xac>)
    1c7c:	4798      	blx	r3
    1c7e:	4b20      	ldr	r3, [pc, #128]	; (1d00 <DMX_change_baudrate+0xb0>)
    1c80:	4798      	blx	r3
    1c82:	b280      	uxth	r0, r0

    if(baudrate == DMX_MODULE->USART.BAUD.reg)return;
    1c84:	4b1f      	ldr	r3, [pc, #124]	; (1d04 <DMX_change_baudrate+0xb4>)
    1c86:	899b      	ldrh	r3, [r3, #12]
    1c88:	b29b      	uxth	r3, r3
    1c8a:	4298      	cmp	r0, r3
    1c8c:	d024      	beq.n	1cd8 <DMX_change_baudrate+0x88>

    DMX_MODULE->USART.CTRLA.reg &= ~(1 << SERCOM_USART_CTRLA_ENABLE_Pos);
    1c8e:	4b1d      	ldr	r3, [pc, #116]	; (1d04 <DMX_change_baudrate+0xb4>)
    1c90:	681a      	ldr	r2, [r3, #0]
    1c92:	2102      	movs	r1, #2
    1c94:	438a      	bics	r2, r1
    1c96:	601a      	str	r2, [r3, #0]
    DMX_MODULE->USART.CTRLB.bit.TXEN = 0;
    1c98:	685a      	ldr	r2, [r3, #4]
    1c9a:	491b      	ldr	r1, [pc, #108]	; (1d08 <DMX_change_baudrate+0xb8>)
    1c9c:	400a      	ands	r2, r1
    1c9e:	605a      	str	r2, [r3, #4]
    DMX_MODULE->USART.CTRLB.bit.RXEN = 0;
    1ca0:	685a      	ldr	r2, [r3, #4]
    1ca2:	491a      	ldr	r1, [pc, #104]	; (1d0c <DMX_change_baudrate+0xbc>)
    1ca4:	400a      	ands	r2, r1
    1ca6:	605a      	str	r2, [r3, #4]
    while(DMX_MODULE->USART.SYNCBUSY.reg);
    1ca8:	001a      	movs	r2, r3
    1caa:	69d3      	ldr	r3, [r2, #28]
    1cac:	2b00      	cmp	r3, #0
    1cae:	d1fc      	bne.n	1caa <DMX_change_baudrate+0x5a>

    DMX_MODULE->USART.BAUD.reg = baudrate;
    1cb0:	4b14      	ldr	r3, [pc, #80]	; (1d04 <DMX_change_baudrate+0xb4>)
    1cb2:	8198      	strh	r0, [r3, #12]
    DMX_MODULE->USART.CTRLB.bit.TXEN = 1;
    1cb4:	6859      	ldr	r1, [r3, #4]
    1cb6:	2280      	movs	r2, #128	; 0x80
    1cb8:	0252      	lsls	r2, r2, #9
    1cba:	430a      	orrs	r2, r1
    1cbc:	605a      	str	r2, [r3, #4]
    DMX_MODULE->USART.CTRLB.bit.RXEN = 1;
    1cbe:	6859      	ldr	r1, [r3, #4]
    1cc0:	2280      	movs	r2, #128	; 0x80
    1cc2:	0292      	lsls	r2, r2, #10
    1cc4:	430a      	orrs	r2, r1
    1cc6:	605a      	str	r2, [r3, #4]
    DMX_MODULE->USART.CTRLA.reg |= (1 << SERCOM_USART_CTRLA_ENABLE_Pos);
    1cc8:	681a      	ldr	r2, [r3, #0]
    1cca:	2102      	movs	r1, #2
    1ccc:	430a      	orrs	r2, r1
    1cce:	601a      	str	r2, [r3, #0]
    while(DMX_MODULE->USART.SYNCBUSY.reg);
    1cd0:	001a      	movs	r2, r3
    1cd2:	69d3      	ldr	r3, [r2, #28]
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	d1fc      	bne.n	1cd2 <DMX_change_baudrate+0x82>

    1cd8:	bd10      	pop	{r4, pc}
    1cda:	46c0      	nop			; (mov r8, r8)
    1cdc:	00007a35 	.word	0x00007a35
    1ce0:	40300000 	.word	0x40300000
    1ce4:	00006ea1 	.word	0x00006ea1
    1ce8:	4186e360 	.word	0x4186e360
    1cec:	00006839 	.word	0x00006839
    1cf0:	3ff00000 	.word	0x3ff00000
    1cf4:	000073a1 	.word	0x000073a1
    1cf8:	00007b49 	.word	0x00007b49
    1cfc:	00005b35 	.word	0x00005b35
    1d00:	00005835 	.word	0x00005835
    1d04:	42001800 	.word	0x42001800
    1d08:	fffeffff 	.word	0xfffeffff
    1d0c:	fffdffff 	.word	0xfffdffff

00001d10 <DMX_SendMessage>:
{
    1d10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d12:	b083      	sub	sp, #12
    1d14:	0004      	movs	r4, r0
    1d16:	000d      	movs	r5, r1
		port_base->OUTSET.reg = pin_mask;
    1d18:	2280      	movs	r2, #128	; 0x80
    1d1a:	0352      	lsls	r2, r2, #13
    1d1c:	2382      	movs	r3, #130	; 0x82
    1d1e:	05db      	lsls	r3, r3, #23
    1d20:	619a      	str	r2, [r3, #24]
    uint8_t null_var =0;
    1d22:	2200      	movs	r2, #0
    1d24:	466b      	mov	r3, sp
    1d26:	71da      	strb	r2, [r3, #7]
    DMX_change_baudrate(100000);
    1d28:	480f      	ldr	r0, [pc, #60]	; (1d68 <DMX_SendMessage+0x58>)
    1d2a:	4b10      	ldr	r3, [pc, #64]	; (1d6c <DMX_SendMessage+0x5c>)
    1d2c:	4798      	blx	r3
    while(usart_write_buffer_job(&DMX_instance, &null_var, 1)!=STATUS_OK);
    1d2e:	4e10      	ldr	r6, [pc, #64]	; (1d70 <DMX_SendMessage+0x60>)
    1d30:	4f10      	ldr	r7, [pc, #64]	; (1d74 <DMX_SendMessage+0x64>)
    1d32:	2201      	movs	r2, #1
    1d34:	466b      	mov	r3, sp
    1d36:	1dd9      	adds	r1, r3, #7
    1d38:	0030      	movs	r0, r6
    1d3a:	47b8      	blx	r7
    1d3c:	2800      	cmp	r0, #0
    1d3e:	d1f8      	bne.n	1d32 <DMX_SendMessage+0x22>
    DMX_change_baudrate(250000);
    1d40:	480d      	ldr	r0, [pc, #52]	; (1d78 <DMX_SendMessage+0x68>)
    1d42:	4b0a      	ldr	r3, [pc, #40]	; (1d6c <DMX_SendMessage+0x5c>)
    1d44:	4798      	blx	r3
    while(usart_write_buffer_job(&DMX_instance, &null_var, 1)!=STATUS_OK);
    1d46:	4e0a      	ldr	r6, [pc, #40]	; (1d70 <DMX_SendMessage+0x60>)
    1d48:	4f0a      	ldr	r7, [pc, #40]	; (1d74 <DMX_SendMessage+0x64>)
    1d4a:	2201      	movs	r2, #1
    1d4c:	466b      	mov	r3, sp
    1d4e:	1dd9      	adds	r1, r3, #7
    1d50:	0030      	movs	r0, r6
    1d52:	47b8      	blx	r7
    1d54:	2800      	cmp	r0, #0
    1d56:	d1f8      	bne.n	1d4a <DMX_SendMessage+0x3a>
    usart_write_buffer_job(&DMX_instance, p_string, length);
    1d58:	002a      	movs	r2, r5
    1d5a:	0021      	movs	r1, r4
    1d5c:	4804      	ldr	r0, [pc, #16]	; (1d70 <DMX_SendMessage+0x60>)
    1d5e:	4b05      	ldr	r3, [pc, #20]	; (1d74 <DMX_SendMessage+0x64>)
    1d60:	4798      	blx	r3
}
    1d62:	b003      	add	sp, #12
    1d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d66:	46c0      	nop			; (mov r8, r8)
    1d68:	000186a0 	.word	0x000186a0
    1d6c:	00001c51 	.word	0x00001c51
    1d70:	200018b0 	.word	0x200018b0
    1d74:	00002e9d 	.word	0x00002e9d
    1d78:	0003d090 	.word	0x0003d090

00001d7c <read_memory_map>:
    get_num_of_saves();
}

/* Reads the memory map */
void read_memory_map(void)
{
    1d7c:	b500      	push	{lr}
    1d7e:	b083      	sub	sp, #12

    uint8_t i2c_packet[] = {0};
    1d80:	a901      	add	r1, sp, #4
    1d82:	2300      	movs	r3, #0
    1d84:	700b      	strb	r3, [r1, #0]
    if (TWI_read(EEPROM_ADDR, i2c_packet, MEMORY_MAP_SIZE_BYTES) != STATUS_OK)
    1d86:	2208      	movs	r2, #8
    1d88:	2057      	movs	r0, #87	; 0x57
    1d8a:	4b04      	ldr	r3, [pc, #16]	; (1d9c <read_memory_map+0x20>)
    1d8c:	4798      	blx	r3
        ;
    fs.memory_map = *(uint64_t *)I2C_get_rx_Buffer();
    1d8e:	4b04      	ldr	r3, [pc, #16]	; (1da0 <read_memory_map+0x24>)
    1d90:	4798      	blx	r3
    1d92:	6802      	ldr	r2, [r0, #0]
    1d94:	4b03      	ldr	r3, [pc, #12]	; (1da4 <read_memory_map+0x28>)
    1d96:	601a      	str	r2, [r3, #0]
}
    1d98:	b003      	add	sp, #12
    1d9a:	bd00      	pop	{pc}
    1d9c:	000035bd 	.word	0x000035bd
    1da0:	0000368d 	.word	0x0000368d
    1da4:	200018e4 	.word	0x200018e4

00001da8 <memory_init>:
{
    1da8:	b510      	push	{r4, lr}
    read_memory_map();
    1daa:	4b0a      	ldr	r3, [pc, #40]	; (1dd4 <memory_init+0x2c>)
    1dac:	4798      	blx	r3
/* Checks the memory map and counts saves. */
static void get_num_of_saves(void)
{
    uint8_t stevec = 0;
    for (uint8_t i = 0; i < MAX_SAVES; i++) {
        if (fs.memory_map & (1UL << i))
    1dae:	4b0a      	ldr	r3, [pc, #40]	; (1dd8 <memory_init+0x30>)
    1db0:	681c      	ldr	r4, [r3, #0]
    1db2:	2300      	movs	r3, #0
    uint8_t stevec = 0;
    1db4:	2200      	movs	r2, #0
        if (fs.memory_map & (1UL << i))
    1db6:	2001      	movs	r0, #1
    1db8:	e002      	b.n	1dc0 <memory_init+0x18>
    1dba:	3301      	adds	r3, #1
    for (uint8_t i = 0; i < MAX_SAVES; i++) {
    1dbc:	2b20      	cmp	r3, #32
    1dbe:	d006      	beq.n	1dce <memory_init+0x26>
        if (fs.memory_map & (1UL << i))
    1dc0:	0021      	movs	r1, r4
    1dc2:	40d9      	lsrs	r1, r3
    1dc4:	4208      	tst	r0, r1
    1dc6:	d0f8      	beq.n	1dba <memory_init+0x12>
            stevec++;
    1dc8:	3201      	adds	r2, #1
    1dca:	b2d2      	uxtb	r2, r2
    1dcc:	e7f5      	b.n	1dba <memory_init+0x12>
    }
    fs.num_of_saves = stevec;
    1dce:	4b02      	ldr	r3, [pc, #8]	; (1dd8 <memory_init+0x30>)
    1dd0:	711a      	strb	r2, [r3, #4]
}
    1dd2:	bd10      	pop	{r4, pc}
    1dd4:	00001d7d 	.word	0x00001d7d
    1dd8:	200018e4 	.word	0x200018e4

00001ddc <memory_full_format>:
{
    fs.memory_map &= ~(1UL << preset->position);
    write_memory_map();
}
void memory_full_format(void)
{
    1ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dde:	46de      	mov	lr, fp
    1de0:	4657      	mov	r7, sl
    1de2:	464e      	mov	r6, r9
    1de4:	4645      	mov	r5, r8
    1de6:	b5e0      	push	{r5, r6, r7, lr}
    1de8:	b095      	sub	sp, #84	; 0x54
    1dea:	ab03      	add	r3, sp, #12
    1dec:	2146      	movs	r1, #70	; 0x46
    1dee:	aa02      	add	r2, sp, #8
    1df0:	4694      	mov	ip, r2
    1df2:	4461      	add	r1, ip
    uint8_t null_array[66];
    for (uint8_t i = 0; i < 66; i++)
        null_array[i] = 0;
    1df4:	2200      	movs	r2, #0
    1df6:	701a      	strb	r2, [r3, #0]
    1df8:	3301      	adds	r3, #1
    for (uint8_t i = 0; i < 66; i++)
    1dfa:	428b      	cmp	r3, r1
    1dfc:	d1fb      	bne.n	1df6 <memory_full_format+0x1a>
    1dfe:	2300      	movs	r3, #0
    1e00:	4698      	mov	r8, r3
    for (uint16_t i = 0; i < MEMORY_SIZE; i += 64) {
        null_array[0] = (i >> 8) & 0xFF;
        null_array[1] = i & 0xFF;
        TWI_write(EEPROM_ADDR, 66, null_array);
    1e02:	4b1a      	ldr	r3, [pc, #104]	; (1e6c <memory_full_format+0x90>)
    1e04:	469a      	mov	sl, r3
        delay_ms(5);
    1e06:	4b1a      	ldr	r3, [pc, #104]	; (1e70 <memory_full_format+0x94>)
    1e08:	4699      	mov	r9, r3
    1e0a:	9600      	str	r6, [sp, #0]
    1e0c:	9701      	str	r7, [sp, #4]
        null_array[0] = (i >> 8) & 0xFF;
    1e0e:	aa03      	add	r2, sp, #12
    1e10:	4643      	mov	r3, r8
    1e12:	0a1b      	lsrs	r3, r3, #8
    1e14:	7013      	strb	r3, [r2, #0]
        null_array[1] = i & 0xFF;
    1e16:	4643      	mov	r3, r8
    1e18:	7053      	strb	r3, [r2, #1]
        TWI_write(EEPROM_ADDR, 66, null_array);
    1e1a:	2142      	movs	r1, #66	; 0x42
    1e1c:	2057      	movs	r0, #87	; 0x57
    1e1e:	47d0      	blx	sl
        delay_ms(5);
    1e20:	2000      	movs	r0, #0
    1e22:	47c8      	blx	r9
    1e24:	0004      	movs	r4, r0
    1e26:	2500      	movs	r5, #0
    1e28:	0f83      	lsrs	r3, r0, #30
    1e2a:	9301      	str	r3, [sp, #4]
    1e2c:	0083      	lsls	r3, r0, #2
    1e2e:	9300      	str	r3, [sp, #0]
    1e30:	9800      	ldr	r0, [sp, #0]
    1e32:	9901      	ldr	r1, [sp, #4]
    1e34:	1900      	adds	r0, r0, r4
    1e36:	4169      	adcs	r1, r5
    1e38:	4a0e      	ldr	r2, [pc, #56]	; (1e74 <memory_full_format+0x98>)
    1e3a:	2300      	movs	r3, #0
    1e3c:	1880      	adds	r0, r0, r2
    1e3e:	4159      	adcs	r1, r3
    1e40:	4a0d      	ldr	r2, [pc, #52]	; (1e78 <memory_full_format+0x9c>)
    1e42:	2300      	movs	r3, #0
    1e44:	4e0d      	ldr	r6, [pc, #52]	; (1e7c <memory_full_format+0xa0>)
    1e46:	47b0      	blx	r6
    1e48:	4b0d      	ldr	r3, [pc, #52]	; (1e80 <memory_full_format+0xa4>)
    1e4a:	4798      	blx	r3
    for (uint16_t i = 0; i < MEMORY_SIZE; i += 64) {
    1e4c:	4643      	mov	r3, r8
    1e4e:	3340      	adds	r3, #64	; 0x40
    1e50:	b29b      	uxth	r3, r3
    1e52:	4698      	mov	r8, r3
    1e54:	2380      	movs	r3, #128	; 0x80
    1e56:	00db      	lsls	r3, r3, #3
    1e58:	4598      	cmp	r8, r3
    1e5a:	d1d8      	bne.n	1e0e <memory_full_format+0x32>
    }
}
    1e5c:	b015      	add	sp, #84	; 0x54
    1e5e:	bc3c      	pop	{r2, r3, r4, r5}
    1e60:	4690      	mov	r8, r2
    1e62:	4699      	mov	r9, r3
    1e64:	46a2      	mov	sl, r4
    1e66:	46ab      	mov	fp, r5
    1e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	00003555 	.word	0x00003555
    1e70:	00004751 	.word	0x00004751
    1e74:	00001b57 	.word	0x00001b57
    1e78:	00001b58 	.word	0x00001b58
    1e7c:	000057a1 	.word	0x000057a1
    1e80:	20000001 	.word	0x20000001

00001e84 <dac_is_syncing>:
		struct dac_module *const dev_inst)
{
	/* Sanity check arguments */
	Assert(dev_inst);

	Dac *const dac_module = dev_inst->hw;
    1e84:	6803      	ldr	r3, [r0, #0]

#if (SAMC21)
	if (dac_module->SYNCBUSY.reg) {
    1e86:	6918      	ldr	r0, [r3, #16]
    1e88:	1e43      	subs	r3, r0, #1
    1e8a:	4198      	sbcs	r0, r3
    1e8c:	b2c0      	uxtb	r0, r0
#endif
		return true;
	}

	return false;
}
    1e8e:	4770      	bx	lr

00001e90 <dac_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->reference      = DAC_REFERENCE_INT1V;
    1e90:	2300      	movs	r3, #0
    1e92:	7003      	strb	r3, [r0, #0]
	config->output         = DAC_OUTPUT_EXTERNAL;
    1e94:	2201      	movs	r2, #1
    1e96:	7042      	strb	r2, [r0, #1]
	config->left_adjust    = false;
    1e98:	7083      	strb	r3, [r0, #2]
#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	config->databuf_protection_bypass = false;
#endif
	config->voltage_pump_disable = false;
    1e9a:	7103      	strb	r3, [r0, #4]
	config->clock_source   = GCLK_GENERATOR_0;
    1e9c:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby = false;
    1e9e:	7143      	strb	r3, [r0, #5]
#if (SAMC21)
	config->dither_mode    = false;
    1ea0:	7183      	strb	r3, [r0, #6]
#endif
}
    1ea2:	4770      	bx	lr

00001ea4 <dac_init>:
 */
enum status_code dac_init(
		struct dac_module *const module_inst,
		Dac *const module,
		struct dac_config *const config)
{
    1ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ea6:	46c6      	mov	lr, r8
    1ea8:	b500      	push	{lr}
    1eaa:	b082      	sub	sp, #8
    1eac:	0005      	movs	r5, r0
    1eae:	0014      	movs	r4, r2
	Assert(module_inst);
	Assert(module);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = module;
    1eb0:	6001      	str	r1, [r0, #0]
    1eb2:	4a28      	ldr	r2, [pc, #160]	; (1f54 <dac_init+0xb0>)
    1eb4:	69d0      	ldr	r0, [r2, #28]
    1eb6:	2380      	movs	r3, #128	; 0x80
    1eb8:	039b      	lsls	r3, r3, #14
    1eba:	4303      	orrs	r3, r0
    1ebc:	61d3      	str	r3, [r2, #28]
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_DAC);
#endif

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
    1ebe:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    1ec0:	201c      	movs	r0, #28
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
    1ec2:	079b      	lsls	r3, r3, #30
    1ec4:	d503      	bpl.n	1ece <dac_init+0x2a>

	_dac_instances[0] = module_inst;
#endif

	return STATUS_OK;
}
    1ec6:	b002      	add	sp, #8
    1ec8:	bc04      	pop	{r2}
    1eca:	4690      	mov	r8, r2
    1ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
    1ece:	780b      	ldrb	r3, [r1, #0]
		return STATUS_BUSY;
    1ed0:	3817      	subs	r0, #23
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
    1ed2:	07db      	lsls	r3, r3, #31
    1ed4:	d4f7      	bmi.n	1ec6 <dac_init+0x22>
	gclk_chan_conf.source_generator = config->clock_source;
    1ed6:	a901      	add	r1, sp, #4
    1ed8:	78e3      	ldrb	r3, [r4, #3]
    1eda:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(DAC_GCLK_ID, &gclk_chan_conf);
    1edc:	301f      	adds	r0, #31
    1ede:	4b1e      	ldr	r3, [pc, #120]	; (1f58 <dac_init+0xb4>)
    1ee0:	4798      	blx	r3
	system_gclk_chan_enable(DAC_GCLK_ID);
    1ee2:	2024      	movs	r0, #36	; 0x24
    1ee4:	4b1d      	ldr	r3, [pc, #116]	; (1f5c <dac_init+0xb8>)
    1ee6:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1ee8:	2600      	movs	r6, #0
    1eea:	466b      	mov	r3, sp
    1eec:	705e      	strb	r6, [r3, #1]
	config->powersave    = false;
    1eee:	70de      	strb	r6, [r3, #3]
	pin_conf.mux_position = MUX_PA02B_DAC_VOUT;
    1ef0:	2301      	movs	r3, #1
    1ef2:	466a      	mov	r2, sp
    1ef4:	7013      	strb	r3, [r2, #0]
	pin_conf.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1ef6:	7096      	strb	r6, [r2, #2]
	system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT, &pin_conf);
    1ef8:	4669      	mov	r1, sp
    1efa:	2002      	movs	r0, #2
    1efc:	4b18      	ldr	r3, [pc, #96]	; (1f60 <dac_init+0xbc>)
    1efe:	4798      	blx	r3
	Dac *const dac_module = module_inst->hw;
    1f00:	682f      	ldr	r7, [r5, #0]
	module_inst->output = config->output;
    1f02:	7863      	ldrb	r3, [r4, #1]
    1f04:	712b      	strb	r3, [r5, #4]
	module_inst->start_on_event = false;
    1f06:	71ae      	strb	r6, [r5, #6]
	if (config->run_in_standby) {
    1f08:	7963      	ldrb	r3, [r4, #5]
		new_ctrla |= DAC_CTRLA_RUNSTDBY;
    1f0a:	1e5a      	subs	r2, r3, #1
    1f0c:	4193      	sbcs	r3, r2
    1f0e:	019b      	lsls	r3, r3, #6
	new_ctrlb |= config->reference;
    1f10:	7822      	ldrb	r2, [r4, #0]
    1f12:	4690      	mov	r8, r2
	if (config->left_adjust) {
    1f14:	78a2      	ldrb	r2, [r4, #2]
    1f16:	2a00      	cmp	r2, #0
    1f18:	d003      	beq.n	1f22 <dac_init+0x7e>
    1f1a:	2204      	movs	r2, #4
    1f1c:	4641      	mov	r1, r8
    1f1e:	4311      	orrs	r1, r2
    1f20:	4688      	mov	r8, r1
	if (config->voltage_pump_disable) {
    1f22:	7922      	ldrb	r2, [r4, #4]
    1f24:	2a00      	cmp	r2, #0
    1f26:	d003      	beq.n	1f30 <dac_init+0x8c>
    1f28:	2208      	movs	r2, #8
    1f2a:	4641      	mov	r1, r8
    1f2c:	4311      	orrs	r1, r2
    1f2e:	4688      	mov	r8, r1
	dac_module->CTRLA.reg = new_ctrla;
    1f30:	b2db      	uxtb	r3, r3
    1f32:	703b      	strb	r3, [r7, #0]
	while (dac_is_syncing(module_inst)) {
    1f34:	4e0b      	ldr	r6, [pc, #44]	; (1f64 <dac_init+0xc0>)
    1f36:	0028      	movs	r0, r5
    1f38:	47b0      	blx	r6
    1f3a:	2800      	cmp	r0, #0
    1f3c:	d1fb      	bne.n	1f36 <dac_init+0x92>
	dac_module->CTRLB.reg = new_ctrlb;
    1f3e:	4643      	mov	r3, r8
    1f40:	707b      	strb	r3, [r7, #1]
	module_inst->reference = config->reference;
    1f42:	7823      	ldrb	r3, [r4, #0]
    1f44:	716b      	strb	r3, [r5, #5]
		module_inst->callback[i] = NULL;
    1f46:	2300      	movs	r3, #0
    1f48:	616b      	str	r3, [r5, #20]
    1f4a:	61ab      	str	r3, [r5, #24]
    1f4c:	61eb      	str	r3, [r5, #28]
	_dac_instances[0] = module_inst;
    1f4e:	4b06      	ldr	r3, [pc, #24]	; (1f68 <dac_init+0xc4>)
    1f50:	601d      	str	r5, [r3, #0]
	return STATUS_OK;
    1f52:	e7b8      	b.n	1ec6 <dac_init+0x22>
    1f54:	40000800 	.word	0x40000800
    1f58:	0000482d 	.word	0x0000482d
    1f5c:	000047bd 	.word	0x000047bd
    1f60:	00004929 	.word	0x00004929
    1f64:	00001e85 	.word	0x00001e85
    1f68:	200018ec 	.word	0x200018ec

00001f6c <dac_enable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_enable(
		struct dac_module *const module_inst)
{
    1f6c:	b570      	push	{r4, r5, r6, lr}
    1f6e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
    1f70:	6805      	ldr	r5, [r0, #0]

	/* Enable selected output */
	dac_module->CTRLB.reg |= module_inst->output;
    1f72:	786b      	ldrb	r3, [r5, #1]
    1f74:	7902      	ldrb	r2, [r0, #4]
    1f76:	4313      	orrs	r3, r2
    1f78:	706b      	strb	r3, [r5, #1]

	while (dac_is_syncing(module_inst)) {
    1f7a:	4e0c      	ldr	r6, [pc, #48]	; (1fac <dac_enable+0x40>)
    1f7c:	0020      	movs	r0, r4
    1f7e:	47b0      	blx	r6
    1f80:	2800      	cmp	r0, #0
    1f82:	d1fb      	bne.n	1f7c <dac_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	dac_module->CTRLA.reg |= DAC_CTRLA_ENABLE;
    1f84:	782b      	ldrb	r3, [r5, #0]
    1f86:	2202      	movs	r2, #2
    1f88:	4313      	orrs	r3, r2
    1f8a:	702b      	strb	r3, [r5, #0]

	/* Enable internal bandgap reference if selected in the configuration */
	if (module_inst->reference == DAC_REFERENCE_INT1V) {
    1f8c:	7963      	ldrb	r3, [r4, #5]
    1f8e:	2b00      	cmp	r3, #0
    1f90:	d104      	bne.n	1f9c <dac_enable+0x30>
    1f92:	4a07      	ldr	r2, [pc, #28]	; (1fb0 <dac_enable+0x44>)
    1f94:	69d3      	ldr	r3, [r2, #28]
    1f96:	2104      	movs	r1, #4
    1f98:	430b      	orrs	r3, r1
    1f9a:	61d3      	str	r3, [r2, #28]
#if (SAMC21)
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
	}

	if(dac_module->CTRLA.reg & DAC_CTRLA_ENABLE) {
    1f9c:	782b      	ldrb	r3, [r5, #0]
    1f9e:	079b      	lsls	r3, r3, #30
    1fa0:	d503      	bpl.n	1faa <dac_enable+0x3e>
		while(! (dac_module->STATUS.reg & DAC_STATUS_READY)) {
    1fa2:	2201      	movs	r2, #1
    1fa4:	79eb      	ldrb	r3, [r5, #7]
    1fa6:	4213      	tst	r3, r2
    1fa8:	d0fc      	beq.n	1fa4 <dac_enable+0x38>
#else
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#endif
}
    1faa:	bd70      	pop	{r4, r5, r6, pc}
    1fac:	00001e85 	.word	0x00001e85
    1fb0:	40001800 	.word	0x40001800

00001fb4 <dac_chan_get_config_defaults>:
void dac_chan_get_config_defaults(
		struct dac_chan_config *const config)
{
	/* Sanity check arguments */
	Assert(config);
}
    1fb4:	4770      	bx	lr

00001fb6 <dac_chan_set_config>:
		const enum dac_channel channel,
		struct dac_chan_config *const config)
{
	/* No channel support yet */
	UNUSED(channel);
}
    1fb6:	4770      	bx	lr

00001fb8 <dac_chan_enable>:
		struct dac_module *const module_inst,
		enum dac_channel channel)
{
	/* No channel support yet */
	UNUSED(channel);
}
    1fb8:	4770      	bx	lr
	...

00001fbc <dac_chan_write>:
 */
enum status_code dac_chan_write(
		struct dac_module *const module_inst,
		enum dac_channel channel,
		const uint16_t data)
{
    1fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fbe:	0004      	movs	r4, r0
    1fc0:	0017      	movs	r7, r2
	Assert(module_inst->hw);

	/* No channel support yet */
	UNUSED(channel);

	Dac *const dac_module = module_inst->hw;
    1fc2:	6806      	ldr	r6, [r0, #0]

	/* Wait until the synchronization is complete */
	while (dac_is_syncing(module_inst)) {
    1fc4:	4d06      	ldr	r5, [pc, #24]	; (1fe0 <dac_chan_write+0x24>)
    1fc6:	0020      	movs	r0, r4
    1fc8:	47a8      	blx	r5
    1fca:	2800      	cmp	r0, #0
    1fcc:	d1fb      	bne.n	1fc6 <dac_chan_write+0xa>
	};

	if (module_inst->start_on_event) {
    1fce:	79a3      	ldrb	r3, [r4, #6]
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	d102      	bne.n	1fda <dac_chan_write+0x1e>
		/* Write the new value to the buffered DAC data register */
		dac_module->DATABUF.reg = data;
	} else {
		/* Write the new value to the DAC data register */
		dac_module->DATA.reg = data;
    1fd4:	8137      	strh	r7, [r6, #8]
	}

	return STATUS_OK;
}
    1fd6:	2000      	movs	r0, #0
    1fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dac_module->DATABUF.reg = data;
    1fda:	81b7      	strh	r7, [r6, #12]
    1fdc:	e7fb      	b.n	1fd6 <dac_chan_write+0x1a>
    1fde:	46c0      	nop			; (mov r8, r8)
    1fe0:	00001e85 	.word	0x00001e85

00001fe4 <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
    1fe4:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
    1fe6:	4b27      	ldr	r3, [pc, #156]	; (2084 <STACK_SIZE+0x84>)
    1fe8:	681c      	ldr	r4, [r3, #0]
	Dac *const dac_hw = module->hw;
    1fea:	6825      	ldr	r5, [r4, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
    1fec:	79ab      	ldrb	r3, [r5, #6]
    1fee:	07db      	lsls	r3, r3, #31
    1ff0:	d507      	bpl.n	2002 <STACK_SIZE+0x2>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
    1ff2:	2301      	movs	r3, #1
    1ff4:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
    1ff6:	0023      	movs	r3, r4
    1ff8:	3314      	adds	r3, #20
    1ffa:	d002      	beq.n	2002 <STACK_SIZE+0x2>
    1ffc:	7c63      	ldrb	r3, [r4, #17]
    1ffe:	2b00      	cmp	r3, #0
    2000:	d131      	bne.n	2066 <STACK_SIZE+0x66>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
    2002:	79ab      	ldrb	r3, [r5, #6]
    2004:	079b      	lsls	r3, r3, #30
    2006:	d538      	bpl.n	207a <STACK_SIZE+0x7a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    2008:	2302      	movs	r3, #2
    200a:	71ab      	strb	r3, [r5, #6]
		if (module->remaining_conversions) {
    200c:	89a3      	ldrh	r3, [r4, #12]
    200e:	b29b      	uxth	r3, r3
    2010:	2b00      	cmp	r3, #0
    2012:	d02c      	beq.n	206e <STACK_SIZE+0x6e>
				module->job_buffer[module->transferred_conversions++];
    2014:	89e3      	ldrh	r3, [r4, #14]
    2016:	b29b      	uxth	r3, r3
    2018:	1c5a      	adds	r2, r3, #1
    201a:	b292      	uxth	r2, r2
    201c:	81e2      	strh	r2, [r4, #14]
    201e:	005b      	lsls	r3, r3, #1
    2020:	68a2      	ldr	r2, [r4, #8]
    2022:	4694      	mov	ip, r2
    2024:	4463      	add	r3, ip
    2026:	881b      	ldrh	r3, [r3, #0]
    2028:	b29b      	uxth	r3, r3
			dac_hw->DATABUF.reg =
    202a:	81ab      	strh	r3, [r5, #12]
			module->remaining_conversions --;
    202c:	89a3      	ldrh	r3, [r4, #12]
    202e:	3b01      	subs	r3, #1
    2030:	b29b      	uxth	r3, r3
    2032:	81a3      	strh	r3, [r4, #12]
			if (module->remaining_conversions == 0) {
    2034:	89a3      	ldrh	r3, [r4, #12]
    2036:	b29b      	uxth	r3, r3
    2038:	2b00      	cmp	r3, #0
    203a:	d118      	bne.n	206e <STACK_SIZE+0x6e>
				module->job_status = STATUS_OK;
    203c:	2200      	movs	r2, #0
    203e:	3320      	adds	r3, #32
    2040:	54e2      	strb	r2, [r4, r3]
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
    2042:	3b1e      	subs	r3, #30
    2044:	712b      	strb	r3, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    2046:	71ab      	strb	r3, [r5, #6]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2048:	2180      	movs	r1, #128	; 0x80
    204a:	0549      	lsls	r1, r1, #21
    204c:	337e      	adds	r3, #126	; 0x7e
    204e:	4a0e      	ldr	r2, [pc, #56]	; (2088 <STACK_SIZE+0x88>)
    2050:	50d1      	str	r1, [r2, r3]
				if ((module->callback) &&
    2052:	0023      	movs	r3, r4
    2054:	3314      	adds	r3, #20
    2056:	d010      	beq.n	207a <STACK_SIZE+0x7a>
    2058:	7ca3      	ldrb	r3, [r4, #18]
    205a:	2b00      	cmp	r3, #0
    205c:	d00a      	beq.n	2074 <STACK_SIZE+0x74>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
    205e:	2000      	movs	r0, #0
    2060:	69e3      	ldr	r3, [r4, #28]
    2062:	4798      	blx	r3
    2064:	e006      	b.n	2074 <STACK_SIZE+0x74>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
    2066:	2000      	movs	r0, #0
    2068:	69a3      	ldr	r3, [r4, #24]
    206a:	4798      	blx	r3
    206c:	e7c9      	b.n	2002 <STACK_SIZE+0x2>
		if ((module->callback) &&
    206e:	0023      	movs	r3, r4
    2070:	3314      	adds	r3, #20
    2072:	d002      	beq.n	207a <STACK_SIZE+0x7a>
    2074:	7c23      	ldrb	r3, [r4, #16]
    2076:	2b00      	cmp	r3, #0
    2078:	d100      	bne.n	207c <STACK_SIZE+0x7c>
	_dac_interrupt_handler(0);
}
    207a:	bd70      	pop	{r4, r5, r6, pc}
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
    207c:	6963      	ldr	r3, [r4, #20]
    207e:	2000      	movs	r0, #0
    2080:	4798      	blx	r3
}
    2082:	e7fa      	b.n	207a <STACK_SIZE+0x7a>
    2084:	200018ec 	.word	0x200018ec
    2088:	e000e100 	.word	0xe000e100

0000208c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    208c:	b5f0      	push	{r4, r5, r6, r7, lr}
    208e:	46de      	mov	lr, fp
    2090:	4657      	mov	r7, sl
    2092:	464e      	mov	r6, r9
    2094:	4645      	mov	r5, r8
    2096:	b5e0      	push	{r5, r6, r7, lr}
    2098:	b087      	sub	sp, #28
    209a:	4680      	mov	r8, r0
    209c:	9104      	str	r1, [sp, #16]
    209e:	0016      	movs	r6, r2
    20a0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    20a2:	2200      	movs	r2, #0
    20a4:	2300      	movs	r3, #0
    20a6:	2100      	movs	r1, #0
    20a8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    20aa:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    20ac:	2001      	movs	r0, #1
    20ae:	0021      	movs	r1, r4
    20b0:	9600      	str	r6, [sp, #0]
    20b2:	9701      	str	r7, [sp, #4]
    20b4:	465c      	mov	r4, fp
    20b6:	9403      	str	r4, [sp, #12]
    20b8:	4644      	mov	r4, r8
    20ba:	9405      	str	r4, [sp, #20]
    20bc:	e013      	b.n	20e6 <long_division+0x5a>
    20be:	2420      	movs	r4, #32
    20c0:	1a64      	subs	r4, r4, r1
    20c2:	0005      	movs	r5, r0
    20c4:	40e5      	lsrs	r5, r4
    20c6:	46a8      	mov	r8, r5
    20c8:	e014      	b.n	20f4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    20ca:	9c00      	ldr	r4, [sp, #0]
    20cc:	9d01      	ldr	r5, [sp, #4]
    20ce:	1b12      	subs	r2, r2, r4
    20d0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    20d2:	465c      	mov	r4, fp
    20d4:	464d      	mov	r5, r9
    20d6:	432c      	orrs	r4, r5
    20d8:	46a3      	mov	fp, r4
    20da:	9c03      	ldr	r4, [sp, #12]
    20dc:	4645      	mov	r5, r8
    20de:	432c      	orrs	r4, r5
    20e0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    20e2:	3901      	subs	r1, #1
    20e4:	d325      	bcc.n	2132 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    20e6:	2420      	movs	r4, #32
    20e8:	4264      	negs	r4, r4
    20ea:	190c      	adds	r4, r1, r4
    20ec:	d4e7      	bmi.n	20be <long_division+0x32>
    20ee:	0005      	movs	r5, r0
    20f0:	40a5      	lsls	r5, r4
    20f2:	46a8      	mov	r8, r5
    20f4:	0004      	movs	r4, r0
    20f6:	408c      	lsls	r4, r1
    20f8:	46a1      	mov	r9, r4
		r = r << 1;
    20fa:	1892      	adds	r2, r2, r2
    20fc:	415b      	adcs	r3, r3
    20fe:	0014      	movs	r4, r2
    2100:	001d      	movs	r5, r3
		if (n & bit_shift) {
    2102:	9e05      	ldr	r6, [sp, #20]
    2104:	464f      	mov	r7, r9
    2106:	403e      	ands	r6, r7
    2108:	46b4      	mov	ip, r6
    210a:	9e04      	ldr	r6, [sp, #16]
    210c:	4647      	mov	r7, r8
    210e:	403e      	ands	r6, r7
    2110:	46b2      	mov	sl, r6
    2112:	4666      	mov	r6, ip
    2114:	4657      	mov	r7, sl
    2116:	433e      	orrs	r6, r7
    2118:	d003      	beq.n	2122 <long_division+0x96>
			r |= 0x01;
    211a:	0006      	movs	r6, r0
    211c:	4326      	orrs	r6, r4
    211e:	0032      	movs	r2, r6
    2120:	002b      	movs	r3, r5
		if (r >= d) {
    2122:	9c00      	ldr	r4, [sp, #0]
    2124:	9d01      	ldr	r5, [sp, #4]
    2126:	429d      	cmp	r5, r3
    2128:	d8db      	bhi.n	20e2 <long_division+0x56>
    212a:	d1ce      	bne.n	20ca <long_division+0x3e>
    212c:	4294      	cmp	r4, r2
    212e:	d8d8      	bhi.n	20e2 <long_division+0x56>
    2130:	e7cb      	b.n	20ca <long_division+0x3e>
    2132:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    2134:	4658      	mov	r0, fp
    2136:	0019      	movs	r1, r3
    2138:	b007      	add	sp, #28
    213a:	bc3c      	pop	{r2, r3, r4, r5}
    213c:	4690      	mov	r8, r2
    213e:	4699      	mov	r9, r3
    2140:	46a2      	mov	sl, r4
    2142:	46ab      	mov	fp, r5
    2144:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002146 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2146:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2148:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    214a:	2340      	movs	r3, #64	; 0x40
    214c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    214e:	4281      	cmp	r1, r0
    2150:	d202      	bcs.n	2158 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    2152:	0018      	movs	r0, r3
    2154:	bd10      	pop	{r4, pc}
		baud_calculated++;
    2156:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    2158:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    215a:	1c63      	adds	r3, r4, #1
    215c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    215e:	4288      	cmp	r0, r1
    2160:	d9f9      	bls.n	2156 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2162:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    2164:	2cff      	cmp	r4, #255	; 0xff
    2166:	d8f4      	bhi.n	2152 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    2168:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    216a:	2300      	movs	r3, #0
    216c:	e7f1      	b.n	2152 <_sercom_get_sync_baud_val+0xc>
	...

00002170 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    2170:	b5f0      	push	{r4, r5, r6, r7, lr}
    2172:	b083      	sub	sp, #12
    2174:	000f      	movs	r7, r1
    2176:	0016      	movs	r6, r2
    2178:	aa08      	add	r2, sp, #32
    217a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    217c:	0004      	movs	r4, r0
    217e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2180:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    2182:	42bc      	cmp	r4, r7
    2184:	d902      	bls.n	218c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    2186:	0010      	movs	r0, r2
    2188:	b003      	add	sp, #12
    218a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    218c:	2b00      	cmp	r3, #0
    218e:	d114      	bne.n	21ba <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    2190:	0002      	movs	r2, r0
    2192:	0008      	movs	r0, r1
    2194:	2100      	movs	r1, #0
    2196:	4c19      	ldr	r4, [pc, #100]	; (21fc <_sercom_get_async_baud_val+0x8c>)
    2198:	47a0      	blx	r4
    219a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    219c:	003a      	movs	r2, r7
    219e:	2300      	movs	r3, #0
    21a0:	2000      	movs	r0, #0
    21a2:	4c17      	ldr	r4, [pc, #92]	; (2200 <_sercom_get_async_baud_val+0x90>)
    21a4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    21a6:	2200      	movs	r2, #0
    21a8:	2301      	movs	r3, #1
    21aa:	1a12      	subs	r2, r2, r0
    21ac:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    21ae:	0c12      	lsrs	r2, r2, #16
    21b0:	041b      	lsls	r3, r3, #16
    21b2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    21b4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    21b6:	2200      	movs	r2, #0
    21b8:	e7e5      	b.n	2186 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    21ba:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    21bc:	2b01      	cmp	r3, #1
    21be:	d1f9      	bne.n	21b4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    21c0:	000a      	movs	r2, r1
    21c2:	2300      	movs	r3, #0
    21c4:	2100      	movs	r1, #0
    21c6:	4c0d      	ldr	r4, [pc, #52]	; (21fc <_sercom_get_async_baud_val+0x8c>)
    21c8:	47a0      	blx	r4
    21ca:	0002      	movs	r2, r0
    21cc:	000b      	movs	r3, r1
    21ce:	9200      	str	r2, [sp, #0]
    21d0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    21d2:	0038      	movs	r0, r7
    21d4:	2100      	movs	r1, #0
    21d6:	4c0a      	ldr	r4, [pc, #40]	; (2200 <_sercom_get_async_baud_val+0x90>)
    21d8:	47a0      	blx	r4
    21da:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    21dc:	2380      	movs	r3, #128	; 0x80
    21de:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    21e0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    21e2:	4298      	cmp	r0, r3
    21e4:	d8cf      	bhi.n	2186 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    21e6:	0f79      	lsrs	r1, r7, #29
    21e8:	00f8      	lsls	r0, r7, #3
    21ea:	9a00      	ldr	r2, [sp, #0]
    21ec:	9b01      	ldr	r3, [sp, #4]
    21ee:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    21f0:	00ea      	lsls	r2, r5, #3
    21f2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    21f4:	b2d2      	uxtb	r2, r2
    21f6:	0352      	lsls	r2, r2, #13
    21f8:	432a      	orrs	r2, r5
    21fa:	e7db      	b.n	21b4 <_sercom_get_async_baud_val+0x44>
    21fc:	000057e1 	.word	0x000057e1
    2200:	0000208d 	.word	0x0000208d

00002204 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2204:	b510      	push	{r4, lr}
    2206:	b082      	sub	sp, #8
    2208:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    220a:	4b0e      	ldr	r3, [pc, #56]	; (2244 <sercom_set_gclk_generator+0x40>)
    220c:	781b      	ldrb	r3, [r3, #0]
    220e:	2b00      	cmp	r3, #0
    2210:	d007      	beq.n	2222 <sercom_set_gclk_generator+0x1e>
    2212:	2900      	cmp	r1, #0
    2214:	d105      	bne.n	2222 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    2216:	4b0b      	ldr	r3, [pc, #44]	; (2244 <sercom_set_gclk_generator+0x40>)
    2218:	785b      	ldrb	r3, [r3, #1]
    221a:	4283      	cmp	r3, r0
    221c:	d010      	beq.n	2240 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    221e:	201d      	movs	r0, #29
    2220:	e00c      	b.n	223c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    2222:	a901      	add	r1, sp, #4
    2224:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2226:	2012      	movs	r0, #18
    2228:	4b07      	ldr	r3, [pc, #28]	; (2248 <sercom_set_gclk_generator+0x44>)
    222a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    222c:	2012      	movs	r0, #18
    222e:	4b07      	ldr	r3, [pc, #28]	; (224c <sercom_set_gclk_generator+0x48>)
    2230:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    2232:	4b04      	ldr	r3, [pc, #16]	; (2244 <sercom_set_gclk_generator+0x40>)
    2234:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    2236:	2201      	movs	r2, #1
    2238:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    223a:	2000      	movs	r0, #0
}
    223c:	b002      	add	sp, #8
    223e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    2240:	2000      	movs	r0, #0
    2242:	e7fb      	b.n	223c <sercom_set_gclk_generator+0x38>
    2244:	200000ac 	.word	0x200000ac
    2248:	0000482d 	.word	0x0000482d
    224c:	000047bd 	.word	0x000047bd

00002250 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    2250:	4b40      	ldr	r3, [pc, #256]	; (2354 <_sercom_get_default_pad+0x104>)
    2252:	4298      	cmp	r0, r3
    2254:	d031      	beq.n	22ba <_sercom_get_default_pad+0x6a>
    2256:	d90a      	bls.n	226e <_sercom_get_default_pad+0x1e>
    2258:	4b3f      	ldr	r3, [pc, #252]	; (2358 <_sercom_get_default_pad+0x108>)
    225a:	4298      	cmp	r0, r3
    225c:	d04d      	beq.n	22fa <_sercom_get_default_pad+0xaa>
    225e:	4b3f      	ldr	r3, [pc, #252]	; (235c <_sercom_get_default_pad+0x10c>)
    2260:	4298      	cmp	r0, r3
    2262:	d05a      	beq.n	231a <_sercom_get_default_pad+0xca>
    2264:	4b3e      	ldr	r3, [pc, #248]	; (2360 <_sercom_get_default_pad+0x110>)
    2266:	4298      	cmp	r0, r3
    2268:	d037      	beq.n	22da <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    226a:	2000      	movs	r0, #0
}
    226c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    226e:	4b3d      	ldr	r3, [pc, #244]	; (2364 <_sercom_get_default_pad+0x114>)
    2270:	4298      	cmp	r0, r3
    2272:	d00c      	beq.n	228e <_sercom_get_default_pad+0x3e>
    2274:	4b3c      	ldr	r3, [pc, #240]	; (2368 <_sercom_get_default_pad+0x118>)
    2276:	4298      	cmp	r0, r3
    2278:	d1f7      	bne.n	226a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    227a:	2901      	cmp	r1, #1
    227c:	d017      	beq.n	22ae <_sercom_get_default_pad+0x5e>
    227e:	2900      	cmp	r1, #0
    2280:	d05d      	beq.n	233e <_sercom_get_default_pad+0xee>
    2282:	2902      	cmp	r1, #2
    2284:	d015      	beq.n	22b2 <_sercom_get_default_pad+0x62>
    2286:	2903      	cmp	r1, #3
    2288:	d015      	beq.n	22b6 <_sercom_get_default_pad+0x66>
	return 0;
    228a:	2000      	movs	r0, #0
    228c:	e7ee      	b.n	226c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    228e:	2901      	cmp	r1, #1
    2290:	d007      	beq.n	22a2 <_sercom_get_default_pad+0x52>
    2292:	2900      	cmp	r1, #0
    2294:	d051      	beq.n	233a <_sercom_get_default_pad+0xea>
    2296:	2902      	cmp	r1, #2
    2298:	d005      	beq.n	22a6 <_sercom_get_default_pad+0x56>
    229a:	2903      	cmp	r1, #3
    229c:	d005      	beq.n	22aa <_sercom_get_default_pad+0x5a>
	return 0;
    229e:	2000      	movs	r0, #0
    22a0:	e7e4      	b.n	226c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    22a2:	4832      	ldr	r0, [pc, #200]	; (236c <_sercom_get_default_pad+0x11c>)
    22a4:	e7e2      	b.n	226c <_sercom_get_default_pad+0x1c>
    22a6:	4832      	ldr	r0, [pc, #200]	; (2370 <_sercom_get_default_pad+0x120>)
    22a8:	e7e0      	b.n	226c <_sercom_get_default_pad+0x1c>
    22aa:	4832      	ldr	r0, [pc, #200]	; (2374 <_sercom_get_default_pad+0x124>)
    22ac:	e7de      	b.n	226c <_sercom_get_default_pad+0x1c>
    22ae:	4832      	ldr	r0, [pc, #200]	; (2378 <_sercom_get_default_pad+0x128>)
    22b0:	e7dc      	b.n	226c <_sercom_get_default_pad+0x1c>
    22b2:	4832      	ldr	r0, [pc, #200]	; (237c <_sercom_get_default_pad+0x12c>)
    22b4:	e7da      	b.n	226c <_sercom_get_default_pad+0x1c>
    22b6:	4832      	ldr	r0, [pc, #200]	; (2380 <_sercom_get_default_pad+0x130>)
    22b8:	e7d8      	b.n	226c <_sercom_get_default_pad+0x1c>
    22ba:	2901      	cmp	r1, #1
    22bc:	d007      	beq.n	22ce <_sercom_get_default_pad+0x7e>
    22be:	2900      	cmp	r1, #0
    22c0:	d03f      	beq.n	2342 <_sercom_get_default_pad+0xf2>
    22c2:	2902      	cmp	r1, #2
    22c4:	d005      	beq.n	22d2 <_sercom_get_default_pad+0x82>
    22c6:	2903      	cmp	r1, #3
    22c8:	d005      	beq.n	22d6 <_sercom_get_default_pad+0x86>
	return 0;
    22ca:	2000      	movs	r0, #0
    22cc:	e7ce      	b.n	226c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    22ce:	482d      	ldr	r0, [pc, #180]	; (2384 <_sercom_get_default_pad+0x134>)
    22d0:	e7cc      	b.n	226c <_sercom_get_default_pad+0x1c>
    22d2:	482d      	ldr	r0, [pc, #180]	; (2388 <_sercom_get_default_pad+0x138>)
    22d4:	e7ca      	b.n	226c <_sercom_get_default_pad+0x1c>
    22d6:	482d      	ldr	r0, [pc, #180]	; (238c <_sercom_get_default_pad+0x13c>)
    22d8:	e7c8      	b.n	226c <_sercom_get_default_pad+0x1c>
    22da:	2901      	cmp	r1, #1
    22dc:	d007      	beq.n	22ee <_sercom_get_default_pad+0x9e>
    22de:	2900      	cmp	r1, #0
    22e0:	d031      	beq.n	2346 <_sercom_get_default_pad+0xf6>
    22e2:	2902      	cmp	r1, #2
    22e4:	d005      	beq.n	22f2 <_sercom_get_default_pad+0xa2>
    22e6:	2903      	cmp	r1, #3
    22e8:	d005      	beq.n	22f6 <_sercom_get_default_pad+0xa6>
	return 0;
    22ea:	2000      	movs	r0, #0
    22ec:	e7be      	b.n	226c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    22ee:	4828      	ldr	r0, [pc, #160]	; (2390 <_sercom_get_default_pad+0x140>)
    22f0:	e7bc      	b.n	226c <_sercom_get_default_pad+0x1c>
    22f2:	4828      	ldr	r0, [pc, #160]	; (2394 <_sercom_get_default_pad+0x144>)
    22f4:	e7ba      	b.n	226c <_sercom_get_default_pad+0x1c>
    22f6:	4828      	ldr	r0, [pc, #160]	; (2398 <_sercom_get_default_pad+0x148>)
    22f8:	e7b8      	b.n	226c <_sercom_get_default_pad+0x1c>
    22fa:	2901      	cmp	r1, #1
    22fc:	d007      	beq.n	230e <_sercom_get_default_pad+0xbe>
    22fe:	2900      	cmp	r1, #0
    2300:	d023      	beq.n	234a <_sercom_get_default_pad+0xfa>
    2302:	2902      	cmp	r1, #2
    2304:	d005      	beq.n	2312 <_sercom_get_default_pad+0xc2>
    2306:	2903      	cmp	r1, #3
    2308:	d005      	beq.n	2316 <_sercom_get_default_pad+0xc6>
	return 0;
    230a:	2000      	movs	r0, #0
    230c:	e7ae      	b.n	226c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    230e:	4823      	ldr	r0, [pc, #140]	; (239c <_sercom_get_default_pad+0x14c>)
    2310:	e7ac      	b.n	226c <_sercom_get_default_pad+0x1c>
    2312:	4823      	ldr	r0, [pc, #140]	; (23a0 <_sercom_get_default_pad+0x150>)
    2314:	e7aa      	b.n	226c <_sercom_get_default_pad+0x1c>
    2316:	4823      	ldr	r0, [pc, #140]	; (23a4 <_sercom_get_default_pad+0x154>)
    2318:	e7a8      	b.n	226c <_sercom_get_default_pad+0x1c>
    231a:	2901      	cmp	r1, #1
    231c:	d007      	beq.n	232e <_sercom_get_default_pad+0xde>
    231e:	2900      	cmp	r1, #0
    2320:	d015      	beq.n	234e <_sercom_get_default_pad+0xfe>
    2322:	2902      	cmp	r1, #2
    2324:	d005      	beq.n	2332 <_sercom_get_default_pad+0xe2>
    2326:	2903      	cmp	r1, #3
    2328:	d005      	beq.n	2336 <_sercom_get_default_pad+0xe6>
	return 0;
    232a:	2000      	movs	r0, #0
    232c:	e79e      	b.n	226c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    232e:	481e      	ldr	r0, [pc, #120]	; (23a8 <_sercom_get_default_pad+0x158>)
    2330:	e79c      	b.n	226c <_sercom_get_default_pad+0x1c>
    2332:	481e      	ldr	r0, [pc, #120]	; (23ac <_sercom_get_default_pad+0x15c>)
    2334:	e79a      	b.n	226c <_sercom_get_default_pad+0x1c>
    2336:	481e      	ldr	r0, [pc, #120]	; (23b0 <_sercom_get_default_pad+0x160>)
    2338:	e798      	b.n	226c <_sercom_get_default_pad+0x1c>
    233a:	481e      	ldr	r0, [pc, #120]	; (23b4 <_sercom_get_default_pad+0x164>)
    233c:	e796      	b.n	226c <_sercom_get_default_pad+0x1c>
    233e:	481e      	ldr	r0, [pc, #120]	; (23b8 <_sercom_get_default_pad+0x168>)
    2340:	e794      	b.n	226c <_sercom_get_default_pad+0x1c>
    2342:	481e      	ldr	r0, [pc, #120]	; (23bc <_sercom_get_default_pad+0x16c>)
    2344:	e792      	b.n	226c <_sercom_get_default_pad+0x1c>
    2346:	481e      	ldr	r0, [pc, #120]	; (23c0 <_sercom_get_default_pad+0x170>)
    2348:	e790      	b.n	226c <_sercom_get_default_pad+0x1c>
    234a:	481e      	ldr	r0, [pc, #120]	; (23c4 <_sercom_get_default_pad+0x174>)
    234c:	e78e      	b.n	226c <_sercom_get_default_pad+0x1c>
    234e:	481e      	ldr	r0, [pc, #120]	; (23c8 <_sercom_get_default_pad+0x178>)
    2350:	e78c      	b.n	226c <_sercom_get_default_pad+0x1c>
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	42000c00 	.word	0x42000c00
    2358:	42001400 	.word	0x42001400
    235c:	42001800 	.word	0x42001800
    2360:	42001000 	.word	0x42001000
    2364:	42000400 	.word	0x42000400
    2368:	42000800 	.word	0x42000800
    236c:	00050003 	.word	0x00050003
    2370:	00060003 	.word	0x00060003
    2374:	00070003 	.word	0x00070003
    2378:	00110002 	.word	0x00110002
    237c:	00120002 	.word	0x00120002
    2380:	00130002 	.word	0x00130002
    2384:	000d0002 	.word	0x000d0002
    2388:	000e0002 	.word	0x000e0002
    238c:	000f0002 	.word	0x000f0002
    2390:	00170002 	.word	0x00170002
    2394:	00180002 	.word	0x00180002
    2398:	00190002 	.word	0x00190002
    239c:	00290003 	.word	0x00290003
    23a0:	002a0003 	.word	0x002a0003
    23a4:	002b0003 	.word	0x002b0003
    23a8:	00230003 	.word	0x00230003
    23ac:	00200003 	.word	0x00200003
    23b0:	00210003 	.word	0x00210003
    23b4:	00040003 	.word	0x00040003
    23b8:	00100002 	.word	0x00100002
    23bc:	000c0002 	.word	0x000c0002
    23c0:	00160002 	.word	0x00160002
    23c4:	00280003 	.word	0x00280003
    23c8:	00220003 	.word	0x00220003

000023cc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    23cc:	b530      	push	{r4, r5, lr}
    23ce:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    23d0:	4b0b      	ldr	r3, [pc, #44]	; (2400 <_sercom_get_sercom_inst_index+0x34>)
    23d2:	466a      	mov	r2, sp
    23d4:	cb32      	ldmia	r3!, {r1, r4, r5}
    23d6:	c232      	stmia	r2!, {r1, r4, r5}
    23d8:	cb32      	ldmia	r3!, {r1, r4, r5}
    23da:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    23dc:	9b00      	ldr	r3, [sp, #0]
    23de:	4283      	cmp	r3, r0
    23e0:	d00b      	beq.n	23fa <_sercom_get_sercom_inst_index+0x2e>
    23e2:	2301      	movs	r3, #1
    23e4:	009a      	lsls	r2, r3, #2
    23e6:	4669      	mov	r1, sp
    23e8:	5852      	ldr	r2, [r2, r1]
    23ea:	4282      	cmp	r2, r0
    23ec:	d006      	beq.n	23fc <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    23ee:	3301      	adds	r3, #1
    23f0:	2b06      	cmp	r3, #6
    23f2:	d1f7      	bne.n	23e4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    23f4:	2000      	movs	r0, #0
}
    23f6:	b007      	add	sp, #28
    23f8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    23fa:	2300      	movs	r3, #0
			return i;
    23fc:	b2d8      	uxtb	r0, r3
    23fe:	e7fa      	b.n	23f6 <_sercom_get_sercom_inst_index+0x2a>
    2400:	00008734 	.word	0x00008734

00002404 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    2404:	4b09      	ldr	r3, [pc, #36]	; (242c <_tcc_get_inst_index+0x28>)
    2406:	4298      	cmp	r0, r3
    2408:	d00c      	beq.n	2424 <_tcc_get_inst_index+0x20>
    240a:	4b09      	ldr	r3, [pc, #36]	; (2430 <_tcc_get_inst_index+0x2c>)
    240c:	4298      	cmp	r0, r3
    240e:	d007      	beq.n	2420 <_tcc_get_inst_index+0x1c>
    2410:	4a08      	ldr	r2, [pc, #32]	; (2434 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2412:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    2414:	4290      	cmp	r0, r2
    2416:	d001      	beq.n	241c <_tcc_get_inst_index+0x18>
}
    2418:	0018      	movs	r0, r3
    241a:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    241c:	3302      	adds	r3, #2
    241e:	e002      	b.n	2426 <_tcc_get_inst_index+0x22>
    2420:	2301      	movs	r3, #1
    2422:	e000      	b.n	2426 <_tcc_get_inst_index+0x22>
    2424:	2300      	movs	r3, #0
			return i;
    2426:	b2db      	uxtb	r3, r3
    2428:	e7f6      	b.n	2418 <_tcc_get_inst_index+0x14>
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	42002400 	.word	0x42002400
    2430:	42002800 	.word	0x42002800
    2434:	42002c00 	.word	0x42002c00

00002438 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    2438:	b510      	push	{r4, lr}
    243a:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    243c:	0008      	movs	r0, r1
    243e:	4b4f      	ldr	r3, [pc, #316]	; (257c <tcc_get_config_defaults+0x144>)
    2440:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    2442:	2300      	movs	r3, #0
    2444:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    2446:	0080      	lsls	r0, r0, #2
    2448:	4a4d      	ldr	r2, [pc, #308]	; (2580 <tcc_get_config_defaults+0x148>)
    244a:	5882      	ldr	r2, [r0, r2]
    244c:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    244e:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    2450:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    2452:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    2454:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    2456:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    2458:	61e3      	str	r3, [r4, #28]
    245a:	6223      	str	r3, [r4, #32]
    245c:	6263      	str	r3, [r4, #36]	; 0x24
    245e:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    2460:	7523      	strb	r3, [r4, #20]
    2462:	7563      	strb	r3, [r4, #21]
    2464:	75a3      	strb	r3, [r4, #22]
    2466:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    2468:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    246a:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    246c:	7423      	strb	r3, [r4, #16]
    246e:	7463      	strb	r3, [r4, #17]
    2470:	74a3      	strb	r3, [r4, #18]
    2472:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    2474:	222c      	movs	r2, #44	; 0x2c
    2476:	54a3      	strb	r3, [r4, r2]
    2478:	3201      	adds	r2, #1
    247a:	54a3      	strb	r3, [r4, r2]
    247c:	3201      	adds	r2, #1
    247e:	54a3      	strb	r3, [r4, r2]
    2480:	3201      	adds	r2, #1
    2482:	54a3      	strb	r3, [r4, r2]
    2484:	3201      	adds	r2, #1
    2486:	54a3      	strb	r3, [r4, r2]
    2488:	3201      	adds	r2, #1
    248a:	54a3      	strb	r3, [r4, r2]
    248c:	3201      	adds	r2, #1
    248e:	54a3      	strb	r3, [r4, r2]
    2490:	3201      	adds	r2, #1
    2492:	54a3      	strb	r3, [r4, r2]
    2494:	3201      	adds	r2, #1
    2496:	54a3      	strb	r3, [r4, r2]
    2498:	3201      	adds	r2, #1
    249a:	54a3      	strb	r3, [r4, r2]
    249c:	3201      	adds	r2, #1
    249e:	54a3      	strb	r3, [r4, r2]
    24a0:	3201      	adds	r2, #1
    24a2:	54a3      	strb	r3, [r4, r2]
    24a4:	3201      	adds	r2, #1
    24a6:	54a3      	strb	r3, [r4, r2]
    24a8:	3201      	adds	r2, #1
    24aa:	54a3      	strb	r3, [r4, r2]
    24ac:	3201      	adds	r2, #1
    24ae:	54a3      	strb	r3, [r4, r2]
    24b0:	3201      	adds	r2, #1
    24b2:	54a3      	strb	r3, [r4, r2]
    24b4:	3201      	adds	r2, #1
    24b6:	54a3      	strb	r3, [r4, r2]
    24b8:	3201      	adds	r2, #1
    24ba:	54a3      	strb	r3, [r4, r2]
    24bc:	3201      	adds	r2, #1
    24be:	54a3      	strb	r3, [r4, r2]
    24c0:	3201      	adds	r2, #1
    24c2:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    24c4:	3201      	adds	r2, #1
    24c6:	54a3      	strb	r3, [r4, r2]
    24c8:	3201      	adds	r2, #1
    24ca:	54a3      	strb	r3, [r4, r2]
    24cc:	3201      	adds	r2, #1
    24ce:	54a3      	strb	r3, [r4, r2]
    24d0:	3201      	adds	r2, #1
    24d2:	54a3      	strb	r3, [r4, r2]
    24d4:	3201      	adds	r2, #1
    24d6:	54a3      	strb	r3, [r4, r2]
    24d8:	3201      	adds	r2, #1
    24da:	54a3      	strb	r3, [r4, r2]
    24dc:	3201      	adds	r2, #1
    24de:	54a3      	strb	r3, [r4, r2]
    24e0:	3201      	adds	r2, #1
    24e2:	54a3      	strb	r3, [r4, r2]
    24e4:	3201      	adds	r2, #1
    24e6:	54a3      	strb	r3, [r4, r2]
    24e8:	3201      	adds	r2, #1
    24ea:	54a3      	strb	r3, [r4, r2]
    24ec:	3201      	adds	r2, #1
    24ee:	54a3      	strb	r3, [r4, r2]
    24f0:	3201      	adds	r2, #1
    24f2:	54a3      	strb	r3, [r4, r2]
    24f4:	3201      	adds	r2, #1
    24f6:	54a3      	strb	r3, [r4, r2]
    24f8:	3201      	adds	r2, #1
    24fa:	54a3      	strb	r3, [r4, r2]
    24fc:	3201      	adds	r2, #1
    24fe:	54a3      	strb	r3, [r4, r2]
    2500:	3201      	adds	r2, #1
    2502:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    2504:	3201      	adds	r2, #1
    2506:	54a3      	strb	r3, [r4, r2]
    2508:	3201      	adds	r2, #1
    250a:	54a3      	strb	r3, [r4, r2]
    250c:	3201      	adds	r2, #1
    250e:	54a3      	strb	r3, [r4, r2]
    2510:	3201      	adds	r2, #1
    2512:	54a3      	strb	r3, [r4, r2]
    2514:	3201      	adds	r2, #1
    2516:	54a3      	strb	r3, [r4, r2]
    2518:	3201      	adds	r2, #1
    251a:	54a3      	strb	r3, [r4, r2]
    251c:	3201      	adds	r2, #1
    251e:	54a3      	strb	r3, [r4, r2]
    2520:	3201      	adds	r2, #1
    2522:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    2524:	3241      	adds	r2, #65	; 0x41
    2526:	54a3      	strb	r3, [r4, r2]
    2528:	65a3      	str	r3, [r4, #88]	; 0x58
    252a:	67a3      	str	r3, [r4, #120]	; 0x78
    252c:	3201      	adds	r2, #1
    252e:	54a3      	strb	r3, [r4, r2]
    2530:	65e3      	str	r3, [r4, #92]	; 0x5c
    2532:	67e3      	str	r3, [r4, #124]	; 0x7c
    2534:	3201      	adds	r2, #1
    2536:	54a3      	strb	r3, [r4, r2]
    2538:	6623      	str	r3, [r4, #96]	; 0x60
    253a:	3a1a      	subs	r2, #26
    253c:	50a3      	str	r3, [r4, r2]
    253e:	321b      	adds	r2, #27
    2540:	54a3      	strb	r3, [r4, r2]
    2542:	6663      	str	r3, [r4, #100]	; 0x64
    2544:	3a17      	subs	r2, #23
    2546:	50a3      	str	r3, [r4, r2]
    2548:	3218      	adds	r2, #24
    254a:	54a3      	strb	r3, [r4, r2]
    254c:	66a3      	str	r3, [r4, #104]	; 0x68
    254e:	3a14      	subs	r2, #20
    2550:	50a3      	str	r3, [r4, r2]
    2552:	3215      	adds	r2, #21
    2554:	54a3      	strb	r3, [r4, r2]
    2556:	66e3      	str	r3, [r4, #108]	; 0x6c
    2558:	3a11      	subs	r2, #17
    255a:	50a3      	str	r3, [r4, r2]
    255c:	3212      	adds	r2, #18
    255e:	54a3      	strb	r3, [r4, r2]
    2560:	6723      	str	r3, [r4, #112]	; 0x70
    2562:	3a0e      	subs	r2, #14
    2564:	50a3      	str	r3, [r4, r2]
    2566:	320f      	adds	r2, #15
    2568:	54a3      	strb	r3, [r4, r2]
    256a:	6763      	str	r3, [r4, #116]	; 0x74
    256c:	3a0b      	subs	r2, #11
    256e:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    2570:	2101      	movs	r1, #1
    2572:	320c      	adds	r2, #12
    2574:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    2576:	3201      	adds	r2, #1
    2578:	54a3      	strb	r3, [r4, r2]
}
    257a:	bd10      	pop	{r4, pc}
    257c:	00002405 	.word	0x00002405
    2580:	00008760 	.word	0x00008760

00002584 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    2584:	b5f0      	push	{r4, r5, r6, r7, lr}
    2586:	46de      	mov	lr, fp
    2588:	4657      	mov	r7, sl
    258a:	464e      	mov	r6, r9
    258c:	4645      	mov	r5, r8
    258e:	b5e0      	push	{r5, r6, r7, lr}
    2590:	b091      	sub	sp, #68	; 0x44
    2592:	9001      	str	r0, [sp, #4]
    2594:	000c      	movs	r4, r1
    2596:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    2598:	0008      	movs	r0, r1
    259a:	4bc3      	ldr	r3, [pc, #780]	; (28a8 <tcc_init+0x324>)
    259c:	4798      	blx	r3
    259e:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    25a0:	0001      	movs	r1, r0
    25a2:	48c2      	ldr	r0, [pc, #776]	; (28ac <tcc_init+0x328>)
    25a4:	69c2      	ldr	r2, [r0, #28]
    25a6:	009e      	lsls	r6, r3, #2
    25a8:	4fc1      	ldr	r7, [pc, #772]	; (28b0 <tcc_init+0x32c>)
    25aa:	59f7      	ldr	r7, [r6, r7]
    25ac:	433a      	orrs	r2, r7
    25ae:	61c2      	str	r2, [r0, #28]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    25b0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    25b2:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    25b4:	0792      	lsls	r2, r2, #30
    25b6:	d506      	bpl.n	25c6 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    25b8:	b011      	add	sp, #68	; 0x44
    25ba:	bc3c      	pop	{r2, r3, r4, r5}
    25bc:	4690      	mov	r8, r2
    25be:	4699      	mov	r9, r3
    25c0:	46a2      	mov	sl, r4
    25c2:	46ab      	mov	fp, r5
    25c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    25c6:	6822      	ldr	r2, [r4, #0]
    25c8:	2701      	movs	r7, #1
    25ca:	4017      	ands	r7, r2
    25cc:	d1f4      	bne.n	25b8 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    25ce:	48b9      	ldr	r0, [pc, #740]	; (28b4 <tcc_init+0x330>)
    25d0:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    25d2:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    25d4:	682e      	ldr	r6, [r5, #0]
    25d6:	42b2      	cmp	r2, r6
    25d8:	d3ee      	bcc.n	25b8 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    25da:	686e      	ldr	r6, [r5, #4]
    25dc:	42b2      	cmp	r2, r6
    25de:	d3eb      	bcc.n	25b8 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    25e0:	69e8      	ldr	r0, [r5, #28]
    25e2:	4282      	cmp	r2, r0
    25e4:	d200      	bcs.n	25e8 <tcc_init+0x64>
    25e6:	e1ab      	b.n	2940 <tcc_init+0x3bc>
    25e8:	6a28      	ldr	r0, [r5, #32]
    25ea:	4282      	cmp	r2, r0
    25ec:	d200      	bcs.n	25f0 <tcc_init+0x6c>
    25ee:	e1a9      	b.n	2944 <tcc_init+0x3c0>
    25f0:	6a68      	ldr	r0, [r5, #36]	; 0x24
    25f2:	4282      	cmp	r2, r0
    25f4:	d200      	bcs.n	25f8 <tcc_init+0x74>
    25f6:	e1a7      	b.n	2948 <tcc_init+0x3c4>
    25f8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    25fa:	4282      	cmp	r2, r0
    25fc:	d200      	bcs.n	2600 <tcc_init+0x7c>
    25fe:	e1a5      	b.n	294c <tcc_init+0x3c8>
    2600:	2298      	movs	r2, #152	; 0x98
    2602:	4694      	mov	ip, r2
    2604:	44ac      	add	ip, r5
    2606:	4662      	mov	r2, ip
    2608:	9208      	str	r2, [sp, #32]
    260a:	2000      	movs	r0, #0
    260c:	e003      	b.n	2616 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    260e:	3001      	adds	r0, #1
    2610:	3201      	adds	r2, #1
    2612:	2808      	cmp	r0, #8
    2614:	d008      	beq.n	2628 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    2616:	7816      	ldrb	r6, [r2, #0]
    2618:	2e00      	cmp	r6, #0
    261a:	d0f8      	beq.n	260e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    261c:	4ea6      	ldr	r6, [pc, #664]	; (28b8 <tcc_init+0x334>)
    261e:	5c76      	ldrb	r6, [r6, r1]
    2620:	4286      	cmp	r6, r0
    2622:	dcf4      	bgt.n	260e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    2624:	2017      	movs	r0, #23
    2626:	e7c7      	b.n	25b8 <tcc_init+0x34>
    2628:	2200      	movs	r2, #0
    262a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    262c:	2080      	movs	r0, #128	; 0x80
    262e:	0440      	lsls	r0, r0, #17
    2630:	4684      	mov	ip, r0
    2632:	e002      	b.n	263a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    2634:	3201      	adds	r2, #1
    2636:	2a04      	cmp	r2, #4
    2638:	d00e      	beq.n	2658 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    263a:	18a8      	adds	r0, r5, r2
    263c:	7c00      	ldrb	r0, [r0, #16]
    263e:	2801      	cmp	r0, #1
    2640:	d1f8      	bne.n	2634 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    2642:	489e      	ldr	r0, [pc, #632]	; (28bc <tcc_init+0x338>)
    2644:	5c40      	ldrb	r0, [r0, r1]
    2646:	4290      	cmp	r0, r2
    2648:	da00      	bge.n	264c <tcc_init+0xc8>
    264a:	e181      	b.n	2950 <tcc_init+0x3cc>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    264c:	4660      	mov	r0, ip
    264e:	4090      	lsls	r0, r2
    2650:	9e02      	ldr	r6, [sp, #8]
    2652:	4306      	orrs	r6, r0
    2654:	9602      	str	r6, [sp, #8]
    2656:	e7ed      	b.n	2634 <tcc_init+0xb0>
	if (config->run_in_standby) {
    2658:	329d      	adds	r2, #157	; 0x9d
    265a:	5caa      	ldrb	r2, [r5, r2]
    265c:	2a00      	cmp	r2, #0
    265e:	d004      	beq.n	266a <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    2660:	2280      	movs	r2, #128	; 0x80
    2662:	0112      	lsls	r2, r2, #4
    2664:	9902      	ldr	r1, [sp, #8]
    2666:	4311      	orrs	r1, r2
    2668:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    266a:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    266c:	1e51      	subs	r1, r2, #1
    266e:	418a      	sbcs	r2, r1
    2670:	0092      	lsls	r2, r2, #2
    2672:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    2674:	7a6a      	ldrb	r2, [r5, #9]
    2676:	2a01      	cmp	r2, #1
    2678:	d022      	beq.n	26c0 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    267a:	4a90      	ldr	r2, [pc, #576]	; (28bc <tcc_init+0x338>)
    267c:	5cd2      	ldrb	r2, [r2, r3]
    267e:	0011      	movs	r1, r2
    2680:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    2682:	2235      	movs	r2, #53	; 0x35
    2684:	5caa      	ldrb	r2, [r5, r2]
    2686:	428a      	cmp	r2, r1
    2688:	d300      	bcc.n	268c <tcc_init+0x108>
    268a:	e16b      	b.n	2964 <tcc_init+0x3e0>
		if (cfg->filter_value > 0xF) {
    268c:	212c      	movs	r1, #44	; 0x2c
    268e:	5c69      	ldrb	r1, [r5, r1]
    2690:	290f      	cmp	r1, #15
    2692:	d900      	bls.n	2696 <tcc_init+0x112>
    2694:	e166      	b.n	2964 <tcc_init+0x3e0>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    2696:	7b28      	ldrb	r0, [r5, #12]
    2698:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    269a:	7ae8      	ldrb	r0, [r5, #11]
    269c:	900b      	str	r0, [sp, #44]	; 0x2c
    269e:	202d      	movs	r0, #45	; 0x2d
    26a0:	4682      	mov	sl, r0
    26a2:	44aa      	add	sl, r5
    26a4:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    26a6:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    26a8:	ae0e      	add	r6, sp, #56	; 0x38
    26aa:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    26ac:	26c0      	movs	r6, #192	; 0xc0
    26ae:	0136      	lsls	r6, r6, #4
    26b0:	46b1      	mov	r9, r6
    26b2:	4684      	mov	ip, r0
    26b4:	46a0      	mov	r8, r4
    26b6:	0028      	movs	r0, r5
    26b8:	4655      	mov	r5, sl
    26ba:	9309      	str	r3, [sp, #36]	; 0x24
    26bc:	4682      	mov	sl, r0
    26be:	e035      	b.n	272c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    26c0:	9906      	ldr	r1, [sp, #24]
    26c2:	4311      	orrs	r1, r2
    26c4:	9106      	str	r1, [sp, #24]
    26c6:	e7d8      	b.n	267a <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    26c8:	0292      	lsls	r2, r2, #10
    26ca:	464f      	mov	r7, r9
    26cc:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    26ce:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    26d0:	7919      	ldrb	r1, [r3, #4]
    26d2:	468b      	mov	fp, r1
    26d4:	2103      	movs	r1, #3
    26d6:	465f      	mov	r7, fp
    26d8:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    26da:	430a      	orrs	r2, r1
    26dc:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    26de:	795a      	ldrb	r2, [r3, #5]
    26e0:	0152      	lsls	r2, r2, #5
    26e2:	2160      	movs	r1, #96	; 0x60
    26e4:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    26e6:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    26e8:	7999      	ldrb	r1, [r3, #6]
    26ea:	0209      	lsls	r1, r1, #8
    26ec:	26c0      	movs	r6, #192	; 0xc0
    26ee:	00b6      	lsls	r6, r6, #2
    26f0:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    26f2:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    26f4:	79da      	ldrb	r2, [r3, #7]
    26f6:	0312      	lsls	r2, r2, #12
    26f8:	21e0      	movs	r1, #224	; 0xe0
    26fa:	01c9      	lsls	r1, r1, #7
    26fc:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    26fe:	4316      	orrs	r6, r2
    2700:	4334      	orrs	r4, r6
    2702:	9a03      	ldr	r2, [sp, #12]
    2704:	4314      	orrs	r4, r2
    2706:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    2708:	4662      	mov	r2, ip
    270a:	9907      	ldr	r1, [sp, #28]
    270c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    270e:	2a04      	cmp	r2, #4
    2710:	d02a      	beq.n	2768 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    2712:	7c9a      	ldrb	r2, [r3, #18]
    2714:	9905      	ldr	r1, [sp, #20]
    2716:	4291      	cmp	r1, r2
    2718:	d800      	bhi.n	271c <tcc_init+0x198>
    271a:	e123      	b.n	2964 <tcc_init+0x3e0>
		if (cfg->filter_value > 0xF) {
    271c:	7a59      	ldrb	r1, [r3, #9]
    271e:	350a      	adds	r5, #10
    2720:	2304      	movs	r3, #4
    2722:	469b      	mov	fp, r3
    2724:	44dc      	add	ip, fp
    2726:	290f      	cmp	r1, #15
    2728:	d900      	bls.n	272c <tcc_init+0x1a8>
    272a:	e11b      	b.n	2964 <tcc_init+0x3e0>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    272c:	0609      	lsls	r1, r1, #24
    272e:	23f0      	movs	r3, #240	; 0xf0
    2730:	051b      	lsls	r3, r3, #20
    2732:	4019      	ands	r1, r3
    2734:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    2736:	782e      	ldrb	r6, [r5, #0]
    2738:	0436      	lsls	r6, r6, #16
    273a:	20ff      	movs	r0, #255	; 0xff
    273c:	0400      	lsls	r0, r0, #16
    273e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    2740:	7868      	ldrb	r0, [r5, #1]
    2742:	2480      	movs	r4, #128	; 0x80
    2744:	2800      	cmp	r0, #0
    2746:	d100      	bne.n	274a <tcc_init+0x1c6>
    2748:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    274a:	7898      	ldrb	r0, [r3, #2]
    274c:	2708      	movs	r7, #8
    274e:	9703      	str	r7, [sp, #12]
    2750:	2800      	cmp	r0, #0
    2752:	d101      	bne.n	2758 <tcc_init+0x1d4>
    2754:	9804      	ldr	r0, [sp, #16]
    2756:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    2758:	78d8      	ldrb	r0, [r3, #3]
    275a:	4683      	mov	fp, r0
    275c:	2010      	movs	r0, #16
    275e:	465f      	mov	r7, fp
    2760:	2f00      	cmp	r7, #0
    2762:	d1b1      	bne.n	26c8 <tcc_init+0x144>
    2764:	9804      	ldr	r0, [sp, #16]
    2766:	e7af      	b.n	26c8 <tcc_init+0x144>
    2768:	4644      	mov	r4, r8
    276a:	4655      	mov	r5, sl
    276c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    276e:	4a52      	ldr	r2, [pc, #328]	; (28b8 <tcc_init+0x334>)
    2770:	5cd2      	ldrb	r2, [r2, r3]
    2772:	4691      	mov	r9, r2
    2774:	4651      	mov	r1, sl
    2776:	3150      	adds	r1, #80	; 0x50
    2778:	4650      	mov	r0, sl
    277a:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    277c:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    277e:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    2780:	2601      	movs	r6, #1
    2782:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    2784:	2602      	movs	r6, #2
    2786:	36ff      	adds	r6, #255	; 0xff
    2788:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    278a:	2680      	movs	r6, #128	; 0x80
    278c:	0276      	lsls	r6, r6, #9
    278e:	46b0      	mov	r8, r6
    2790:	46a4      	mov	ip, r4
    2792:	001c      	movs	r4, r3
    2794:	464b      	mov	r3, r9
    2796:	e00f      	b.n	27b8 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    2798:	7806      	ldrb	r6, [r0, #0]
    279a:	2e00      	cmp	r6, #0
    279c:	d007      	beq.n	27ae <tcc_init+0x22a>
			if (i >= ow_num) {
    279e:	4293      	cmp	r3, r2
    27a0:	d800      	bhi.n	27a4 <tcc_init+0x220>
    27a2:	e0d9      	b.n	2958 <tcc_init+0x3d4>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    27a4:	2e02      	cmp	r6, #2
    27a6:	d014      	beq.n	27d2 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    27a8:	4656      	mov	r6, sl
    27aa:	4096      	lsls	r6, r2
    27ac:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    27ae:	3201      	adds	r2, #1
    27b0:	3101      	adds	r1, #1
    27b2:	3002      	adds	r0, #2
    27b4:	2a08      	cmp	r2, #8
    27b6:	d010      	beq.n	27da <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    27b8:	780e      	ldrb	r6, [r1, #0]
    27ba:	2e00      	cmp	r6, #0
    27bc:	d0ec      	beq.n	2798 <tcc_init+0x214>
			if (i >= ow_num) {
    27be:	4293      	cmp	r3, r2
    27c0:	d800      	bhi.n	27c4 <tcc_init+0x240>
    27c2:	e0c7      	b.n	2954 <tcc_init+0x3d0>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    27c4:	4646      	mov	r6, r8
    27c6:	4096      	lsls	r6, r2
    27c8:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    27ca:	7806      	ldrb	r6, [r0, #0]
    27cc:	2e00      	cmp	r6, #0
    27ce:	d1e9      	bne.n	27a4 <tcc_init+0x220>
    27d0:	e7ed      	b.n	27ae <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    27d2:	465e      	mov	r6, fp
    27d4:	4096      	lsls	r6, r2
    27d6:	4337      	orrs	r7, r6
    27d8:	e7e9      	b.n	27ae <tcc_init+0x22a>
    27da:	4699      	mov	r9, r3
    27dc:	0023      	movs	r3, r4
    27de:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    27e0:	7e6a      	ldrb	r2, [r5, #25]
    27e2:	0112      	lsls	r2, r2, #4
    27e4:	2130      	movs	r1, #48	; 0x30
    27e6:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    27e8:	7e28      	ldrb	r0, [r5, #24]
    27ea:	2207      	movs	r2, #7
    27ec:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    27ee:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    27f0:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    27f2:	2080      	movs	r0, #128	; 0x80
    27f4:	0240      	lsls	r0, r0, #9
    27f6:	000e      	movs	r6, r1
    27f8:	e002      	b.n	2800 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    27fa:	3201      	adds	r2, #1
    27fc:	2a04      	cmp	r2, #4
    27fe:	d00b      	beq.n	2818 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    2800:	18a9      	adds	r1, r5, r2
    2802:	7d09      	ldrb	r1, [r1, #20]
    2804:	2900      	cmp	r1, #0
    2806:	d0f8      	beq.n	27fa <tcc_init+0x276>
			if (n >= cc_num) {
    2808:	9905      	ldr	r1, [sp, #20]
    280a:	4291      	cmp	r1, r2
    280c:	dc00      	bgt.n	2810 <tcc_init+0x28c>
    280e:	e0a5      	b.n	295c <tcc_init+0x3d8>
			wave |= (TCC_WAVE_POL0 << n);
    2810:	0001      	movs	r1, r0
    2812:	4091      	lsls	r1, r2
    2814:	430e      	orrs	r6, r1
    2816:	e7f0      	b.n	27fa <tcc_init+0x276>
    2818:	46b2      	mov	sl, r6
    281a:	9801      	ldr	r0, [sp, #4]
    281c:	0002      	movs	r2, r0
    281e:	3204      	adds	r2, #4
    2820:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    2822:	2100      	movs	r1, #0
    2824:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2826:	4282      	cmp	r2, r0
    2828:	d1fc      	bne.n	2824 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    282a:	2200      	movs	r2, #0
    282c:	9801      	ldr	r0, [sp, #4]
    282e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    2830:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    2832:	0099      	lsls	r1, r3, #2
    2834:	4a22      	ldr	r2, [pc, #136]	; (28c0 <tcc_init+0x33c>)
    2836:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    2838:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    283a:	22a0      	movs	r2, #160	; 0xa0
    283c:	5ca9      	ldrb	r1, [r5, r2]
    283e:	3a64      	subs	r2, #100	; 0x64
    2840:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    2842:	a90d      	add	r1, sp, #52	; 0x34
    2844:	7aaa      	ldrb	r2, [r5, #10]
    2846:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    2848:	4a1e      	ldr	r2, [pc, #120]	; (28c4 <tcc_init+0x340>)
    284a:	5cd6      	ldrb	r6, [r2, r3]
    284c:	0030      	movs	r0, r6
    284e:	4b1e      	ldr	r3, [pc, #120]	; (28c8 <tcc_init+0x344>)
    2850:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    2852:	0030      	movs	r0, r6
    2854:	4b1d      	ldr	r3, [pc, #116]	; (28cc <tcc_init+0x348>)
    2856:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    2858:	464b      	mov	r3, r9
    285a:	2b00      	cmp	r3, #0
    285c:	dd3c      	ble.n	28d8 <tcc_init+0x354>
    285e:	002e      	movs	r6, r5
    2860:	3658      	adds	r6, #88	; 0x58
    2862:	3398      	adds	r3, #152	; 0x98
    2864:	4698      	mov	r8, r3
    2866:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2868:	2301      	movs	r3, #1
    286a:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    286c:	46ab      	mov	fp, r5
    286e:	4645      	mov	r5, r8
    2870:	46a0      	mov	r8, r4
    2872:	9c08      	ldr	r4, [sp, #32]
    2874:	e003      	b.n	287e <tcc_init+0x2fa>
    2876:	3401      	adds	r4, #1
    2878:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    287a:	42ac      	cmp	r4, r5
    287c:	d02a      	beq.n	28d4 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    287e:	7823      	ldrb	r3, [r4, #0]
    2880:	2b00      	cmp	r3, #0
    2882:	d0f8      	beq.n	2876 <tcc_init+0x2f2>
    2884:	ab0c      	add	r3, sp, #48	; 0x30
    2886:	464a      	mov	r2, r9
    2888:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    288a:	2300      	movs	r3, #0
    288c:	aa0c      	add	r2, sp, #48	; 0x30
    288e:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    2890:	0013      	movs	r3, r2
    2892:	2220      	movs	r2, #32
    2894:	18b2      	adds	r2, r6, r2
    2896:	7812      	ldrb	r2, [r2, #0]
    2898:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    289a:	464a      	mov	r2, r9
    289c:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    289e:	7830      	ldrb	r0, [r6, #0]
    28a0:	0019      	movs	r1, r3
    28a2:	4b0b      	ldr	r3, [pc, #44]	; (28d0 <tcc_init+0x34c>)
    28a4:	4798      	blx	r3
    28a6:	e7e6      	b.n	2876 <tcc_init+0x2f2>
    28a8:	00002405 	.word	0x00002405
    28ac:	40000800 	.word	0x40000800
    28b0:	0000874c 	.word	0x0000874c
    28b4:	00008760 	.word	0x00008760
    28b8:	0000876c 	.word	0x0000876c
    28bc:	00008758 	.word	0x00008758
    28c0:	200018f0 	.word	0x200018f0
    28c4:	0000875c 	.word	0x0000875c
    28c8:	0000482d 	.word	0x0000482d
    28cc:	000047bd 	.word	0x000047bd
    28d0:	00004929 	.word	0x00004929
    28d4:	4644      	mov	r4, r8
    28d6:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    28d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    28da:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    28dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    28de:	0212      	lsls	r2, r2, #8
    28e0:	4313      	orrs	r3, r2
    28e2:	9a02      	ldr	r2, [sp, #8]
    28e4:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    28e6:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    28e8:	2204      	movs	r2, #4
    28ea:	68a3      	ldr	r3, [r4, #8]
    28ec:	421a      	tst	r2, r3
    28ee:	d1fc      	bne.n	28ea <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    28f0:	23ff      	movs	r3, #255	; 0xff
    28f2:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    28f4:	2204      	movs	r2, #4
    28f6:	68a3      	ldr	r3, [r4, #8]
    28f8:	421a      	tst	r2, r3
    28fa:	d1fc      	bne.n	28f6 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    28fc:	466b      	mov	r3, sp
    28fe:	7e1b      	ldrb	r3, [r3, #24]
    2900:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    2902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2904:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    2906:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2908:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    290a:	61a7      	str	r7, [r4, #24]
	hw->WAVE.reg = waves[0];
    290c:	4653      	mov	r3, sl
    290e:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    2910:	2210      	movs	r2, #16
    2912:	68a3      	ldr	r3, [r4, #8]
    2914:	421a      	tst	r2, r3
    2916:	d1fc      	bne.n	2912 <tcc_init+0x38e>
	hw->COUNT.reg = config->counter.count;
    2918:	682b      	ldr	r3, [r5, #0]
    291a:	6363      	str	r3, [r4, #52]	; 0x34
	hw->PER.reg = (config->counter.period);
    291c:	686b      	ldr	r3, [r5, #4]
    291e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    2920:	9805      	ldr	r0, [sp, #20]
    2922:	2800      	cmp	r0, #0
    2924:	dd1c      	ble.n	2960 <tcc_init+0x3dc>
    2926:	351c      	adds	r5, #28
    2928:	2200      	movs	r2, #0
		hw->CC[i].reg = (config->compare.match[i]);
    292a:	cd02      	ldmia	r5!, {r1}
    292c:	0013      	movs	r3, r2
    292e:	3310      	adds	r3, #16
    2930:	009b      	lsls	r3, r3, #2
    2932:	18e3      	adds	r3, r4, r3
    2934:	6059      	str	r1, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    2936:	3201      	adds	r2, #1
    2938:	4290      	cmp	r0, r2
    293a:	dcf6      	bgt.n	292a <tcc_init+0x3a6>
	return STATUS_OK;
    293c:	2000      	movs	r0, #0
    293e:	e63b      	b.n	25b8 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    2940:	2017      	movs	r0, #23
    2942:	e639      	b.n	25b8 <tcc_init+0x34>
    2944:	2017      	movs	r0, #23
    2946:	e637      	b.n	25b8 <tcc_init+0x34>
    2948:	2017      	movs	r0, #23
    294a:	e635      	b.n	25b8 <tcc_init+0x34>
    294c:	2017      	movs	r0, #23
    294e:	e633      	b.n	25b8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    2950:	2017      	movs	r0, #23
    2952:	e631      	b.n	25b8 <tcc_init+0x34>
			if (i >= ow_num) {
    2954:	2017      	movs	r0, #23
    2956:	e62f      	b.n	25b8 <tcc_init+0x34>
			if (i >= ow_num) {
    2958:	2017      	movs	r0, #23
    295a:	e62d      	b.n	25b8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    295c:	2017      	movs	r0, #23
    295e:	e62b      	b.n	25b8 <tcc_init+0x34>
	return STATUS_OK;
    2960:	2000      	movs	r0, #0
    2962:	e629      	b.n	25b8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    2964:	2017      	movs	r0, #23
    2966:	e627      	b.n	25b8 <tcc_init+0x34>

00002968 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2968:	0092      	lsls	r2, r2, #2
    296a:	1883      	adds	r3, r0, r2
    296c:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    296e:	4b03      	ldr	r3, [pc, #12]	; (297c <tcc_register_callback+0x14>)
    2970:	58d3      	ldr	r3, [r2, r3]
    2972:	6b42      	ldr	r2, [r0, #52]	; 0x34
    2974:	4313      	orrs	r3, r2
    2976:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    2978:	2000      	movs	r0, #0
    297a:	4770      	bx	lr
    297c:	00008770 	.word	0x00008770

00002980 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    2980:	b570      	push	{r4, r5, r6, lr}
    2982:	0004      	movs	r4, r0
    2984:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    2986:	6800      	ldr	r0, [r0, #0]
    2988:	4b09      	ldr	r3, [pc, #36]	; (29b0 <tcc_enable_callback+0x30>)
    298a:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    298c:	4b09      	ldr	r3, [pc, #36]	; (29b4 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    298e:	5c1b      	ldrb	r3, [r3, r0]
    2990:	221f      	movs	r2, #31
    2992:	401a      	ands	r2, r3
    2994:	2301      	movs	r3, #1
    2996:	4093      	lsls	r3, r2
    2998:	4a07      	ldr	r2, [pc, #28]	; (29b8 <tcc_enable_callback+0x38>)
    299a:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    299c:	00ad      	lsls	r5, r5, #2
    299e:	4b07      	ldr	r3, [pc, #28]	; (29bc <tcc_enable_callback+0x3c>)
    29a0:	58ea      	ldr	r2, [r5, r3]
    29a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    29a4:	4313      	orrs	r3, r2
    29a6:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    29a8:	6823      	ldr	r3, [r4, #0]
    29aa:	629a      	str	r2, [r3, #40]	; 0x28
}
    29ac:	bd70      	pop	{r4, r5, r6, pc}
    29ae:	46c0      	nop			; (mov r8, r8)
    29b0:	00002405 	.word	0x00002405
    29b4:	000087a0 	.word	0x000087a0
    29b8:	e000e100 	.word	0xe000e100
    29bc:	00008770 	.word	0x00008770

000029c0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    29c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29c2:	46c6      	mov	lr, r8
    29c4:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    29c6:	0080      	lsls	r0, r0, #2
    29c8:	4b0e      	ldr	r3, [pc, #56]	; (2a04 <_tcc_interrupt_handler+0x44>)
    29ca:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    29cc:	683b      	ldr	r3, [r7, #0]
    29ce:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    29d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    29d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    29d4:	4013      	ands	r3, r2
    29d6:	401e      	ands	r6, r3
    29d8:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    29da:	4b0b      	ldr	r3, [pc, #44]	; (2a08 <_tcc_interrupt_handler+0x48>)
    29dc:	4698      	mov	r8, r3
    29de:	e002      	b.n	29e6 <_tcc_interrupt_handler+0x26>
    29e0:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    29e2:	2c30      	cmp	r4, #48	; 0x30
    29e4:	d00a      	beq.n	29fc <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    29e6:	4643      	mov	r3, r8
    29e8:	58e5      	ldr	r5, [r4, r3]
    29ea:	4235      	tst	r5, r6
    29ec:	d0f8      	beq.n	29e0 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    29ee:	193b      	adds	r3, r7, r4
    29f0:	685b      	ldr	r3, [r3, #4]
    29f2:	0038      	movs	r0, r7
    29f4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    29f6:	683b      	ldr	r3, [r7, #0]
    29f8:	62dd      	str	r5, [r3, #44]	; 0x2c
    29fa:	e7f1      	b.n	29e0 <_tcc_interrupt_handler+0x20>
		}
	}
}
    29fc:	bc04      	pop	{r2}
    29fe:	4690      	mov	r8, r2
    2a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a02:	46c0      	nop			; (mov r8, r8)
    2a04:	200018f0 	.word	0x200018f0
    2a08:	00008770 	.word	0x00008770

00002a0c <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    2a0c:	b510      	push	{r4, lr}
    2a0e:	2000      	movs	r0, #0
    2a10:	4b01      	ldr	r3, [pc, #4]	; (2a18 <TCC0_Handler+0xc>)
    2a12:	4798      	blx	r3
    2a14:	bd10      	pop	{r4, pc}
    2a16:	46c0      	nop			; (mov r8, r8)
    2a18:	000029c1 	.word	0x000029c1

00002a1c <TCC1_Handler>:
    2a1c:	b510      	push	{r4, lr}
    2a1e:	2001      	movs	r0, #1
    2a20:	4b01      	ldr	r3, [pc, #4]	; (2a28 <TCC1_Handler+0xc>)
    2a22:	4798      	blx	r3
    2a24:	bd10      	pop	{r4, pc}
    2a26:	46c0      	nop			; (mov r8, r8)
    2a28:	000029c1 	.word	0x000029c1

00002a2c <TCC2_Handler>:
    2a2c:	b510      	push	{r4, lr}
    2a2e:	2002      	movs	r0, #2
    2a30:	4b01      	ldr	r3, [pc, #4]	; (2a38 <TCC2_Handler+0xc>)
    2a32:	4798      	blx	r3
    2a34:	bd10      	pop	{r4, pc}
    2a36:	46c0      	nop			; (mov r8, r8)
    2a38:	000029c1 	.word	0x000029c1

00002a3c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a3e:	46de      	mov	lr, fp
    2a40:	4657      	mov	r7, sl
    2a42:	464e      	mov	r6, r9
    2a44:	4645      	mov	r5, r8
    2a46:	b5e0      	push	{r5, r6, r7, lr}
    2a48:	b091      	sub	sp, #68	; 0x44
    2a4a:	0005      	movs	r5, r0
    2a4c:	000c      	movs	r4, r1
    2a4e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2a50:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2a52:	0008      	movs	r0, r1
    2a54:	4bd2      	ldr	r3, [pc, #840]	; (2da0 <usart_init+0x364>)
    2a56:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
    2a58:	2805      	cmp	r0, #5
    2a5a:	d00d      	beq.n	2a78 <usart_init+0x3c>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    2a5c:	0007      	movs	r7, r0
    2a5e:	3713      	adds	r7, #19
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2a60:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2a62:	2305      	movs	r3, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2a64:	07d2      	lsls	r2, r2, #31
    2a66:	d509      	bpl.n	2a7c <usart_init+0x40>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2a68:	0018      	movs	r0, r3
    2a6a:	b011      	add	sp, #68	; 0x44
    2a6c:	bc3c      	pop	{r2, r3, r4, r5}
    2a6e:	4690      	mov	r8, r2
    2a70:	4699      	mov	r9, r3
    2a72:	46a2      	mov	sl, r4
    2a74:	46ab      	mov	fp, r5
    2a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    2a78:	2719      	movs	r7, #25
    2a7a:	e7f1      	b.n	2a60 <usart_init+0x24>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2a7c:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    2a7e:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2a80:	0792      	lsls	r2, r2, #30
    2a82:	d4f1      	bmi.n	2a68 <usart_init+0x2c>
    2a84:	4ac7      	ldr	r2, [pc, #796]	; (2da4 <usart_init+0x368>)
    2a86:	69d1      	ldr	r1, [r2, #28]
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    2a88:	3001      	adds	r0, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2a8a:	3b1b      	subs	r3, #27
    2a8c:	4083      	lsls	r3, r0
    2a8e:	430b      	orrs	r3, r1
    2a90:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    2a92:	a90f      	add	r1, sp, #60	; 0x3c
    2a94:	2335      	movs	r3, #53	; 0x35
    2a96:	4698      	mov	r8, r3
    2a98:	5cf3      	ldrb	r3, [r6, r3]
    2a9a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2a9c:	b2ff      	uxtb	r7, r7
    2a9e:	0038      	movs	r0, r7
    2aa0:	4bc1      	ldr	r3, [pc, #772]	; (2da8 <usart_init+0x36c>)
    2aa2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2aa4:	0038      	movs	r0, r7
    2aa6:	4bc1      	ldr	r3, [pc, #772]	; (2dac <usart_init+0x370>)
    2aa8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2aaa:	4643      	mov	r3, r8
    2aac:	5cf0      	ldrb	r0, [r6, r3]
    2aae:	2100      	movs	r1, #0
    2ab0:	4bbf      	ldr	r3, [pc, #764]	; (2db0 <usart_init+0x374>)
    2ab2:	4798      	blx	r3
	module->character_size = config->character_size;
    2ab4:	7af3      	ldrb	r3, [r6, #11]
    2ab6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2ab8:	232c      	movs	r3, #44	; 0x2c
    2aba:	5cf3      	ldrb	r3, [r6, r3]
    2abc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2abe:	232d      	movs	r3, #45	; 0x2d
    2ac0:	5cf3      	ldrb	r3, [r6, r3]
    2ac2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2ac4:	7ef3      	ldrb	r3, [r6, #27]
    2ac6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2ac8:	2324      	movs	r3, #36	; 0x24
    2aca:	5cf3      	ldrb	r3, [r6, r3]
    2acc:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2ace:	682b      	ldr	r3, [r5, #0]
    2ad0:	9302      	str	r3, [sp, #8]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2ad2:	0018      	movs	r0, r3
    2ad4:	4bb2      	ldr	r3, [pc, #712]	; (2da0 <usart_init+0x364>)
    2ad6:	4798      	blx	r3
	if (sercom_index == 5) {
    2ad8:	2805      	cmp	r0, #5
    2ada:	d01d      	beq.n	2b18 <usart_init+0xdc>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2adc:	3013      	adds	r0, #19
	uint16_t baud  = 0;
    2ade:	2200      	movs	r2, #0
    2ae0:	230e      	movs	r3, #14
    2ae2:	a906      	add	r1, sp, #24
    2ae4:	468c      	mov	ip, r1
    2ae6:	4463      	add	r3, ip
    2ae8:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2aea:	8a33      	ldrh	r3, [r6, #16]
    2aec:	4698      	mov	r8, r3
    2aee:	2380      	movs	r3, #128	; 0x80
    2af0:	01db      	lsls	r3, r3, #7
    2af2:	4598      	cmp	r8, r3
    2af4:	d100      	bne.n	2af8 <usart_init+0xbc>
    2af6:	e0c3      	b.n	2c80 <usart_init+0x244>
    2af8:	d910      	bls.n	2b1c <usart_init+0xe0>
    2afa:	23c0      	movs	r3, #192	; 0xc0
    2afc:	01db      	lsls	r3, r3, #7
    2afe:	4598      	cmp	r8, r3
    2b00:	d100      	bne.n	2b04 <usart_init+0xc8>
    2b02:	e0b8      	b.n	2c76 <usart_init+0x23a>
    2b04:	2380      	movs	r3, #128	; 0x80
    2b06:	021b      	lsls	r3, r3, #8
    2b08:	4598      	cmp	r8, r3
    2b0a:	d000      	beq.n	2b0e <usart_init+0xd2>
    2b0c:	e166      	b.n	2ddc <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2b0e:	2303      	movs	r3, #3
    2b10:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2b12:	2300      	movs	r3, #0
    2b14:	9307      	str	r3, [sp, #28]
    2b16:	e00a      	b.n	2b2e <usart_init+0xf2>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    2b18:	2019      	movs	r0, #25
    2b1a:	e7e0      	b.n	2ade <usart_init+0xa2>
	switch (config->sample_rate) {
    2b1c:	2380      	movs	r3, #128	; 0x80
    2b1e:	019b      	lsls	r3, r3, #6
    2b20:	4598      	cmp	r8, r3
    2b22:	d000      	beq.n	2b26 <usart_init+0xea>
    2b24:	e15a      	b.n	2ddc <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2b26:	2310      	movs	r3, #16
    2b28:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2b2a:	3b0f      	subs	r3, #15
    2b2c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2b2e:	6833      	ldr	r3, [r6, #0]
    2b30:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2b32:	68f3      	ldr	r3, [r6, #12]
    2b34:	469b      	mov	fp, r3
		config->sample_adjustment |
    2b36:	6973      	ldr	r3, [r6, #20]
    2b38:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2b3a:	7e33      	ldrb	r3, [r6, #24]
    2b3c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2b3e:	232e      	movs	r3, #46	; 0x2e
    2b40:	5cf3      	ldrb	r3, [r6, r3]
    2b42:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2b44:	6873      	ldr	r3, [r6, #4]
    2b46:	4699      	mov	r9, r3
	switch (transfer_mode)
    2b48:	2b00      	cmp	r3, #0
    2b4a:	d100      	bne.n	2b4e <usart_init+0x112>
    2b4c:	e0c5      	b.n	2cda <usart_init+0x29e>
    2b4e:	2380      	movs	r3, #128	; 0x80
    2b50:	055b      	lsls	r3, r3, #21
    2b52:	4599      	cmp	r9, r3
    2b54:	d100      	bne.n	2b58 <usart_init+0x11c>
    2b56:	e0a8      	b.n	2caa <usart_init+0x26e>
	if(config->encoding_format_enable) {
    2b58:	7e73      	ldrb	r3, [r6, #25]
    2b5a:	2b00      	cmp	r3, #0
    2b5c:	d002      	beq.n	2b64 <usart_init+0x128>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2b5e:	7eb3      	ldrb	r3, [r6, #26]
    2b60:	9a02      	ldr	r2, [sp, #8]
    2b62:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    2b64:	230e      	movs	r3, #14
    2b66:	aa06      	add	r2, sp, #24
    2b68:	4694      	mov	ip, r2
    2b6a:	4463      	add	r3, ip
    2b6c:	881b      	ldrh	r3, [r3, #0]
    2b6e:	9a02      	ldr	r2, [sp, #8]
    2b70:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2b72:	9a05      	ldr	r2, [sp, #20]
    2b74:	465b      	mov	r3, fp
    2b76:	431a      	orrs	r2, r3
    2b78:	9b03      	ldr	r3, [sp, #12]
    2b7a:	431a      	orrs	r2, r3
    2b7c:	464b      	mov	r3, r9
    2b7e:	431a      	orrs	r2, r3
    2b80:	4643      	mov	r3, r8
    2b82:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2b84:	9b04      	ldr	r3, [sp, #16]
    2b86:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2b88:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2b8a:	4653      	mov	r3, sl
    2b8c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2b8e:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
    2b90:	232f      	movs	r3, #47	; 0x2f
    2b92:	5cf3      	ldrb	r3, [r6, r3]
    2b94:	2b00      	cmp	r3, #0
    2b96:	d101      	bne.n	2b9c <usart_init+0x160>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2b98:	3304      	adds	r3, #4
    2b9a:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2b9c:	7e73      	ldrb	r3, [r6, #25]
    2b9e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2ba0:	2124      	movs	r1, #36	; 0x24
    2ba2:	5c71      	ldrb	r1, [r6, r1]
    2ba4:	0249      	lsls	r1, r1, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2ba6:	430b      	orrs	r3, r1
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2ba8:	2126      	movs	r1, #38	; 0x26
    2baa:	5c71      	ldrb	r1, [r6, r1]
    2bac:	0209      	lsls	r1, r1, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2bae:	430b      	orrs	r3, r1
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2bb0:	212c      	movs	r1, #44	; 0x2c
    2bb2:	5c71      	ldrb	r1, [r6, r1]
    2bb4:	0449      	lsls	r1, r1, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2bb6:	430b      	orrs	r3, r1
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2bb8:	212d      	movs	r1, #45	; 0x2d
    2bba:	5c71      	ldrb	r1, [r6, r1]
    2bbc:	0409      	lsls	r1, r1, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2bbe:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
    2bc0:	7ab0      	ldrb	r0, [r6, #10]
    2bc2:	7af1      	ldrb	r1, [r6, #11]
    2bc4:	4308      	orrs	r0, r1
    2bc6:	4318      	orrs	r0, r3
	if (config->parity != USART_PARITY_NONE) {
    2bc8:	8933      	ldrh	r3, [r6, #8]
    2bca:	2bff      	cmp	r3, #255	; 0xff
    2bcc:	d100      	bne.n	2bd0 <usart_init+0x194>
    2bce:	e0aa      	b.n	2d26 <usart_init+0x2ea>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2bd0:	2180      	movs	r1, #128	; 0x80
    2bd2:	0449      	lsls	r1, r1, #17
    2bd4:	430a      	orrs	r2, r1
		ctrlb |= config->parity;
    2bd6:	4318      	orrs	r0, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    2bd8:	9902      	ldr	r1, [sp, #8]
    2bda:	688b      	ldr	r3, [r1, #8]
    2bdc:	469c      	mov	ip, r3
						| config->lin_break_length;
    2bde:	8c33      	ldrh	r3, [r6, #32]
    2be0:	8c71      	ldrh	r1, [r6, #34]	; 0x22
    2be2:	430b      	orrs	r3, r1
    2be4:	001f      	movs	r7, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    2be6:	2107      	movs	r1, #7
    2be8:	4663      	mov	r3, ip
    2bea:	4019      	ands	r1, r3
						| config->lin_break_length;
    2bec:	003b      	movs	r3, r7
    2bee:	430b      	orrs	r3, r1
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    2bf0:	9902      	ldr	r1, [sp, #8]
    2bf2:	608b      	str	r3, [r1, #8]
	if (config->lin_node != LIN_INVALID_MODE) {
    2bf4:	69f3      	ldr	r3, [r6, #28]
    2bf6:	2b00      	cmp	r3, #0
    2bf8:	d002      	beq.n	2c00 <usart_init+0x1c4>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
    2bfa:	496e      	ldr	r1, [pc, #440]	; (2db4 <usart_init+0x378>)
    2bfc:	400a      	ands	r2, r1
		ctrla |= config->lin_node;
    2bfe:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2c00:	2334      	movs	r3, #52	; 0x34
    2c02:	5cf3      	ldrb	r3, [r6, r3]
    2c04:	2b00      	cmp	r3, #0
    2c06:	d103      	bne.n	2c10 <usart_init+0x1d4>
    2c08:	4b6b      	ldr	r3, [pc, #428]	; (2db8 <usart_init+0x37c>)
    2c0a:	789b      	ldrb	r3, [r3, #2]
    2c0c:	079b      	lsls	r3, r3, #30
    2c0e:	d501      	bpl.n	2c14 <usart_init+0x1d8>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2c10:	2380      	movs	r3, #128	; 0x80
    2c12:	431a      	orrs	r2, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c14:	6829      	ldr	r1, [r5, #0]
    2c16:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    2c18:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	d1fc      	bne.n	2c18 <usart_init+0x1dc>
	usart_hw->CTRLB.reg = ctrlb;
    2c1e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c20:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2c22:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    2c24:	2b00      	cmp	r3, #0
    2c26:	d1fc      	bne.n	2c22 <usart_init+0x1e6>
	usart_hw->CTRLA.reg = ctrla;
    2c28:	603a      	str	r2, [r7, #0]
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
    2c2a:	683b      	ldr	r3, [r7, #0]
    2c2c:	22f0      	movs	r2, #240	; 0xf0
    2c2e:	0512      	lsls	r2, r2, #20
    2c30:	4013      	ands	r3, r2
    2c32:	22e0      	movs	r2, #224	; 0xe0
    2c34:	04d2      	lsls	r2, r2, #19
    2c36:	4293      	cmp	r3, r2
    2c38:	d00a      	beq.n	2c50 <usart_init+0x214>
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
    2c3a:	68bb      	ldr	r3, [r7, #8]
    2c3c:	2207      	movs	r2, #7
    2c3e:	4393      	bics	r3, r2
    2c40:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
    2c42:	68ba      	ldr	r2, [r7, #8]
    2c44:	2325      	movs	r3, #37	; 0x25
    2c46:	5cf1      	ldrb	r1, [r6, r3]
    2c48:	3b1e      	subs	r3, #30
    2c4a:	400b      	ands	r3, r1
    2c4c:	4313      	orrs	r3, r2
    2c4e:	60bb      	str	r3, [r7, #8]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2c50:	ab0e      	add	r3, sp, #56	; 0x38
    2c52:	2280      	movs	r2, #128	; 0x80
    2c54:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2c56:	2200      	movs	r2, #0
    2c58:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2c5a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2c5c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2c5e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2c60:	930a      	str	r3, [sp, #40]	; 0x28
    2c62:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2c64:	930b      	str	r3, [sp, #44]	; 0x2c
    2c66:	6c33      	ldr	r3, [r6, #64]	; 0x40
    2c68:	930c      	str	r3, [sp, #48]	; 0x30
    2c6a:	6c73      	ldr	r3, [r6, #68]	; 0x44
    2c6c:	9302      	str	r3, [sp, #8]
    2c6e:	930d      	str	r3, [sp, #52]	; 0x34
    2c70:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2c72:	ae0a      	add	r6, sp, #40	; 0x28
    2c74:	e066      	b.n	2d44 <usart_init+0x308>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2c76:	2308      	movs	r3, #8
    2c78:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2c7a:	3b07      	subs	r3, #7
    2c7c:	9307      	str	r3, [sp, #28]
    2c7e:	e756      	b.n	2b2e <usart_init+0xf2>
	ctrla = (uint32_t)config->data_order |
    2c80:	6833      	ldr	r3, [r6, #0]
    2c82:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2c84:	68f3      	ldr	r3, [r6, #12]
    2c86:	469b      	mov	fp, r3
		config->sample_adjustment |
    2c88:	6973      	ldr	r3, [r6, #20]
    2c8a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2c8c:	7e33      	ldrb	r3, [r6, #24]
    2c8e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2c90:	232e      	movs	r3, #46	; 0x2e
    2c92:	5cf3      	ldrb	r3, [r6, r3]
    2c94:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2c96:	6873      	ldr	r3, [r6, #4]
    2c98:	4699      	mov	r9, r3
	switch (transfer_mode)
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	d019      	beq.n	2cd2 <usart_init+0x296>
    2c9e:	2380      	movs	r3, #128	; 0x80
    2ca0:	055b      	lsls	r3, r3, #21
    2ca2:	4599      	cmp	r9, r3
    2ca4:	d001      	beq.n	2caa <usart_init+0x26e>
	enum status_code status_code = STATUS_OK;
    2ca6:	2300      	movs	r3, #0
    2ca8:	e027      	b.n	2cfa <usart_init+0x2be>
			if (!config->use_external_clock) {
    2caa:	232f      	movs	r3, #47	; 0x2f
    2cac:	5cf3      	ldrb	r3, [r6, r3]
    2cae:	2b00      	cmp	r3, #0
    2cb0:	d000      	beq.n	2cb4 <usart_init+0x278>
    2cb2:	e751      	b.n	2b58 <usart_init+0x11c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2cb4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2cb6:	001f      	movs	r7, r3
    2cb8:	b2c0      	uxtb	r0, r0
    2cba:	4b40      	ldr	r3, [pc, #256]	; (2dbc <usart_init+0x380>)
    2cbc:	4798      	blx	r3
    2cbe:	0001      	movs	r1, r0
    2cc0:	220e      	movs	r2, #14
    2cc2:	ab06      	add	r3, sp, #24
    2cc4:	469c      	mov	ip, r3
    2cc6:	4462      	add	r2, ip
    2cc8:	0038      	movs	r0, r7
    2cca:	4b3d      	ldr	r3, [pc, #244]	; (2dc0 <usart_init+0x384>)
    2ccc:	4798      	blx	r3
    2cce:	0003      	movs	r3, r0
    2cd0:	e013      	b.n	2cfa <usart_init+0x2be>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2cd2:	2308      	movs	r3, #8
    2cd4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2cd6:	2300      	movs	r3, #0
    2cd8:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2cda:	232f      	movs	r3, #47	; 0x2f
    2cdc:	5cf3      	ldrb	r3, [r6, r3]
    2cde:	2b00      	cmp	r3, #0
    2ce0:	d00f      	beq.n	2d02 <usart_init+0x2c6>
				status_code =
    2ce2:	9b06      	ldr	r3, [sp, #24]
    2ce4:	9300      	str	r3, [sp, #0]
    2ce6:	9b07      	ldr	r3, [sp, #28]
    2ce8:	220e      	movs	r2, #14
    2cea:	a906      	add	r1, sp, #24
    2cec:	468c      	mov	ip, r1
    2cee:	4462      	add	r2, ip
    2cf0:	6b31      	ldr	r1, [r6, #48]	; 0x30
    2cf2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    2cf4:	4f33      	ldr	r7, [pc, #204]	; (2dc4 <usart_init+0x388>)
    2cf6:	47b8      	blx	r7
    2cf8:	0003      	movs	r3, r0
	if (status_code != STATUS_OK) {
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d000      	beq.n	2d00 <usart_init+0x2c4>
    2cfe:	e6b3      	b.n	2a68 <usart_init+0x2c>
    2d00:	e72a      	b.n	2b58 <usart_init+0x11c>
						_sercom_get_async_baud_val(config->baudrate,
    2d02:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2d04:	001f      	movs	r7, r3
    2d06:	b2c0      	uxtb	r0, r0
    2d08:	4b2c      	ldr	r3, [pc, #176]	; (2dbc <usart_init+0x380>)
    2d0a:	4798      	blx	r3
    2d0c:	0001      	movs	r1, r0
				status_code =
    2d0e:	9b06      	ldr	r3, [sp, #24]
    2d10:	9300      	str	r3, [sp, #0]
    2d12:	9b07      	ldr	r3, [sp, #28]
    2d14:	220e      	movs	r2, #14
    2d16:	a806      	add	r0, sp, #24
    2d18:	4684      	mov	ip, r0
    2d1a:	4462      	add	r2, ip
    2d1c:	0038      	movs	r0, r7
    2d1e:	4f29      	ldr	r7, [pc, #164]	; (2dc4 <usart_init+0x388>)
    2d20:	47b8      	blx	r7
    2d22:	0003      	movs	r3, r0
    2d24:	e7e9      	b.n	2cfa <usart_init+0x2be>
		if(config->lin_slave_enable) {
    2d26:	7ef3      	ldrb	r3, [r6, #27]
    2d28:	2b00      	cmp	r3, #0
    2d2a:	d100      	bne.n	2d2e <usart_init+0x2f2>
    2d2c:	e754      	b.n	2bd8 <usart_init+0x19c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2d2e:	2380      	movs	r3, #128	; 0x80
    2d30:	04db      	lsls	r3, r3, #19
    2d32:	431a      	orrs	r2, r3
    2d34:	e750      	b.n	2bd8 <usart_init+0x19c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2d36:	0020      	movs	r0, r4
    2d38:	4b23      	ldr	r3, [pc, #140]	; (2dc8 <usart_init+0x38c>)
    2d3a:	4798      	blx	r3
    2d3c:	e007      	b.n	2d4e <usart_init+0x312>
    2d3e:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2d40:	2f04      	cmp	r7, #4
    2d42:	d00d      	beq.n	2d60 <usart_init+0x324>
    2d44:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2d46:	00bb      	lsls	r3, r7, #2
    2d48:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2d4a:	2800      	cmp	r0, #0
    2d4c:	d0f3      	beq.n	2d36 <usart_init+0x2fa>
		if (current_pinmux != PINMUX_UNUSED) {
    2d4e:	1c43      	adds	r3, r0, #1
    2d50:	d0f5      	beq.n	2d3e <usart_init+0x302>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2d52:	a90e      	add	r1, sp, #56	; 0x38
    2d54:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2d56:	0c00      	lsrs	r0, r0, #16
    2d58:	b2c0      	uxtb	r0, r0
    2d5a:	4b1c      	ldr	r3, [pc, #112]	; (2dcc <usart_init+0x390>)
    2d5c:	4798      	blx	r3
    2d5e:	e7ee      	b.n	2d3e <usart_init+0x302>
		module->callback[i]            = NULL;
    2d60:	2300      	movs	r3, #0
    2d62:	60eb      	str	r3, [r5, #12]
    2d64:	612b      	str	r3, [r5, #16]
    2d66:	616b      	str	r3, [r5, #20]
    2d68:	61ab      	str	r3, [r5, #24]
    2d6a:	61eb      	str	r3, [r5, #28]
    2d6c:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2d6e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2d70:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2d72:	2200      	movs	r2, #0
    2d74:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2d76:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2d78:	3330      	adds	r3, #48	; 0x30
    2d7a:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2d7c:	3301      	adds	r3, #1
    2d7e:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2d80:	3301      	adds	r3, #1
    2d82:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2d84:	3301      	adds	r3, #1
    2d86:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2d88:	6828      	ldr	r0, [r5, #0]
    2d8a:	4b05      	ldr	r3, [pc, #20]	; (2da0 <usart_init+0x364>)
    2d8c:	4798      	blx	r3
    2d8e:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2d90:	490f      	ldr	r1, [pc, #60]	; (2dd0 <usart_init+0x394>)
    2d92:	4b10      	ldr	r3, [pc, #64]	; (2dd4 <usart_init+0x398>)
    2d94:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2d96:	00a4      	lsls	r4, r4, #2
    2d98:	4b0f      	ldr	r3, [pc, #60]	; (2dd8 <usart_init+0x39c>)
    2d9a:	50e5      	str	r5, [r4, r3]
	return status_code;
    2d9c:	2300      	movs	r3, #0
    2d9e:	e663      	b.n	2a68 <usart_init+0x2c>
    2da0:	000023cd 	.word	0x000023cd
    2da4:	40000800 	.word	0x40000800
    2da8:	0000482d 	.word	0x0000482d
    2dac:	000047bd 	.word	0x000047bd
    2db0:	00002205 	.word	0x00002205
    2db4:	f0ffffff 	.word	0xf0ffffff
    2db8:	41002000 	.word	0x41002000
    2dbc:	00004851 	.word	0x00004851
    2dc0:	00002147 	.word	0x00002147
    2dc4:	00002171 	.word	0x00002171
    2dc8:	00002251 	.word	0x00002251
    2dcc:	00004929 	.word	0x00004929
    2dd0:	00002ed9 	.word	0x00002ed9
    2dd4:	00003079 	.word	0x00003079
    2dd8:	200018fc 	.word	0x200018fc
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2ddc:	2310      	movs	r3, #16
    2dde:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2de0:	2300      	movs	r3, #0
    2de2:	9307      	str	r3, [sp, #28]
    2de4:	e6a3      	b.n	2b2e <usart_init+0xf2>
    2de6:	46c0      	nop			; (mov r8, r8)

00002de8 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dea:	0006      	movs	r6, r0
    2dec:	000c      	movs	r4, r1
    2dee:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2df0:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2df2:	4b0a      	ldr	r3, [pc, #40]	; (2e1c <_usart_write_buffer+0x34>)
    2df4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    2df6:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2df8:	b29b      	uxth	r3, r3
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d003      	beq.n	2e06 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    2dfe:	4b08      	ldr	r3, [pc, #32]	; (2e20 <_usart_write_buffer+0x38>)
    2e00:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2e02:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    2e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    2e06:	85f5      	strh	r5, [r6, #46]	; 0x2e
    2e08:	4b05      	ldr	r3, [pc, #20]	; (2e20 <_usart_write_buffer+0x38>)
    2e0a:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    2e0c:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    2e0e:	2205      	movs	r2, #5
    2e10:	2333      	movs	r3, #51	; 0x33
    2e12:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    2e14:	3b32      	subs	r3, #50	; 0x32
    2e16:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    2e18:	2000      	movs	r0, #0
    2e1a:	e7f3      	b.n	2e04 <_usart_write_buffer+0x1c>
    2e1c:	0000415d 	.word	0x0000415d
    2e20:	0000419d 	.word	0x0000419d

00002e24 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e26:	0004      	movs	r4, r0
    2e28:	000d      	movs	r5, r1
    2e2a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e2c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2e2e:	4b0f      	ldr	r3, [pc, #60]	; (2e6c <_usart_read_buffer+0x48>)
    2e30:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2e32:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2e34:	b29b      	uxth	r3, r3
    2e36:	2b00      	cmp	r3, #0
    2e38:	d003      	beq.n	2e42 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    2e3a:	4b0d      	ldr	r3, [pc, #52]	; (2e70 <_usart_read_buffer+0x4c>)
    2e3c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2e3e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2e42:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2e44:	4b0a      	ldr	r3, [pc, #40]	; (2e70 <_usart_read_buffer+0x4c>)
    2e46:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2e48:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    2e4a:	2205      	movs	r2, #5
    2e4c:	2332      	movs	r3, #50	; 0x32
    2e4e:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2e50:	3b2e      	subs	r3, #46	; 0x2e
    2e52:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2e54:	7a23      	ldrb	r3, [r4, #8]
    2e56:	2b00      	cmp	r3, #0
    2e58:	d001      	beq.n	2e5e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2e5a:	2320      	movs	r3, #32
    2e5c:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2e5e:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2e60:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2e62:	2b00      	cmp	r3, #0
    2e64:	d0ec      	beq.n	2e40 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2e66:	2308      	movs	r3, #8
    2e68:	75bb      	strb	r3, [r7, #22]
    2e6a:	e7e9      	b.n	2e40 <_usart_read_buffer+0x1c>
    2e6c:	0000415d 	.word	0x0000415d
    2e70:	0000419d 	.word	0x0000419d

00002e74 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2e74:	1c93      	adds	r3, r2, #2
    2e76:	009b      	lsls	r3, r3, #2
    2e78:	18c3      	adds	r3, r0, r3
    2e7a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2e7c:	2130      	movs	r1, #48	; 0x30
    2e7e:	2301      	movs	r3, #1
    2e80:	4093      	lsls	r3, r2
    2e82:	001a      	movs	r2, r3
    2e84:	5c43      	ldrb	r3, [r0, r1]
    2e86:	4313      	orrs	r3, r2
    2e88:	5443      	strb	r3, [r0, r1]
}
    2e8a:	4770      	bx	lr

00002e8c <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    2e8c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    2e8e:	2201      	movs	r2, #1
    2e90:	4b01      	ldr	r3, [pc, #4]	; (2e98 <usart_read_job+0xc>)
    2e92:	4798      	blx	r3
}
    2e94:	bd10      	pop	{r4, pc}
    2e96:	46c0      	nop			; (mov r8, r8)
    2e98:	00002e25 	.word	0x00002e25

00002e9c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2e9c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2e9e:	2317      	movs	r3, #23
	if (length == 0) {
    2ea0:	2a00      	cmp	r2, #0
    2ea2:	d101      	bne.n	2ea8 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    2ea4:	0018      	movs	r0, r3
    2ea6:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    2ea8:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    2eaa:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    2eac:	2c00      	cmp	r4, #0
    2eae:	d0f9      	beq.n	2ea4 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    2eb0:	4b01      	ldr	r3, [pc, #4]	; (2eb8 <usart_write_buffer_job+0x1c>)
    2eb2:	4798      	blx	r3
    2eb4:	0003      	movs	r3, r0
    2eb6:	e7f5      	b.n	2ea4 <usart_write_buffer_job+0x8>
    2eb8:	00002de9 	.word	0x00002de9

00002ebc <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    2ebc:	2900      	cmp	r1, #0
    2ebe:	d003      	beq.n	2ec8 <usart_get_job_status+0xc>
    2ec0:	2901      	cmp	r1, #1
    2ec2:	d005      	beq.n	2ed0 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    2ec4:	2017      	movs	r0, #23
    2ec6:	e002      	b.n	2ece <usart_get_job_status+0x12>
			status_code = module->rx_status;
    2ec8:	2332      	movs	r3, #50	; 0x32
    2eca:	5cc0      	ldrb	r0, [r0, r3]
    2ecc:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    2ece:	4770      	bx	lr
			status_code = module->tx_status;
    2ed0:	2333      	movs	r3, #51	; 0x33
    2ed2:	5cc0      	ldrb	r0, [r0, r3]
    2ed4:	b2c0      	uxtb	r0, r0
			break;
    2ed6:	e7fa      	b.n	2ece <usart_get_job_status+0x12>

00002ed8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2eda:	0080      	lsls	r0, r0, #2
    2edc:	4b64      	ldr	r3, [pc, #400]	; (3070 <_usart_interrupt_handler+0x198>)
    2ede:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2ee0:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2ee2:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2ee4:	2b00      	cmp	r3, #0
    2ee6:	d1fc      	bne.n	2ee2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2ee8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2eea:	7da6      	ldrb	r6, [r4, #22]
    2eec:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2eee:	2330      	movs	r3, #48	; 0x30
    2ef0:	5ceb      	ldrb	r3, [r5, r3]
    2ef2:	2231      	movs	r2, #49	; 0x31
    2ef4:	5caf      	ldrb	r7, [r5, r2]
    2ef6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2ef8:	07f3      	lsls	r3, r6, #31
    2efa:	d522      	bpl.n	2f42 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2efc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2efe:	b29b      	uxth	r3, r3
    2f00:	2b00      	cmp	r3, #0
    2f02:	d01c      	beq.n	2f3e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2f04:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2f06:	7813      	ldrb	r3, [r2, #0]
    2f08:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2f0a:	1c51      	adds	r1, r2, #1
    2f0c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2f0e:	7969      	ldrb	r1, [r5, #5]
    2f10:	2901      	cmp	r1, #1
    2f12:	d00e      	beq.n	2f32 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2f14:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2f16:	05db      	lsls	r3, r3, #23
    2f18:	0ddb      	lsrs	r3, r3, #23
    2f1a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2f1c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2f1e:	3b01      	subs	r3, #1
    2f20:	b29b      	uxth	r3, r3
    2f22:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2f24:	2b00      	cmp	r3, #0
    2f26:	d10c      	bne.n	2f42 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2f28:	3301      	adds	r3, #1
    2f2a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2f2c:	3301      	adds	r3, #1
    2f2e:	75a3      	strb	r3, [r4, #22]
    2f30:	e007      	b.n	2f42 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2f32:	7851      	ldrb	r1, [r2, #1]
    2f34:	0209      	lsls	r1, r1, #8
    2f36:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2f38:	3202      	adds	r2, #2
    2f3a:	62aa      	str	r2, [r5, #40]	; 0x28
    2f3c:	e7eb      	b.n	2f16 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2f3e:	2301      	movs	r3, #1
    2f40:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2f42:	07b3      	lsls	r3, r6, #30
    2f44:	d506      	bpl.n	2f54 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2f46:	2302      	movs	r3, #2
    2f48:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2f4a:	2200      	movs	r2, #0
    2f4c:	3331      	adds	r3, #49	; 0x31
    2f4e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2f50:	07fb      	lsls	r3, r7, #31
    2f52:	d41e      	bmi.n	2f92 <_usart_interrupt_handler+0xba>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2f54:	0773      	lsls	r3, r6, #29
    2f56:	d568      	bpl.n	302a <_usart_interrupt_handler+0x152>

		if (module->remaining_rx_buffer_length) {
    2f58:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2f5a:	b29b      	uxth	r3, r3
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	d062      	beq.n	3026 <_usart_interrupt_handler+0x14e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2f60:	8b63      	ldrh	r3, [r4, #26]
    2f62:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2f64:	071a      	lsls	r2, r3, #28
    2f66:	d418      	bmi.n	2f9a <_usart_interrupt_handler+0xc2>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2f68:	227f      	movs	r2, #127	; 0x7f
    2f6a:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    2f6c:	065a      	lsls	r2, r3, #25
    2f6e:	d501      	bpl.n	2f74 <_usart_interrupt_handler+0x9c>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    2f70:	2240      	movs	r2, #64	; 0x40
    2f72:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2f74:	2b00      	cmp	r3, #0
    2f76:	d033      	beq.n	2fe0 <_usart_interrupt_handler+0x108>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2f78:	079a      	lsls	r2, r3, #30
    2f7a:	d511      	bpl.n	2fa0 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2f7c:	221a      	movs	r2, #26
    2f7e:	2332      	movs	r3, #50	; 0x32
    2f80:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2f82:	3b30      	subs	r3, #48	; 0x30
    2f84:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2f86:	077b      	lsls	r3, r7, #29
    2f88:	d54f      	bpl.n	302a <_usart_interrupt_handler+0x152>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2f8a:	0028      	movs	r0, r5
    2f8c:	696b      	ldr	r3, [r5, #20]
    2f8e:	4798      	blx	r3
    2f90:	e04b      	b.n	302a <_usart_interrupt_handler+0x152>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2f92:	0028      	movs	r0, r5
    2f94:	68eb      	ldr	r3, [r5, #12]
    2f96:	4798      	blx	r3
    2f98:	e7dc      	b.n	2f54 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2f9a:	2277      	movs	r2, #119	; 0x77
    2f9c:	4013      	ands	r3, r2
    2f9e:	e7e5      	b.n	2f6c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2fa0:	075a      	lsls	r2, r3, #29
    2fa2:	d505      	bpl.n	2fb0 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2fa4:	221e      	movs	r2, #30
    2fa6:	2332      	movs	r3, #50	; 0x32
    2fa8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2faa:	3b2e      	subs	r3, #46	; 0x2e
    2fac:	8363      	strh	r3, [r4, #26]
    2fae:	e7ea      	b.n	2f86 <_usart_interrupt_handler+0xae>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2fb0:	07da      	lsls	r2, r3, #31
    2fb2:	d505      	bpl.n	2fc0 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2fb4:	2213      	movs	r2, #19
    2fb6:	2332      	movs	r3, #50	; 0x32
    2fb8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2fba:	3b31      	subs	r3, #49	; 0x31
    2fbc:	8363      	strh	r3, [r4, #26]
    2fbe:	e7e2      	b.n	2f86 <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2fc0:	06da      	lsls	r2, r3, #27
    2fc2:	d505      	bpl.n	2fd0 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2fc4:	2242      	movs	r2, #66	; 0x42
    2fc6:	2332      	movs	r3, #50	; 0x32
    2fc8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2fca:	3b22      	subs	r3, #34	; 0x22
    2fcc:	8363      	strh	r3, [r4, #26]
    2fce:	e7da      	b.n	2f86 <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2fd0:	069b      	lsls	r3, r3, #26
    2fd2:	d5d8      	bpl.n	2f86 <_usart_interrupt_handler+0xae>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2fd4:	2241      	movs	r2, #65	; 0x41
    2fd6:	2332      	movs	r3, #50	; 0x32
    2fd8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2fda:	3b12      	subs	r3, #18
    2fdc:	8363      	strh	r3, [r4, #26]
    2fde:	e7d2      	b.n	2f86 <_usart_interrupt_handler+0xae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2fe0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2fe2:	05db      	lsls	r3, r3, #23
    2fe4:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2fe6:	b2da      	uxtb	r2, r3
    2fe8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2fea:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2fec:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2fee:	1c51      	adds	r1, r2, #1
    2ff0:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2ff2:	7969      	ldrb	r1, [r5, #5]
    2ff4:	2901      	cmp	r1, #1
    2ff6:	d010      	beq.n	301a <_usart_interrupt_handler+0x142>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2ff8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2ffa:	3b01      	subs	r3, #1
    2ffc:	b29b      	uxth	r3, r3
    2ffe:	85ab      	strh	r3, [r5, #44]	; 0x2c
    3000:	2b00      	cmp	r3, #0
    3002:	d112      	bne.n	302a <_usart_interrupt_handler+0x152>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3004:	3304      	adds	r3, #4
    3006:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    3008:	2200      	movs	r2, #0
    300a:	332e      	adds	r3, #46	; 0x2e
    300c:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    300e:	07bb      	lsls	r3, r7, #30
    3010:	d50b      	bpl.n	302a <_usart_interrupt_handler+0x152>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    3012:	0028      	movs	r0, r5
    3014:	692b      	ldr	r3, [r5, #16]
    3016:	4798      	blx	r3
    3018:	e007      	b.n	302a <_usart_interrupt_handler+0x152>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    301a:	0a1b      	lsrs	r3, r3, #8
    301c:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    301e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3020:	3301      	adds	r3, #1
    3022:	626b      	str	r3, [r5, #36]	; 0x24
    3024:	e7e8      	b.n	2ff8 <_usart_interrupt_handler+0x120>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3026:	2304      	movs	r3, #4
    3028:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    302a:	06f3      	lsls	r3, r6, #27
    302c:	d504      	bpl.n	3038 <_usart_interrupt_handler+0x160>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    302e:	2310      	movs	r3, #16
    3030:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    3032:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    3034:	06fb      	lsls	r3, r7, #27
    3036:	d40e      	bmi.n	3056 <_usart_interrupt_handler+0x17e>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    3038:	06b3      	lsls	r3, r6, #26
    303a:	d504      	bpl.n	3046 <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    303c:	2320      	movs	r3, #32
    303e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    3040:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    3042:	073b      	lsls	r3, r7, #28
    3044:	d40b      	bmi.n	305e <_usart_interrupt_handler+0x186>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    3046:	0733      	lsls	r3, r6, #28
    3048:	d504      	bpl.n	3054 <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    304a:	2308      	movs	r3, #8
    304c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    304e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    3050:	06bb      	lsls	r3, r7, #26
    3052:	d408      	bmi.n	3066 <_usart_interrupt_handler+0x18e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    3054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    3056:	0028      	movs	r0, r5
    3058:	69eb      	ldr	r3, [r5, #28]
    305a:	4798      	blx	r3
    305c:	e7ec      	b.n	3038 <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    305e:	0028      	movs	r0, r5
    3060:	69ab      	ldr	r3, [r5, #24]
    3062:	4798      	blx	r3
    3064:	e7ef      	b.n	3046 <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    3066:	6a2b      	ldr	r3, [r5, #32]
    3068:	0028      	movs	r0, r5
    306a:	4798      	blx	r3
}
    306c:	e7f2      	b.n	3054 <_usart_interrupt_handler+0x17c>
    306e:	46c0      	nop			; (mov r8, r8)
    3070:	200018fc 	.word	0x200018fc

00003074 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    3074:	4770      	bx	lr
	...

00003078 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3078:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    307a:	4b0a      	ldr	r3, [pc, #40]	; (30a4 <_sercom_set_handler+0x2c>)
    307c:	781b      	ldrb	r3, [r3, #0]
    307e:	2b00      	cmp	r3, #0
    3080:	d10c      	bne.n	309c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3082:	4f09      	ldr	r7, [pc, #36]	; (30a8 <_sercom_set_handler+0x30>)
    3084:	4e09      	ldr	r6, [pc, #36]	; (30ac <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    3086:	4d0a      	ldr	r5, [pc, #40]	; (30b0 <_sercom_set_handler+0x38>)
    3088:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    308a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    308c:	195a      	adds	r2, r3, r5
    308e:	6014      	str	r4, [r2, #0]
    3090:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3092:	2b18      	cmp	r3, #24
    3094:	d1f9      	bne.n	308a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    3096:	2201      	movs	r2, #1
    3098:	4b02      	ldr	r3, [pc, #8]	; (30a4 <_sercom_set_handler+0x2c>)
    309a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    309c:	0080      	lsls	r0, r0, #2
    309e:	4b02      	ldr	r3, [pc, #8]	; (30a8 <_sercom_set_handler+0x30>)
    30a0:	50c1      	str	r1, [r0, r3]
}
    30a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30a4:	200000ae 	.word	0x200000ae
    30a8:	200000b0 	.word	0x200000b0
    30ac:	00003075 	.word	0x00003075
    30b0:	200018fc 	.word	0x200018fc

000030b4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    30b4:	b500      	push	{lr}
    30b6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    30b8:	2309      	movs	r3, #9
    30ba:	466a      	mov	r2, sp
    30bc:	7013      	strb	r3, [r2, #0]
    30be:	3301      	adds	r3, #1
    30c0:	7053      	strb	r3, [r2, #1]
    30c2:	3301      	adds	r3, #1
    30c4:	7093      	strb	r3, [r2, #2]
    30c6:	3301      	adds	r3, #1
    30c8:	70d3      	strb	r3, [r2, #3]
    30ca:	3301      	adds	r3, #1
    30cc:	7113      	strb	r3, [r2, #4]
    30ce:	3301      	adds	r3, #1
    30d0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    30d2:	4b03      	ldr	r3, [pc, #12]	; (30e0 <_sercom_get_interrupt_vector+0x2c>)
    30d4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    30d6:	466b      	mov	r3, sp
    30d8:	5618      	ldrsb	r0, [r3, r0]
}
    30da:	b003      	add	sp, #12
    30dc:	bd00      	pop	{pc}
    30de:	46c0      	nop			; (mov r8, r8)
    30e0:	000023cd 	.word	0x000023cd

000030e4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    30e4:	b510      	push	{r4, lr}
    30e6:	4b02      	ldr	r3, [pc, #8]	; (30f0 <SERCOM0_Handler+0xc>)
    30e8:	681b      	ldr	r3, [r3, #0]
    30ea:	2000      	movs	r0, #0
    30ec:	4798      	blx	r3
    30ee:	bd10      	pop	{r4, pc}
    30f0:	200000b0 	.word	0x200000b0

000030f4 <SERCOM1_Handler>:
    30f4:	b510      	push	{r4, lr}
    30f6:	4b02      	ldr	r3, [pc, #8]	; (3100 <SERCOM1_Handler+0xc>)
    30f8:	685b      	ldr	r3, [r3, #4]
    30fa:	2001      	movs	r0, #1
    30fc:	4798      	blx	r3
    30fe:	bd10      	pop	{r4, pc}
    3100:	200000b0 	.word	0x200000b0

00003104 <SERCOM2_Handler>:
    3104:	b510      	push	{r4, lr}
    3106:	4b02      	ldr	r3, [pc, #8]	; (3110 <SERCOM2_Handler+0xc>)
    3108:	689b      	ldr	r3, [r3, #8]
    310a:	2002      	movs	r0, #2
    310c:	4798      	blx	r3
    310e:	bd10      	pop	{r4, pc}
    3110:	200000b0 	.word	0x200000b0

00003114 <SERCOM3_Handler>:
    3114:	b510      	push	{r4, lr}
    3116:	4b02      	ldr	r3, [pc, #8]	; (3120 <SERCOM3_Handler+0xc>)
    3118:	68db      	ldr	r3, [r3, #12]
    311a:	2003      	movs	r0, #3
    311c:	4798      	blx	r3
    311e:	bd10      	pop	{r4, pc}
    3120:	200000b0 	.word	0x200000b0

00003124 <SERCOM4_Handler>:
    3124:	b510      	push	{r4, lr}
    3126:	4b02      	ldr	r3, [pc, #8]	; (3130 <SERCOM4_Handler+0xc>)
    3128:	691b      	ldr	r3, [r3, #16]
    312a:	2004      	movs	r0, #4
    312c:	4798      	blx	r3
    312e:	bd10      	pop	{r4, pc}
    3130:	200000b0 	.word	0x200000b0

00003134 <SERCOM5_Handler>:
    3134:	b510      	push	{r4, lr}
    3136:	4b02      	ldr	r3, [pc, #8]	; (3140 <SERCOM5_Handler+0xc>)
    3138:	695b      	ldr	r3, [r3, #20]
    313a:	2005      	movs	r0, #5
    313c:	4798      	blx	r3
    313e:	bd10      	pop	{r4, pc}
    3140:	200000b0 	.word	0x200000b0

00003144 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
    3144:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
    3146:	0080      	lsls	r0, r0, #2
    3148:	4b1f      	ldr	r3, [pc, #124]	; (31c8 <_ac_interrupt_handler+0x84>)
    314a:	58c4      	ldr	r4, [r0, r3]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
    314c:	6823      	ldr	r3, [r4, #0]
    314e:	799d      	ldrb	r5, [r3, #6]
	interrupt_and_callback_status_mask =
    3150:	7f22      	ldrb	r2, [r4, #28]
    3152:	7f63      	ldrb	r3, [r4, #29]
    3154:	4013      	ands	r3, r2
    3156:	401d      	ands	r5, r3
			(module->register_callback_mask & module->enable_callback_mask);

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
    3158:	07eb      	lsls	r3, r5, #31
    315a:	d40a      	bmi.n	3172 <_ac_interrupt_handler+0x2e>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
    315c:	07ab      	lsls	r3, r5, #30
    315e:	d40f      	bmi.n	3180 <_ac_interrupt_handler+0x3c>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
    3160:	06eb      	lsls	r3, r5, #27
    3162:	d414      	bmi.n	318e <_ac_interrupt_handler+0x4a>
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
	}

#if (AC_NUM_CMP > 2)
		/* Check if comparator channel 2 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP2) {
    3164:	076b      	lsls	r3, r5, #29
    3166:	d419      	bmi.n	319c <_ac_interrupt_handler+0x58>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP2;
	}

	/* Check if comparator channel 3 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP3) {
    3168:	072b      	lsls	r3, r5, #28
    316a:	d41e      	bmi.n	31aa <_ac_interrupt_handler+0x66>
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP3;
	}

#  if !(SAMC20)
		/* Check if window 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN1) {
    316c:	06ab      	lsls	r3, r5, #26
    316e:	d423      	bmi.n	31b8 <_ac_interrupt_handler+0x74>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
    3170:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
    3172:	0020      	movs	r0, r4
    3174:	6863      	ldr	r3, [r4, #4]
    3176:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
    3178:	2301      	movs	r3, #1
    317a:	6822      	ldr	r2, [r4, #0]
    317c:	7193      	strb	r3, [r2, #6]
    317e:	e7ed      	b.n	315c <_ac_interrupt_handler+0x18>
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
    3180:	0020      	movs	r0, r4
    3182:	68a3      	ldr	r3, [r4, #8]
    3184:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
    3186:	2302      	movs	r3, #2
    3188:	6822      	ldr	r2, [r4, #0]
    318a:	7193      	strb	r3, [r2, #6]
    318c:	e7e8      	b.n	3160 <_ac_interrupt_handler+0x1c>
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
    318e:	0020      	movs	r0, r4
    3190:	6963      	ldr	r3, [r4, #20]
    3192:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
    3194:	2310      	movs	r3, #16
    3196:	6822      	ldr	r2, [r4, #0]
    3198:	7193      	strb	r3, [r2, #6]
    319a:	e7e3      	b.n	3164 <_ac_interrupt_handler+0x20>
		(module->callback[AC_CALLBACK_COMPARATOR_2])(module);
    319c:	0020      	movs	r0, r4
    319e:	68e3      	ldr	r3, [r4, #12]
    31a0:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP2;
    31a2:	2304      	movs	r3, #4
    31a4:	6822      	ldr	r2, [r4, #0]
    31a6:	7193      	strb	r3, [r2, #6]
    31a8:	e7de      	b.n	3168 <_ac_interrupt_handler+0x24>
		(module->callback[AC_CALLBACK_COMPARATOR_3])(module);
    31aa:	0020      	movs	r0, r4
    31ac:	6923      	ldr	r3, [r4, #16]
    31ae:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP3;
    31b0:	2308      	movs	r3, #8
    31b2:	6822      	ldr	r2, [r4, #0]
    31b4:	7193      	strb	r3, [r2, #6]
    31b6:	e7d9      	b.n	316c <_ac_interrupt_handler+0x28>
		(module->callback[AC_CALLBACK_WINDOW_1])(module);
    31b8:	0020      	movs	r0, r4
    31ba:	69a3      	ldr	r3, [r4, #24]
    31bc:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
    31be:	6823      	ldr	r3, [r4, #0]
    31c0:	2220      	movs	r2, #32
    31c2:	719a      	strb	r2, [r3, #6]
}
    31c4:	e7d4      	b.n	3170 <_ac_interrupt_handler+0x2c>
    31c6:	46c0      	nop			; (mov r8, r8)
    31c8:	20001914 	.word	0x20001914

000031cc <AC_Handler>:
{
    31cc:	b510      	push	{r4, lr}
	_ac_interrupt_handler(0);
    31ce:	2000      	movs	r0, #0
    31d0:	4b01      	ldr	r3, [pc, #4]	; (31d8 <AC_Handler+0xc>)
    31d2:	4798      	blx	r3
}
    31d4:	bd10      	pop	{r4, pc}
    31d6:	46c0      	nop			; (mov r8, r8)
    31d8:	00003145 	.word	0x00003145

000031dc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    31dc:	b500      	push	{lr}
    31de:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    31e0:	ab01      	add	r3, sp, #4
    31e2:	2280      	movs	r2, #128	; 0x80
    31e4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    31e6:	780a      	ldrb	r2, [r1, #0]
    31e8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    31ea:	784a      	ldrb	r2, [r1, #1]
    31ec:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    31ee:	788a      	ldrb	r2, [r1, #2]
    31f0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    31f2:	0019      	movs	r1, r3
    31f4:	4b01      	ldr	r3, [pc, #4]	; (31fc <port_pin_set_config+0x20>)
    31f6:	4798      	blx	r3
}
    31f8:	b003      	add	sp, #12
    31fa:	bd00      	pop	{pc}
    31fc:	00004929 	.word	0x00004929

00003200 <adc0_window_callback>:
    adc0_change_channel(adc_ch);
    adc_read_buffer_job(&adc0_instance, result+adc_ch, 1);

}
void adc0_window_callback(void)
{
    3200:	b510      	push	{r4, lr}
    switch(adc_ch-2) {
    3202:	4b11      	ldr	r3, [pc, #68]	; (3248 <adc0_window_callback+0x48>)
    3204:	781b      	ldrb	r3, [r3, #0]
    3206:	3b02      	subs	r3, #2
    3208:	2b04      	cmp	r3, #4
    320a:	d807      	bhi.n	321c <adc0_window_callback+0x1c>
    320c:	009b      	lsls	r3, r3, #2
    320e:	4a0f      	ldr	r2, [pc, #60]	; (324c <adc0_window_callback+0x4c>)
    3210:	58d3      	ldr	r3, [r2, r3]
    3212:	469f      	mov	pc, r3
        case 0:
            adsr_trigger(adsr0);
    3214:	4b0e      	ldr	r3, [pc, #56]	; (3250 <adc0_window_callback+0x50>)
    3216:	6818      	ldr	r0, [r3, #0]
    3218:	4b0e      	ldr	r3, [pc, #56]	; (3254 <adc0_window_callback+0x54>)
    321a:	4798      	blx	r3
        case 4:
            adsr_trigger(adsr4);
            break;
            //sprozi ADSRje
    }
}
    321c:	bd10      	pop	{r4, pc}
            adsr_trigger(adsr1);
    321e:	4b0e      	ldr	r3, [pc, #56]	; (3258 <adc0_window_callback+0x58>)
    3220:	6818      	ldr	r0, [r3, #0]
    3222:	4b0c      	ldr	r3, [pc, #48]	; (3254 <adc0_window_callback+0x54>)
    3224:	4798      	blx	r3
            break;
    3226:	e7f9      	b.n	321c <adc0_window_callback+0x1c>
            adsr_trigger(adsr2);
    3228:	4b0c      	ldr	r3, [pc, #48]	; (325c <adc0_window_callback+0x5c>)
    322a:	6818      	ldr	r0, [r3, #0]
    322c:	4b09      	ldr	r3, [pc, #36]	; (3254 <adc0_window_callback+0x54>)
    322e:	4798      	blx	r3
            break;
    3230:	e7f4      	b.n	321c <adc0_window_callback+0x1c>
            adsr_trigger(adsr3);
    3232:	4b0b      	ldr	r3, [pc, #44]	; (3260 <adc0_window_callback+0x60>)
    3234:	6818      	ldr	r0, [r3, #0]
    3236:	4b07      	ldr	r3, [pc, #28]	; (3254 <adc0_window_callback+0x54>)
    3238:	4798      	blx	r3
            break;
    323a:	e7ef      	b.n	321c <adc0_window_callback+0x1c>
            adsr_trigger(adsr4);
    323c:	4b09      	ldr	r3, [pc, #36]	; (3264 <adc0_window_callback+0x64>)
    323e:	6818      	ldr	r0, [r3, #0]
    3240:	4b04      	ldr	r3, [pc, #16]	; (3254 <adc0_window_callback+0x54>)
    3242:	4798      	blx	r3
}
    3244:	e7ea      	b.n	321c <adc0_window_callback+0x1c>
    3246:	46c0      	nop			; (mov r8, r8)
    3248:	200000c8 	.word	0x200000c8
    324c:	000087a4 	.word	0x000087a4
    3250:	2000191c 	.word	0x2000191c
    3254:	00000629 	.word	0x00000629
    3258:	20001920 	.word	0x20001920
    325c:	20001918 	.word	0x20001918
    3260:	20001924 	.word	0x20001924
    3264:	20001954 	.word	0x20001954

00003268 <configure_adc0_callbacks>:
{
    3268:	b570      	push	{r4, r5, r6, lr}
    adc_register_callback(&adc0_instance, adc0_window_callback, ADC_CALLBACK_WINDOW);
    326a:	4c0b      	ldr	r4, [pc, #44]	; (3298 <configure_adc0_callbacks+0x30>)
    326c:	2201      	movs	r2, #1
    326e:	490b      	ldr	r1, [pc, #44]	; (329c <configure_adc0_callbacks+0x34>)
    3270:	0020      	movs	r0, r4
    3272:	4d0b      	ldr	r5, [pc, #44]	; (32a0 <configure_adc0_callbacks+0x38>)
    3274:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    3276:	7ee3      	ldrb	r3, [r4, #27]
    3278:	2202      	movs	r2, #2
    327a:	4313      	orrs	r3, r2
    327c:	76e3      	strb	r3, [r4, #27]
	adc_module->INTENSET.reg = interrupt;
    327e:	2304      	movs	r3, #4
    3280:	6822      	ldr	r2, [r4, #0]
    3282:	7153      	strb	r3, [r2, #5]
    adc_register_callback(&adc0_instance, adc0_read_callback, ADC_CALLBACK_READ_BUFFER);
    3284:	2200      	movs	r2, #0
    3286:	4907      	ldr	r1, [pc, #28]	; (32a4 <configure_adc0_callbacks+0x3c>)
    3288:	0020      	movs	r0, r4
    328a:	47a8      	blx	r5
    328c:	7ee3      	ldrb	r3, [r4, #27]
    328e:	2201      	movs	r2, #1
    3290:	4313      	orrs	r3, r2
    3292:	76e3      	strb	r3, [r4, #27]
}
    3294:	bd70      	pop	{r4, r5, r6, pc}
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	20001928 	.word	0x20001928
    329c:	00003201 	.word	0x00003201
    32a0:	000011f9 	.word	0x000011f9
    32a4:	000033e9 	.word	0x000033e9

000032a8 <configure_adc0>:
{
    32a8:	b530      	push	{r4, r5, lr}
    32aa:	b08d      	sub	sp, #52	; 0x34
    adsr0=a0;
    32ac:	4c28      	ldr	r4, [pc, #160]	; (3350 <configure_adc0+0xa8>)
    32ae:	6020      	str	r0, [r4, #0]
    adsr1=a1;
    32b0:	4828      	ldr	r0, [pc, #160]	; (3354 <configure_adc0+0xac>)
    32b2:	6001      	str	r1, [r0, #0]
    adsr2=a2;
    32b4:	4928      	ldr	r1, [pc, #160]	; (3358 <configure_adc0+0xb0>)
    32b6:	600a      	str	r2, [r1, #0]
    adsr3=a3;
    32b8:	4a28      	ldr	r2, [pc, #160]	; (335c <configure_adc0+0xb4>)
    32ba:	6013      	str	r3, [r2, #0]
    adsr4=a4;
    32bc:	4b28      	ldr	r3, [pc, #160]	; (3360 <configure_adc0+0xb8>)
    32be:	9a10      	ldr	r2, [sp, #64]	; 0x40
    32c0:	601a      	str	r2, [r3, #0]
    adc_get_config_defaults(&config_adc);
    32c2:	ac01      	add	r4, sp, #4
    32c4:	0020      	movs	r0, r4
    32c6:	4b27      	ldr	r3, [pc, #156]	; (3364 <configure_adc0+0xbc>)
    32c8:	4798      	blx	r3
    config_adc.clock_source                  = GCLK_GENERATOR_7;
    32ca:	2207      	movs	r2, #7
    32cc:	7022      	strb	r2, [r4, #0]
    config_adc.reference                     = ADC_REFERENCE_INTVCC2;
    32ce:	2305      	movs	r3, #5
    32d0:	7063      	strb	r3, [r4, #1]
    config_adc.clock_prescaler               = ADC_CLOCK_PRESCALER_DIV8;
    32d2:	3b03      	subs	r3, #3
    32d4:	70a3      	strb	r3, [r4, #2]
    config_adc.resolution                    = ADC_RESOLUTION_10BIT;
    32d6:	331e      	adds	r3, #30
    32d8:	70e3      	strb	r3, [r4, #3]
    config_adc.window.window_mode            = ADC_WINDOW_MODE_ABOVE_LOWER;
    32da:	33e0      	adds	r3, #224	; 0xe0
    32dc:	8323      	strh	r3, [r4, #24]
    config_adc.window.window_upper_value     = 0;
    32de:	2300      	movs	r3, #0
    32e0:	6223      	str	r3, [r4, #32]
    config_adc.window.window_lower_value     = 2800;
    32e2:	21af      	movs	r1, #175	; 0xaf
    32e4:	0109      	lsls	r1, r1, #4
    32e6:	61e1      	str	r1, [r4, #28]
    config_adc.positive_input                = ADC_POSITIVE_INPUT_PIN7;
    32e8:	7122      	strb	r2, [r4, #4]
    config_adc.negative_input                = ADC_NEGATIVE_INPUT_GND;
    32ea:	22c0      	movs	r2, #192	; 0xc0
    32ec:	0152      	lsls	r2, r2, #5
    32ee:	80e2      	strh	r2, [r4, #6]
    config_adc.left_adjust                   = false;
    32f0:	72a3      	strb	r3, [r4, #10]
    config_adc.freerunning                   = true;
    32f2:	2201      	movs	r2, #1
    32f4:	7322      	strb	r2, [r4, #12]
    config_adc.positive_input_sequence_mask_enable = 0;
    32f6:	6123      	str	r3, [r4, #16]
    adc_init(&adc0_instance, ADC0, &config_adc);
    32f8:	4d1b      	ldr	r5, [pc, #108]	; (3368 <configure_adc0+0xc0>)
    32fa:	0022      	movs	r2, r4
    32fc:	491b      	ldr	r1, [pc, #108]	; (336c <configure_adc0+0xc4>)
    32fe:	0028      	movs	r0, r5
    3300:	4b1b      	ldr	r3, [pc, #108]	; (3370 <configure_adc0+0xc8>)
    3302:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    3304:	682c      	ldr	r4, [r5, #0]
    3306:	8c23      	ldrh	r3, [r4, #32]
    3308:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    330a:	2b00      	cmp	r3, #0
    330c:	d1fb      	bne.n	3306 <configure_adc0+0x5e>
			_adc_get_inst_index(adc_module)));
    330e:	0020      	movs	r0, r4
    3310:	4b18      	ldr	r3, [pc, #96]	; (3374 <configure_adc0+0xcc>)
    3312:	4798      	blx	r3
	return (enum system_interrupt_vector)adc_interrupt_vectors[inst_num];
    3314:	4b18      	ldr	r3, [pc, #96]	; (3378 <configure_adc0+0xd0>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3316:	5c1b      	ldrb	r3, [r3, r0]
    3318:	221f      	movs	r2, #31
    331a:	401a      	ands	r2, r3
    331c:	2301      	movs	r3, #1
    331e:	4093      	lsls	r3, r2
    3320:	4a16      	ldr	r2, [pc, #88]	; (337c <configure_adc0+0xd4>)
    3322:	6013      	str	r3, [r2, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    3324:	2307      	movs	r3, #7
    3326:	7123      	strb	r3, [r4, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    3328:	71a3      	strb	r3, [r4, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    332a:	7823      	ldrb	r3, [r4, #0]
    332c:	2202      	movs	r2, #2
    332e:	4313      	orrs	r3, r2
    3330:	7023      	strb	r3, [r4, #0]
	Adc *const adc_module = module_inst->hw;
    3332:	4b0d      	ldr	r3, [pc, #52]	; (3368 <configure_adc0+0xc0>)
    3334:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    3336:	8c13      	ldrh	r3, [r2, #32]
    3338:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    333a:	2b00      	cmp	r3, #0
    333c:	d1fb      	bne.n	3336 <configure_adc0+0x8e>
    configure_adc0_callbacks();
    333e:	4b10      	ldr	r3, [pc, #64]	; (3380 <configure_adc0+0xd8>)
    3340:	4798      	blx	r3
    adc_read_buffer_job(&adc0_instance, &result, 1);
    3342:	2201      	movs	r2, #1
    3344:	490f      	ldr	r1, [pc, #60]	; (3384 <configure_adc0+0xdc>)
    3346:	4808      	ldr	r0, [pc, #32]	; (3368 <configure_adc0+0xc0>)
    3348:	4b0f      	ldr	r3, [pc, #60]	; (3388 <configure_adc0+0xe0>)
    334a:	4798      	blx	r3
}
    334c:	b00d      	add	sp, #52	; 0x34
    334e:	bd30      	pop	{r4, r5, pc}
    3350:	2000191c 	.word	0x2000191c
    3354:	20001920 	.word	0x20001920
    3358:	20001918 	.word	0x20001918
    335c:	20001924 	.word	0x20001924
    3360:	20001954 	.word	0x20001954
    3364:	00000b95 	.word	0x00000b95
    3368:	20001928 	.word	0x20001928
    336c:	42004400 	.word	0x42004400
    3370:	00000c1d 	.word	0x00000c1d
    3374:	00000b71 	.word	0x00000b71
    3378:	000087b8 	.word	0x000087b8
    337c:	e000e100 	.word	0xe000e100
    3380:	00003269 	.word	0x00003269
    3384:	20001948 	.word	0x20001948
    3388:	0000120d 	.word	0x0000120d

0000338c <adc0_set_compare_value>:
void adc0_set_compare_value(uint8_t value)
{
    338c:	b510      	push	{r4, lr}
    adc_set_window_mode(&adc0_instance, ADC_WINDOW_MODE_ABOVE_LOWER, 90, 255);
    338e:	23ff      	movs	r3, #255	; 0xff
    3390:	225a      	movs	r2, #90	; 0x5a
    3392:	2180      	movs	r1, #128	; 0x80
    3394:	0049      	lsls	r1, r1, #1
    3396:	4802      	ldr	r0, [pc, #8]	; (33a0 <adc0_set_compare_value+0x14>)
    3398:	4c02      	ldr	r4, [pc, #8]	; (33a4 <adc0_set_compare_value+0x18>)
    339a:	47a0      	blx	r4
}
    339c:	bd10      	pop	{r4, pc}
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	20001928 	.word	0x20001928
    33a4:	00000bd9 	.word	0x00000bd9

000033a8 <adc0_change_channel>:
void adc0_change_channel(uint8_t channel)
{
    33a8:	b082      	sub	sp, #8
    const enum adc_positive_input adc_pin[5] = {ADC_POSITIVE_INPUT_PIN7,
    33aa:	2307      	movs	r3, #7
    33ac:	466a      	mov	r2, sp
    33ae:	7013      	strb	r3, [r2, #0]
    33b0:	3b01      	subs	r3, #1
    33b2:	7053      	strb	r3, [r2, #1]
    33b4:	3b01      	subs	r3, #1
    33b6:	7093      	strb	r3, [r2, #2]
    33b8:	3b01      	subs	r3, #1
    33ba:	70d3      	strb	r3, [r2, #3]
    33bc:	3b03      	subs	r3, #3
    33be:	7113      	strb	r3, [r2, #4]
                                                ADC_POSITIVE_INPUT_PIN6,
                                                ADC_POSITIVE_INPUT_PIN5,
                                                ADC_POSITIVE_INPUT_PIN4,
                                                ADC_POSITIVE_INPUT_PIN1,
                                               };
    adc_set_positive_input(&adc0_instance, adc_pin[channel]);
    33c0:	5c11      	ldrb	r1, [r2, r0]
	Adc *const adc_module = module_inst->hw;
    33c2:	4b08      	ldr	r3, [pc, #32]	; (33e4 <adc0_change_channel+0x3c>)
    33c4:	681a      	ldr	r2, [r3, #0]
    33c6:	8c13      	ldrh	r3, [r2, #32]
    33c8:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    33ca:	2b00      	cmp	r3, #0
    33cc:	d1fb      	bne.n	33c6 <adc0_change_channel+0x1e>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    33ce:	8913      	ldrh	r3, [r2, #8]
    33d0:	201f      	movs	r0, #31
    33d2:	4383      	bics	r3, r0
    33d4:	430b      	orrs	r3, r1
	adc_module->INPUTCTRL.reg =
    33d6:	8113      	strh	r3, [r2, #8]
    33d8:	8c13      	ldrh	r3, [r2, #32]
    33da:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    33dc:	2b00      	cmp	r3, #0
    33de:	d1fb      	bne.n	33d8 <adc0_change_channel+0x30>
}
    33e0:	b002      	add	sp, #8
    33e2:	4770      	bx	lr
    33e4:	20001928 	.word	0x20001928

000033e8 <adc0_read_callback>:
{
    33e8:	b510      	push	{r4, lr}
    adc0_read_done_flag = 1;
    33ea:	2201      	movs	r2, #1
    33ec:	4b0d      	ldr	r3, [pc, #52]	; (3424 <adc0_read_callback+0x3c>)
    33ee:	701a      	strb	r2, [r3, #0]
    if(++adc_ch==5)adc_ch=0;
    33f0:	4b0d      	ldr	r3, [pc, #52]	; (3428 <adc0_read_callback+0x40>)
    33f2:	781b      	ldrb	r3, [r3, #0]
    33f4:	3301      	adds	r3, #1
    33f6:	b2db      	uxtb	r3, r3
    33f8:	2b05      	cmp	r3, #5
    33fa:	d00e      	beq.n	341a <adc0_read_callback+0x32>
    33fc:	4a0a      	ldr	r2, [pc, #40]	; (3428 <adc0_read_callback+0x40>)
    33fe:	7013      	strb	r3, [r2, #0]
    adc0_change_channel(adc_ch);
    3400:	4c09      	ldr	r4, [pc, #36]	; (3428 <adc0_read_callback+0x40>)
    3402:	7820      	ldrb	r0, [r4, #0]
    3404:	4b09      	ldr	r3, [pc, #36]	; (342c <adc0_read_callback+0x44>)
    3406:	4798      	blx	r3
    adc_read_buffer_job(&adc0_instance, result+adc_ch, 1);
    3408:	7821      	ldrb	r1, [r4, #0]
    340a:	0049      	lsls	r1, r1, #1
    340c:	4b08      	ldr	r3, [pc, #32]	; (3430 <adc0_read_callback+0x48>)
    340e:	18c9      	adds	r1, r1, r3
    3410:	2201      	movs	r2, #1
    3412:	4808      	ldr	r0, [pc, #32]	; (3434 <adc0_read_callback+0x4c>)
    3414:	4b08      	ldr	r3, [pc, #32]	; (3438 <adc0_read_callback+0x50>)
    3416:	4798      	blx	r3
}
    3418:	bd10      	pop	{r4, pc}
    if(++adc_ch==5)adc_ch=0;
    341a:	2200      	movs	r2, #0
    341c:	4b02      	ldr	r3, [pc, #8]	; (3428 <adc0_read_callback+0x40>)
    341e:	701a      	strb	r2, [r3, #0]
    3420:	e7ee      	b.n	3400 <adc0_read_callback+0x18>
    3422:	46c0      	nop			; (mov r8, r8)
    3424:	20001958 	.word	0x20001958
    3428:	200000c8 	.word	0x200000c8
    342c:	000033a9 	.word	0x000033a9
    3430:	20001948 	.word	0x20001948
    3434:	20001928 	.word	0x20001928
    3438:	0000120d 	.word	0x0000120d

0000343c <i2c_write_complete_callback>:
struct i2c_master_packet rd_packet, wr_packet;
struct i2c_master_module i2c_master_instance;

void i2c_write_complete_callback(struct i2c_master_module *const module)
{
    i2c_write_is_complete = 1;
    343c:	2201      	movs	r2, #1
    343e:	4b01      	ldr	r3, [pc, #4]	; (3444 <i2c_write_complete_callback+0x8>)
    3440:	701a      	strb	r2, [r3, #0]
}
    3442:	4770      	bx	lr
    3444:	200000ca 	.word	0x200000ca

00003448 <i2c_read_complete_callback>:

void i2c_read_complete_callback(struct i2c_master_module *const module)
{
    i2c_read_is_complete = 1;
    3448:	2201      	movs	r2, #1
    344a:	4b01      	ldr	r3, [pc, #4]	; (3450 <i2c_read_complete_callback+0x8>)
    344c:	701a      	strb	r2, [r3, #0]
}
    344e:	4770      	bx	lr
    3450:	200000c9 	.word	0x200000c9

00003454 <configure_i2c_callbacks>:

void configure_i2c_callbacks(void)
{
    3454:	b570      	push	{r4, r5, r6, lr}
    /* Register callback function. */

    i2c_master_register_callback(&i2c_master_instance, i2c_write_complete_callback, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    3456:	4c09      	ldr	r4, [pc, #36]	; (347c <configure_i2c_callbacks+0x28>)
    3458:	2200      	movs	r2, #0
    345a:	4909      	ldr	r1, [pc, #36]	; (3480 <configure_i2c_callbacks+0x2c>)
    345c:	0020      	movs	r0, r4
    345e:	4d09      	ldr	r5, [pc, #36]	; (3484 <configure_i2c_callbacks+0x30>)
    3460:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    3462:	7e63      	ldrb	r3, [r4, #25]
    3464:	2201      	movs	r2, #1
    3466:	4313      	orrs	r3, r2
    3468:	7663      	strb	r3, [r4, #25]
    i2c_master_enable_callback(&i2c_master_instance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);

    i2c_master_register_callback(&i2c_master_instance, i2c_read_complete_callback, I2C_MASTER_CALLBACK_READ_COMPLETE);
    346a:	4907      	ldr	r1, [pc, #28]	; (3488 <configure_i2c_callbacks+0x34>)
    346c:	0020      	movs	r0, r4
    346e:	47a8      	blx	r5
    3470:	7e63      	ldrb	r3, [r4, #25]
    3472:	2202      	movs	r2, #2
    3474:	4313      	orrs	r3, r2
    3476:	7663      	strb	r3, [r4, #25]
    i2c_master_enable_callback(&i2c_master_instance, I2C_MASTER_CALLBACK_READ_COMPLETE);
}
    3478:	bd70      	pop	{r4, r5, r6, pc}
    347a:	46c0      	nop			; (mov r8, r8)
    347c:	200019e8 	.word	0x200019e8
    3480:	0000343d 	.word	0x0000343d
    3484:	000018c9 	.word	0x000018c9
    3488:	00003449 	.word	0x00003449

0000348c <configure_i2c>:

void configure_i2c(void)
{
    348c:	b530      	push	{r4, r5, lr}
    348e:	b08f      	sub	sp, #60	; 0x3c
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    3490:	ab01      	add	r3, sp, #4
    3492:	4a26      	ldr	r2, [pc, #152]	; (352c <configure_i2c+0xa0>)
    3494:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    3496:	2200      	movs	r2, #0
    3498:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby   = false;
    349a:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    349c:	2180      	movs	r1, #128	; 0x80
    349e:	0389      	lsls	r1, r1, #14
    34a0:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    34a2:	2101      	movs	r1, #1
    34a4:	4249      	negs	r1, r1
    34a6:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    34a8:	3125      	adds	r1, #37	; 0x25
    34aa:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    34ac:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    34ae:	3108      	adds	r1, #8
    34b0:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    34b2:	3101      	adds	r1, #1
    34b4:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    34b6:	3101      	adds	r1, #1
    34b8:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    34ba:	32d7      	adds	r2, #215	; 0xd7
    34bc:	861a      	strh	r2, [r3, #48]	; 0x30
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);

    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout	= 10000;
    34be:	4a1c      	ldr	r2, [pc, #112]	; (3530 <configure_i2c+0xa4>)
    34c0:	82da      	strh	r2, [r3, #22]
    config_i2c_master.pinmux_pad0		= I2C_SDA_PINMUX;
    34c2:	4a1c      	ldr	r2, [pc, #112]	; (3534 <configure_i2c+0xa8>)
    34c4:	9208      	str	r2, [sp, #32]
    config_i2c_master.pinmux_pad1		= I2C_SCL_PINMUX;
    34c6:	4a1c      	ldr	r2, [pc, #112]	; (3538 <configure_i2c+0xac>)
    34c8:	9209      	str	r2, [sp, #36]	; 0x24
    config_i2c_master.generator_source	= GCLK_GENERATOR_2;
    34ca:	2202      	movs	r2, #2
    34cc:	731a      	strb	r2, [r3, #12]
    config_i2c_master.start_hold_time	= I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    config_i2c_master.baud_rate			= I2C_BAUDRATE;
    34ce:	23c8      	movs	r3, #200	; 0xc8
    34d0:	005b      	lsls	r3, r3, #1
    34d2:	9301      	str	r3, [sp, #4]
    /* Initialize and enable device with config */
    while(i2c_master_init(&i2c_master_instance, I2C_MODULE, &config_i2c_master) != STATUS_OK);
    34d4:	4d19      	ldr	r5, [pc, #100]	; (353c <configure_i2c+0xb0>)
    34d6:	4c1a      	ldr	r4, [pc, #104]	; (3540 <configure_i2c+0xb4>)
    34d8:	aa01      	add	r2, sp, #4
    34da:	491a      	ldr	r1, [pc, #104]	; (3544 <configure_i2c+0xb8>)
    34dc:	0028      	movs	r0, r5
    34de:	47a0      	blx	r4
    34e0:	2800      	cmp	r0, #0
    34e2:	d1f9      	bne.n	34d8 <configure_i2c+0x4c>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    34e4:	4b15      	ldr	r3, [pc, #84]	; (353c <configure_i2c+0xb0>)
    34e6:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    34e8:	2207      	movs	r2, #7
    34ea:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    34ec:	421a      	tst	r2, r3
    34ee:	d1fc      	bne.n	34ea <configure_i2c+0x5e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    34f0:	6823      	ldr	r3, [r4, #0]
    34f2:	2202      	movs	r2, #2
    34f4:	4313      	orrs	r3, r2
    34f6:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    34f8:	4d10      	ldr	r5, [pc, #64]	; (353c <configure_i2c+0xb0>)
    34fa:	6828      	ldr	r0, [r5, #0]
    34fc:	4b12      	ldr	r3, [pc, #72]	; (3548 <configure_i2c+0xbc>)
    34fe:	4798      	blx	r3
    3500:	231f      	movs	r3, #31
    3502:	4018      	ands	r0, r3
    3504:	3b1e      	subs	r3, #30
    3506:	4083      	lsls	r3, r0
    3508:	4a10      	ldr	r2, [pc, #64]	; (354c <configure_i2c+0xc0>)
    350a:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    350c:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    350e:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    3510:	2110      	movs	r1, #16
    3512:	8b62      	ldrh	r2, [r4, #26]
    3514:	420a      	tst	r2, r1
    3516:	d104      	bne.n	3522 <configure_i2c+0x96>
		timeout_counter++;
    3518:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    351a:	4283      	cmp	r3, r0
    351c:	d3f9      	bcc.n	3512 <configure_i2c+0x86>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    351e:	2310      	movs	r3, #16
    3520:	8363      	strh	r3, [r4, #26]

    i2c_master_enable(&i2c_master_instance);
    configure_i2c_callbacks();
    3522:	4b0b      	ldr	r3, [pc, #44]	; (3550 <configure_i2c+0xc4>)
    3524:	4798      	blx	r3
}
    3526:	b00f      	add	sp, #60	; 0x3c
    3528:	bd30      	pop	{r4, r5, pc}
    352a:	46c0      	nop			; (mov r8, r8)
    352c:	00000d48 	.word	0x00000d48
    3530:	00002710 	.word	0x00002710
    3534:	00160002 	.word	0x00160002
    3538:	00170002 	.word	0x00170002
    353c:	200019e8 	.word	0x200019e8
    3540:	0000134d 	.word	0x0000134d
    3544:	42001000 	.word	0x42001000
    3548:	000030b5 	.word	0x000030b5
    354c:	e000e100 	.word	0xe000e100
    3550:	00003455 	.word	0x00003455

00003554 <TWI_write>:
void TWI_write(uint8_t address, uint8_t data_length, uint8_t *p_data)
{
    3554:	b570      	push	{r4, r5, r6, lr}
    wr_packet.address = address;
    3556:	4b14      	ldr	r3, [pc, #80]	; (35a8 <TWI_write+0x54>)
    3558:	8018      	strh	r0, [r3, #0]
    wr_packet.data_length = data_length;
    355a:	8059      	strh	r1, [r3, #2]
    wr_packet.data = p_data;
    355c:	605a      	str	r2, [r3, #4]
    i2c_write_is_complete = 0;
    355e:	2200      	movs	r2, #0
    3560:	4b12      	ldr	r3, [pc, #72]	; (35ac <TWI_write+0x58>)
    3562:	701a      	strb	r2, [r3, #0]
    TWI_counter = 5;
    3564:	3205      	adds	r2, #5
    3566:	4b12      	ldr	r3, [pc, #72]	; (35b0 <TWI_write+0x5c>)
    3568:	701a      	strb	r2, [r3, #0]
    while(i2c_master_write_packet_job(&i2c_master_instance, &wr_packet)!=STATUS_OK && TWI_counter);
    356a:	4d0f      	ldr	r5, [pc, #60]	; (35a8 <TWI_write+0x54>)
    356c:	4c11      	ldr	r4, [pc, #68]	; (35b4 <TWI_write+0x60>)
    356e:	4e12      	ldr	r6, [pc, #72]	; (35b8 <TWI_write+0x64>)
    3570:	0029      	movs	r1, r5
    3572:	0020      	movs	r0, r4
    3574:	47b0      	blx	r6
    3576:	2800      	cmp	r0, #0
    3578:	d003      	beq.n	3582 <TWI_write+0x2e>
    357a:	4b0d      	ldr	r3, [pc, #52]	; (35b0 <TWI_write+0x5c>)
    357c:	781b      	ldrb	r3, [r3, #0]
    357e:	2b00      	cmp	r3, #0
    3580:	d1f6      	bne.n	3570 <TWI_write+0x1c>
    while(!i2c_write_is_complete && TWI_counter);
    3582:	4a0a      	ldr	r2, [pc, #40]	; (35ac <TWI_write+0x58>)
    3584:	490a      	ldr	r1, [pc, #40]	; (35b0 <TWI_write+0x5c>)
    3586:	7813      	ldrb	r3, [r2, #0]
    3588:	2b00      	cmp	r3, #0
    358a:	d102      	bne.n	3592 <TWI_write+0x3e>
    358c:	780b      	ldrb	r3, [r1, #0]
    358e:	2b00      	cmp	r3, #0
    3590:	d1f9      	bne.n	3586 <TWI_write+0x32>
    if(!TWI_counter) {
    3592:	4b07      	ldr	r3, [pc, #28]	; (35b0 <TWI_write+0x5c>)
    3594:	781b      	ldrb	r3, [r3, #0]
    3596:	2b00      	cmp	r3, #0
    3598:	d105      	bne.n	35a6 <TWI_write+0x52>
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Set buffer to 0 */
	module->buffer_remaining = 0;
    359a:	4b06      	ldr	r3, [pc, #24]	; (35b4 <TWI_write+0x60>)
    359c:	2200      	movs	r2, #0
    359e:	839a      	strh	r2, [r3, #28]
	/* Update status */
	module->status = STATUS_ABORTED;
    35a0:	2104      	movs	r1, #4
    35a2:	3225      	adds	r2, #37	; 0x25
    35a4:	5499      	strb	r1, [r3, r2]
        i2c_master_cancel_job(&i2c_master_instance);
    }
}
    35a6:	bd70      	pop	{r4, r5, r6, pc}
    35a8:	200019dc 	.word	0x200019dc
    35ac:	200000ca 	.word	0x200000ca
    35b0:	20000014 	.word	0x20000014
    35b4:	200019e8 	.word	0x200019e8
    35b8:	00001905 	.word	0x00001905

000035bc <TWI_read>:

enum status_code TWI_read(uint16_t send_address, uint8_t *send_data, uint16_t recieveBytes)
{
    35bc:	b570      	push	{r4, r5, r6, lr}
    TWI_counter = 5;//set timeout
    35be:	2405      	movs	r4, #5
    35c0:	4b29      	ldr	r3, [pc, #164]	; (3668 <TWI_read+0xac>)
    35c2:	701c      	strb	r4, [r3, #0]

    wr_packet.address = send_address;
    35c4:	4b29      	ldr	r3, [pc, #164]	; (366c <TWI_read+0xb0>)
    35c6:	8018      	strh	r0, [r3, #0]
    wr_packet.data = send_data;
    35c8:	6059      	str	r1, [r3, #4]
    wr_packet.data_length = 1;
    35ca:	2101      	movs	r1, #1
    35cc:	8059      	strh	r1, [r3, #2]

    rd_packet.address = send_address;
    35ce:	4b28      	ldr	r3, [pc, #160]	; (3670 <TWI_read+0xb4>)
    35d0:	8018      	strh	r0, [r3, #0]
    rd_packet.data_length = recieveBytes;
    35d2:	805a      	strh	r2, [r3, #2]
    rd_packet.data = i2c_rx_buffer;
    35d4:	4a27      	ldr	r2, [pc, #156]	; (3674 <TWI_read+0xb8>)
    35d6:	605a      	str	r2, [r3, #4]

    /* Clear flags */
    i2c_read_is_complete = 0;
    35d8:	2300      	movs	r3, #0
    35da:	4a27      	ldr	r2, [pc, #156]	; (3678 <TWI_read+0xbc>)
    35dc:	7013      	strb	r3, [r2, #0]
    i2c_write_is_complete = 0;
    35de:	4a27      	ldr	r2, [pc, #156]	; (367c <TWI_read+0xc0>)
    35e0:	7013      	strb	r3, [r2, #0]

    while(i2c_master_write_packet_job(&i2c_master_instance, &wr_packet) != STATUS_OK && TWI_counter);
    35e2:	4d22      	ldr	r5, [pc, #136]	; (366c <TWI_read+0xb0>)
    35e4:	4c26      	ldr	r4, [pc, #152]	; (3680 <TWI_read+0xc4>)
    35e6:	4e27      	ldr	r6, [pc, #156]	; (3684 <TWI_read+0xc8>)
    35e8:	0029      	movs	r1, r5
    35ea:	0020      	movs	r0, r4
    35ec:	47b0      	blx	r6
    35ee:	2800      	cmp	r0, #0
    35f0:	d003      	beq.n	35fa <TWI_read+0x3e>
    35f2:	4b1d      	ldr	r3, [pc, #116]	; (3668 <TWI_read+0xac>)
    35f4:	781b      	ldrb	r3, [r3, #0]
    35f6:	2b00      	cmp	r3, #0
    35f8:	d1f6      	bne.n	35e8 <TWI_read+0x2c>
    while(!i2c_write_is_complete && TWI_counter);
    35fa:	4a20      	ldr	r2, [pc, #128]	; (367c <TWI_read+0xc0>)
    35fc:	491a      	ldr	r1, [pc, #104]	; (3668 <TWI_read+0xac>)
    35fe:	7813      	ldrb	r3, [r2, #0]
    3600:	2b00      	cmp	r3, #0
    3602:	d102      	bne.n	360a <TWI_read+0x4e>
    3604:	780b      	ldrb	r3, [r1, #0]
    3606:	2b00      	cmp	r3, #0
    3608:	d1f9      	bne.n	35fe <TWI_read+0x42>
    if(!TWI_counter) {
    360a:	4b17      	ldr	r3, [pc, #92]	; (3668 <TWI_read+0xac>)
    360c:	781b      	ldrb	r3, [r3, #0]
    360e:	2b00      	cmp	r3, #0
    3610:	d107      	bne.n	3622 <TWI_read+0x66>
	module->buffer_remaining = 0;
    3612:	4b1b      	ldr	r3, [pc, #108]	; (3680 <TWI_read+0xc4>)
    3614:	2200      	movs	r2, #0
    3616:	839a      	strh	r2, [r3, #28]
	module->status = STATUS_ABORTED;
    3618:	2104      	movs	r1, #4
    361a:	3225      	adds	r2, #37	; 0x25
    361c:	5499      	strb	r1, [r3, r2]
        i2c_master_cancel_job(&i2c_master_instance);
        return STATUS_ERR_TIMEOUT;
    361e:	2012      	movs	r0, #18
        i2c_master_cancel_job(&i2c_master_instance);
        return STATUS_ERR_TIMEOUT;
    }
    else
        return STATUS_OK;
}
    3620:	bd70      	pop	{r4, r5, r6, pc}
    while(i2c_master_read_packet_job(&i2c_master_instance, &rd_packet) != STATUS_OK && TWI_counter);
    3622:	4d13      	ldr	r5, [pc, #76]	; (3670 <TWI_read+0xb4>)
    3624:	4c16      	ldr	r4, [pc, #88]	; (3680 <TWI_read+0xc4>)
    3626:	4e18      	ldr	r6, [pc, #96]	; (3688 <TWI_read+0xcc>)
    3628:	0029      	movs	r1, r5
    362a:	0020      	movs	r0, r4
    362c:	47b0      	blx	r6
    362e:	2800      	cmp	r0, #0
    3630:	d003      	beq.n	363a <TWI_read+0x7e>
    3632:	4b0d      	ldr	r3, [pc, #52]	; (3668 <TWI_read+0xac>)
    3634:	781b      	ldrb	r3, [r3, #0]
    3636:	2b00      	cmp	r3, #0
    3638:	d1f6      	bne.n	3628 <TWI_read+0x6c>
    while(!i2c_read_is_complete && TWI_counter);
    363a:	4a0f      	ldr	r2, [pc, #60]	; (3678 <TWI_read+0xbc>)
    363c:	490a      	ldr	r1, [pc, #40]	; (3668 <TWI_read+0xac>)
    363e:	7813      	ldrb	r3, [r2, #0]
    3640:	2b00      	cmp	r3, #0
    3642:	d102      	bne.n	364a <TWI_read+0x8e>
    3644:	780b      	ldrb	r3, [r1, #0]
    3646:	2b00      	cmp	r3, #0
    3648:	d1f9      	bne.n	363e <TWI_read+0x82>
    if(!TWI_counter) {
    364a:	4b07      	ldr	r3, [pc, #28]	; (3668 <TWI_read+0xac>)
    364c:	781b      	ldrb	r3, [r3, #0]
    364e:	2b00      	cmp	r3, #0
    3650:	d107      	bne.n	3662 <TWI_read+0xa6>
	module->buffer_remaining = 0;
    3652:	4b0b      	ldr	r3, [pc, #44]	; (3680 <TWI_read+0xc4>)
    3654:	2200      	movs	r2, #0
    3656:	839a      	strh	r2, [r3, #28]
	module->status = STATUS_ABORTED;
    3658:	2104      	movs	r1, #4
    365a:	3225      	adds	r2, #37	; 0x25
    365c:	5499      	strb	r1, [r3, r2]
        return STATUS_ERR_TIMEOUT;
    365e:	2012      	movs	r0, #18
    3660:	e7de      	b.n	3620 <TWI_read+0x64>
        return STATUS_OK;
    3662:	2000      	movs	r0, #0
    3664:	e7dc      	b.n	3620 <TWI_read+0x64>
    3666:	46c0      	nop			; (mov r8, r8)
    3668:	20000014 	.word	0x20000014
    366c:	200019dc 	.word	0x200019dc
    3670:	20001a10 	.word	0x20001a10
    3674:	2000199c 	.word	0x2000199c
    3678:	200000c9 	.word	0x200000c9
    367c:	200000ca 	.word	0x200000ca
    3680:	200019e8 	.word	0x200019e8
    3684:	00001905 	.word	0x00001905
    3688:	000018e1 	.word	0x000018e1

0000368c <I2C_get_rx_Buffer>:

unsigned char *I2C_get_rx_Buffer(void)
{
    //return pointer to i2c data
    return i2c_rx_buffer;
    368c:	4800      	ldr	r0, [pc, #0]	; (3690 <I2C_get_rx_Buffer+0x4>)
    368e:	4770      	bx	lr
    3690:	2000199c 	.word	0x2000199c

00003694 <menu_add_item>:
#include "config.h"
#include "my_menu.h"
//#include "functions.h"


void menu_add_item(MENU *m, menu_item item) {
    3694:	b084      	sub	sp, #16
    3696:	b570      	push	{r4, r5, r6, lr}
    3698:	9105      	str	r1, [sp, #20]
    369a:	9206      	str	r2, [sp, #24]
    369c:	9307      	str	r3, [sp, #28]
    if(m->num_of_items == MENU_MAX_ITEMS)
    369e:	2399      	movs	r3, #153	; 0x99
    36a0:	009b      	lsls	r3, r3, #2
    36a2:	5cc1      	ldrb	r1, [r0, r3]
    36a4:	2911      	cmp	r1, #17
    36a6:	d013      	beq.n	36d0 <menu_add_item+0x3c>
        return;
    m->items[m->num_of_items] = item;
    36a8:	00cb      	lsls	r3, r1, #3
    36aa:	185b      	adds	r3, r3, r1
    36ac:	009b      	lsls	r3, r3, #2
    36ae:	aa05      	add	r2, sp, #20
    36b0:	18c3      	adds	r3, r0, r3
    36b2:	ca70      	ldmia	r2!, {r4, r5, r6}
    36b4:	c370      	stmia	r3!, {r4, r5, r6}
    36b6:	ca70      	ldmia	r2!, {r4, r5, r6}
    36b8:	c370      	stmia	r3!, {r4, r5, r6}
    36ba:	ca70      	ldmia	r2!, {r4, r5, r6}
    36bc:	c370      	stmia	r3!, {r4, r5, r6}
    m->num_of_items++;
    36be:	3101      	adds	r1, #1
    36c0:	2399      	movs	r3, #153	; 0x99
    36c2:	009b      	lsls	r3, r3, #2
    36c4:	54c1      	strb	r1, [r0, r3]
    m->curr_pos = 0;
    36c6:	2300      	movs	r3, #0
    36c8:	4a03      	ldr	r2, [pc, #12]	; (36d8 <menu_add_item+0x44>)
    36ca:	5483      	strb	r3, [r0, r2]
    m->curr_window_pos = 0;
    36cc:	4a03      	ldr	r2, [pc, #12]	; (36dc <menu_add_item+0x48>)
    36ce:	5483      	strb	r3, [r0, r2]
}
    36d0:	bc70      	pop	{r4, r5, r6}
    36d2:	bc08      	pop	{r3}
    36d4:	b004      	add	sp, #16
    36d6:	4718      	bx	r3
    36d8:	00000265 	.word	0x00000265
    36dc:	00000266 	.word	0x00000266

000036e0 <increment_menu_position>:

void increment_menu_position(MENU *m) {
    if(m->curr_pos < m->num_of_items - 1)
    36e0:	4b0a      	ldr	r3, [pc, #40]	; (370c <increment_menu_position+0x2c>)
    36e2:	5cc2      	ldrb	r2, [r0, r3]
    36e4:	3b01      	subs	r3, #1
    36e6:	5cc3      	ldrb	r3, [r0, r3]
    36e8:	3b01      	subs	r3, #1
    36ea:	429a      	cmp	r2, r3
    36ec:	da02      	bge.n	36f4 <increment_menu_position+0x14>
        m->curr_pos++;
    36ee:	3201      	adds	r2, #1
    36f0:	4b06      	ldr	r3, [pc, #24]	; (370c <increment_menu_position+0x2c>)
    36f2:	54c2      	strb	r2, [r0, r3]
    if((m->curr_pos - m->curr_window_pos) == 4)
    36f4:	4b06      	ldr	r3, [pc, #24]	; (3710 <increment_menu_position+0x30>)
    36f6:	5cc2      	ldrb	r2, [r0, r3]
    36f8:	4b04      	ldr	r3, [pc, #16]	; (370c <increment_menu_position+0x2c>)
    36fa:	5cc3      	ldrb	r3, [r0, r3]
    36fc:	1a9b      	subs	r3, r3, r2
    36fe:	2b04      	cmp	r3, #4
    3700:	d000      	beq.n	3704 <increment_menu_position+0x24>
        m->curr_window_pos++;
}
    3702:	4770      	bx	lr
        m->curr_window_pos++;
    3704:	3201      	adds	r2, #1
    3706:	4b02      	ldr	r3, [pc, #8]	; (3710 <increment_menu_position+0x30>)
    3708:	54c2      	strb	r2, [r0, r3]
}
    370a:	e7fa      	b.n	3702 <increment_menu_position+0x22>
    370c:	00000265 	.word	0x00000265
    3710:	00000266 	.word	0x00000266

00003714 <decrement_menu_position>:

void decrement_menu_position(MENU *m) {
    if(m->curr_pos > 0)
    3714:	4b08      	ldr	r3, [pc, #32]	; (3738 <decrement_menu_position+0x24>)
    3716:	5cc3      	ldrb	r3, [r0, r3]
    3718:	2b00      	cmp	r3, #0
    371a:	d002      	beq.n	3722 <decrement_menu_position+0xe>
        m->curr_pos--;
    371c:	3b01      	subs	r3, #1
    371e:	4a06      	ldr	r2, [pc, #24]	; (3738 <decrement_menu_position+0x24>)
    3720:	5483      	strb	r3, [r0, r2]
    if(m->curr_pos < m->curr_window_pos)
    3722:	4b06      	ldr	r3, [pc, #24]	; (373c <decrement_menu_position+0x28>)
    3724:	5cc3      	ldrb	r3, [r0, r3]
    3726:	4a04      	ldr	r2, [pc, #16]	; (3738 <decrement_menu_position+0x24>)
    3728:	5c82      	ldrb	r2, [r0, r2]
    372a:	429a      	cmp	r2, r3
    372c:	d202      	bcs.n	3734 <decrement_menu_position+0x20>
        m->curr_window_pos--;
    372e:	3b01      	subs	r3, #1
    3730:	4a02      	ldr	r2, [pc, #8]	; (373c <decrement_menu_position+0x28>)
    3732:	5483      	strb	r3, [r0, r2]
}
    3734:	4770      	bx	lr
    3736:	46c0      	nop			; (mov r8, r8)
    3738:	00000265 	.word	0x00000265
    373c:	00000266 	.word	0x00000266

00003740 <get_p_to_item>:
uint8_t get_menu_position(MENU *m) {
    return m->curr_pos;
}

menu_item *get_p_to_item(MENU *m) {
    return &(m->items[m->curr_pos]);
    3740:	4b03      	ldr	r3, [pc, #12]	; (3750 <get_p_to_item+0x10>)
    3742:	5cc2      	ldrb	r2, [r0, r3]
    3744:	00d3      	lsls	r3, r2, #3
    3746:	189b      	adds	r3, r3, r2
    3748:	009b      	lsls	r3, r3, #2
    374a:	18c0      	adds	r0, r0, r3
}
    374c:	4770      	bx	lr
    374e:	46c0      	nop			; (mov r8, r8)
    3750:	00000265 	.word	0x00000265

00003754 <ftoe>:

void ftoe(char *s, float val) {
    3754:	b570      	push	{r4, r5, r6, lr}
    3756:	0006      	movs	r6, r0
    3758:	1c0d      	adds	r5, r1, #0
    uint32_t whole = (int) val;
    375a:	1c08      	adds	r0, r1, #0
    375c:	4b0a      	ldr	r3, [pc, #40]	; (3788 <ftoe+0x34>)
    375e:	4798      	blx	r3
    3760:	0004      	movs	r4, r0
    float fract = val - whole;
    3762:	4b0a      	ldr	r3, [pc, #40]	; (378c <ftoe+0x38>)
    3764:	4798      	blx	r3
    3766:	1c01      	adds	r1, r0, #0
    3768:	1c28      	adds	r0, r5, #0
    376a:	4b09      	ldr	r3, [pc, #36]	; (3790 <ftoe+0x3c>)
    376c:	4798      	blx	r3
    uint32_t whole_fract = fract * 1000;
    376e:	4909      	ldr	r1, [pc, #36]	; (3794 <ftoe+0x40>)
    3770:	4b09      	ldr	r3, [pc, #36]	; (3798 <ftoe+0x44>)
    3772:	4798      	blx	r3
    3774:	4b09      	ldr	r3, [pc, #36]	; (379c <ftoe+0x48>)
    3776:	4798      	blx	r3
    3778:	0003      	movs	r3, r0
    //ne dela v primeru 4.05
    sprintf(s, "%3lu.%03lu", whole, whole_fract);
    377a:	0022      	movs	r2, r4
    377c:	4908      	ldr	r1, [pc, #32]	; (37a0 <ftoe+0x4c>)
    377e:	0030      	movs	r0, r6
    3780:	4c08      	ldr	r4, [pc, #32]	; (37a4 <ftoe+0x50>)
    3782:	47a0      	blx	r4
}
    3784:	bd70      	pop	{r4, r5, r6, pc}
    3786:	46c0      	nop			; (mov r8, r8)
    3788:	000060ad 	.word	0x000060ad
    378c:	0000618d 	.word	0x0000618d
    3790:	00005d75 	.word	0x00005d75
    3794:	447a0000 	.word	0x447a0000
    3798:	00005b35 	.word	0x00005b35
    379c:	00005835 	.word	0x00005835
    37a0:	000087d8 	.word	0x000087d8
    37a4:	00007e95 	.word	0x00007e95

000037a8 <menu_get_item_string>:

void menu_get_item_string(MENU *m, char *str, uint8_t n) {
    37a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    37aa:	b089      	sub	sp, #36	; 0x24
    37ac:	0007      	movs	r7, r0
    37ae:	000d      	movs	r5, r1
    37b0:	0016      	movs	r6, r2
    if(n >= m->num_of_items)
    37b2:	2399      	movs	r3, #153	; 0x99
    37b4:	009b      	lsls	r3, r3, #2
    37b6:	5cc3      	ldrb	r3, [r0, r3]
    37b8:	4293      	cmp	r3, r2
    37ba:	d925      	bls.n	3808 <menu_get_item_string+0x60>
        return;
    menu_item *tmp = m->items + n;
    37bc:	00d4      	lsls	r4, r2, #3
    37be:	18a4      	adds	r4, r4, r2
    37c0:	00a4      	lsls	r4, r4, #2
    37c2:	1904      	adds	r4, r0, r4
    switch(tmp->type) {
    37c4:	7823      	ldrb	r3, [r4, #0]
    37c6:	2b06      	cmp	r3, #6
    37c8:	d845      	bhi.n	3856 <menu_get_item_string+0xae>
    37ca:	009b      	lsls	r3, r3, #2
    37cc:	4a2b      	ldr	r2, [pc, #172]	; (387c <menu_get_item_string+0xd4>)
    37ce:	58d3      	ldr	r3, [r2, r3]
    37d0:	469f      	mov	pc, r3
        case  TYPE_UINT8:
            sprintf(tmp->val_str, "%7d", *(uint8_t *)tmp->variable);
    37d2:	6923      	ldr	r3, [r4, #16]
    37d4:	781a      	ldrb	r2, [r3, #0]
    37d6:	0020      	movs	r0, r4
    37d8:	3014      	adds	r0, #20
    37da:	4929      	ldr	r1, [pc, #164]	; (3880 <menu_get_item_string+0xd8>)
    37dc:	4b29      	ldr	r3, [pc, #164]	; (3884 <menu_get_item_string+0xdc>)
    37de:	4798      	blx	r3
            break;
        default:
            sprintf(tmp->val_str, "%7s", "ERROR99");
            break;
    }
    *(tmp->val_str + 7) = 0;
    37e0:	2300      	movs	r3, #0
    37e2:	76e3      	strb	r3, [r4, #27]
    char test[21];
    if(n == m->curr_pos) {
    37e4:	4b28      	ldr	r3, [pc, #160]	; (3888 <menu_get_item_string+0xe0>)
    37e6:	5cfb      	ldrb	r3, [r7, r3]
    37e8:	42b3      	cmp	r3, r6
    37ea:	d03b      	beq.n	3864 <menu_get_item_string+0xbc>
        sprintf(test, "%c%-9s%6s%4s", '~', tmp->name, tmp->val_str, tmp->units);
    }
    else
        sprintf(test, "%-9s%7s%4s", tmp->name, tmp->val_str, tmp->units);
    37ec:	0023      	movs	r3, r4
    37ee:	3314      	adds	r3, #20
    37f0:	1c62      	adds	r2, r4, #1
    37f2:	340b      	adds	r4, #11
    37f4:	9400      	str	r4, [sp, #0]
    37f6:	4925      	ldr	r1, [pc, #148]	; (388c <menu_get_item_string+0xe4>)
    37f8:	a802      	add	r0, sp, #8
    37fa:	4c22      	ldr	r4, [pc, #136]	; (3884 <menu_get_item_string+0xdc>)
    37fc:	47a0      	blx	r4
    memcpy(str, test, 20);
    37fe:	2214      	movs	r2, #20
    3800:	a902      	add	r1, sp, #8
    3802:	0028      	movs	r0, r5
    3804:	4b22      	ldr	r3, [pc, #136]	; (3890 <menu_get_item_string+0xe8>)
    3806:	4798      	blx	r3

}
    3808:	b009      	add	sp, #36	; 0x24
    380a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            sprintf(tmp->val_str, "%7d", *(uint16_t *)tmp->variable);
    380c:	6923      	ldr	r3, [r4, #16]
    380e:	881a      	ldrh	r2, [r3, #0]
    3810:	0020      	movs	r0, r4
    3812:	3014      	adds	r0, #20
    3814:	491a      	ldr	r1, [pc, #104]	; (3880 <menu_get_item_string+0xd8>)
    3816:	4b1b      	ldr	r3, [pc, #108]	; (3884 <menu_get_item_string+0xdc>)
    3818:	4798      	blx	r3
            break;
    381a:	e7e1      	b.n	37e0 <menu_get_item_string+0x38>
            sprintf(tmp->val_str, "%7lu", *(uint32_t *)tmp->variable);
    381c:	6923      	ldr	r3, [r4, #16]
    381e:	681a      	ldr	r2, [r3, #0]
    3820:	0020      	movs	r0, r4
    3822:	3014      	adds	r0, #20
    3824:	491b      	ldr	r1, [pc, #108]	; (3894 <menu_get_item_string+0xec>)
    3826:	4b17      	ldr	r3, [pc, #92]	; (3884 <menu_get_item_string+0xdc>)
    3828:	4798      	blx	r3
            break;
    382a:	e7d9      	b.n	37e0 <menu_get_item_string+0x38>
            sprintf(tmp->val_str, "%7s", "");
    382c:	0020      	movs	r0, r4
    382e:	3014      	adds	r0, #20
    3830:	4a19      	ldr	r2, [pc, #100]	; (3898 <menu_get_item_string+0xf0>)
    3832:	491a      	ldr	r1, [pc, #104]	; (389c <menu_get_item_string+0xf4>)
    3834:	4b13      	ldr	r3, [pc, #76]	; (3884 <menu_get_item_string+0xdc>)
    3836:	4798      	blx	r3
            break;
    3838:	e7d2      	b.n	37e0 <menu_get_item_string+0x38>
            ftoe(tmp->val_str, *(float *)tmp->variable);
    383a:	6923      	ldr	r3, [r4, #16]
    383c:	6819      	ldr	r1, [r3, #0]
    383e:	0020      	movs	r0, r4
    3840:	3014      	adds	r0, #20
    3842:	4b17      	ldr	r3, [pc, #92]	; (38a0 <menu_get_item_string+0xf8>)
    3844:	4798      	blx	r3
            break;
    3846:	e7cb      	b.n	37e0 <menu_get_item_string+0x38>
            sprintf(tmp->val_str, "%7s", "");
    3848:	0020      	movs	r0, r4
    384a:	3014      	adds	r0, #20
    384c:	4a12      	ldr	r2, [pc, #72]	; (3898 <menu_get_item_string+0xf0>)
    384e:	4913      	ldr	r1, [pc, #76]	; (389c <menu_get_item_string+0xf4>)
    3850:	4b0c      	ldr	r3, [pc, #48]	; (3884 <menu_get_item_string+0xdc>)
    3852:	4798      	blx	r3
            break;
    3854:	e7c4      	b.n	37e0 <menu_get_item_string+0x38>
            sprintf(tmp->val_str, "%7s", "ERROR99");
    3856:	0020      	movs	r0, r4
    3858:	3014      	adds	r0, #20
    385a:	4a12      	ldr	r2, [pc, #72]	; (38a4 <menu_get_item_string+0xfc>)
    385c:	490f      	ldr	r1, [pc, #60]	; (389c <menu_get_item_string+0xf4>)
    385e:	4b09      	ldr	r3, [pc, #36]	; (3884 <menu_get_item_string+0xdc>)
    3860:	4798      	blx	r3
            break;
    3862:	e7bd      	b.n	37e0 <menu_get_item_string+0x38>
        sprintf(test, "%c%-9s%6s%4s", '~', tmp->name, tmp->val_str, tmp->units);
    3864:	1c63      	adds	r3, r4, #1
    3866:	0022      	movs	r2, r4
    3868:	320b      	adds	r2, #11
    386a:	9201      	str	r2, [sp, #4]
    386c:	3414      	adds	r4, #20
    386e:	9400      	str	r4, [sp, #0]
    3870:	227e      	movs	r2, #126	; 0x7e
    3872:	490d      	ldr	r1, [pc, #52]	; (38a8 <menu_get_item_string+0x100>)
    3874:	a802      	add	r0, sp, #8
    3876:	4c03      	ldr	r4, [pc, #12]	; (3884 <menu_get_item_string+0xdc>)
    3878:	47a0      	blx	r4
    387a:	e7c0      	b.n	37fe <menu_get_item_string+0x56>
    387c:	000087bc 	.word	0x000087bc
    3880:	00008800 	.word	0x00008800
    3884:	00007e95 	.word	0x00007e95
    3888:	00000265 	.word	0x00000265
    388c:	00008828 	.word	0x00008828
    3890:	00007d0d 	.word	0x00007d0d
    3894:	00008804 	.word	0x00008804
    3898:	000087f4 	.word	0x000087f4
    389c:	0000880c 	.word	0x0000880c
    38a0:	00003755 	.word	0x00003755
    38a4:	00008810 	.word	0x00008810
    38a8:	00008818 	.word	0x00008818

000038ac <menu_whole_solo_string>:

void menu_whole_solo_string(MENU *m, char *s) {
    38ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ae:	46de      	mov	lr, fp
    38b0:	4657      	mov	r7, sl
    38b2:	464e      	mov	r6, r9
    38b4:	4645      	mov	r5, r8
    38b6:	b5e0      	push	{r5, r6, r7, lr}
    38b8:	b08b      	sub	sp, #44	; 0x2c
    38ba:	0007      	movs	r7, r0
    38bc:	000e      	movs	r6, r1
    return &(m->items[m->curr_pos]);
    38be:	4b2f      	ldr	r3, [pc, #188]	; (397c <menu_whole_solo_string+0xd0>)
    38c0:	5cc3      	ldrb	r3, [r0, r3]
    38c2:	4698      	mov	r8, r3
    char tmp_string[21];
    menu_item *p_to_item = get_p_to_item(m);
    menu_get_item_string(m, tmp_string, m->curr_pos);
    38c4:	001a      	movs	r2, r3
    38c6:	a904      	add	r1, sp, #16
    38c8:	4b2d      	ldr	r3, [pc, #180]	; (3980 <menu_whole_solo_string+0xd4>)
    38ca:	4798      	blx	r3
    38cc:	4643      	mov	r3, r8
    38ce:	00dd      	lsls	r5, r3, #3
    38d0:	4445      	add	r5, r8
    38d2:	00ad      	lsls	r5, r5, #2

    uint8_t string_length = strlen(p_to_item->name);
    38d4:	1c6b      	adds	r3, r5, #1
    38d6:	18fb      	adds	r3, r7, r3
    38d8:	9301      	str	r3, [sp, #4]
    38da:	0018      	movs	r0, r3
    38dc:	4c29      	ldr	r4, [pc, #164]	; (3984 <menu_whole_solo_string+0xd8>)
    38de:	47a0      	blx	r4
    38e0:	4683      	mov	fp, r0
    uint8_t value_length = strlen(p_to_item->val_str);
    38e2:	002b      	movs	r3, r5
    38e4:	3314      	adds	r3, #20
    38e6:	18fb      	adds	r3, r7, r3
    38e8:	9302      	str	r3, [sp, #8]
    38ea:	0018      	movs	r0, r3
    38ec:	47a0      	blx	r4
    38ee:	9003      	str	r0, [sp, #12]
    38f0:	ab04      	add	r3, sp, #16
    38f2:	a909      	add	r1, sp, #36	; 0x24

    p_to_item->name[sizeof(p_to_item->name) - 1] = 0;
    for(uint8_t i = 0; i < 20; i++)
        tmp_string[i] = ' ';
    38f4:	2220      	movs	r2, #32
    38f6:	701a      	strb	r2, [r3, #0]
    38f8:	3301      	adds	r3, #1
    for(uint8_t i = 0; i < 20; i++)
    38fa:	428b      	cmp	r3, r1
    38fc:	d1fb      	bne.n	38f6 <menu_whole_solo_string+0x4a>
    tmp_string[20] = 0;
    38fe:	2300      	movs	r3, #0
    3900:	aa04      	add	r2, sp, #16
    3902:	7513      	strb	r3, [r2, #20]
    3904:	0034      	movs	r4, r6
    3906:	3354      	adds	r3, #84	; 0x54
    3908:	469a      	mov	sl, r3
    390a:	44b2      	add	sl, r6
    for(uint8_t i = 0; i < 4; i++)
        memcpy(s + 21 * i, tmp_string, 20);
    390c:	4b1e      	ldr	r3, [pc, #120]	; (3988 <menu_whole_solo_string+0xdc>)
    390e:	4699      	mov	r9, r3
    3910:	002b      	movs	r3, r5
    3912:	4655      	mov	r5, sl
    3914:	469a      	mov	sl, r3
    3916:	2214      	movs	r2, #20
    3918:	a904      	add	r1, sp, #16
    391a:	0020      	movs	r0, r4
    391c:	47c8      	blx	r9
    391e:	3415      	adds	r4, #21
    for(uint8_t i = 0; i < 4; i++)
    3920:	42ac      	cmp	r4, r5
    3922:	d1f8      	bne.n	3916 <menu_whole_solo_string+0x6a>
    3924:	4655      	mov	r5, sl

    p_to_item->name[sizeof(p_to_item->name) - 1] = 0;
    3926:	4643      	mov	r3, r8
    3928:	00db      	lsls	r3, r3, #3
    392a:	4642      	mov	r2, r8
    392c:	1899      	adds	r1, r3, r2
    392e:	0089      	lsls	r1, r1, #2
    3930:	1879      	adds	r1, r7, r1
    3932:	2200      	movs	r2, #0
    3934:	728a      	strb	r2, [r1, #10]
    p_to_item->val_str[sizeof(p_to_item->val_str) - 1] = 0;
    3936:	76ca      	strb	r2, [r1, #27]

    memcpy(s + 21, p_to_item->name, string_length);
    3938:	0030      	movs	r0, r6
    393a:	3015      	adds	r0, #21
    393c:	24ff      	movs	r4, #255	; 0xff
    393e:	465a      	mov	r2, fp
    3940:	4022      	ands	r2, r4
    3942:	9901      	ldr	r1, [sp, #4]
    3944:	4b10      	ldr	r3, [pc, #64]	; (3988 <menu_whole_solo_string+0xdc>)
    3946:	4698      	mov	r8, r3
    3948:	4798      	blx	r3
    394a:	9b03      	ldr	r3, [sp, #12]
    394c:	401c      	ands	r4, r3
    memcpy(s + 42, p_to_item->val_str, value_length);
    394e:	0030      	movs	r0, r6
    3950:	302a      	adds	r0, #42	; 0x2a
    3952:	0022      	movs	r2, r4
    3954:	9902      	ldr	r1, [sp, #8]
    3956:	47c0      	blx	r8
    memcpy(s + 42 + value_length + 1, p_to_item->units, strlen(p_to_item->units));
    3958:	350b      	adds	r5, #11
    395a:	197f      	adds	r7, r7, r5
    395c:	0038      	movs	r0, r7
    395e:	4b09      	ldr	r3, [pc, #36]	; (3984 <menu_whole_solo_string+0xd8>)
    3960:	4798      	blx	r3
    3962:	0002      	movs	r2, r0
    3964:	342b      	adds	r4, #43	; 0x2b
    3966:	1930      	adds	r0, r6, r4
    3968:	0039      	movs	r1, r7
    396a:	47c0      	blx	r8
}
    396c:	b00b      	add	sp, #44	; 0x2c
    396e:	bc3c      	pop	{r2, r3, r4, r5}
    3970:	4690      	mov	r8, r2
    3972:	4699      	mov	r9, r3
    3974:	46a2      	mov	sl, r4
    3976:	46ab      	mov	fp, r5
    3978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    397a:	46c0      	nop			; (mov r8, r8)
    397c:	00000265 	.word	0x00000265
    3980:	000037a9 	.word	0x000037a9
    3984:	00007ee9 	.word	0x00007ee9
    3988:	00007d0d 	.word	0x00007d0d

0000398c <menu_whole_string>:

void menu_whole_string(MENU *m, char *s, STATE state) {
    398c:	b5f0      	push	{r4, r5, r6, r7, lr}
    398e:	46d6      	mov	lr, sl
    3990:	464f      	mov	r7, r9
    3992:	4646      	mov	r6, r8
    3994:	b5c0      	push	{r6, r7, lr}
    3996:	0006      	movs	r6, r0
    3998:	000f      	movs	r7, r1
    if(state == EDIT) {
    399a:	2a01      	cmp	r2, #1
    399c:	d03e      	beq.n	3a1c <menu_whole_string+0x90>
        menu_whole_solo_string(m, s);
    }
    else {
        uint8_t j = 0;
        for(uint8_t i = (m->curr_window_pos); i < (4 + m->curr_window_pos) && i < m->num_of_items; i++) {
    399e:	4b23      	ldr	r3, [pc, #140]	; (3a2c <menu_whole_string+0xa0>)
    39a0:	5cc5      	ldrb	r5, [r0, r3]
    39a2:	1d2b      	adds	r3, r5, #4
    39a4:	429d      	cmp	r5, r3
    39a6:	da3c      	bge.n	3a22 <menu_whole_string+0x96>
    39a8:	2399      	movs	r3, #153	; 0x99
    39aa:	009b      	lsls	r3, r3, #2
    39ac:	5cc3      	ldrb	r3, [r0, r3]
    39ae:	42ab      	cmp	r3, r5
    39b0:	d939      	bls.n	3a26 <menu_whole_string+0x9a>
    39b2:	2300      	movs	r3, #0
            menu_get_item_string(m, s + 21 * (j++), i);
    39b4:	4a1e      	ldr	r2, [pc, #120]	; (3a30 <menu_whole_string+0xa4>)
    39b6:	4691      	mov	r9, r2
        for(uint8_t i = (m->curr_window_pos); i < (4 + m->curr_window_pos) && i < m->num_of_items; i++) {
    39b8:	4a1c      	ldr	r2, [pc, #112]	; (3a2c <menu_whole_string+0xa0>)
    39ba:	4690      	mov	r8, r2
    39bc:	3a02      	subs	r2, #2
    39be:	4692      	mov	sl, r2
            menu_get_item_string(m, s + 21 * (j++), i);
    39c0:	1c5c      	adds	r4, r3, #1
    39c2:	b2e4      	uxtb	r4, r4
    39c4:	0059      	lsls	r1, r3, #1
    39c6:	18cb      	adds	r3, r1, r3
    39c8:	00d9      	lsls	r1, r3, #3
    39ca:	1ac9      	subs	r1, r1, r3
    39cc:	1879      	adds	r1, r7, r1
    39ce:	002a      	movs	r2, r5
    39d0:	0030      	movs	r0, r6
    39d2:	47c8      	blx	r9
        for(uint8_t i = (m->curr_window_pos); i < (4 + m->curr_window_pos) && i < m->num_of_items; i++) {
    39d4:	3501      	adds	r5, #1
    39d6:	b2ed      	uxtb	r5, r5
    39d8:	4643      	mov	r3, r8
    39da:	5cf3      	ldrb	r3, [r6, r3]
    39dc:	3304      	adds	r3, #4
    39de:	429d      	cmp	r5, r3
    39e0:	da04      	bge.n	39ec <menu_whole_string+0x60>
            menu_get_item_string(m, s + 21 * (j++), i);
    39e2:	0023      	movs	r3, r4
        for(uint8_t i = (m->curr_window_pos); i < (4 + m->curr_window_pos) && i < m->num_of_items; i++) {
    39e4:	4652      	mov	r2, sl
    39e6:	5cb2      	ldrb	r2, [r6, r2]
    39e8:	42aa      	cmp	r2, r5
    39ea:	d8e9      	bhi.n	39c0 <menu_whole_string+0x34>
        }
        for(; j < 4; j++)
    39ec:	2c03      	cmp	r4, #3
    39ee:	d810      	bhi.n	3a12 <menu_whole_string+0x86>
            for(uint8_t i = 0; i < 20; i++)
                *(s + 21 * j) = ' ';
    39f0:	2114      	movs	r1, #20
    39f2:	2020      	movs	r0, #32
    39f4:	0062      	lsls	r2, r4, #1
    39f6:	1912      	adds	r2, r2, r4
    39f8:	00d3      	lsls	r3, r2, #3
    39fa:	1a9a      	subs	r2, r3, r2
    39fc:	18ba      	adds	r2, r7, r2
    39fe:	000b      	movs	r3, r1
    3a00:	3b01      	subs	r3, #1
    3a02:	b2db      	uxtb	r3, r3
            for(uint8_t i = 0; i < 20; i++)
    3a04:	2b00      	cmp	r3, #0
    3a06:	d1fb      	bne.n	3a00 <menu_whole_string+0x74>
    3a08:	7010      	strb	r0, [r2, #0]
        for(; j < 4; j++)
    3a0a:	3401      	adds	r4, #1
    3a0c:	b2e4      	uxtb	r4, r4
    3a0e:	2c03      	cmp	r4, #3
    3a10:	d9f0      	bls.n	39f4 <menu_whole_string+0x68>
    }

}
    3a12:	bc1c      	pop	{r2, r3, r4}
    3a14:	4690      	mov	r8, r2
    3a16:	4699      	mov	r9, r3
    3a18:	46a2      	mov	sl, r4
    3a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        menu_whole_solo_string(m, s);
    3a1c:	4b05      	ldr	r3, [pc, #20]	; (3a34 <menu_whole_string+0xa8>)
    3a1e:	4798      	blx	r3
    3a20:	e7f7      	b.n	3a12 <menu_whole_string+0x86>
        for(uint8_t i = (m->curr_window_pos); i < (4 + m->curr_window_pos) && i < m->num_of_items; i++) {
    3a22:	2400      	movs	r4, #0
    3a24:	e7e4      	b.n	39f0 <menu_whole_string+0x64>
    3a26:	2400      	movs	r4, #0
    3a28:	e7e2      	b.n	39f0 <menu_whole_string+0x64>
    3a2a:	46c0      	nop			; (mov r8, r8)
    3a2c:	00000266 	.word	0x00000266
    3a30:	000037a9 	.word	0x000037a9
    3a34:	000038ad 	.word	0x000038ad

00003a38 <menu_create_item>:

void menu_create_item(menu_item *item, const char *name, enum VAR_TYPE typ, const char *units, void *p_variable, float min_val, float max_val) {
    3a38:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a3a:	46c6      	mov	lr, r8
    3a3c:	b500      	push	{lr}
    3a3e:	b082      	sub	sp, #8
    3a40:	0004      	movs	r4, r0
    3a42:	000f      	movs	r7, r1
    3a44:	4690      	mov	r8, r2
    3a46:	9301      	str	r3, [sp, #4]
    strcpy(item->name, "         ");
    3a48:	1c45      	adds	r5, r0, #1
    3a4a:	220a      	movs	r2, #10
    3a4c:	4910      	ldr	r1, [pc, #64]	; (3a90 <menu_create_item+0x58>)
    3a4e:	0028      	movs	r0, r5
    3a50:	4e10      	ldr	r6, [pc, #64]	; (3a94 <menu_create_item+0x5c>)
    3a52:	47b0      	blx	r6
    strcpy(item->name, name);
    3a54:	0039      	movs	r1, r7
    3a56:	0028      	movs	r0, r5
    3a58:	4f0f      	ldr	r7, [pc, #60]	; (3a98 <menu_create_item+0x60>)
    3a5a:	47b8      	blx	r7
    strcpy(item->units, "    ");
    3a5c:	350a      	adds	r5, #10
    3a5e:	2205      	movs	r2, #5
    3a60:	490e      	ldr	r1, [pc, #56]	; (3a9c <menu_create_item+0x64>)
    3a62:	0028      	movs	r0, r5
    3a64:	47b0      	blx	r6
    strcpy(item->units, units);
    3a66:	9901      	ldr	r1, [sp, #4]
    3a68:	0028      	movs	r0, r5
    3a6a:	47b8      	blx	r7
    strcpy(item->val_str, "       ");
    3a6c:	0020      	movs	r0, r4
    3a6e:	3014      	adds	r0, #20
    3a70:	2208      	movs	r2, #8
    3a72:	490b      	ldr	r1, [pc, #44]	; (3aa0 <menu_create_item+0x68>)
    3a74:	47b0      	blx	r6
    item->type = typ;
    3a76:	4643      	mov	r3, r8
    3a78:	7023      	strb	r3, [r4, #0]
    item->variable = p_variable;
    3a7a:	9b08      	ldr	r3, [sp, #32]
    3a7c:	6123      	str	r3, [r4, #16]
    item->val_max = max_val;
    3a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3a80:	6223      	str	r3, [r4, #32]
    item->val_min = min_val;
    3a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a84:	61e3      	str	r3, [r4, #28]
}
    3a86:	b002      	add	sp, #8
    3a88:	bc04      	pop	{r2}
    3a8a:	4690      	mov	r8, r2
    3a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a8e:	46c0      	nop			; (mov r8, r8)
    3a90:	000087e4 	.word	0x000087e4
    3a94:	00007d0d 	.word	0x00007d0d
    3a98:	00007ed9 	.word	0x00007ed9
    3a9c:	000087f0 	.word	0x000087f0
    3aa0:	000087f8 	.word	0x000087f8

00003aa4 <menu_increment_item>:

void menu_increment_item(MENU *m) {
    3aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aa6:	46c6      	mov	lr, r8
    3aa8:	b500      	push	{lr}
    3aaa:	0005      	movs	r5, r0
    switch(m->items[m->curr_pos].type) {
    3aac:	4b34      	ldr	r3, [pc, #208]	; (3b80 <menu_increment_item+0xdc>)
    3aae:	5cc4      	ldrb	r4, [r0, r3]
    3ab0:	00e3      	lsls	r3, r4, #3
    3ab2:	191b      	adds	r3, r3, r4
    3ab4:	009b      	lsls	r3, r3, #2
    3ab6:	5c1b      	ldrb	r3, [r3, r0]
    3ab8:	2b01      	cmp	r3, #1
    3aba:	d01e      	beq.n	3afa <menu_increment_item+0x56>
    3abc:	2b00      	cmp	r3, #0
    3abe:	d006      	beq.n	3ace <menu_increment_item+0x2a>
    3ac0:	2b02      	cmp	r3, #2
    3ac2:	d030      	beq.n	3b26 <menu_increment_item+0x82>
    3ac4:	2b03      	cmp	r3, #3
    3ac6:	d044      	beq.n	3b52 <menu_increment_item+0xae>
                (*(float *)m->items[m->curr_pos].variable) += 0.1;
            break;
        default:
            break;
    }
}
    3ac8:	bc04      	pop	{r2}
    3aca:	4690      	mov	r8, r2
    3acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if((*(uint8_t *)m->items[m->curr_pos].variable) < (m->items[m->curr_pos].val_max))
    3ace:	00e6      	lsls	r6, r4, #3
    3ad0:	1933      	adds	r3, r6, r4
    3ad2:	009b      	lsls	r3, r3, #2
    3ad4:	18c3      	adds	r3, r0, r3
    3ad6:	691b      	ldr	r3, [r3, #16]
    3ad8:	4698      	mov	r8, r3
    3ada:	781f      	ldrb	r7, [r3, #0]
    3adc:	0038      	movs	r0, r7
    3ade:	4b29      	ldr	r3, [pc, #164]	; (3b84 <menu_increment_item+0xe0>)
    3ae0:	4798      	blx	r3
    3ae2:	1936      	adds	r6, r6, r4
    3ae4:	00b6      	lsls	r6, r6, #2
    3ae6:	19ad      	adds	r5, r5, r6
    3ae8:	6a29      	ldr	r1, [r5, #32]
    3aea:	4b27      	ldr	r3, [pc, #156]	; (3b88 <menu_increment_item+0xe4>)
    3aec:	4798      	blx	r3
    3aee:	2800      	cmp	r0, #0
    3af0:	d0ea      	beq.n	3ac8 <menu_increment_item+0x24>
                (*(uint8_t *)m->items[m->curr_pos].variable)++;
    3af2:	3701      	adds	r7, #1
    3af4:	4643      	mov	r3, r8
    3af6:	701f      	strb	r7, [r3, #0]
    3af8:	e7e6      	b.n	3ac8 <menu_increment_item+0x24>
            if((*(uint16_t *)m->items[m->curr_pos].variable) < (m->items[m->curr_pos].val_max))
    3afa:	00e6      	lsls	r6, r4, #3
    3afc:	1933      	adds	r3, r6, r4
    3afe:	009b      	lsls	r3, r3, #2
    3b00:	18c3      	adds	r3, r0, r3
    3b02:	691b      	ldr	r3, [r3, #16]
    3b04:	4698      	mov	r8, r3
    3b06:	881f      	ldrh	r7, [r3, #0]
    3b08:	0038      	movs	r0, r7
    3b0a:	4b1e      	ldr	r3, [pc, #120]	; (3b84 <menu_increment_item+0xe0>)
    3b0c:	4798      	blx	r3
    3b0e:	1936      	adds	r6, r6, r4
    3b10:	00b6      	lsls	r6, r6, #2
    3b12:	19ad      	adds	r5, r5, r6
    3b14:	6a29      	ldr	r1, [r5, #32]
    3b16:	4b1c      	ldr	r3, [pc, #112]	; (3b88 <menu_increment_item+0xe4>)
    3b18:	4798      	blx	r3
    3b1a:	2800      	cmp	r0, #0
    3b1c:	d0d4      	beq.n	3ac8 <menu_increment_item+0x24>
                (*(uint16_t *)m->items[m->curr_pos].variable)++;
    3b1e:	3701      	adds	r7, #1
    3b20:	4643      	mov	r3, r8
    3b22:	801f      	strh	r7, [r3, #0]
    3b24:	e7d0      	b.n	3ac8 <menu_increment_item+0x24>
            if((*(uint32_t *)m->items[m->curr_pos].variable) < (m->items[m->curr_pos].val_max))
    3b26:	00e6      	lsls	r6, r4, #3
    3b28:	1933      	adds	r3, r6, r4
    3b2a:	009b      	lsls	r3, r3, #2
    3b2c:	18c3      	adds	r3, r0, r3
    3b2e:	691b      	ldr	r3, [r3, #16]
    3b30:	4698      	mov	r8, r3
    3b32:	681f      	ldr	r7, [r3, #0]
    3b34:	0038      	movs	r0, r7
    3b36:	4b15      	ldr	r3, [pc, #84]	; (3b8c <menu_increment_item+0xe8>)
    3b38:	4798      	blx	r3
    3b3a:	1936      	adds	r6, r6, r4
    3b3c:	00b6      	lsls	r6, r6, #2
    3b3e:	19ad      	adds	r5, r5, r6
    3b40:	6a29      	ldr	r1, [r5, #32]
    3b42:	4b11      	ldr	r3, [pc, #68]	; (3b88 <menu_increment_item+0xe4>)
    3b44:	4798      	blx	r3
    3b46:	2800      	cmp	r0, #0
    3b48:	d0be      	beq.n	3ac8 <menu_increment_item+0x24>
                (*(uint32_t *)m->items[m->curr_pos].variable)+=10;
    3b4a:	370a      	adds	r7, #10
    3b4c:	4643      	mov	r3, r8
    3b4e:	601f      	str	r7, [r3, #0]
    3b50:	e7ba      	b.n	3ac8 <menu_increment_item+0x24>
            if((*(float *)m->items[m->curr_pos].variable) < (m->items[m->curr_pos].val_max))
    3b52:	00e3      	lsls	r3, r4, #3
    3b54:	191a      	adds	r2, r3, r4
    3b56:	0092      	lsls	r2, r2, #2
    3b58:	1882      	adds	r2, r0, r2
    3b5a:	6917      	ldr	r7, [r2, #16]
    3b5c:	683e      	ldr	r6, [r7, #0]
    3b5e:	6a11      	ldr	r1, [r2, #32]
    3b60:	1c30      	adds	r0, r6, #0
    3b62:	4b09      	ldr	r3, [pc, #36]	; (3b88 <menu_increment_item+0xe4>)
    3b64:	4798      	blx	r3
    3b66:	2800      	cmp	r0, #0
    3b68:	d0ae      	beq.n	3ac8 <menu_increment_item+0x24>
                (*(float *)m->items[m->curr_pos].variable) += 0.1;
    3b6a:	1c30      	adds	r0, r6, #0
    3b6c:	4b08      	ldr	r3, [pc, #32]	; (3b90 <menu_increment_item+0xec>)
    3b6e:	4798      	blx	r3
    3b70:	4a08      	ldr	r2, [pc, #32]	; (3b94 <menu_increment_item+0xf0>)
    3b72:	4b09      	ldr	r3, [pc, #36]	; (3b98 <menu_increment_item+0xf4>)
    3b74:	4c09      	ldr	r4, [pc, #36]	; (3b9c <menu_increment_item+0xf8>)
    3b76:	47a0      	blx	r4
    3b78:	4b09      	ldr	r3, [pc, #36]	; (3ba0 <menu_increment_item+0xfc>)
    3b7a:	4798      	blx	r3
    3b7c:	6038      	str	r0, [r7, #0]
}
    3b7e:	e7a3      	b.n	3ac8 <menu_increment_item+0x24>
    3b80:	00000265 	.word	0x00000265
    3b84:	000060ed 	.word	0x000060ed
    3b88:	00005751 	.word	0x00005751
    3b8c:	0000618d 	.word	0x0000618d
    3b90:	00007aa5 	.word	0x00007aa5
    3b94:	9999999a 	.word	0x9999999a
    3b98:	3fb99999 	.word	0x3fb99999
    3b9c:	00006219 	.word	0x00006219
    3ba0:	00007b49 	.word	0x00007b49

00003ba4 <menu_decrement_item>:
void menu_decrement_item(MENU *m) {
    3ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ba6:	46c6      	mov	lr, r8
    3ba8:	b500      	push	{lr}
    3baa:	0004      	movs	r4, r0
    switch(m->items[m->curr_pos].type) {
    3bac:	4b3c      	ldr	r3, [pc, #240]	; (3ca0 <menu_decrement_item+0xfc>)
    3bae:	5cc5      	ldrb	r5, [r0, r3]
    3bb0:	00eb      	lsls	r3, r5, #3
    3bb2:	195b      	adds	r3, r3, r5
    3bb4:	009b      	lsls	r3, r3, #2
    3bb6:	5c1b      	ldrb	r3, [r3, r0]
    3bb8:	2b01      	cmp	r3, #1
    3bba:	d01e      	beq.n	3bfa <menu_decrement_item+0x56>
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	d006      	beq.n	3bce <menu_decrement_item+0x2a>
    3bc0:	2b02      	cmp	r3, #2
    3bc2:	d030      	beq.n	3c26 <menu_decrement_item+0x82>
    3bc4:	2b03      	cmp	r3, #3
    3bc6:	d044      	beq.n	3c52 <menu_decrement_item+0xae>
                *(float *)m->items[m->curr_pos].variable=0;
            break;
        default:
            break;
    }
}
    3bc8:	bc04      	pop	{r2}
    3bca:	4690      	mov	r8, r2
    3bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if((*(uint8_t *)m->items[m->curr_pos].variable) > (m->items[m->curr_pos].val_min))
    3bce:	00ee      	lsls	r6, r5, #3
    3bd0:	1973      	adds	r3, r6, r5
    3bd2:	009b      	lsls	r3, r3, #2
    3bd4:	18c3      	adds	r3, r0, r3
    3bd6:	691b      	ldr	r3, [r3, #16]
    3bd8:	4698      	mov	r8, r3
    3bda:	781f      	ldrb	r7, [r3, #0]
    3bdc:	0038      	movs	r0, r7
    3bde:	4b31      	ldr	r3, [pc, #196]	; (3ca4 <menu_decrement_item+0x100>)
    3be0:	4798      	blx	r3
    3be2:	1976      	adds	r6, r6, r5
    3be4:	00b6      	lsls	r6, r6, #2
    3be6:	19a4      	adds	r4, r4, r6
    3be8:	69e1      	ldr	r1, [r4, #28]
    3bea:	4b2f      	ldr	r3, [pc, #188]	; (3ca8 <menu_decrement_item+0x104>)
    3bec:	4798      	blx	r3
    3bee:	2800      	cmp	r0, #0
    3bf0:	d0ea      	beq.n	3bc8 <menu_decrement_item+0x24>
                (*(uint8_t *)m->items[m->curr_pos].variable)--;
    3bf2:	3f01      	subs	r7, #1
    3bf4:	4643      	mov	r3, r8
    3bf6:	701f      	strb	r7, [r3, #0]
    3bf8:	e7e6      	b.n	3bc8 <menu_decrement_item+0x24>
            if((*(uint16_t *)m->items[m->curr_pos].variable) > (m->items[m->curr_pos].val_min))
    3bfa:	00ee      	lsls	r6, r5, #3
    3bfc:	1973      	adds	r3, r6, r5
    3bfe:	009b      	lsls	r3, r3, #2
    3c00:	18c3      	adds	r3, r0, r3
    3c02:	691b      	ldr	r3, [r3, #16]
    3c04:	4698      	mov	r8, r3
    3c06:	881f      	ldrh	r7, [r3, #0]
    3c08:	0038      	movs	r0, r7
    3c0a:	4b26      	ldr	r3, [pc, #152]	; (3ca4 <menu_decrement_item+0x100>)
    3c0c:	4798      	blx	r3
    3c0e:	1976      	adds	r6, r6, r5
    3c10:	00b6      	lsls	r6, r6, #2
    3c12:	19a4      	adds	r4, r4, r6
    3c14:	69e1      	ldr	r1, [r4, #28]
    3c16:	4b24      	ldr	r3, [pc, #144]	; (3ca8 <menu_decrement_item+0x104>)
    3c18:	4798      	blx	r3
    3c1a:	2800      	cmp	r0, #0
    3c1c:	d0d4      	beq.n	3bc8 <menu_decrement_item+0x24>
                (*(uint16_t *)m->items[m->curr_pos].variable)--;
    3c1e:	3f01      	subs	r7, #1
    3c20:	4643      	mov	r3, r8
    3c22:	801f      	strh	r7, [r3, #0]
    3c24:	e7d0      	b.n	3bc8 <menu_decrement_item+0x24>
            if((*(uint32_t *)m->items[m->curr_pos].variable) > (m->items[m->curr_pos].val_min))
    3c26:	00ee      	lsls	r6, r5, #3
    3c28:	1973      	adds	r3, r6, r5
    3c2a:	009b      	lsls	r3, r3, #2
    3c2c:	18c3      	adds	r3, r0, r3
    3c2e:	691b      	ldr	r3, [r3, #16]
    3c30:	4698      	mov	r8, r3
    3c32:	681f      	ldr	r7, [r3, #0]
    3c34:	0038      	movs	r0, r7
    3c36:	4b1d      	ldr	r3, [pc, #116]	; (3cac <menu_decrement_item+0x108>)
    3c38:	4798      	blx	r3
    3c3a:	1976      	adds	r6, r6, r5
    3c3c:	00b6      	lsls	r6, r6, #2
    3c3e:	19a4      	adds	r4, r4, r6
    3c40:	69e1      	ldr	r1, [r4, #28]
    3c42:	4b19      	ldr	r3, [pc, #100]	; (3ca8 <menu_decrement_item+0x104>)
    3c44:	4798      	blx	r3
    3c46:	2800      	cmp	r0, #0
    3c48:	d0be      	beq.n	3bc8 <menu_decrement_item+0x24>
                (*(uint32_t *)m->items[m->curr_pos].variable)-=10;
    3c4a:	3f0a      	subs	r7, #10
    3c4c:	4643      	mov	r3, r8
    3c4e:	601f      	str	r7, [r3, #0]
    3c50:	e7ba      	b.n	3bc8 <menu_decrement_item+0x24>
            if((*(float *)m->items[m->curr_pos].variable) > (m->items[m->curr_pos].val_min))
    3c52:	00eb      	lsls	r3, r5, #3
    3c54:	195a      	adds	r2, r3, r5
    3c56:	0092      	lsls	r2, r2, #2
    3c58:	1882      	adds	r2, r0, r2
    3c5a:	6917      	ldr	r7, [r2, #16]
    3c5c:	683e      	ldr	r6, [r7, #0]
    3c5e:	69d1      	ldr	r1, [r2, #28]
    3c60:	1c30      	adds	r0, r6, #0
    3c62:	4b11      	ldr	r3, [pc, #68]	; (3ca8 <menu_decrement_item+0x104>)
    3c64:	4798      	blx	r3
    3c66:	2800      	cmp	r0, #0
    3c68:	d009      	beq.n	3c7e <menu_decrement_item+0xda>
                (*(float *)m->items[m->curr_pos].variable) -= 0.1;
    3c6a:	1c30      	adds	r0, r6, #0
    3c6c:	4b10      	ldr	r3, [pc, #64]	; (3cb0 <menu_decrement_item+0x10c>)
    3c6e:	4798      	blx	r3
    3c70:	4a10      	ldr	r2, [pc, #64]	; (3cb4 <menu_decrement_item+0x110>)
    3c72:	4b11      	ldr	r3, [pc, #68]	; (3cb8 <menu_decrement_item+0x114>)
    3c74:	4d11      	ldr	r5, [pc, #68]	; (3cbc <menu_decrement_item+0x118>)
    3c76:	47a8      	blx	r5
    3c78:	4b11      	ldr	r3, [pc, #68]	; (3cc0 <menu_decrement_item+0x11c>)
    3c7a:	4798      	blx	r3
    3c7c:	6038      	str	r0, [r7, #0]
            if(*(float *)m->items[m->curr_pos].variable < 0)
    3c7e:	4b08      	ldr	r3, [pc, #32]	; (3ca0 <menu_decrement_item+0xfc>)
    3c80:	5ce2      	ldrb	r2, [r4, r3]
    3c82:	00d3      	lsls	r3, r2, #3
    3c84:	189b      	adds	r3, r3, r2
    3c86:	009b      	lsls	r3, r3, #2
    3c88:	18e4      	adds	r4, r4, r3
    3c8a:	6924      	ldr	r4, [r4, #16]
    3c8c:	2100      	movs	r1, #0
    3c8e:	6820      	ldr	r0, [r4, #0]
    3c90:	4b0c      	ldr	r3, [pc, #48]	; (3cc4 <menu_decrement_item+0x120>)
    3c92:	4798      	blx	r3
    3c94:	2800      	cmp	r0, #0
    3c96:	d097      	beq.n	3bc8 <menu_decrement_item+0x24>
                *(float *)m->items[m->curr_pos].variable=0;
    3c98:	2300      	movs	r3, #0
    3c9a:	6023      	str	r3, [r4, #0]
}
    3c9c:	e794      	b.n	3bc8 <menu_decrement_item+0x24>
    3c9e:	46c0      	nop			; (mov r8, r8)
    3ca0:	00000265 	.word	0x00000265
    3ca4:	000060ed 	.word	0x000060ed
    3ca8:	00005779 	.word	0x00005779
    3cac:	0000618d 	.word	0x0000618d
    3cb0:	00007aa5 	.word	0x00007aa5
    3cb4:	9999999a 	.word	0x9999999a
    3cb8:	3fb99999 	.word	0x3fb99999
    3cbc:	000073a1 	.word	0x000073a1
    3cc0:	00007b49 	.word	0x00007b49
    3cc4:	00005751 	.word	0x00005751

00003cc8 <menu_swap>:
void menu_swap(MENU **dest, MENU *src) {
    *dest = src;
    3cc8:	6001      	str	r1, [r0, #0]
    3cca:	4770      	bx	lr

00003ccc <USB_transmit_enable>:
    USB_flags &= ~(1 << USB_RXR);
}

void USB_transmit_enable(void)
{
    USB_flags |= (1 << USB_TXR);
    3ccc:	4a02      	ldr	r2, [pc, #8]	; (3cd8 <USB_transmit_enable+0xc>)
    3cce:	7813      	ldrb	r3, [r2, #0]
    3cd0:	2104      	movs	r1, #4
    3cd2:	430b      	orrs	r3, r1
    3cd4:	7013      	strb	r3, [r2, #0]
}
    3cd6:	4770      	bx	lr
    3cd8:	20001c58 	.word	0x20001c58

00003cdc <USB_transmit_callback>:
{
    3cdc:	b510      	push	{r4, lr}
    USB_transmit_enable();
    3cde:	4b01      	ldr	r3, [pc, #4]	; (3ce4 <USB_transmit_callback+0x8>)
    3ce0:	4798      	blx	r3
}
    3ce2:	bd10      	pop	{r4, pc}
    3ce4:	00003ccd 	.word	0x00003ccd

00003ce8 <USB_transmit_disable>:

void USB_transmit_disable(void)
{
    USB_flags &= ~(1 << USB_TXR);
    3ce8:	4a02      	ldr	r2, [pc, #8]	; (3cf4 <USB_transmit_disable+0xc>)
    3cea:	7813      	ldrb	r3, [r2, #0]
    3cec:	2104      	movs	r1, #4
    3cee:	438b      	bics	r3, r1
    3cf0:	7013      	strb	r3, [r2, #0]
}
    3cf2:	4770      	bx	lr
    3cf4:	20001c58 	.word	0x20001c58

00003cf8 <USB_SendMessage>:
{
    3cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cfa:	0004      	movs	r4, r0
    3cfc:	000d      	movs	r5, r1
uint8_t USB_transmit_ready(void)
{
    return USB_flags & (1 << USB_TXR);
    3cfe:	490b      	ldr	r1, [pc, #44]	; (3d2c <USB_SendMessage+0x34>)
    3d00:	2204      	movs	r2, #4
    3d02:	780b      	ldrb	r3, [r1, #0]
    while(!USB_transmit_ready());
    3d04:	4213      	tst	r3, r2
    3d06:	d0fc      	beq.n	3d02 <USB_SendMessage+0xa>
    USB_transmit_disable();
    3d08:	4b09      	ldr	r3, [pc, #36]	; (3d30 <USB_SendMessage+0x38>)
    3d0a:	4798      	blx	r3
    while(usart_write_buffer_job(&USB_instance, p_string, length) != STATUS_OK);
    3d0c:	4e09      	ldr	r6, [pc, #36]	; (3d34 <USB_SendMessage+0x3c>)
    3d0e:	4f0a      	ldr	r7, [pc, #40]	; (3d38 <USB_SendMessage+0x40>)
    3d10:	002a      	movs	r2, r5
    3d12:	0021      	movs	r1, r4
    3d14:	0030      	movs	r0, r6
    3d16:	47b8      	blx	r7
    3d18:	2800      	cmp	r0, #0
    3d1a:	d1f9      	bne.n	3d10 <USB_SendMessage+0x18>
    while(usart_get_job_status(&USB_instance, USART_TRANSCEIVER_TX) != STATUS_OK);
    3d1c:	4d05      	ldr	r5, [pc, #20]	; (3d34 <USB_SendMessage+0x3c>)
    3d1e:	4c07      	ldr	r4, [pc, #28]	; (3d3c <USB_SendMessage+0x44>)
    3d20:	2101      	movs	r1, #1
    3d22:	0028      	movs	r0, r5
    3d24:	47a0      	blx	r4
    3d26:	2800      	cmp	r0, #0
    3d28:	d1fa      	bne.n	3d20 <USB_SendMessage+0x28>
}
    3d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d2c:	20001c58 	.word	0x20001c58
    3d30:	00003ce9 	.word	0x00003ce9
    3d34:	20001c24 	.word	0x20001c24
    3d38:	00002e9d 	.word	0x00002e9d
    3d3c:	00002ebd 	.word	0x00002ebd

00003d40 <configure_USB_callbacks>:
{
    return USB_RxBuf;
}

void configure_USB_callbacks(void)
{
    3d40:	b510      	push	{r4, lr}
    usart_register_callback(&USB_instance, USB_transmit_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    3d42:	4c08      	ldr	r4, [pc, #32]	; (3d64 <configure_USB_callbacks+0x24>)
    3d44:	2200      	movs	r2, #0
    3d46:	4908      	ldr	r1, [pc, #32]	; (3d68 <configure_USB_callbacks+0x28>)
    3d48:	0020      	movs	r0, r4
    3d4a:	4b08      	ldr	r3, [pc, #32]	; (3d6c <configure_USB_callbacks+0x2c>)
    3d4c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    3d4e:	2231      	movs	r2, #49	; 0x31
    3d50:	5ca3      	ldrb	r3, [r4, r2]
    3d52:	2101      	movs	r1, #1
    3d54:	430b      	orrs	r3, r1
    3d56:	54a3      	strb	r3, [r4, r2]
    //usart_register_callback(&USB_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);

    usart_enable_callback(&USB_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    //usart_enable_callback(&USB_instance, USART_CALLBACK_BUFFER_RECEIVED);
    usart_read_job(&USB_instance, &c);
    3d58:	4905      	ldr	r1, [pc, #20]	; (3d70 <configure_USB_callbacks+0x30>)
    3d5a:	0020      	movs	r0, r4
    3d5c:	4b05      	ldr	r3, [pc, #20]	; (3d74 <configure_USB_callbacks+0x34>)
    3d5e:	4798      	blx	r3
}
    3d60:	bd10      	pop	{r4, pc}
    3d62:	46c0      	nop			; (mov r8, r8)
    3d64:	20001c24 	.word	0x20001c24
    3d68:	00003cdd 	.word	0x00003cdd
    3d6c:	00002e75 	.word	0x00002e75
    3d70:	200018ae 	.word	0x200018ae
    3d74:	00002e8d 	.word	0x00002e8d

00003d78 <configure_USB>:
{
    3d78:	b530      	push	{r4, r5, lr}
    3d7a:	b093      	sub	sp, #76	; 0x4c
	config->data_order       = USART_DATAORDER_LSB;
    3d7c:	2380      	movs	r3, #128	; 0x80
    3d7e:	05db      	lsls	r3, r3, #23
    3d80:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3d82:	2300      	movs	r3, #0
    3d84:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3d86:	22ff      	movs	r2, #255	; 0xff
    3d88:	4669      	mov	r1, sp
    3d8a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3d8c:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3d8e:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    3d90:	2101      	movs	r1, #1
    3d92:	222c      	movs	r2, #44	; 0x2c
    3d94:	4668      	mov	r0, sp
    3d96:	5481      	strb	r1, [r0, r2]
	config->transmitter_enable = true;
    3d98:	3201      	adds	r2, #1
    3d9a:	5481      	strb	r1, [r0, r2]
	config->clock_polarity_inverted = false;
    3d9c:	3201      	adds	r2, #1
    3d9e:	5483      	strb	r3, [r0, r2]
	config->use_external_clock = false;
    3da0:	3201      	adds	r2, #1
    3da2:	5483      	strb	r3, [r0, r2]
	config->ext_clock_freq   = 0;
    3da4:	930c      	str	r3, [sp, #48]	; 0x30
	config->run_in_standby   = false;
    3da6:	3205      	adds	r2, #5
    3da8:	5483      	strb	r3, [r0, r2]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3daa:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3dac:	2200      	movs	r2, #0
    3dae:	8203      	strh	r3, [r0, #16]
	config->lin_slave_enable      = false;
    3db0:	76c2      	strb	r2, [r0, #27]
	config->lin_node = LIN_INVALID_MODE;
    3db2:	9307      	str	r3, [sp, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    3db4:	8403      	strh	r3, [r0, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    3db6:	8443      	strh	r3, [r0, #34]	; 0x22
	config->immediate_buffer_overflow_notification  = false;
    3db8:	7602      	strb	r2, [r0, #24]
	config->encoding_format_enable                  = false;
    3dba:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    3dbc:	2313      	movs	r3, #19
    3dbe:	7683      	strb	r3, [r0, #26]
	config->collision_detection_enable              = false;
    3dc0:	3313      	adds	r3, #19
    3dc2:	54c2      	strb	r2, [r0, r3]
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    3dc4:	3b01      	subs	r3, #1
    3dc6:	54c2      	strb	r2, [r0, r3]
    config_usart.baudrate    =					250000;
    3dc8:	4b2f      	ldr	r3, [pc, #188]	; (3e88 <configure_USB+0x110>)
    3dca:	930a      	str	r3, [sp, #40]	; 0x28
    config_usart.mux_setting =					USART_RX_1_TX_0_XCK_1;
    3dcc:	2380      	movs	r3, #128	; 0x80
    3dce:	035b      	lsls	r3, r3, #13
    3dd0:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 =					PINMUX_PA16C_SERCOM1_PAD0;
    3dd2:	4b2e      	ldr	r3, [pc, #184]	; (3e8c <configure_USB+0x114>)
    3dd4:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad1 =					PINMUX_PA17C_SERCOM1_PAD1;
    3dd6:	4b2e      	ldr	r3, [pc, #184]	; (3e90 <configure_USB+0x118>)
    3dd8:	930f      	str	r3, [sp, #60]	; 0x3c
    config_usart.pinmux_pad2 =					PINMUX_UNUSED;
    3dda:	2301      	movs	r3, #1
    3ddc:	425b      	negs	r3, r3
    3dde:	9310      	str	r3, [sp, #64]	; 0x40
    config_usart.pinmux_pad3 =					PINMUX_UNUSED;
    3de0:	9311      	str	r3, [sp, #68]	; 0x44
    config_usart.generator_source =				GCLK_GENERATOR_3;
    3de2:	2203      	movs	r2, #3
    3de4:	3336      	adds	r3, #54	; 0x36
    3de6:	54c2      	strb	r2, [r0, r3]
    config_usart.start_frame_detection_enable = true;
    3de8:	3b11      	subs	r3, #17
    3dea:	54c1      	strb	r1, [r0, r3]
    while (usart_init(&USB_instance, USB_MODULE, &config_usart) != STATUS_OK);
    3dec:	4d29      	ldr	r5, [pc, #164]	; (3e94 <configure_USB+0x11c>)
    3dee:	4c2a      	ldr	r4, [pc, #168]	; (3e98 <configure_USB+0x120>)
    3df0:	466a      	mov	r2, sp
    3df2:	492a      	ldr	r1, [pc, #168]	; (3e9c <configure_USB+0x124>)
    3df4:	0028      	movs	r0, r5
    3df6:	47a0      	blx	r4
    3df8:	2800      	cmp	r0, #0
    3dfa:	d1f9      	bne.n	3df0 <configure_USB+0x78>
	SercomUsart *const usart_hw = &(module->hw->USART);
    3dfc:	4d25      	ldr	r5, [pc, #148]	; (3e94 <configure_USB+0x11c>)
    3dfe:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3e00:	0020      	movs	r0, r4
    3e02:	4b27      	ldr	r3, [pc, #156]	; (3ea0 <configure_USB+0x128>)
    3e04:	4798      	blx	r3
    3e06:	231f      	movs	r3, #31
    3e08:	4018      	ands	r0, r3
    3e0a:	3b1e      	subs	r3, #30
    3e0c:	4083      	lsls	r3, r0
    3e0e:	4a25      	ldr	r2, [pc, #148]	; (3ea4 <configure_USB+0x12c>)
    3e10:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3e12:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3e14:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3e16:	2b00      	cmp	r3, #0
    3e18:	d1fc      	bne.n	3e14 <configure_USB+0x9c>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3e1a:	6823      	ldr	r3, [r4, #0]
    3e1c:	2202      	movs	r2, #2
    3e1e:	4313      	orrs	r3, r2
    3e20:	6023      	str	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3e22:	4b1c      	ldr	r3, [pc, #112]	; (3e94 <configure_USB+0x11c>)
    3e24:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3e26:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3e28:	2a00      	cmp	r2, #0
    3e2a:	d1fc      	bne.n	3e26 <configure_USB+0xae>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    3e2c:	6859      	ldr	r1, [r3, #4]
    3e2e:	2280      	movs	r2, #128	; 0x80
    3e30:	0252      	lsls	r2, r2, #9
    3e32:	430a      	orrs	r2, r1
    3e34:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    3e36:	2101      	movs	r1, #1
    3e38:	4a16      	ldr	r2, [pc, #88]	; (3e94 <configure_USB+0x11c>)
    3e3a:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3e3c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3e3e:	2a00      	cmp	r2, #0
    3e40:	d1fc      	bne.n	3e3c <configure_USB+0xc4>
	return (usart_hw->SYNCBUSY.reg);
    3e42:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3e44:	2a00      	cmp	r2, #0
    3e46:	d1fc      	bne.n	3e42 <configure_USB+0xca>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    3e48:	6859      	ldr	r1, [r3, #4]
    3e4a:	2280      	movs	r2, #128	; 0x80
    3e4c:	0292      	lsls	r2, r2, #10
    3e4e:	430a      	orrs	r2, r1
    3e50:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    3e52:	2101      	movs	r1, #1
    3e54:	4a0f      	ldr	r2, [pc, #60]	; (3e94 <configure_USB+0x11c>)
    3e56:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    3e58:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3e5a:	2a00      	cmp	r2, #0
    3e5c:	d1fc      	bne.n	3e58 <configure_USB+0xe0>
    delay_ms(1);
    3e5e:	2000      	movs	r0, #0
    3e60:	4b11      	ldr	r3, [pc, #68]	; (3ea8 <configure_USB+0x130>)
    3e62:	4798      	blx	r3
    3e64:	0002      	movs	r2, r0
    3e66:	2300      	movs	r3, #0
    3e68:	4810      	ldr	r0, [pc, #64]	; (3eac <configure_USB+0x134>)
    3e6a:	2100      	movs	r1, #0
    3e6c:	1880      	adds	r0, r0, r2
    3e6e:	4159      	adcs	r1, r3
    3e70:	4a0f      	ldr	r2, [pc, #60]	; (3eb0 <configure_USB+0x138>)
    3e72:	2300      	movs	r3, #0
    3e74:	4c0f      	ldr	r4, [pc, #60]	; (3eb4 <configure_USB+0x13c>)
    3e76:	47a0      	blx	r4
    3e78:	4b0f      	ldr	r3, [pc, #60]	; (3eb8 <configure_USB+0x140>)
    3e7a:	4798      	blx	r3
    configure_USB_callbacks();
    3e7c:	4b0f      	ldr	r3, [pc, #60]	; (3ebc <configure_USB+0x144>)
    3e7e:	4798      	blx	r3
    USB_transmit_enable();
    3e80:	4b0f      	ldr	r3, [pc, #60]	; (3ec0 <configure_USB+0x148>)
    3e82:	4798      	blx	r3
}
    3e84:	b013      	add	sp, #76	; 0x4c
    3e86:	bd30      	pop	{r4, r5, pc}
    3e88:	0003d090 	.word	0x0003d090
    3e8c:	00100002 	.word	0x00100002
    3e90:	00110002 	.word	0x00110002
    3e94:	20001c24 	.word	0x20001c24
    3e98:	00002a3d 	.word	0x00002a3d
    3e9c:	42000800 	.word	0x42000800
    3ea0:	000030b5 	.word	0x000030b5
    3ea4:	e000e100 	.word	0xe000e100
    3ea8:	00004751 	.word	0x00004751
    3eac:	00001b57 	.word	0x00001b57
    3eb0:	00001b58 	.word	0x00001b58
    3eb4:	000057a1 	.word	0x000057a1
    3eb8:	20000001 	.word	0x20000001
    3ebc:	00003d41 	.word	0x00003d41
    3ec0:	00003ccd 	.word	0x00003ccd

00003ec4 <millis>:
volatile uint32_t last_tick_time = 0;
ENCODER encoder;
ENCODER_POS encoder_pos;
uint32_t millis(void)
{
    return proc_millis;
    3ec4:	4b01      	ldr	r3, [pc, #4]	; (3ecc <millis+0x8>)
    3ec6:	6818      	ldr	r0, [r3, #0]
}
    3ec8:	4770      	bx	lr
    3eca:	46c0      	nop			; (mov r8, r8)
    3ecc:	200000d4 	.word	0x200000d4

00003ed0 <get_encoder_status>:

ENCODER get_encoder_status(void)
{
    return encoder;
    3ed0:	4b01      	ldr	r3, [pc, #4]	; (3ed8 <get_encoder_status+0x8>)
    3ed2:	7818      	ldrb	r0, [r3, #0]
    encoder_pos = POS_NONE;
    encoder = IDLE;
}
    3ed4:	4770      	bx	lr
    3ed6:	46c0      	nop			; (mov r8, r8)
    3ed8:	20001e68 	.word	0x20001e68

00003edc <process_encoder>:
	return (port_base->IN.reg & pin_mask);
    3edc:	4b26      	ldr	r3, [pc, #152]	; (3f78 <process_encoder+0x9c>)
    3ede:	6a1a      	ldr	r2, [r3, #32]
    3ee0:	6a19      	ldr	r1, [r3, #32]

void process_encoder(void)
{
    uint8_t status = 0;
    status |= (!port_pin_get_input_level(PIN_ENC_B)) << 0;
    status |= (!port_pin_get_input_level(PIN_ENC_A)) << 1;
    3ee2:	0dc9      	lsrs	r1, r1, #23
    3ee4:	2001      	movs	r0, #1
    3ee6:	0003      	movs	r3, r0
    3ee8:	438b      	bics	r3, r1
    3eea:	005b      	lsls	r3, r3, #1
    status |= (!port_pin_get_input_level(PIN_ENC_B)) << 0;
    3eec:	0d92      	lsrs	r2, r2, #22
    3eee:	4042      	eors	r2, r0
    3ef0:	2101      	movs	r1, #1
    3ef2:	400a      	ands	r2, r1
    status |= (!port_pin_get_input_level(PIN_ENC_A)) << 1;
    3ef4:	4313      	orrs	r3, r2

    switch(status) {
    3ef6:	2b01      	cmp	r3, #1
    3ef8:	d009      	beq.n	3f0e <process_encoder+0x32>
    3efa:	2b02      	cmp	r3, #2
    3efc:	d021      	beq.n	3f42 <process_encoder+0x66>
    3efe:	2b00      	cmp	r3, #0
    3f00:	d000      	beq.n	3f04 <process_encoder+0x28>
            break;
        default:
            break;
    }

}
    3f02:	4770      	bx	lr
            encoder_pos = POS_NONE;
    3f04:	4a1d      	ldr	r2, [pc, #116]	; (3f7c <process_encoder+0xa0>)
    3f06:	7013      	strb	r3, [r2, #0]
            encoder = IDLE;
    3f08:	4a1d      	ldr	r2, [pc, #116]	; (3f80 <process_encoder+0xa4>)
    3f0a:	7013      	strb	r3, [r2, #0]
            break;
    3f0c:	e7f9      	b.n	3f02 <process_encoder+0x26>
            if(encoder_pos == POS_NONE) {
    3f0e:	4b1b      	ldr	r3, [pc, #108]	; (3f7c <process_encoder+0xa0>)
    3f10:	781b      	ldrb	r3, [r3, #0]
    3f12:	2b00      	cmp	r3, #0
    3f14:	d008      	beq.n	3f28 <process_encoder+0x4c>
            if(encoder_pos == POS_B) {
    3f16:	2b02      	cmp	r3, #2
    3f18:	d1f3      	bne.n	3f02 <process_encoder+0x26>
                encoder_pos = POS_NONE;
    3f1a:	2200      	movs	r2, #0
    3f1c:	4b17      	ldr	r3, [pc, #92]	; (3f7c <process_encoder+0xa0>)
    3f1e:	701a      	strb	r2, [r3, #0]
                encoder = FORWARD;
    3f20:	3201      	adds	r2, #1
    3f22:	4b17      	ldr	r3, [pc, #92]	; (3f80 <process_encoder+0xa4>)
    3f24:	701a      	strb	r2, [r3, #0]
    3f26:	e7ec      	b.n	3f02 <process_encoder+0x26>
                encoder_pos = POS_A;
    3f28:	2201      	movs	r2, #1
    3f2a:	4b14      	ldr	r3, [pc, #80]	; (3f7c <process_encoder+0xa0>)
    3f2c:	701a      	strb	r2, [r3, #0]
    return proc_millis;
    3f2e:	4915      	ldr	r1, [pc, #84]	; (3f84 <process_encoder+0xa8>)
    3f30:	680b      	ldr	r3, [r1, #0]
                encoder_timer = millis()-last_tick_time;
    3f32:	4a15      	ldr	r2, [pc, #84]	; (3f88 <process_encoder+0xac>)
    3f34:	6810      	ldr	r0, [r2, #0]
    3f36:	1a1b      	subs	r3, r3, r0
    3f38:	4814      	ldr	r0, [pc, #80]	; (3f8c <process_encoder+0xb0>)
    3f3a:	6003      	str	r3, [r0, #0]
    return proc_millis;
    3f3c:	680b      	ldr	r3, [r1, #0]
                last_tick_time=millis();
    3f3e:	6013      	str	r3, [r2, #0]
    3f40:	e7df      	b.n	3f02 <process_encoder+0x26>
            if(encoder_pos == POS_NONE) {
    3f42:	4b0e      	ldr	r3, [pc, #56]	; (3f7c <process_encoder+0xa0>)
    3f44:	781b      	ldrb	r3, [r3, #0]
    3f46:	2b00      	cmp	r3, #0
    3f48:	d008      	beq.n	3f5c <process_encoder+0x80>
            if(encoder_pos == POS_A) {
    3f4a:	2b01      	cmp	r3, #1
    3f4c:	d1d9      	bne.n	3f02 <process_encoder+0x26>
                encoder_pos = POS_NONE;
    3f4e:	2200      	movs	r2, #0
    3f50:	4b0a      	ldr	r3, [pc, #40]	; (3f7c <process_encoder+0xa0>)
    3f52:	701a      	strb	r2, [r3, #0]
                encoder = BACKWARD;
    3f54:	3202      	adds	r2, #2
    3f56:	4b0a      	ldr	r3, [pc, #40]	; (3f80 <process_encoder+0xa4>)
    3f58:	701a      	strb	r2, [r3, #0]
}
    3f5a:	e7d2      	b.n	3f02 <process_encoder+0x26>
                encoder_pos = POS_B;
    3f5c:	2202      	movs	r2, #2
    3f5e:	4b07      	ldr	r3, [pc, #28]	; (3f7c <process_encoder+0xa0>)
    3f60:	701a      	strb	r2, [r3, #0]
    return proc_millis;
    3f62:	4908      	ldr	r1, [pc, #32]	; (3f84 <process_encoder+0xa8>)
    3f64:	680b      	ldr	r3, [r1, #0]
                encoder_timer = millis()-last_tick_time;
    3f66:	4a08      	ldr	r2, [pc, #32]	; (3f88 <process_encoder+0xac>)
    3f68:	6810      	ldr	r0, [r2, #0]
    3f6a:	1a1b      	subs	r3, r3, r0
    3f6c:	4807      	ldr	r0, [pc, #28]	; (3f8c <process_encoder+0xb0>)
    3f6e:	6003      	str	r3, [r0, #0]
    return proc_millis;
    3f70:	680b      	ldr	r3, [r1, #0]
                last_tick_time=millis();
    3f72:	6013      	str	r3, [r2, #0]
    3f74:	e7c5      	b.n	3f02 <process_encoder+0x26>
    3f76:	46c0      	nop			; (mov r8, r8)
    3f78:	41000080 	.word	0x41000080
    3f7c:	20001e8c 	.word	0x20001e8c
    3f80:	20001e68 	.word	0x20001e68
    3f84:	200000d4 	.word	0x200000d4
    3f88:	200000d0 	.word	0x200000d0
    3f8c:	200000cc 	.word	0x200000cc

00003f90 <timer0_compare_callback>:
    a3 = adsr3;
    a4 = adsr4;
}

void timer0_compare_callback(struct tcc_module *const module_inst)
{
    3f90:	b510      	push	{r4, lr}
    adsr_process(a0);
    3f92:	4b0b      	ldr	r3, [pc, #44]	; (3fc0 <timer0_compare_callback+0x30>)
    3f94:	6818      	ldr	r0, [r3, #0]
    3f96:	4c0b      	ldr	r4, [pc, #44]	; (3fc4 <timer0_compare_callback+0x34>)
    3f98:	47a0      	blx	r4
    adsr_process(a1);
    3f9a:	4b0b      	ldr	r3, [pc, #44]	; (3fc8 <timer0_compare_callback+0x38>)
    3f9c:	6818      	ldr	r0, [r3, #0]
    3f9e:	47a0      	blx	r4
    adsr_process(a2);
    3fa0:	4b0a      	ldr	r3, [pc, #40]	; (3fcc <timer0_compare_callback+0x3c>)
    3fa2:	6818      	ldr	r0, [r3, #0]
    3fa4:	47a0      	blx	r4
    adsr_process(a3);
    3fa6:	4b0a      	ldr	r3, [pc, #40]	; (3fd0 <timer0_compare_callback+0x40>)
    3fa8:	6818      	ldr	r0, [r3, #0]
    3faa:	47a0      	blx	r4
    adsr_process(a4);
    3fac:	4b09      	ldr	r3, [pc, #36]	; (3fd4 <timer0_compare_callback+0x44>)
    3fae:	6818      	ldr	r0, [r3, #0]
    3fb0:	47a0      	blx	r4
    proc_millis++;
    3fb2:	4a09      	ldr	r2, [pc, #36]	; (3fd8 <timer0_compare_callback+0x48>)
    3fb4:	6813      	ldr	r3, [r2, #0]
    3fb6:	3301      	adds	r3, #1
    3fb8:	6013      	str	r3, [r2, #0]
    process_encoder();
    3fba:	4b08      	ldr	r3, [pc, #32]	; (3fdc <timer0_compare_callback+0x4c>)
    3fbc:	4798      	blx	r3
}
    3fbe:	bd10      	pop	{r4, pc}
    3fc0:	20001ed4 	.word	0x20001ed4
    3fc4:	00000501 	.word	0x00000501
    3fc8:	20001e64 	.word	0x20001e64
    3fcc:	20001e90 	.word	0x20001e90
    3fd0:	20001e6c 	.word	0x20001e6c
    3fd4:	20001ed8 	.word	0x20001ed8
    3fd8:	200000d4 	.word	0x200000d4
    3fdc:	00003edd 	.word	0x00003edd

00003fe0 <configure_tcc0>:
{
    3fe0:	b570      	push	{r4, r5, r6, lr}
    3fe2:	b0aa      	sub	sp, #168	; 0xa8
    tcc_get_config_defaults(&config_tcc, TCC0);
    3fe4:	4e0e      	ldr	r6, [pc, #56]	; (4020 <configure_tcc0+0x40>)
    3fe6:	ac01      	add	r4, sp, #4
    3fe8:	0031      	movs	r1, r6
    3fea:	0020      	movs	r0, r4
    3fec:	4b0d      	ldr	r3, [pc, #52]	; (4024 <configure_tcc0+0x44>)
    3fee:	4798      	blx	r3
    config_tcc.counter.clock_source = GCLK_GENERATOR_6;
    3ff0:	2306      	movs	r3, #6
    3ff2:	72a3      	strb	r3, [r4, #10]
    config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV16;
    3ff4:	3b02      	subs	r3, #2
    3ff6:	72e3      	strb	r3, [r4, #11]
    config_tcc.counter.period = 250;
    3ff8:	33f6      	adds	r3, #246	; 0xf6
    3ffa:	6063      	str	r3, [r4, #4]
    tcc_init(&tcc0_instance, TCC0, &config_tcc);
    3ffc:	4d0a      	ldr	r5, [pc, #40]	; (4028 <configure_tcc0+0x48>)
    3ffe:	0022      	movs	r2, r4
    4000:	0031      	movs	r1, r6
    4002:	0028      	movs	r0, r5
    4004:	4b09      	ldr	r3, [pc, #36]	; (402c <configure_tcc0+0x4c>)
    4006:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    4008:	682a      	ldr	r2, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    400a:	2102      	movs	r1, #2
    400c:	6893      	ldr	r3, [r2, #8]
    400e:	4219      	tst	r1, r3
    4010:	d1fc      	bne.n	400c <configure_tcc0+0x2c>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    4012:	6813      	ldr	r3, [r2, #0]
    4014:	2102      	movs	r1, #2
    4016:	430b      	orrs	r3, r1
    4018:	6013      	str	r3, [r2, #0]
}
    401a:	b02a      	add	sp, #168	; 0xa8
    401c:	bd70      	pop	{r4, r5, r6, pc}
    401e:	46c0      	nop			; (mov r8, r8)
    4020:	42002400 	.word	0x42002400
    4024:	00002439 	.word	0x00002439
    4028:	20001e94 	.word	0x20001e94
    402c:	00002585 	.word	0x00002585

00004030 <configure_tcc0_callbacks>:
{
    4030:	b5f0      	push	{r4, r5, r6, r7, lr}
    4032:	46c6      	mov	lr, r8
    4034:	b500      	push	{lr}
    4036:	4680      	mov	r8, r0
    4038:	000f      	movs	r7, r1
    403a:	0016      	movs	r6, r2
    403c:	001d      	movs	r5, r3
    tcc_register_callback(&tcc0_instance, timer0_compare_callback, TCC_CALLBACK_OVERFLOW);
    403e:	4c0c      	ldr	r4, [pc, #48]	; (4070 <configure_tcc0_callbacks+0x40>)
    4040:	2200      	movs	r2, #0
    4042:	490c      	ldr	r1, [pc, #48]	; (4074 <configure_tcc0_callbacks+0x44>)
    4044:	0020      	movs	r0, r4
    4046:	4b0c      	ldr	r3, [pc, #48]	; (4078 <configure_tcc0_callbacks+0x48>)
    4048:	4798      	blx	r3
    tcc_enable_callback(&tcc0_instance, TCC_CALLBACK_OVERFLOW);
    404a:	2100      	movs	r1, #0
    404c:	0020      	movs	r0, r4
    404e:	4b0b      	ldr	r3, [pc, #44]	; (407c <configure_tcc0_callbacks+0x4c>)
    4050:	4798      	blx	r3
    a0 = adsr0;
    4052:	4b0b      	ldr	r3, [pc, #44]	; (4080 <configure_tcc0_callbacks+0x50>)
    4054:	4642      	mov	r2, r8
    4056:	601a      	str	r2, [r3, #0]
    a1 = adsr1;
    4058:	4b0a      	ldr	r3, [pc, #40]	; (4084 <configure_tcc0_callbacks+0x54>)
    405a:	601f      	str	r7, [r3, #0]
    a2 = adsr2;
    405c:	4b0a      	ldr	r3, [pc, #40]	; (4088 <configure_tcc0_callbacks+0x58>)
    405e:	601e      	str	r6, [r3, #0]
    a3 = adsr3;
    4060:	4b0a      	ldr	r3, [pc, #40]	; (408c <configure_tcc0_callbacks+0x5c>)
    4062:	601d      	str	r5, [r3, #0]
    a4 = adsr4;
    4064:	4b0a      	ldr	r3, [pc, #40]	; (4090 <configure_tcc0_callbacks+0x60>)
    4066:	9a06      	ldr	r2, [sp, #24]
    4068:	601a      	str	r2, [r3, #0]
}
    406a:	bc04      	pop	{r2}
    406c:	4690      	mov	r8, r2
    406e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4070:	20001e94 	.word	0x20001e94
    4074:	00003f91 	.word	0x00003f91
    4078:	00002969 	.word	0x00002969
    407c:	00002981 	.word	0x00002981
    4080:	20001ed4 	.word	0x20001ed4
    4084:	20001e64 	.word	0x20001e64
    4088:	20001e90 	.word	0x20001e90
    408c:	20001e6c 	.word	0x20001e6c
    4090:	20001ed8 	.word	0x20001ed8

00004094 <get_encoder_speed>:
uint8_t get_encoder_speed(void)
{
    if(encoder_timer>30)return 1;
    4094:	4b08      	ldr	r3, [pc, #32]	; (40b8 <get_encoder_speed+0x24>)
    4096:	681b      	ldr	r3, [r3, #0]
    4098:	2001      	movs	r0, #1
    409a:	2b1e      	cmp	r3, #30
    409c:	d804      	bhi.n	40a8 <get_encoder_speed+0x14>
    if(encoder_timer>20)return 2;
    409e:	4b06      	ldr	r3, [pc, #24]	; (40b8 <get_encoder_speed+0x24>)
    40a0:	681b      	ldr	r3, [r3, #0]
    40a2:	3001      	adds	r0, #1
    40a4:	2b14      	cmp	r3, #20
    40a6:	d900      	bls.n	40aa <get_encoder_speed+0x16>
    if(encoder_timer>10)return 5;
    return 10;
}
    40a8:	4770      	bx	lr
    if(encoder_timer>10)return 5;
    40aa:	4b03      	ldr	r3, [pc, #12]	; (40b8 <get_encoder_speed+0x24>)
    40ac:	681b      	ldr	r3, [r3, #0]
    40ae:	3003      	adds	r0, #3
    40b0:	2b0a      	cmp	r3, #10
    40b2:	d8f9      	bhi.n	40a8 <get_encoder_speed+0x14>
    return 10;
    40b4:	3005      	adds	r0, #5
    40b6:	e7f7      	b.n	40a8 <get_encoder_speed+0x14>
    40b8:	200000cc 	.word	0x200000cc

000040bc <configure_tc0>:

void configure_tc0(void)
{
    40bc:	b510      	push	{r4, lr}
    40be:	b08e      	sub	sp, #56	; 0x38
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    40c0:	2200      	movs	r2, #0
    40c2:	2100      	movs	r1, #0
    40c4:	466b      	mov	r3, sp
    40c6:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    40c8:	2300      	movs	r3, #0
    40ca:	4668      	mov	r0, sp
    40cc:	71c1      	strb	r1, [r0, #7]
	config->run_in_standby             = false;
    40ce:	7043      	strb	r3, [r0, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->on_demand                  = false;
    40d0:	7083      	strb	r3, [r0, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    40d2:	7203      	strb	r3, [r0, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    40d4:	7243      	strb	r3, [r0, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    40d6:	7283      	strb	r3, [r0, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    40d8:	72c3      	strb	r3, [r0, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    40da:	7303      	strb	r3, [r0, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    40dc:	7383      	strb	r3, [r0, #14]
	config->oneshot                    = false;
    40de:	7343      	strb	r3, [r0, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    40e0:	7403      	strb	r3, [r0, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    40e2:	9205      	str	r2, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    40e4:	9206      	str	r2, [sp, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

	config->counter_16_bit.value                   = 0x0000;
    40e6:	8502      	strh	r2, [r0, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    40e8:	8542      	strh	r2, [r0, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    40ea:	8582      	strh	r2, [r0, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    40ec:	2334      	movs	r3, #52	; 0x34
    40ee:	54c1      	strb	r1, [r0, r3]
    struct tc_config config_tc;
    tc_get_config_defaults(&config_tc);

    config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
    40f0:	3b30      	subs	r3, #48	; 0x30
    40f2:	70c3      	strb	r3, [r0, #3]
    config_tc.clock_source = GCLK_GENERATOR_7;
    40f4:	2207      	movs	r2, #7
    40f6:	7002      	strb	r2, [r0, #0]
    config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1;
    config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    40f8:	3a05      	subs	r2, #5
    40fa:	7182      	strb	r2, [r0, #6]
    config_tc.counter_8_bit.compare_capture_channel[1] = 0;
    config_tc.pwm_channel[1].enabled = true;
    40fc:	3a01      	subs	r2, #1
    40fe:	7702      	strb	r2, [r0, #28]
    config_tc.pwm_channel[1].pin_out = PIN_PB11E_TC1_WO1; //BUZZER_PIN;
    4100:	322a      	adds	r2, #42	; 0x2a
    4102:	9208      	str	r2, [sp, #32]
    config_tc.pwm_channel[1].pin_mux = MUX_PB11E_TC1_WO1; //BUZZER_MUX;
    4104:	9309      	str	r3, [sp, #36]	; 0x24

    tc_init(&tc1_instance, TC1, &config_tc);
    4106:	4c0a      	ldr	r4, [pc, #40]	; (4130 <configure_tc0+0x74>)
    4108:	466a      	mov	r2, sp
    410a:	490a      	ldr	r1, [pc, #40]	; (4134 <configure_tc0+0x78>)
    410c:	0020      	movs	r0, r4
    410e:	4b0a      	ldr	r3, [pc, #40]	; (4138 <configure_tc0+0x7c>)
    4110:	4798      	blx	r3
    tc_set_top_value(&tc1_instance, 64);
    4112:	2140      	movs	r1, #64	; 0x40
    4114:	0020      	movs	r0, r4
    4116:	4b09      	ldr	r3, [pc, #36]	; (413c <configure_tc0+0x80>)
    4118:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    411a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    411c:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    411e:	2b00      	cmp	r3, #0
    4120:	d1fc      	bne.n	411c <configure_tc0+0x60>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    4122:	6813      	ldr	r3, [r2, #0]
    4124:	2102      	movs	r1, #2
    4126:	430b      	orrs	r3, r1
    4128:	6013      	str	r3, [r2, #0]
    tc_enable(&tc1_instance);
}
    412a:	b00e      	add	sp, #56	; 0x38
    412c:	bd10      	pop	{r4, pc}
    412e:	46c0      	nop			; (mov r8, r8)
    4130:	20001e70 	.word	0x20001e70
    4134:	42003400 	.word	0x42003400
    4138:	00000745 	.word	0x00000745
    413c:	00000a99 	.word	0x00000a99

00004140 <set_brightness>:

void set_brightness(uint8_t brightness)
{
    4140:	b510      	push	{r4, lr}
    brightness*=4;
    4142:	0080      	lsls	r0, r0, #2
    tc_set_compare_value(&tc1_instance, TC_COMPARE_CAPTURE_CHANNEL_1, brightness);
    4144:	b2c2      	uxtb	r2, r0
    4146:	2101      	movs	r1, #1
    4148:	4801      	ldr	r0, [pc, #4]	; (4150 <set_brightness+0x10>)
    414a:	4b02      	ldr	r3, [pc, #8]	; (4154 <set_brightness+0x14>)
    414c:	4798      	blx	r3
    414e:	bd10      	pop	{r4, pc}
    4150:	20001e70 	.word	0x20001e70
    4154:	00000a11 	.word	0x00000a11

00004158 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    4158:	4770      	bx	lr
	...

0000415c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    415c:	4b0c      	ldr	r3, [pc, #48]	; (4190 <cpu_irq_enter_critical+0x34>)
    415e:	681b      	ldr	r3, [r3, #0]
    4160:	2b00      	cmp	r3, #0
    4162:	d106      	bne.n	4172 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4164:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4168:	2b00      	cmp	r3, #0
    416a:	d007      	beq.n	417c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    416c:	2200      	movs	r2, #0
    416e:	4b09      	ldr	r3, [pc, #36]	; (4194 <cpu_irq_enter_critical+0x38>)
    4170:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4172:	4a07      	ldr	r2, [pc, #28]	; (4190 <cpu_irq_enter_critical+0x34>)
    4174:	6813      	ldr	r3, [r2, #0]
    4176:	3301      	adds	r3, #1
    4178:	6013      	str	r3, [r2, #0]
}
    417a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    417c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    417e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4182:	2200      	movs	r2, #0
    4184:	4b04      	ldr	r3, [pc, #16]	; (4198 <cpu_irq_enter_critical+0x3c>)
    4186:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4188:	3201      	adds	r2, #1
    418a:	4b02      	ldr	r3, [pc, #8]	; (4194 <cpu_irq_enter_critical+0x38>)
    418c:	701a      	strb	r2, [r3, #0]
    418e:	e7f0      	b.n	4172 <cpu_irq_enter_critical+0x16>
    4190:	200000d8 	.word	0x200000d8
    4194:	200000dc 	.word	0x200000dc
    4198:	20000015 	.word	0x20000015

0000419c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    419c:	4b08      	ldr	r3, [pc, #32]	; (41c0 <cpu_irq_leave_critical+0x24>)
    419e:	681a      	ldr	r2, [r3, #0]
    41a0:	3a01      	subs	r2, #1
    41a2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    41a4:	681b      	ldr	r3, [r3, #0]
    41a6:	2b00      	cmp	r3, #0
    41a8:	d109      	bne.n	41be <cpu_irq_leave_critical+0x22>
    41aa:	4b06      	ldr	r3, [pc, #24]	; (41c4 <cpu_irq_leave_critical+0x28>)
    41ac:	781b      	ldrb	r3, [r3, #0]
    41ae:	2b00      	cmp	r3, #0
    41b0:	d005      	beq.n	41be <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    41b2:	2201      	movs	r2, #1
    41b4:	4b04      	ldr	r3, [pc, #16]	; (41c8 <cpu_irq_leave_critical+0x2c>)
    41b6:	701a      	strb	r2, [r3, #0]
    41b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    41bc:	b662      	cpsie	i
	}
}
    41be:	4770      	bx	lr
    41c0:	200000d8 	.word	0x200000d8
    41c4:	200000dc 	.word	0x200000dc
    41c8:	20000015 	.word	0x20000015

000041cc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    41cc:	b510      	push	{r4, lr}
	switch (clock_source) {
    41ce:	2807      	cmp	r0, #7
    41d0:	d803      	bhi.n	41da <system_clock_source_get_hz+0xe>
    41d2:	0080      	lsls	r0, r0, #2
    41d4:	4b0f      	ldr	r3, [pc, #60]	; (4214 <system_clock_source_get_hz+0x48>)
    41d6:	581b      	ldr	r3, [r3, r0]
    41d8:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    41da:	2000      	movs	r0, #0
    41dc:	e018      	b.n	4210 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
    41de:	4b0e      	ldr	r3, [pc, #56]	; (4218 <system_clock_source_get_hz+0x4c>)
    41e0:	6858      	ldr	r0, [r3, #4]
    41e2:	e015      	b.n	4210 <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    41e4:	4b0d      	ldr	r3, [pc, #52]	; (421c <system_clock_source_get_hz+0x50>)
    41e6:	7d59      	ldrb	r1, [r3, #21]
    41e8:	0709      	lsls	r1, r1, #28
    41ea:	0f09      	lsrs	r1, r1, #28
    41ec:	3101      	adds	r1, #1
    41ee:	480c      	ldr	r0, [pc, #48]	; (4220 <system_clock_source_get_hz+0x54>)
    41f0:	4b0c      	ldr	r3, [pc, #48]	; (4224 <system_clock_source_get_hz+0x58>)
    41f2:	4798      	blx	r3
    41f4:	e00c      	b.n	4210 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
    41f6:	4b08      	ldr	r3, [pc, #32]	; (4218 <system_clock_source_get_hz+0x4c>)
    41f8:	6898      	ldr	r0, [r3, #8]
    41fa:	e009      	b.n	4210 <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    41fc:	4b07      	ldr	r3, [pc, #28]	; (421c <system_clock_source_get_hz+0x50>)
    41fe:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    4200:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    4202:	079b      	lsls	r3, r3, #30
    4204:	d504      	bpl.n	4210 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
    4206:	4b04      	ldr	r3, [pc, #16]	; (4218 <system_clock_source_get_hz+0x4c>)
    4208:	6818      	ldr	r0, [r3, #0]
    420a:	e001      	b.n	4210 <system_clock_source_get_hz+0x44>
		return 32768UL;
    420c:	2080      	movs	r0, #128	; 0x80
    420e:	0200      	lsls	r0, r0, #8
	}
}
    4210:	bd10      	pop	{r4, pc}
    4212:	46c0      	nop			; (mov r8, r8)
    4214:	00008834 	.word	0x00008834
    4218:	200000e0 	.word	0x200000e0
    421c:	40001000 	.word	0x40001000
    4220:	02dc6c00 	.word	0x02dc6c00
    4224:	00005615 	.word	0x00005615

00004228 <system_clock_source_xosc_set_config>:
 * \param[in] config  External oscillator configuration structure containing
 *                    the new config
 */
void system_clock_source_xosc_set_config(
		struct system_clock_source_xosc_config *const config)
{
    4228:	b5f0      	push	{r4, r5, r6, r7, lr}
    422a:	46de      	mov	lr, fp
    422c:	4657      	mov	r7, sl
    422e:	464e      	mov	r6, r9
    4230:	4645      	mov	r5, r8
    4232:	b5e0      	push	{r5, r6, r7, lr}
	OSCCTRL_XOSCCTRL_Type temp = OSCCTRL->XOSCCTRL;
    4234:	4b38      	ldr	r3, [pc, #224]	; (4318 <system_clock_source_xosc_set_config+0xf0>)
    4236:	8a1b      	ldrh	r3, [r3, #16]
    4238:	071a      	lsls	r2, r3, #28
    423a:	0fd2      	lsrs	r2, r2, #31
    423c:	4691      	mov	r9, r2
    423e:	055e      	lsls	r6, r3, #21
    4240:	0f76      	lsrs	r6, r6, #29

	temp.bit.STARTUP = config->startup_time;
    4242:	7842      	ldrb	r2, [r0, #1]
    4244:	240f      	movs	r4, #15
    4246:	4014      	ands	r4, r2
    4248:	46a3      	mov	fp, r4

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    424a:	7802      	ldrb	r2, [r0, #0]
    424c:	4251      	negs	r1, r2
    424e:	414a      	adcs	r2, r1
    4250:	b2d2      	uxtb	r2, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AMPGC = config->auto_gain_control;
    4252:	7885      	ldrb	r5, [r0, #2]

	/* Set gain */
	if (config->frequency <= 2000000) {
    4254:	6841      	ldr	r1, [r0, #4]
    4256:	4f31      	ldr	r7, [pc, #196]	; (431c <system_clock_source_xosc_set_config+0xf4>)
    4258:	42b9      	cmp	r1, r7
    425a:	d90d      	bls.n	4278 <system_clock_source_xosc_set_config+0x50>
		temp.bit.GAIN = 0;
	} else if (config->frequency <= 4000000) {
    425c:	4f30      	ldr	r7, [pc, #192]	; (4320 <system_clock_source_xosc_set_config+0xf8>)
    425e:	42b9      	cmp	r1, r7
    4260:	d953      	bls.n	430a <system_clock_source_xosc_set_config+0xe2>
		temp.bit.GAIN = 1;
	} else if (config->frequency <= 8000000) {
    4262:	4f30      	ldr	r7, [pc, #192]	; (4324 <system_clock_source_xosc_set_config+0xfc>)
    4264:	42b9      	cmp	r1, r7
    4266:	d952      	bls.n	430e <system_clock_source_xosc_set_config+0xe6>
		temp.bit.GAIN = 2;
	} else if (config->frequency <= 16000000) {
    4268:	4f2f      	ldr	r7, [pc, #188]	; (4328 <system_clock_source_xosc_set_config+0x100>)
    426a:	42b9      	cmp	r1, r7
    426c:	d951      	bls.n	4312 <system_clock_source_xosc_set_config+0xea>
		temp.bit.GAIN = 3;
	} else if (config->frequency <= 32000000) {
    426e:	4f2f      	ldr	r7, [pc, #188]	; (432c <system_clock_source_xosc_set_config+0x104>)
    4270:	42b9      	cmp	r1, r7
    4272:	d802      	bhi.n	427a <system_clock_source_xosc_set_config+0x52>
		temp.bit.GAIN = 4;
    4274:	2604      	movs	r6, #4
    4276:	e000      	b.n	427a <system_clock_source_xosc_set_config+0x52>
		temp.bit.GAIN = 0;
    4278:	2600      	movs	r6, #0
	}

	temp.bit.ONDEMAND = config->on_demand;
    427a:	7a47      	ldrb	r7, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    427c:	7a04      	ldrb	r4, [r0, #8]
    427e:	46a4      	mov	ip, r4
	temp.bit.SWBEN    = config->enable_clock_switch_back;
    4280:	7b44      	ldrb	r4, [r0, #13]
    4282:	46a0      	mov	r8, r4

	if (config->enable_clock_failure_detector) {
    4284:	7b04      	ldrb	r4, [r0, #12]
    4286:	2c00      	cmp	r4, #0
    4288:	d001      	beq.n	428e <system_clock_source_xosc_set_config+0x66>
		Assert(OSCCTRL->OSC48MCTRL.reg & OSCCTRL_OSC48MCTRL_ENABLE);
		temp.bit.CFDEN    = config->enable_clock_failure_detector;
    428a:	2401      	movs	r4, #1
    428c:	46a1      	mov	r9, r4
	}

	/* Store XOSC frequency for internal use */
	_system_clock_inst.xosc.frequency = config->frequency;
    428e:	4c28      	ldr	r4, [pc, #160]	; (4330 <system_clock_source_xosc_set_config+0x108>)
    4290:	6061      	str	r1, [r4, #4]

	OSCCTRL->EVCTRL.reg =
			config->enable_clock_failure_detector_event_outut << OSCCTRL_EVCTRL_CFDEO_Pos;
    4292:	7ac1      	ldrb	r1, [r0, #11]
    4294:	468a      	mov	sl, r1
	OSCCTRL->EVCTRL.reg =
    4296:	4920      	ldr	r1, [pc, #128]	; (4318 <system_clock_source_xosc_set_config+0xf0>)
    4298:	4654      	mov	r4, sl
    429a:	74cc      	strb	r4, [r1, #19]

	OSCCTRL->CFDPRESC.reg = OSCCTRL_CFDPRESC_CFDPRESC(config->clock_failure_detector_prescaler) ;
    429c:	7a80      	ldrb	r0, [r0, #10]
    429e:	4682      	mov	sl, r0
    42a0:	2007      	movs	r0, #7
    42a2:	4654      	mov	r4, sl
    42a4:	4020      	ands	r0, r4
    42a6:	7488      	strb	r0, [r1, #18]

	OSCCTRL->XOSCCTRL = temp;
    42a8:	0092      	lsls	r2, r2, #2
    42aa:	2004      	movs	r0, #4
    42ac:	4383      	bics	r3, r0
    42ae:	431a      	orrs	r2, r3
    42b0:	3803      	subs	r0, #3
    42b2:	464b      	mov	r3, r9
    42b4:	00db      	lsls	r3, r3, #3
    42b6:	2408      	movs	r4, #8
    42b8:	43a2      	bics	r2, r4
    42ba:	431a      	orrs	r2, r3
    42bc:	4643      	mov	r3, r8
    42be:	4003      	ands	r3, r0
    42c0:	011b      	lsls	r3, r3, #4
    42c2:	3408      	adds	r4, #8
    42c4:	43a2      	bics	r2, r4
    42c6:	431a      	orrs	r2, r3
    42c8:	4663      	mov	r3, ip
    42ca:	4003      	ands	r3, r0
    42cc:	019b      	lsls	r3, r3, #6
    42ce:	3430      	adds	r4, #48	; 0x30
    42d0:	43a2      	bics	r2, r4
    42d2:	431a      	orrs	r2, r3
    42d4:	4007      	ands	r7, r0
    42d6:	01ff      	lsls	r7, r7, #7
    42d8:	2380      	movs	r3, #128	; 0x80
    42da:	439a      	bics	r2, r3
    42dc:	0013      	movs	r3, r2
    42de:	433b      	orrs	r3, r7
    42e0:	0236      	lsls	r6, r6, #8
    42e2:	4a14      	ldr	r2, [pc, #80]	; (4334 <system_clock_source_xosc_set_config+0x10c>)
    42e4:	4013      	ands	r3, r2
    42e6:	4333      	orrs	r3, r6
    42e8:	4028      	ands	r0, r5
    42ea:	02c0      	lsls	r0, r0, #11
    42ec:	4a12      	ldr	r2, [pc, #72]	; (4338 <system_clock_source_xosc_set_config+0x110>)
    42ee:	4013      	ands	r3, r2
    42f0:	4303      	orrs	r3, r0
    42f2:	465a      	mov	r2, fp
    42f4:	0314      	lsls	r4, r2, #12
    42f6:	051b      	lsls	r3, r3, #20
    42f8:	0d1b      	lsrs	r3, r3, #20
    42fa:	4323      	orrs	r3, r4
    42fc:	820b      	strh	r3, [r1, #16]
}
    42fe:	bc3c      	pop	{r2, r3, r4, r5}
    4300:	4690      	mov	r8, r2
    4302:	4699      	mov	r9, r3
    4304:	46a2      	mov	sl, r4
    4306:	46ab      	mov	fp, r5
    4308:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp.bit.GAIN = 1;
    430a:	2601      	movs	r6, #1
    430c:	e7b5      	b.n	427a <system_clock_source_xosc_set_config+0x52>
		temp.bit.GAIN = 2;
    430e:	2602      	movs	r6, #2
    4310:	e7b3      	b.n	427a <system_clock_source_xosc_set_config+0x52>
		temp.bit.GAIN = 3;
    4312:	2603      	movs	r6, #3
    4314:	e7b1      	b.n	427a <system_clock_source_xosc_set_config+0x52>
    4316:	46c0      	nop			; (mov r8, r8)
    4318:	40001000 	.word	0x40001000
    431c:	001e8480 	.word	0x001e8480
    4320:	003d0900 	.word	0x003d0900
    4324:	007a1200 	.word	0x007a1200
    4328:	00f42400 	.word	0x00f42400
    432c:	01e84800 	.word	0x01e84800
    4330:	200000e0 	.word	0x200000e0
    4334:	fffff8ff 	.word	0xfffff8ff
    4338:	fffff7ff 	.word	0xfffff7ff

0000433c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    433e:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    4340:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    4342:	7d03      	ldrb	r3, [r0, #20]
    4344:	2b01      	cmp	r3, #1
    4346:	d04d      	beq.n	43e4 <system_clock_source_dpll_set_config+0xa8>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    4348:	68a3      	ldr	r3, [r4, #8]
    434a:	0118      	lsls	r0, r3, #4
    434c:	0029      	movs	r1, r5
    434e:	4b29      	ldr	r3, [pc, #164]	; (43f4 <system_clock_source_dpll_set_config+0xb8>)
    4350:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    4352:	220f      	movs	r2, #15
    4354:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    4356:	0903      	lsrs	r3, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    4358:	7821      	ldrb	r1, [r4, #0]
    435a:	01c9      	lsls	r1, r1, #7
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    435c:	7866      	ldrb	r6, [r4, #1]
    435e:	01b6      	lsls	r6, r6, #6
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    4360:	4331      	orrs	r1, r6
    4362:	b2c9      	uxtb	r1, r1
	OSCCTRL->DPLLCTRLA.reg =
    4364:	4e24      	ldr	r6, [pc, #144]	; (43f8 <system_clock_source_dpll_set_config+0xbc>)
    4366:	7731      	strb	r1, [r6, #28]

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    4368:	0411      	lsls	r1, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    436a:	3b01      	subs	r3, #1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);
    436c:	051b      	lsls	r3, r3, #20
    436e:	0d1b      	lsrs	r3, r3, #20
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    4370:	430b      	orrs	r3, r1
	OSCCTRL->DPLLRATIO.reg =
    4372:	6233      	str	r3, [r6, #32]

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    4374:	0037      	movs	r7, r6
    4376:	262c      	movs	r6, #44	; 0x2c
    4378:	2104      	movs	r1, #4
    437a:	5dbb      	ldrb	r3, [r7, r6]
    437c:	420b      	tst	r3, r1
    437e:	d1fc      	bne.n	437a <system_clock_source_dpll_set_config+0x3e>
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
    4380:	78a3      	ldrb	r3, [r4, #2]
    4382:	031b      	lsls	r3, r3, #12
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
    4384:	78e1      	ldrb	r1, [r4, #3]
    4386:	00c9      	lsls	r1, r1, #3
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    4388:	430b      	orrs	r3, r1
    438a:	7921      	ldrb	r1, [r4, #4]
    438c:	0089      	lsls	r1, r1, #2
    438e:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);
    4390:	7ca1      	ldrb	r1, [r4, #18]
    4392:	2603      	movs	r6, #3
    4394:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    4396:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    4398:	8a21      	ldrh	r1, [r4, #16]
    439a:	0409      	lsls	r1, r1, #16
    439c:	4f17      	ldr	r7, [pc, #92]	; (43fc <system_clock_source_dpll_set_config+0xc0>)
    439e:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    43a0:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    43a2:	7ce1      	ldrb	r1, [r4, #19]
    43a4:	0209      	lsls	r1, r1, #8
    43a6:	27e0      	movs	r7, #224	; 0xe0
    43a8:	00ff      	lsls	r7, r7, #3
    43aa:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    43ac:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    43ae:	7d27      	ldrb	r7, [r4, #20]
    43b0:	013f      	lsls	r7, r7, #4
    43b2:	2130      	movs	r1, #48	; 0x30
    43b4:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    43b6:	430b      	orrs	r3, r1
	OSCCTRL->DPLLCTRLB.reg =
    43b8:	490f      	ldr	r1, [pc, #60]	; (43f8 <system_clock_source_dpll_set_config+0xbc>)
    43ba:	624b      	str	r3, [r1, #36]	; 0x24

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    43bc:	7d63      	ldrb	r3, [r4, #21]
    43be:	401e      	ands	r6, r3
    43c0:	2328      	movs	r3, #40	; 0x28
    43c2:	54ce      	strb	r6, [r1, r3]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    43c4:	000f      	movs	r7, r1
    43c6:	262c      	movs	r6, #44	; 0x2c
    43c8:	2108      	movs	r1, #8
    43ca:	5dbb      	ldrb	r3, [r7, r6]
    43cc:	420b      	tst	r3, r1
    43ce:	d1fc      	bne.n	43ca <system_clock_source_dpll_set_config+0x8e>
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
    43d0:	230f      	movs	r3, #15
    43d2:	4398      	bics	r0, r3
    43d4:	1882      	adds	r2, r0, r2
			(refclk *
    43d6:	436a      	muls	r2, r5
			) >> (4 + config->prescaler);
    43d8:	7d63      	ldrb	r3, [r4, #21]
    43da:	3304      	adds	r3, #4
    43dc:	40da      	lsrs	r2, r3
	_system_clock_inst.dpll.frequency =
    43de:	4b08      	ldr	r3, [pc, #32]	; (4400 <system_clock_source_dpll_set_config+0xc4>)
    43e0:	601a      	str	r2, [r3, #0]
}
    43e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    43e4:	8a01      	ldrh	r1, [r0, #16]
    43e6:	3101      	adds	r1, #1
    43e8:	0049      	lsls	r1, r1, #1
    43ea:	0028      	movs	r0, r5
    43ec:	4b01      	ldr	r3, [pc, #4]	; (43f4 <system_clock_source_dpll_set_config+0xb8>)
    43ee:	4798      	blx	r3
    43f0:	0005      	movs	r5, r0
    43f2:	e7a9      	b.n	4348 <system_clock_source_dpll_set_config+0xc>
    43f4:	00005615 	.word	0x00005615
    43f8:	40001000 	.word	0x40001000
    43fc:	07ff0000 	.word	0x07ff0000
    4400:	200000e0 	.word	0x200000e0

00004404 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4404:	2807      	cmp	r0, #7
    4406:	d803      	bhi.n	4410 <system_clock_source_enable+0xc>
    4408:	0080      	lsls	r0, r0, #2
    440a:	4b18      	ldr	r3, [pc, #96]	; (446c <system_clock_source_enable+0x68>)
    440c:	581b      	ldr	r3, [r3, r0]
    440e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4410:	2017      	movs	r0, #23
    4412:	e029      	b.n	4468 <system_clock_source_enable+0x64>
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
    4414:	4a16      	ldr	r2, [pc, #88]	; (4470 <system_clock_source_enable+0x6c>)
    4416:	7d13      	ldrb	r3, [r2, #20]
    4418:	2102      	movs	r1, #2
    441a:	430b      	orrs	r3, r1
    441c:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    441e:	2000      	movs	r0, #0
    4420:	e022      	b.n	4468 <system_clock_source_enable+0x64>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    4422:	4a14      	ldr	r2, [pc, #80]	; (4474 <system_clock_source_enable+0x70>)
    4424:	6993      	ldr	r3, [r2, #24]
    4426:	2102      	movs	r1, #2
    4428:	430b      	orrs	r3, r1
    442a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    442c:	2000      	movs	r0, #0
		break;
    442e:	e01b      	b.n	4468 <system_clock_source_enable+0x64>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    4430:	4a0f      	ldr	r2, [pc, #60]	; (4470 <system_clock_source_enable+0x6c>)
    4432:	8a13      	ldrh	r3, [r2, #16]
    4434:	2102      	movs	r1, #2
    4436:	430b      	orrs	r3, r1
    4438:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    443a:	2000      	movs	r0, #0
		break;
    443c:	e014      	b.n	4468 <system_clock_source_enable+0x64>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    443e:	4a0d      	ldr	r2, [pc, #52]	; (4474 <system_clock_source_enable+0x70>)
    4440:	8a93      	ldrh	r3, [r2, #20]
    4442:	2102      	movs	r1, #2
    4444:	430b      	orrs	r3, r1
    4446:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    4448:	2000      	movs	r0, #0
		break;
    444a:	e00d      	b.n	4468 <system_clock_source_enable+0x64>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    444c:	4a08      	ldr	r2, [pc, #32]	; (4470 <system_clock_source_enable+0x6c>)
    444e:	7f13      	ldrb	r3, [r2, #28]
    4450:	2102      	movs	r1, #2
    4452:	430b      	orrs	r3, r1
    4454:	7713      	strb	r3, [r2, #28]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    4456:	0010      	movs	r0, r2
    4458:	312a      	adds	r1, #42	; 0x2a
    445a:	2202      	movs	r2, #2
    445c:	5c43      	ldrb	r3, [r0, r1]
    445e:	4213      	tst	r3, r2
    4460:	d1fc      	bne.n	445c <system_clock_source_enable+0x58>
	return STATUS_OK;
    4462:	2000      	movs	r0, #0
    4464:	e000      	b.n	4468 <system_clock_source_enable+0x64>
		return STATUS_OK;
    4466:	2000      	movs	r0, #0
}
    4468:	4770      	bx	lr
    446a:	46c0      	nop			; (mov r8, r8)
    446c:	00008854 	.word	0x00008854
    4470:	40001000 	.word	0x40001000
    4474:	40001400 	.word	0x40001400

00004478 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    4478:	b5f0      	push	{r4, r5, r6, r7, lr}
    447a:	46d6      	mov	lr, sl
    447c:	464f      	mov	r7, r9
    447e:	4646      	mov	r6, r8
    4480:	b5c0      	push	{r6, r7, lr}
    4482:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    4484:	2203      	movs	r2, #3
    4486:	4b62      	ldr	r3, [pc, #392]	; (4610 <system_clock_init+0x198>)
    4488:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    448a:	4a62      	ldr	r2, [pc, #392]	; (4614 <system_clock_init+0x19c>)
    448c:	6853      	ldr	r3, [r2, #4]
    448e:	211e      	movs	r1, #30
    4490:	438b      	bics	r3, r1
    4492:	3918      	subs	r1, #24
    4494:	430b      	orrs	r3, r1
    4496:	6053      	str	r3, [r2, #4]
	config->external_clock    = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    4498:	a80a      	add	r0, sp, #40	; 0x28
    449a:	2300      	movs	r3, #0
    449c:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control = false;
    449e:	7083      	strb	r3, [r0, #2]
	config->frequency         = 12000000UL;
    44a0:	4a5d      	ldr	r2, [pc, #372]	; (4618 <system_clock_init+0x1a0>)
    44a2:	6042      	str	r2, [r0, #4]
	config->run_in_standby    = false;
    44a4:	7203      	strb	r3, [r0, #8]
	config->on_demand         = false;
    44a6:	7243      	strb	r3, [r0, #9]
	config->clock_failure_detector_prescaler = SYSTEM_CLOCK_XOSC_FAILURE_DETECTOR_PRESCALER_1;
    44a8:	7283      	strb	r3, [r0, #10]
	config->enable_clock_failure_detector_event_outut = false;
    44aa:	72c3      	strb	r3, [r0, #11]
	config->enable_clock_failure_detector = false;
    44ac:	7303      	strb	r3, [r0, #12]
	config->enable_clock_switch_back = false;
    44ae:	7343      	strb	r3, [r0, #13]
#if CONF_CLOCK_XOSC_ENABLE == true
	struct system_clock_source_xosc_config xosc_conf;
	system_clock_source_xosc_get_config_defaults(&xosc_conf);

	xosc_conf.external_clock    = CONF_CLOCK_XOSC_EXTERNAL_CRYSTAL;
	xosc_conf.startup_time      = CONF_CLOCK_XOSC_STARTUP_TIME;
    44b0:	3301      	adds	r3, #1
    44b2:	7043      	strb	r3, [r0, #1]
	xosc_conf.enable_clock_failure_detector    = CONF_CLOCK_XOSC_FAILURE_DETECTOR_ENABLE;
	xosc_conf.enable_clock_failure_detector_event_outut =
		CONF_CLOCK_XOSC_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc_conf.enable_clock_switch_back = CONF_CLOCK_XOSC_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc_set_config(&xosc_conf);
    44b4:	4b59      	ldr	r3, [pc, #356]	; (461c <system_clock_init+0x1a4>)
    44b6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC);
    44b8:	2000      	movs	r0, #0
    44ba:	4b59      	ldr	r3, [pc, #356]	; (4620 <system_clock_init+0x1a8>)
    44bc:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    44be:	4959      	ldr	r1, [pc, #356]	; (4624 <system_clock_init+0x1ac>)
    44c0:	2201      	movs	r2, #1
    44c2:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC));
    44c4:	421a      	tst	r2, r3
    44c6:	d0fc      	beq.n	44c2 <system_clock_init+0x4a>
	if (CONF_CLOCK_XOSC_ON_DEMAND || CONF_CLOCK_XOSC_AUTO_GAIN_CONTROL) {
		OSCCTRL->XOSCCTRL.reg |=
    44c8:	4b56      	ldr	r3, [pc, #344]	; (4624 <system_clock_init+0x1ac>)
    44ca:	8a1a      	ldrh	r2, [r3, #16]
    44cc:	2180      	movs	r1, #128	; 0x80
    44ce:	430a      	orrs	r2, r1
    44d0:	821a      	strh	r2, [r3, #16]
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    44d2:	7d1a      	ldrb	r2, [r3, #20]
    44d4:	3140      	adds	r1, #64	; 0x40
    44d6:	430a      	orrs	r2, r1
    44d8:	751a      	strb	r2, [r3, #20]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    44da:	4b53      	ldr	r3, [pc, #332]	; (4628 <system_clock_init+0x1b0>)
    44dc:	4798      	blx	r3
	config->division_factor    = 1;
    44de:	ac01      	add	r4, sp, #4
    44e0:	2601      	movs	r6, #1
    44e2:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    44e4:	2500      	movs	r5, #0
    44e6:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    44e8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    44ea:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    44ec:	7025      	strb	r5, [r4, #0]
    44ee:	0021      	movs	r1, r4
    44f0:	2001      	movs	r0, #1
    44f2:	4b4e      	ldr	r3, [pc, #312]	; (462c <system_clock_init+0x1b4>)
    44f4:	4698      	mov	r8, r3
    44f6:	4798      	blx	r3
    44f8:	2001      	movs	r0, #1
    44fa:	4f4d      	ldr	r7, [pc, #308]	; (4630 <system_clock_init+0x1b8>)
    44fc:	47b8      	blx	r7
	config->division_factor    = 1;
    44fe:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    4500:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    4502:	2306      	movs	r3, #6
    4504:	4699      	mov	r9, r3
    4506:	7023      	strb	r3, [r4, #0]
	config->output_enable      = false;
    4508:	7265      	strb	r5, [r4, #9]
    450a:	7226      	strb	r6, [r4, #8]
    450c:	0021      	movs	r1, r4
    450e:	2002      	movs	r0, #2
    4510:	47c0      	blx	r8
    4512:	2002      	movs	r0, #2
    4514:	47b8      	blx	r7
	config->division_factor    = 1;
    4516:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    4518:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    451a:	7265      	strb	r5, [r4, #9]
    451c:	2307      	movs	r3, #7
    451e:	469a      	mov	sl, r3
    4520:	7023      	strb	r3, [r4, #0]
    4522:	7226      	strb	r6, [r4, #8]
    4524:	0021      	movs	r1, r4
    4526:	2003      	movs	r0, #3
    4528:	47c0      	blx	r8
    452a:	2003      	movs	r0, #3
    452c:	47b8      	blx	r7
	config->division_factor    = 1;
    452e:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    4530:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    4532:	464b      	mov	r3, r9
    4534:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    4536:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    4538:	7265      	strb	r5, [r4, #9]
    453a:	0021      	movs	r1, r4
    453c:	2004      	movs	r0, #4
    453e:	47c0      	blx	r8
    4540:	2004      	movs	r0, #4
    4542:	47b8      	blx	r7
	config->division_factor    = 1;
    4544:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    4546:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    4548:	464b      	mov	r3, r9
    454a:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    454c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    454e:	7265      	strb	r5, [r4, #9]
    4550:	0021      	movs	r1, r4
    4552:	2005      	movs	r0, #5
    4554:	47c0      	blx	r8
    4556:	2005      	movs	r0, #5
    4558:	47b8      	blx	r7
	config->division_factor    = 1;
    455a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    455c:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    455e:	464b      	mov	r3, r9
    4560:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    4562:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    4564:	7265      	strb	r5, [r4, #9]
    4566:	0021      	movs	r1, r4
    4568:	2006      	movs	r0, #6
    456a:	47c0      	blx	r8
    456c:	2006      	movs	r0, #6
    456e:	47b8      	blx	r7
	config->division_factor    = 1;
    4570:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    4572:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    4574:	464b      	mov	r3, r9
    4576:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    4578:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    457a:	7265      	strb	r5, [r4, #9]
    457c:	0021      	movs	r1, r4
    457e:	2007      	movs	r0, #7
    4580:	47c0      	blx	r8
    4582:	2007      	movs	r0, #7
    4584:	47b8      	blx	r7
	config->division_factor    = 1;
    4586:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    4588:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    458a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    458c:	7265      	strb	r5, [r4, #9]
    458e:	4653      	mov	r3, sl
    4590:	7023      	strb	r3, [r4, #0]
    4592:	0021      	movs	r1, r4
    4594:	2008      	movs	r0, #8
    4596:	47c0      	blx	r8
    4598:	2008      	movs	r0, #8
    459a:	47b8      	blx	r7
	config->lock_bypass         = false;
    459c:	a804      	add	r0, sp, #16
    459e:	7085      	strb	r5, [r0, #2]
	config->wake_up_fast        = false;
    45a0:	70c5      	strb	r5, [r0, #3]
	config->low_power_enable    = false;
    45a2:	7105      	strb	r5, [r0, #4]
	config->output_frequency    = 48000000;
    45a4:	4b23      	ldr	r3, [pc, #140]	; (4634 <system_clock_init+0x1bc>)
    45a6:	6083      	str	r3, [r0, #8]
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    45a8:	7545      	strb	r5, [r0, #21]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    45aa:	74c5      	strb	r5, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    45ac:	7485      	strb	r5, [r0, #18]
		Assert(false);
	}
	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    45ae:	7005      	strb	r5, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    45b0:	7046      	strb	r6, [r0, #1]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    45b2:	7506      	strb	r6, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    45b4:	4b18      	ldr	r3, [pc, #96]	; (4618 <system_clock_init+0x1a0>)
    45b6:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
    45b8:	2378      	movs	r3, #120	; 0x78
    45ba:	33ff      	adds	r3, #255	; 0xff
    45bc:	8203      	strh	r3, [r0, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    45be:	4b1e      	ldr	r3, [pc, #120]	; (4638 <system_clock_init+0x1c0>)
    45c0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    45c2:	2007      	movs	r0, #7
    45c4:	4b16      	ldr	r3, [pc, #88]	; (4620 <system_clock_init+0x1a8>)
    45c6:	4798      	blx	r3
		return ((OSCCTRL->DPLLSTATUS.reg &
    45c8:	4816      	ldr	r0, [pc, #88]	; (4624 <system_clock_init+0x1ac>)
    45ca:	2130      	movs	r1, #48	; 0x30
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    45cc:	2203      	movs	r2, #3
		return ((OSCCTRL->DPLLSTATUS.reg &
    45ce:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    45d0:	4013      	ands	r3, r2
    45d2:	2b03      	cmp	r3, #3
    45d4:	d1fb      	bne.n	45ce <system_clock_init+0x156>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		OSCCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    45d6:	4a13      	ldr	r2, [pc, #76]	; (4624 <system_clock_init+0x1ac>)
    45d8:	7f11      	ldrb	r1, [r2, #28]
    45da:	3b83      	subs	r3, #131	; 0x83
    45dc:	430b      	orrs	r3, r1
    45de:	7713      	strb	r3, [r2, #28]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    45e0:	2301      	movs	r3, #1
    45e2:	4a16      	ldr	r2, [pc, #88]	; (463c <system_clock_init+0x1c4>)
    45e4:	7113      	strb	r3, [r2, #4]
	config->division_factor    = 1;
    45e6:	a901      	add	r1, sp, #4
    45e8:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    45ea:	2300      	movs	r3, #0
    45ec:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    45ee:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    45f0:	724b      	strb	r3, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    45f2:	3307      	adds	r3, #7
    45f4:	700b      	strb	r3, [r1, #0]
    45f6:	2000      	movs	r0, #0
    45f8:	4b0c      	ldr	r3, [pc, #48]	; (462c <system_clock_init+0x1b4>)
    45fa:	4798      	blx	r3
    45fc:	2000      	movs	r0, #0
    45fe:	4b0c      	ldr	r3, [pc, #48]	; (4630 <system_clock_init+0x1b8>)
    4600:	4798      	blx	r3
#endif

}
    4602:	b00e      	add	sp, #56	; 0x38
    4604:	bc1c      	pop	{r2, r3, r4}
    4606:	4690      	mov	r8, r2
    4608:	4699      	mov	r9, r3
    460a:	46a2      	mov	sl, r4
    460c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    460e:	46c0      	nop			; (mov r8, r8)
    4610:	40001800 	.word	0x40001800
    4614:	41004000 	.word	0x41004000
    4618:	00b71b00 	.word	0x00b71b00
    461c:	00004229 	.word	0x00004229
    4620:	00004405 	.word	0x00004405
    4624:	40001000 	.word	0x40001000
    4628:	00004641 	.word	0x00004641
    462c:	00004665 	.word	0x00004665
    4630:	00004711 	.word	0x00004711
    4634:	02dc6c00 	.word	0x02dc6c00
    4638:	0000433d 	.word	0x0000433d
    463c:	40000800 	.word	0x40000800

00004640 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    4640:	4a06      	ldr	r2, [pc, #24]	; (465c <system_gclk_init+0x1c>)
    4642:	6953      	ldr	r3, [r2, #20]
    4644:	2180      	movs	r1, #128	; 0x80
    4646:	430b      	orrs	r3, r1
    4648:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    464a:	2201      	movs	r2, #1
    464c:	4b04      	ldr	r3, [pc, #16]	; (4660 <system_gclk_init+0x20>)
    464e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    4650:	0019      	movs	r1, r3
    4652:	780b      	ldrb	r3, [r1, #0]
    4654:	4213      	tst	r3, r2
    4656:	d1fc      	bne.n	4652 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4658:	4770      	bx	lr
    465a:	46c0      	nop			; (mov r8, r8)
    465c:	40000800 	.word	0x40000800
    4660:	40001c00 	.word	0x40001c00

00004664 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4664:	b570      	push	{r4, r5, r6, lr}
    4666:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4668:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    466a:	784b      	ldrb	r3, [r1, #1]
    466c:	2b00      	cmp	r3, #0
    466e:	d002      	beq.n	4676 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4670:	2380      	movs	r3, #128	; 0x80
    4672:	00db      	lsls	r3, r3, #3
    4674:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4676:	7a4b      	ldrb	r3, [r1, #9]
    4678:	2b00      	cmp	r3, #0
    467a:	d002      	beq.n	4682 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    467c:	2380      	movs	r3, #128	; 0x80
    467e:	011b      	lsls	r3, r3, #4
    4680:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4682:	6848      	ldr	r0, [r1, #4]
    4684:	2801      	cmp	r0, #1
    4686:	d90f      	bls.n	46a8 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4688:	1e43      	subs	r3, r0, #1
    468a:	4218      	tst	r0, r3
    468c:	d131      	bne.n	46f2 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    468e:	2802      	cmp	r0, #2
    4690:	d92d      	bls.n	46ee <system_gclk_gen_set_config+0x8a>
    4692:	2302      	movs	r3, #2
    4694:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    4696:	3201      	adds	r2, #1
						mask <<= 1) {
    4698:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    469a:	4298      	cmp	r0, r3
    469c:	d8fb      	bhi.n	4696 <system_gclk_gen_set_config+0x32>
    469e:	2380      	movs	r3, #128	; 0x80
    46a0:	015b      	lsls	r3, r3, #5
    46a2:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    46a4:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    46a6:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    46a8:	7a0b      	ldrb	r3, [r1, #8]
    46aa:	2b00      	cmp	r3, #0
    46ac:	d002      	beq.n	46b4 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    46ae:	2380      	movs	r3, #128	; 0x80
    46b0:	019b      	lsls	r3, r3, #6
    46b2:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    46b4:	2604      	movs	r6, #4
    46b6:	40a6      	lsls	r6, r4
    46b8:	4911      	ldr	r1, [pc, #68]	; (4700 <system_gclk_gen_set_config+0x9c>)
    46ba:	4a12      	ldr	r2, [pc, #72]	; (4704 <system_gclk_gen_set_config+0xa0>)
    46bc:	684b      	ldr	r3, [r1, #4]
    46be:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    46c0:	421e      	tst	r6, r3
    46c2:	d1fb      	bne.n	46bc <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    46c4:	4b10      	ldr	r3, [pc, #64]	; (4708 <system_gclk_gen_set_config+0xa4>)
    46c6:	4798      	blx	r3
    46c8:	00a4      	lsls	r4, r4, #2
    46ca:	4b0d      	ldr	r3, [pc, #52]	; (4700 <system_gclk_gen_set_config+0x9c>)
    46cc:	469c      	mov	ip, r3
    46ce:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    46d0:	6a22      	ldr	r2, [r4, #32]
    46d2:	2380      	movs	r3, #128	; 0x80
    46d4:	005b      	lsls	r3, r3, #1
    46d6:	401a      	ands	r2, r3
    46d8:	432a      	orrs	r2, r5
    46da:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    46dc:	4661      	mov	r1, ip
    46de:	4a09      	ldr	r2, [pc, #36]	; (4704 <system_gclk_gen_set_config+0xa0>)
    46e0:	684b      	ldr	r3, [r1, #4]
    46e2:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    46e4:	421e      	tst	r6, r3
    46e6:	d1fb      	bne.n	46e0 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    46e8:	4b08      	ldr	r3, [pc, #32]	; (470c <system_gclk_gen_set_config+0xa8>)
    46ea:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    46ec:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    46ee:	2200      	movs	r2, #0
    46f0:	e7d5      	b.n	469e <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    46f2:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    46f4:	2380      	movs	r3, #128	; 0x80
    46f6:	009b      	lsls	r3, r3, #2
    46f8:	4318      	orrs	r0, r3
    46fa:	4305      	orrs	r5, r0
    46fc:	e7d4      	b.n	46a8 <system_gclk_gen_set_config+0x44>
    46fe:	46c0      	nop			; (mov r8, r8)
    4700:	40001c00 	.word	0x40001c00
    4704:	000007fc 	.word	0x000007fc
    4708:	0000415d 	.word	0x0000415d
    470c:	0000419d 	.word	0x0000419d

00004710 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4710:	b510      	push	{r4, lr}
    4712:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    4714:	2204      	movs	r2, #4
    4716:	4082      	lsls	r2, r0
    4718:	4809      	ldr	r0, [pc, #36]	; (4740 <system_gclk_gen_enable+0x30>)
    471a:	490a      	ldr	r1, [pc, #40]	; (4744 <system_gclk_gen_enable+0x34>)
    471c:	6843      	ldr	r3, [r0, #4]
    471e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    4720:	421a      	tst	r2, r3
    4722:	d1fb      	bne.n	471c <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    4724:	4b08      	ldr	r3, [pc, #32]	; (4748 <system_gclk_gen_enable+0x38>)
    4726:	4798      	blx	r3
    4728:	00a4      	lsls	r4, r4, #2
    472a:	4b05      	ldr	r3, [pc, #20]	; (4740 <system_gclk_gen_enable+0x30>)
    472c:	469c      	mov	ip, r3
    472e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    4730:	6a22      	ldr	r2, [r4, #32]
    4732:	2380      	movs	r3, #128	; 0x80
    4734:	005b      	lsls	r3, r3, #1
    4736:	4313      	orrs	r3, r2
    4738:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    473a:	4b04      	ldr	r3, [pc, #16]	; (474c <system_gclk_gen_enable+0x3c>)
    473c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    473e:	bd10      	pop	{r4, pc}
    4740:	40001c00 	.word	0x40001c00
    4744:	000007fc 	.word	0x000007fc
    4748:	0000415d 	.word	0x0000415d
    474c:	0000419d 	.word	0x0000419d

00004750 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4752:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    4754:	2204      	movs	r2, #4
    4756:	4082      	lsls	r2, r0
    4758:	4812      	ldr	r0, [pc, #72]	; (47a4 <system_gclk_gen_get_hz+0x54>)
    475a:	4913      	ldr	r1, [pc, #76]	; (47a8 <system_gclk_gen_get_hz+0x58>)
    475c:	6843      	ldr	r3, [r0, #4]
    475e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    4760:	421a      	tst	r2, r3
    4762:	d1fb      	bne.n	475c <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    4764:	4b11      	ldr	r3, [pc, #68]	; (47ac <system_gclk_gen_get_hz+0x5c>)
    4766:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    4768:	4f0e      	ldr	r7, [pc, #56]	; (47a4 <system_gclk_gen_get_hz+0x54>)
    476a:	3408      	adds	r4, #8
    476c:	00a4      	lsls	r4, r4, #2
    476e:	59e0      	ldr	r0, [r4, r7]
    4770:	0740      	lsls	r0, r0, #29
    4772:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4774:	4b0e      	ldr	r3, [pc, #56]	; (47b0 <system_gclk_gen_get_hz+0x60>)
    4776:	4798      	blx	r3
    4778:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    477a:	59e5      	ldr	r5, [r4, r7]
    477c:	04ed      	lsls	r5, r5, #19
    477e:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    4780:	59e4      	ldr	r4, [r4, r7]
    4782:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    4784:	4b0b      	ldr	r3, [pc, #44]	; (47b4 <system_gclk_gen_get_hz+0x64>)
    4786:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4788:	2d00      	cmp	r5, #0
    478a:	d107      	bne.n	479c <system_gclk_gen_get_hz+0x4c>
    478c:	2c01      	cmp	r4, #1
    478e:	d907      	bls.n	47a0 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    4790:	0021      	movs	r1, r4
    4792:	0030      	movs	r0, r6
    4794:	4b08      	ldr	r3, [pc, #32]	; (47b8 <system_gclk_gen_get_hz+0x68>)
    4796:	4798      	blx	r3
    4798:	0006      	movs	r6, r0
    479a:	e001      	b.n	47a0 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    479c:	3401      	adds	r4, #1
    479e:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    47a0:	0030      	movs	r0, r6
    47a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47a4:	40001c00 	.word	0x40001c00
    47a8:	000007fc 	.word	0x000007fc
    47ac:	0000415d 	.word	0x0000415d
    47b0:	000041cd 	.word	0x000041cd
    47b4:	0000419d 	.word	0x0000419d
    47b8:	00005615 	.word	0x00005615

000047bc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    47bc:	b510      	push	{r4, lr}
    47be:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    47c0:	4b09      	ldr	r3, [pc, #36]	; (47e8 <system_gclk_chan_enable+0x2c>)
    47c2:	4798      	blx	r3
    47c4:	00a0      	lsls	r0, r4, #2
    47c6:	4b09      	ldr	r3, [pc, #36]	; (47ec <system_gclk_chan_enable+0x30>)
    47c8:	469c      	mov	ip, r3
    47ca:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    47cc:	2280      	movs	r2, #128	; 0x80
    47ce:	5883      	ldr	r3, [r0, r2]
    47d0:	2140      	movs	r1, #64	; 0x40
    47d2:	430b      	orrs	r3, r1
    47d4:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    47d6:	3140      	adds	r1, #64	; 0x40
    47d8:	3a40      	subs	r2, #64	; 0x40
    47da:	5843      	ldr	r3, [r0, r1]
    47dc:	421a      	tst	r2, r3
    47de:	d0fc      	beq.n	47da <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    47e0:	4b03      	ldr	r3, [pc, #12]	; (47f0 <system_gclk_chan_enable+0x34>)
    47e2:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    47e4:	bd10      	pop	{r4, pc}
    47e6:	46c0      	nop			; (mov r8, r8)
    47e8:	0000415d 	.word	0x0000415d
    47ec:	40001c00 	.word	0x40001c00
    47f0:	0000419d 	.word	0x0000419d

000047f4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    47f4:	b510      	push	{r4, lr}
    47f6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    47f8:	4b09      	ldr	r3, [pc, #36]	; (4820 <system_gclk_chan_disable+0x2c>)
    47fa:	4798      	blx	r3
    47fc:	00a0      	lsls	r0, r4, #2
    47fe:	4b09      	ldr	r3, [pc, #36]	; (4824 <system_gclk_chan_disable+0x30>)
    4800:	469c      	mov	ip, r3
    4802:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    4804:	2280      	movs	r2, #128	; 0x80
    4806:	5883      	ldr	r3, [r0, r2]
    4808:	2140      	movs	r1, #64	; 0x40
    480a:	438b      	bics	r3, r1
    480c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    480e:	3140      	adds	r1, #64	; 0x40
    4810:	3a40      	subs	r2, #64	; 0x40
    4812:	5843      	ldr	r3, [r0, r1]
    4814:	421a      	tst	r2, r3
    4816:	d1fc      	bne.n	4812 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    4818:	4b03      	ldr	r3, [pc, #12]	; (4828 <system_gclk_chan_disable+0x34>)
    481a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    481c:	bd10      	pop	{r4, pc}
    481e:	46c0      	nop			; (mov r8, r8)
    4820:	0000415d 	.word	0x0000415d
    4824:	40001c00 	.word	0x40001c00
    4828:	0000419d 	.word	0x0000419d

0000482c <system_gclk_chan_set_config>:
{
    482c:	b570      	push	{r4, r5, r6, lr}
    482e:	0004      	movs	r4, r0
    4830:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    4832:	4b05      	ldr	r3, [pc, #20]	; (4848 <system_gclk_chan_set_config+0x1c>)
    4834:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    4836:	782a      	ldrb	r2, [r5, #0]
    4838:	230f      	movs	r3, #15
    483a:	4013      	ands	r3, r2
    483c:	3420      	adds	r4, #32
    483e:	00a4      	lsls	r4, r4, #2
    4840:	4a02      	ldr	r2, [pc, #8]	; (484c <system_gclk_chan_set_config+0x20>)
    4842:	50a3      	str	r3, [r4, r2]
}
    4844:	bd70      	pop	{r4, r5, r6, pc}
    4846:	46c0      	nop			; (mov r8, r8)
    4848:	000047f5 	.word	0x000047f5
    484c:	40001c00 	.word	0x40001c00

00004850 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4850:	b510      	push	{r4, lr}
    4852:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4854:	4b06      	ldr	r3, [pc, #24]	; (4870 <system_gclk_chan_get_hz+0x20>)
    4856:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    4858:	3420      	adds	r4, #32
    485a:	00a4      	lsls	r4, r4, #2
    485c:	4b05      	ldr	r3, [pc, #20]	; (4874 <system_gclk_chan_get_hz+0x24>)
    485e:	58e4      	ldr	r4, [r4, r3]
    4860:	0724      	lsls	r4, r4, #28
    4862:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    4864:	4b04      	ldr	r3, [pc, #16]	; (4878 <system_gclk_chan_get_hz+0x28>)
    4866:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4868:	0020      	movs	r0, r4
    486a:	4b04      	ldr	r3, [pc, #16]	; (487c <system_gclk_chan_get_hz+0x2c>)
    486c:	4798      	blx	r3
}
    486e:	bd10      	pop	{r4, pc}
    4870:	0000415d 	.word	0x0000415d
    4874:	40001c00 	.word	0x40001c00
    4878:	0000419d 	.word	0x0000419d
    487c:	00004751 	.word	0x00004751

00004880 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4880:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4882:	78d3      	ldrb	r3, [r2, #3]
    4884:	2b00      	cmp	r3, #0
    4886:	d135      	bne.n	48f4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4888:	7813      	ldrb	r3, [r2, #0]
    488a:	2b80      	cmp	r3, #128	; 0x80
    488c:	d029      	beq.n	48e2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    488e:	061b      	lsls	r3, r3, #24
    4890:	2480      	movs	r4, #128	; 0x80
    4892:	0264      	lsls	r4, r4, #9
    4894:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4896:	7854      	ldrb	r4, [r2, #1]
    4898:	2502      	movs	r5, #2
    489a:	43ac      	bics	r4, r5
    489c:	d106      	bne.n	48ac <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    489e:	7894      	ldrb	r4, [r2, #2]
    48a0:	2c00      	cmp	r4, #0
    48a2:	d120      	bne.n	48e6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    48a4:	2480      	movs	r4, #128	; 0x80
    48a6:	02a4      	lsls	r4, r4, #10
    48a8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    48aa:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    48ac:	7854      	ldrb	r4, [r2, #1]
    48ae:	3c01      	subs	r4, #1
    48b0:	2c01      	cmp	r4, #1
    48b2:	d91c      	bls.n	48ee <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    48b4:	040d      	lsls	r5, r1, #16
    48b6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    48b8:	24a0      	movs	r4, #160	; 0xa0
    48ba:	05e4      	lsls	r4, r4, #23
    48bc:	432c      	orrs	r4, r5
    48be:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    48c0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    48c2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    48c4:	24d0      	movs	r4, #208	; 0xd0
    48c6:	0624      	lsls	r4, r4, #24
    48c8:	432c      	orrs	r4, r5
    48ca:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    48cc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    48ce:	78d4      	ldrb	r4, [r2, #3]
    48d0:	2c00      	cmp	r4, #0
    48d2:	d122      	bne.n	491a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    48d4:	035b      	lsls	r3, r3, #13
    48d6:	d51c      	bpl.n	4912 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    48d8:	7893      	ldrb	r3, [r2, #2]
    48da:	2b01      	cmp	r3, #1
    48dc:	d01e      	beq.n	491c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    48de:	6141      	str	r1, [r0, #20]
    48e0:	e017      	b.n	4912 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    48e2:	2300      	movs	r3, #0
    48e4:	e7d7      	b.n	4896 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    48e6:	24c0      	movs	r4, #192	; 0xc0
    48e8:	02e4      	lsls	r4, r4, #11
    48ea:	4323      	orrs	r3, r4
    48ec:	e7dd      	b.n	48aa <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    48ee:	4c0d      	ldr	r4, [pc, #52]	; (4924 <_system_pinmux_config+0xa4>)
    48f0:	4023      	ands	r3, r4
    48f2:	e7df      	b.n	48b4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    48f4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    48f6:	040c      	lsls	r4, r1, #16
    48f8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    48fa:	23a0      	movs	r3, #160	; 0xa0
    48fc:	05db      	lsls	r3, r3, #23
    48fe:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4900:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4902:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4904:	23d0      	movs	r3, #208	; 0xd0
    4906:	061b      	lsls	r3, r3, #24
    4908:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    490a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    490c:	78d3      	ldrb	r3, [r2, #3]
    490e:	2b00      	cmp	r3, #0
    4910:	d103      	bne.n	491a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4912:	7853      	ldrb	r3, [r2, #1]
    4914:	3b01      	subs	r3, #1
    4916:	2b01      	cmp	r3, #1
    4918:	d902      	bls.n	4920 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    491a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    491c:	6181      	str	r1, [r0, #24]
    491e:	e7f8      	b.n	4912 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    4920:	6081      	str	r1, [r0, #8]
}
    4922:	e7fa      	b.n	491a <_system_pinmux_config+0x9a>
    4924:	fffbffff 	.word	0xfffbffff

00004928 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4928:	b510      	push	{r4, lr}
    492a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    492c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    492e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4930:	2900      	cmp	r1, #0
    4932:	d105      	bne.n	4940 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    4934:	0943      	lsrs	r3, r0, #5
    4936:	01db      	lsls	r3, r3, #7
    4938:	2182      	movs	r1, #130	; 0x82
    493a:	05c9      	lsls	r1, r1, #23
    493c:	468c      	mov	ip, r1
    493e:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4940:	241f      	movs	r4, #31
    4942:	4020      	ands	r0, r4
    4944:	2101      	movs	r1, #1
    4946:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    4948:	0018      	movs	r0, r3
    494a:	4b01      	ldr	r3, [pc, #4]	; (4950 <system_pinmux_pin_set_config+0x28>)
    494c:	4798      	blx	r3
}
    494e:	bd10      	pop	{r4, pc}
    4950:	00004881 	.word	0x00004881

00004954 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4954:	4770      	bx	lr
	...

00004958 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4958:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    495a:	4b05      	ldr	r3, [pc, #20]	; (4970 <system_init+0x18>)
    495c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    495e:	4b05      	ldr	r3, [pc, #20]	; (4974 <system_init+0x1c>)
    4960:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4962:	4b05      	ldr	r3, [pc, #20]	; (4978 <system_init+0x20>)
    4964:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4966:	4b05      	ldr	r3, [pc, #20]	; (497c <system_init+0x24>)
    4968:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    496a:	4b05      	ldr	r3, [pc, #20]	; (4980 <system_init+0x28>)
    496c:	4798      	blx	r3
}
    496e:	bd10      	pop	{r4, pc}
    4970:	00004479 	.word	0x00004479
    4974:	00004159 	.word	0x00004159
    4978:	00004955 	.word	0x00004955
    497c:	000012cd 	.word	0x000012cd
    4980:	00004955 	.word	0x00004955

00004984 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4984:	e7fe      	b.n	4984 <Dummy_Handler>
	...

00004988 <Reset_Handler>:
{
    4988:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    498a:	4a17      	ldr	r2, [pc, #92]	; (49e8 <Reset_Handler+0x60>)
    498c:	4b17      	ldr	r3, [pc, #92]	; (49ec <Reset_Handler+0x64>)
    498e:	429a      	cmp	r2, r3
    4990:	d011      	beq.n	49b6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    4992:	001a      	movs	r2, r3
    4994:	4b16      	ldr	r3, [pc, #88]	; (49f0 <Reset_Handler+0x68>)
    4996:	429a      	cmp	r2, r3
    4998:	d20d      	bcs.n	49b6 <Reset_Handler+0x2e>
    499a:	4a16      	ldr	r2, [pc, #88]	; (49f4 <Reset_Handler+0x6c>)
    499c:	3303      	adds	r3, #3
    499e:	1a9b      	subs	r3, r3, r2
    49a0:	089b      	lsrs	r3, r3, #2
    49a2:	3301      	adds	r3, #1
    49a4:	009b      	lsls	r3, r3, #2
    49a6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    49a8:	4810      	ldr	r0, [pc, #64]	; (49ec <Reset_Handler+0x64>)
    49aa:	490f      	ldr	r1, [pc, #60]	; (49e8 <Reset_Handler+0x60>)
    49ac:	588c      	ldr	r4, [r1, r2]
    49ae:	5084      	str	r4, [r0, r2]
    49b0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    49b2:	429a      	cmp	r2, r3
    49b4:	d1fa      	bne.n	49ac <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    49b6:	4a10      	ldr	r2, [pc, #64]	; (49f8 <Reset_Handler+0x70>)
    49b8:	4b10      	ldr	r3, [pc, #64]	; (49fc <Reset_Handler+0x74>)
    49ba:	429a      	cmp	r2, r3
    49bc:	d20a      	bcs.n	49d4 <Reset_Handler+0x4c>
    49be:	43d3      	mvns	r3, r2
    49c0:	490e      	ldr	r1, [pc, #56]	; (49fc <Reset_Handler+0x74>)
    49c2:	185b      	adds	r3, r3, r1
    49c4:	2103      	movs	r1, #3
    49c6:	438b      	bics	r3, r1
    49c8:	3304      	adds	r3, #4
    49ca:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    49cc:	2100      	movs	r1, #0
    49ce:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    49d0:	4293      	cmp	r3, r2
    49d2:	d1fc      	bne.n	49ce <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    49d4:	4a0a      	ldr	r2, [pc, #40]	; (4a00 <Reset_Handler+0x78>)
    49d6:	21ff      	movs	r1, #255	; 0xff
    49d8:	4b0a      	ldr	r3, [pc, #40]	; (4a04 <Reset_Handler+0x7c>)
    49da:	438b      	bics	r3, r1
    49dc:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    49de:	4b0a      	ldr	r3, [pc, #40]	; (4a08 <Reset_Handler+0x80>)
    49e0:	4798      	blx	r3
        main();
    49e2:	4b0a      	ldr	r3, [pc, #40]	; (4a0c <Reset_Handler+0x84>)
    49e4:	4798      	blx	r3
    49e6:	e7fe      	b.n	49e6 <Reset_Handler+0x5e>
    49e8:	00008a94 	.word	0x00008a94
    49ec:	20000000 	.word	0x20000000
    49f0:	20000088 	.word	0x20000088
    49f4:	20000004 	.word	0x20000004
    49f8:	20000088 	.word	0x20000088
    49fc:	20002360 	.word	0x20002360
    4a00:	e000ed00 	.word	0xe000ed00
    4a04:	00000000 	.word	0x00000000
    4a08:	00007cb1 	.word	0x00007cb1
    4a0c:	00004c59 	.word	0x00004c59

00004a10 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4a10:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4a12:	4a06      	ldr	r2, [pc, #24]	; (4a2c <_sbrk+0x1c>)
    4a14:	6812      	ldr	r2, [r2, #0]
    4a16:	2a00      	cmp	r2, #0
    4a18:	d004      	beq.n	4a24 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    4a1a:	4a04      	ldr	r2, [pc, #16]	; (4a2c <_sbrk+0x1c>)
    4a1c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    4a1e:	18c3      	adds	r3, r0, r3
    4a20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    4a22:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    4a24:	4902      	ldr	r1, [pc, #8]	; (4a30 <_sbrk+0x20>)
    4a26:	4a01      	ldr	r2, [pc, #4]	; (4a2c <_sbrk+0x1c>)
    4a28:	6011      	str	r1, [r2, #0]
    4a2a:	e7f6      	b.n	4a1a <_sbrk+0xa>
    4a2c:	200000ec 	.word	0x200000ec
    4a30:	20004360 	.word	0x20004360

00004a34 <NMI_Handler>:
struct dac_module dac_instance;
void IO_init(void);

void NMI_Handler(void)
{
    BREAKPOINT;
    4a34:	46c0      	nop			; (mov r8, r8)
}
    4a36:	4770      	bx	lr

00004a38 <HardFault_Handler>:
void HardFault_Handler(void)
{
    BREAKPOINT;
    4a38:	46c0      	nop			; (mov r8, r8)
}
    4a3a:	4770      	bx	lr

00004a3c <SVC_Handler>:
void SVC_Handler(void)
{
    BREAKPOINT;
    4a3c:	46c0      	nop			; (mov r8, r8)
}
    4a3e:	4770      	bx	lr

00004a40 <PendSV_Handler>:
void PendSV_Handler(void)
{
    BREAKPOINT;
    4a40:	46c0      	nop			; (mov r8, r8)
}
    4a42:	4770      	bx	lr

00004a44 <SysTick_Handler>:
void SysTick_Handler(void)
{
    BREAKPOINT;
    4a44:	46c0      	nop			; (mov r8, r8)
}
    4a46:	4770      	bx	lr

00004a48 <IO_init>:
            return DMX;
    }
}

void IO_init(void)
{
    4a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a4a:	b085      	sub	sp, #20
	config->direction  = PORT_PIN_DIR_INPUT;
    4a4c:	2700      	movs	r7, #0
    4a4e:	466b      	mov	r3, sp
    4a50:	731f      	strb	r7, [r3, #12]
	config->powersave  = false;
    4a52:	739f      	strb	r7, [r3, #14]
    //configure all ports!
    struct port_config input_pin_no_pullup;
    port_get_config_defaults(&input_pin_no_pullup);
    input_pin_no_pullup.direction = PORT_PIN_DIR_INPUT;
    input_pin_no_pullup.input_pull = PORT_PIN_PULL_NONE;
    4a54:	735f      	strb	r7, [r3, #13]
	config->direction  = PORT_PIN_DIR_INPUT;
    4a56:	a902      	add	r1, sp, #8
    4a58:	700f      	strb	r7, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4a5a:	2601      	movs	r6, #1
    4a5c:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    4a5e:	708f      	strb	r7, [r1, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    4a60:	ad01      	add	r5, sp, #4
    4a62:	706e      	strb	r6, [r5, #1]
	config->powersave  = false;
    4a64:	70af      	strb	r7, [r5, #2]
    input_pin_pullup.direction = PORT_PIN_DIR_INPUT;
    input_pin_pullup.input_pull = PORT_PIN_PULL_UP;

    struct port_config output_pin;
    port_get_config_defaults(&output_pin);
    output_pin.direction = PORT_PIN_DIR_OUTPUT;
    4a66:	702e      	strb	r6, [r5, #0]
    struct port_config output_pin_w_readback;
    port_get_config_defaults(&output_pin_w_readback);
    output_pin_w_readback.direction = PORT_PIN_DIR_OUTPUT_WTH_READBACK;
    /* DEFINE PINS WITH PULLUPS */
    port_pin_set_config(PIN_SW1, &input_pin_pullup);
    4a68:	200c      	movs	r0, #12
    4a6a:	4c2f      	ldr	r4, [pc, #188]	; (4b28 <IO_init+0xe0>)
    4a6c:	47a0      	blx	r4
    port_pin_set_config(PIN_SW2, &input_pin_no_pullup);
    4a6e:	a903      	add	r1, sp, #12
    4a70:	200d      	movs	r0, #13
    4a72:	47a0      	blx	r4

    /* DEFINE PINS WITHOUT PULLUPS */
    port_pin_set_config(PIN_ENC_B, &input_pin_no_pullup);
    4a74:	a903      	add	r1, sp, #12
    4a76:	2036      	movs	r0, #54	; 0x36
    4a78:	47a0      	blx	r4
    port_pin_set_config(PIN_ENC_A, &input_pin_no_pullup);
    4a7a:	a903      	add	r1, sp, #12
    4a7c:	2037      	movs	r0, #55	; 0x37
    4a7e:	47a0      	blx	r4

    /* DEFINE OUTPUT PINS */
    port_pin_set_config(PIN_EEPROM_WP, &output_pin);
    4a80:	0029      	movs	r1, r5
    4a82:	2018      	movs	r0, #24
    4a84:	47a0      	blx	r4
    port_pin_set_config(PIN_LED_POWER, &output_pin);
    4a86:	0029      	movs	r1, r5
    4a88:	201c      	movs	r0, #28
    4a8a:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D0, &output_pin);
    4a8c:	0029      	movs	r1, r5
    4a8e:	2026      	movs	r0, #38	; 0x26
    4a90:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D1, &output_pin);
    4a92:	0029      	movs	r1, r5
    4a94:	2025      	movs	r0, #37	; 0x25
    4a96:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D2, &output_pin);
    4a98:	0029      	movs	r1, r5
    4a9a:	2024      	movs	r0, #36	; 0x24
    4a9c:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D3, &output_pin);
    4a9e:	0029      	movs	r1, r5
    4aa0:	2023      	movs	r0, #35	; 0x23
    4aa2:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D4, &output_pin);
    4aa4:	0029      	movs	r1, r5
    4aa6:	2022      	movs	r0, #34	; 0x22
    4aa8:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D5, &output_pin);
    4aaa:	0029      	movs	r1, r5
    4aac:	2021      	movs	r0, #33	; 0x21
    4aae:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D6, &output_pin);
    4ab0:	0029      	movs	r1, r5
    4ab2:	2020      	movs	r0, #32
    4ab4:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D7, &output_pin);
    4ab6:	0029      	movs	r1, r5
    4ab8:	203f      	movs	r0, #63	; 0x3f
    4aba:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_EN, &output_pin);
    4abc:	0029      	movs	r1, r5
    4abe:	2027      	movs	r0, #39	; 0x27
    4ac0:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_RW, &output_pin);
    4ac2:	0029      	movs	r1, r5
    4ac4:	2028      	movs	r0, #40	; 0x28
    4ac6:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_RS, &output_pin);
    4ac8:	0029      	movs	r1, r5
    4aca:	2029      	movs	r0, #41	; 0x29
    4acc:	47a0      	blx	r4
    port_pin_set_config(PIN_DMX_DIR, &output_pin);
    4ace:	0029      	movs	r1, r5
    4ad0:	2014      	movs	r0, #20
    4ad2:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    4ad4:	2280      	movs	r2, #128	; 0x80
    4ad6:	0452      	lsls	r2, r2, #17
    4ad8:	2382      	movs	r3, #130	; 0x82
    4ada:	05db      	lsls	r3, r3, #23
    4adc:	615a      	str	r2, [r3, #20]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4ade:	466b      	mov	r3, sp
    4ae0:	705f      	strb	r7, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4ae2:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
    4ae4:	70df      	strb	r7, [r3, #3]
    port_pin_set_output_level(PIN_EEPROM_WP,0);
    struct system_pinmux_config mux_config;
    system_pinmux_get_config_defaults(&mux_config);
    mux_config.mux_position = MUX_ADC0;
    4ae6:	701e      	strb	r6, [r3, #0]
    system_pinmux_pin_set_config(PIN_ADC0, &mux_config);
    4ae8:	4669      	mov	r1, sp
    4aea:	2004      	movs	r0, #4
    4aec:	4c0f      	ldr	r4, [pc, #60]	; (4b2c <IO_init+0xe4>)
    4aee:	47a0      	blx	r4

    mux_config.mux_position = MUX_ADC1;
    4af0:	466b      	mov	r3, sp
    4af2:	701e      	strb	r6, [r3, #0]
    system_pinmux_pin_set_config(PIN_ADC1, &mux_config);
    4af4:	4669      	mov	r1, sp
    4af6:	2005      	movs	r0, #5
    4af8:	47a0      	blx	r4
    mux_config.mux_position = MUX_ADC2;
    4afa:	466b      	mov	r3, sp
    4afc:	701e      	strb	r6, [r3, #0]
    system_pinmux_pin_set_config(PIN_ADC2, &mux_config);
    4afe:	4669      	mov	r1, sp
    4b00:	2006      	movs	r0, #6
    4b02:	47a0      	blx	r4
    mux_config.mux_position = MUX_ADC3;
    4b04:	466b      	mov	r3, sp
    4b06:	701e      	strb	r6, [r3, #0]
    system_pinmux_pin_set_config(PIN_ADC3, &mux_config);
    4b08:	4669      	mov	r1, sp
    4b0a:	2007      	movs	r0, #7
    4b0c:	47a0      	blx	r4
    mux_config.mux_position = MUX_ADC4;
    4b0e:	466b      	mov	r3, sp
    4b10:	701e      	strb	r6, [r3, #0]
    system_pinmux_pin_set_config(PIN_ADC4, &mux_config);
    4b12:	4669      	mov	r1, sp
    4b14:	2003      	movs	r0, #3
    4b16:	47a0      	blx	r4

    mux_config.mux_position = MUX_LCD_VO;
    4b18:	466b      	mov	r3, sp
    4b1a:	701e      	strb	r6, [r3, #0]
    system_pinmux_pin_set_config(PIN_LCD_VO, &mux_config);
    4b1c:	4669      	mov	r1, sp
    4b1e:	2002      	movs	r0, #2
    4b20:	47a0      	blx	r4
}
    4b22:	b005      	add	sp, #20
    4b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b26:	46c0      	nop			; (mov r8, r8)
    4b28:	000031dd 	.word	0x000031dd
    4b2c:	00004929 	.word	0x00004929

00004b30 <configure_dac>:

void configure_dac(void)
{
    4b30:	b500      	push	{lr}
    4b32:	b083      	sub	sp, #12
    struct dac_config config_dac;
    dac_get_config_defaults(&config_dac);
    4b34:	4668      	mov	r0, sp
    4b36:	4b05      	ldr	r3, [pc, #20]	; (4b4c <configure_dac+0x1c>)
    4b38:	4798      	blx	r3
    config_dac.reference = DAC_REFERENCE_AVCC;
    4b3a:	2340      	movs	r3, #64	; 0x40
    4b3c:	466a      	mov	r2, sp
    4b3e:	7013      	strb	r3, [r2, #0]
    dac_init(&dac_instance, DAC, &config_dac);
    4b40:	4903      	ldr	r1, [pc, #12]	; (4b50 <configure_dac+0x20>)
    4b42:	4804      	ldr	r0, [pc, #16]	; (4b54 <configure_dac+0x24>)
    4b44:	4b04      	ldr	r3, [pc, #16]	; (4b58 <configure_dac+0x28>)
    4b46:	4798      	blx	r3
}
    4b48:	b003      	add	sp, #12
    4b4a:	bd00      	pop	{pc}
    4b4c:	00001e91 	.word	0x00001e91
    4b50:	42005400 	.word	0x42005400
    4b54:	20002090 	.word	0x20002090
    4b58:	00001ea5 	.word	0x00001ea5

00004b5c <configure_dac_channel>:

void configure_dac_channel(void)
{
    4b5c:	b510      	push	{r4, lr}
    4b5e:	b082      	sub	sp, #8
    struct dac_chan_config config_dac_chan;
    dac_chan_get_config_defaults(&config_dac_chan);
    4b60:	a801      	add	r0, sp, #4
    4b62:	4b07      	ldr	r3, [pc, #28]	; (4b80 <configure_dac_channel+0x24>)
    4b64:	4798      	blx	r3

    dac_chan_set_config(&dac_instance, DAC_CHANNEL_0, &config_dac_chan);
    4b66:	4c07      	ldr	r4, [pc, #28]	; (4b84 <configure_dac_channel+0x28>)
    4b68:	aa01      	add	r2, sp, #4
    4b6a:	2100      	movs	r1, #0
    4b6c:	0020      	movs	r0, r4
    4b6e:	4b06      	ldr	r3, [pc, #24]	; (4b88 <configure_dac_channel+0x2c>)
    4b70:	4798      	blx	r3

    dac_chan_enable(&dac_instance, DAC_CHANNEL_0);
    4b72:	2100      	movs	r1, #0
    4b74:	0020      	movs	r0, r4
    4b76:	4b05      	ldr	r3, [pc, #20]	; (4b8c <configure_dac_channel+0x30>)
    4b78:	4798      	blx	r3
}
    4b7a:	b002      	add	sp, #8
    4b7c:	bd10      	pop	{r4, pc}
    4b7e:	46c0      	nop			; (mov r8, r8)
    4b80:	00001fb5 	.word	0x00001fb5
    4b84:	20002090 	.word	0x20002090
    4b88:	00001fb7 	.word	0x00001fb7
    4b8c:	00001fb9 	.word	0x00001fb9

00004b90 <button_handler>:

void button_handler(TIPKA t, STATE *s)
{
    4b90:	b570      	push	{r4, r5, r6, lr}
    4b92:	000c      	movs	r4, r1
    key_pressed = 1;
    4b94:	2201      	movs	r2, #1
    4b96:	4b13      	ldr	r3, [pc, #76]	; (4be4 <button_handler+0x54>)
    4b98:	701a      	strb	r2, [r3, #0]
    switch (t) {
    4b9a:	2801      	cmp	r0, #1
    4b9c:	d021      	beq.n	4be2 <button_handler+0x52>
    4b9e:	2802      	cmp	r0, #2
    4ba0:	d11c      	bne.n	4bdc <button_handler+0x4c>
        case BUTTON_1:
            break;
        case BUTTON_2:
            if (get_p_to_item(selected_menu)->type == TYPE_MENU) {
    4ba2:	4b11      	ldr	r3, [pc, #68]	; (4be8 <button_handler+0x58>)
    4ba4:	6818      	ldr	r0, [r3, #0]
    4ba6:	4b11      	ldr	r3, [pc, #68]	; (4bec <button_handler+0x5c>)
    4ba8:	4798      	blx	r3
    4baa:	7803      	ldrb	r3, [r0, #0]
    4bac:	2b04      	cmp	r3, #4
    4bae:	d007      	beq.n	4bc0 <button_handler+0x30>
                menu_swap(&selected_menu, (MENU *)(get_p_to_item(selected_menu)->variable));
                *s = SCROLL;
            }
            else if (*s == EDIT)
    4bb0:	7823      	ldrb	r3, [r4, #0]
    4bb2:	2b01      	cmp	r3, #1
    4bb4:	d00f      	beq.n	4bd6 <button_handler+0x46>
                *s = SCROLL;
            else if (*s == SCROLL)
    4bb6:	2b00      	cmp	r3, #0
    4bb8:	d113      	bne.n	4be2 <button_handler+0x52>
                *s = EDIT;
    4bba:	3301      	adds	r3, #1
    4bbc:	7023      	strb	r3, [r4, #0]
    4bbe:	e010      	b.n	4be2 <button_handler+0x52>
                menu_swap(&selected_menu, (MENU *)(get_p_to_item(selected_menu)->variable));
    4bc0:	4d09      	ldr	r5, [pc, #36]	; (4be8 <button_handler+0x58>)
    4bc2:	6828      	ldr	r0, [r5, #0]
    4bc4:	4b09      	ldr	r3, [pc, #36]	; (4bec <button_handler+0x5c>)
    4bc6:	4798      	blx	r3
    4bc8:	6901      	ldr	r1, [r0, #16]
    4bca:	0028      	movs	r0, r5
    4bcc:	4b08      	ldr	r3, [pc, #32]	; (4bf0 <button_handler+0x60>)
    4bce:	4798      	blx	r3
                *s = SCROLL;
    4bd0:	2300      	movs	r3, #0
    4bd2:	7023      	strb	r3, [r4, #0]
    4bd4:	e005      	b.n	4be2 <button_handler+0x52>
                *s = SCROLL;
    4bd6:	2300      	movs	r3, #0
    4bd8:	7023      	strb	r3, [r4, #0]
    4bda:	e002      	b.n	4be2 <button_handler+0x52>
            break;
        default:
            key_pressed = 0;
    4bdc:	2200      	movs	r2, #0
    4bde:	4b01      	ldr	r3, [pc, #4]	; (4be4 <button_handler+0x54>)
    4be0:	701a      	strb	r2, [r3, #0]
            break;
    }
    return;
}
    4be2:	bd70      	pop	{r4, r5, r6, pc}
    4be4:	2000001c 	.word	0x2000001c
    4be8:	20000020 	.word	0x20000020
    4bec:	00003741 	.word	0x00003741
    4bf0:	00003cc9 	.word	0x00003cc9

00004bf4 <menu_draw>:
void menu_draw(void)
{
    4bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bf6:	b097      	sub	sp, #92	; 0x5c
    4bf8:	ad01      	add	r5, sp, #4
    4bfa:	ae16      	add	r6, sp, #88	; 0x58
    4bfc:	0028      	movs	r0, r5
    char menu_string_array[4][21];
    for (uint8_t i = 0; i < 4; i++) {
        for (uint8_t j = 0; j < 20; j++)
            menu_string_array[i][j] = ' ';
    4bfe:	2120      	movs	r1, #32
        menu_string_array[i][20] = 0;
    4c00:	2400      	movs	r4, #0
    4c02:	0002      	movs	r2, r0
    4c04:	3214      	adds	r2, #20
{
    4c06:	0003      	movs	r3, r0
            menu_string_array[i][j] = ' ';
    4c08:	7019      	strb	r1, [r3, #0]
    4c0a:	3301      	adds	r3, #1
        for (uint8_t j = 0; j < 20; j++)
    4c0c:	4293      	cmp	r3, r2
    4c0e:	d1fb      	bne.n	4c08 <menu_draw+0x14>
        menu_string_array[i][20] = 0;
    4c10:	7504      	strb	r4, [r0, #20]
    4c12:	3015      	adds	r0, #21
    for (uint8_t i = 0; i < 4; i++) {
    4c14:	42b0      	cmp	r0, r6
    4c16:	d1f4      	bne.n	4c02 <menu_draw+0xe>
    }
    menu_whole_string(selected_menu, menu_string_array, state);
    4c18:	4b0a      	ldr	r3, [pc, #40]	; (4c44 <menu_draw+0x50>)
    4c1a:	781a      	ldrb	r2, [r3, #0]
    4c1c:	4b0a      	ldr	r3, [pc, #40]	; (4c48 <menu_draw+0x54>)
    4c1e:	6818      	ldr	r0, [r3, #0]
    4c20:	a901      	add	r1, sp, #4
    4c22:	4b0a      	ldr	r3, [pc, #40]	; (4c4c <menu_draw+0x58>)
    4c24:	4798      	blx	r3
    for (uint8_t i = 0; i < 4; i++) {
    4c26:	2400      	movs	r4, #0
        lcd_setCursor(0, i);
    4c28:	4f09      	ldr	r7, [pc, #36]	; (4c50 <menu_draw+0x5c>)
        lcd_printstr(menu_string_array[i]);
    4c2a:	4e0a      	ldr	r6, [pc, #40]	; (4c54 <menu_draw+0x60>)
        lcd_setCursor(0, i);
    4c2c:	0021      	movs	r1, r4
    4c2e:	2000      	movs	r0, #0
    4c30:	47b8      	blx	r7
        lcd_printstr(menu_string_array[i]);
    4c32:	0028      	movs	r0, r5
    4c34:	47b0      	blx	r6
    for (uint8_t i = 0; i < 4; i++) {
    4c36:	3401      	adds	r4, #1
    4c38:	b2e4      	uxtb	r4, r4
    4c3a:	3515      	adds	r5, #21
    4c3c:	2c04      	cmp	r4, #4
    4c3e:	d1f5      	bne.n	4c2c <menu_draw+0x38>
    }
    4c40:	b017      	add	sp, #92	; 0x5c
    4c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c44:	200011c8 	.word	0x200011c8
    4c48:	20000020 	.word	0x20000020
    4c4c:	0000398d 	.word	0x0000398d
    4c50:	00000479 	.word	0x00000479
    4c54:	000004e5 	.word	0x000004e5

00004c58 <main>:
{
    4c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c5a:	46de      	mov	lr, fp
    4c5c:	4657      	mov	r7, sl
    4c5e:	464e      	mov	r6, r9
    4c60:	4645      	mov	r5, r8
    4c62:	b5e0      	push	{r5, r6, r7, lr}
    4c64:	b0b1      	sub	sp, #196	; 0xc4
    adsr_init(&adsr_channel0, 1);
    4c66:	4ce1      	ldr	r4, [pc, #900]	; (4fec <main+0x394>)
    4c68:	2101      	movs	r1, #1
    4c6a:	0020      	movs	r0, r4
    4c6c:	4de0      	ldr	r5, [pc, #896]	; (4ff0 <main+0x398>)
    4c6e:	47a8      	blx	r5
    adsr_init(&adsr_channel1, 1);
    4c70:	4be0      	ldr	r3, [pc, #896]	; (4ff4 <main+0x39c>)
    4c72:	4699      	mov	r9, r3
    4c74:	2101      	movs	r1, #1
    4c76:	0018      	movs	r0, r3
    4c78:	47a8      	blx	r5
    adsr_init(&adsr_channel2, 1);
    4c7a:	4bdf      	ldr	r3, [pc, #892]	; (4ff8 <main+0x3a0>)
    4c7c:	4698      	mov	r8, r3
    4c7e:	2101      	movs	r1, #1
    4c80:	0018      	movs	r0, r3
    4c82:	47a8      	blx	r5
    adsr_init(&adsr_channel3, 1);
    4c84:	4fdd      	ldr	r7, [pc, #884]	; (4ffc <main+0x3a4>)
    4c86:	2101      	movs	r1, #1
    4c88:	0038      	movs	r0, r7
    4c8a:	47a8      	blx	r5
    adsr_init(&adsr_channel4, 1);
    4c8c:	4edc      	ldr	r6, [pc, #880]	; (5000 <main+0x3a8>)
    4c8e:	2101      	movs	r1, #1
    4c90:	0030      	movs	r0, r6
    4c92:	47a8      	blx	r5
    adsr_channel0.attack = 1000;
    4c94:	23fa      	movs	r3, #250	; 0xfa
    4c96:	009b      	lsls	r3, r3, #2
    4c98:	60e3      	str	r3, [r4, #12]
    adsr_channel0.decay = 1000;
    4c9a:	6163      	str	r3, [r4, #20]
    adsr_channel0.sustain = 1000;
    4c9c:	61e3      	str	r3, [r4, #28]
    adsr_channel0.release = 1000;
    4c9e:	62a3      	str	r3, [r4, #40]	; 0x28
    adsr_channel0.sustain_level = 127;
    4ca0:	237f      	movs	r3, #127	; 0x7f
    4ca2:	6223      	str	r3, [r4, #32]
    trigger_channel0.adsr = &adsr_channel0;
    4ca4:	4bd7      	ldr	r3, [pc, #860]	; (5004 <main+0x3ac>)
    4ca6:	605c      	str	r4, [r3, #4]
    trigger_channel1.adsr = &adsr_channel1;
    4ca8:	4bd7      	ldr	r3, [pc, #860]	; (5008 <main+0x3b0>)
    4caa:	464a      	mov	r2, r9
    4cac:	605a      	str	r2, [r3, #4]
    trigger_channel2.adsr = &adsr_channel2;
    4cae:	4bd7      	ldr	r3, [pc, #860]	; (500c <main+0x3b4>)
    4cb0:	4642      	mov	r2, r8
    4cb2:	605a      	str	r2, [r3, #4]
    trigger_channel3.adsr = &adsr_channel3;
    4cb4:	4bd6      	ldr	r3, [pc, #856]	; (5010 <main+0x3b8>)
    4cb6:	605f      	str	r7, [r3, #4]
    trigger_channel4.adsr = &adsr_channel4;
    4cb8:	4bd6      	ldr	r3, [pc, #856]	; (5014 <main+0x3bc>)
    4cba:	605e      	str	r6, [r3, #4]
    system_init();
    4cbc:	4bd6      	ldr	r3, [pc, #856]	; (5018 <main+0x3c0>)
    4cbe:	4798      	blx	r3
    delay_init();
    4cc0:	4bd6      	ldr	r3, [pc, #856]	; (501c <main+0x3c4>)
    4cc2:	4798      	blx	r3
    configure_i2c();
    4cc4:	4bd6      	ldr	r3, [pc, #856]	; (5020 <main+0x3c8>)
    4cc6:	4798      	blx	r3
    IO_init();
    4cc8:	4bd6      	ldr	r3, [pc, #856]	; (5024 <main+0x3cc>)
    4cca:	4798      	blx	r3
    lcd_begin();
    4ccc:	4bd6      	ldr	r3, [pc, #856]	; (5028 <main+0x3d0>)
    4cce:	4798      	blx	r3
    delay_ms(199);
    4cd0:	2000      	movs	r0, #0
    4cd2:	4bd6      	ldr	r3, [pc, #856]	; (502c <main+0x3d4>)
    4cd4:	4798      	blx	r3
    4cd6:	22c7      	movs	r2, #199	; 0xc7
    4cd8:	2300      	movs	r3, #0
    4cda:	2100      	movs	r1, #0
    4cdc:	4cd4      	ldr	r4, [pc, #848]	; (5030 <main+0x3d8>)
    4cde:	47a0      	blx	r4
    4ce0:	4ad4      	ldr	r2, [pc, #848]	; (5034 <main+0x3dc>)
    4ce2:	2300      	movs	r3, #0
    4ce4:	1880      	adds	r0, r0, r2
    4ce6:	4159      	adcs	r1, r3
    4ce8:	4ad3      	ldr	r2, [pc, #844]	; (5038 <main+0x3e0>)
    4cea:	2300      	movs	r3, #0
    4cec:	4cd3      	ldr	r4, [pc, #844]	; (503c <main+0x3e4>)
    4cee:	47a0      	blx	r4
    4cf0:	4bd3      	ldr	r3, [pc, #844]	; (5040 <main+0x3e8>)
    4cf2:	4798      	blx	r3
    lcd_noCursor();
    4cf4:	4bd3      	ldr	r3, [pc, #844]	; (5044 <main+0x3ec>)
    4cf6:	4798      	blx	r3
    configure_dac();
    4cf8:	4bd3      	ldr	r3, [pc, #844]	; (5048 <main+0x3f0>)
    4cfa:	4798      	blx	r3
    configure_dac_channel();
    4cfc:	4bd3      	ldr	r3, [pc, #844]	; (504c <main+0x3f4>)
    4cfe:	4798      	blx	r3
    configure_USB();
    4d00:	4bd3      	ldr	r3, [pc, #844]	; (5050 <main+0x3f8>)
    4d02:	4798      	blx	r3
    configure_DMX();
    4d04:	4bd3      	ldr	r3, [pc, #844]	; (5054 <main+0x3fc>)
    4d06:	4798      	blx	r3
    configure_tc0();
    4d08:	4bd3      	ldr	r3, [pc, #844]	; (5058 <main+0x400>)
    4d0a:	4798      	blx	r3
    dac_enable(&dac_instance);
    4d0c:	48d3      	ldr	r0, [pc, #844]	; (505c <main+0x404>)
    4d0e:	4bd4      	ldr	r3, [pc, #848]	; (5060 <main+0x408>)
    4d10:	4798      	blx	r3
    4d12:	4bd4      	ldr	r3, [pc, #848]	; (5064 <main+0x40c>)
    4d14:	9309      	str	r3, [sp, #36]	; 0x24
    4d16:	1c5a      	adds	r2, r3, #1
    4d18:	32ff      	adds	r2, #255	; 0xff
    4d1a:	0019      	movs	r1, r3
        dmx_values[i] = 0;
    4d1c:	2300      	movs	r3, #0
    4d1e:	700b      	strb	r3, [r1, #0]
    4d20:	3101      	adds	r1, #1
    for (uint16_t i = 0; i < sizeof(dmx_values); i++) {
    4d22:	4291      	cmp	r1, r2
    4d24:	d1fb      	bne.n	4d1e <main+0xc6>
    4d26:	9108      	str	r1, [sp, #32]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4d28:	4bcf      	ldr	r3, [pc, #828]	; (5068 <main+0x410>)
    4d2a:	21c3      	movs	r1, #195	; 0xc3
    4d2c:	0089      	lsls	r1, r1, #2
    4d2e:	585a      	ldr	r2, [r3, r1]
    4d30:	20ff      	movs	r0, #255	; 0xff
    4d32:	4382      	bics	r2, r0
    4d34:	383f      	subs	r0, #63	; 0x3f
    4d36:	4302      	orrs	r2, r0
    4d38:	505a      	str	r2, [r3, r1]
    4d3a:	24c6      	movs	r4, #198	; 0xc6
    4d3c:	00a4      	lsls	r4, r4, #2
    4d3e:	591a      	ldr	r2, [r3, r4]
    4d40:	48ca      	ldr	r0, [pc, #808]	; (506c <main+0x414>)
    4d42:	4010      	ands	r0, r2
    4d44:	2280      	movs	r2, #128	; 0x80
    4d46:	01d2      	lsls	r2, r2, #7
    4d48:	4302      	orrs	r2, r0
    4d4a:	511a      	str	r2, [r3, r4]
    4d4c:	585a      	ldr	r2, [r3, r1]
    4d4e:	48c8      	ldr	r0, [pc, #800]	; (5070 <main+0x418>)
    4d50:	4010      	ands	r0, r2
    4d52:	2280      	movs	r2, #128	; 0x80
    4d54:	0412      	lsls	r2, r2, #16
    4d56:	4302      	orrs	r2, r0
    4d58:	505a      	str	r2, [r3, r1]
    Enable_global_interrupt();
    4d5a:	2201      	movs	r2, #1
    4d5c:	4bc5      	ldr	r3, [pc, #788]	; (5074 <main+0x41c>)
    4d5e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4d60:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4d64:	b662      	cpsie	i
    delay_ms(100);
    4d66:	2000      	movs	r0, #0
    4d68:	4bb0      	ldr	r3, [pc, #704]	; (502c <main+0x3d4>)
    4d6a:	4798      	blx	r3
    4d6c:	2264      	movs	r2, #100	; 0x64
    4d6e:	2300      	movs	r3, #0
    4d70:	2100      	movs	r1, #0
    4d72:	4caf      	ldr	r4, [pc, #700]	; (5030 <main+0x3d8>)
    4d74:	47a0      	blx	r4
    4d76:	4aaf      	ldr	r2, [pc, #700]	; (5034 <main+0x3dc>)
    4d78:	2300      	movs	r3, #0
    4d7a:	1880      	adds	r0, r0, r2
    4d7c:	4159      	adcs	r1, r3
    4d7e:	4aae      	ldr	r2, [pc, #696]	; (5038 <main+0x3e0>)
    4d80:	2300      	movs	r3, #0
    4d82:	4cae      	ldr	r4, [pc, #696]	; (503c <main+0x3e4>)
    4d84:	47a0      	blx	r4
    4d86:	4bae      	ldr	r3, [pc, #696]	; (5040 <main+0x3e8>)
    4d88:	4798      	blx	r3
    memory_full_format();
    4d8a:	4bbb      	ldr	r3, [pc, #748]	; (5078 <main+0x420>)
    4d8c:	4798      	blx	r3
    memory_init();
    4d8e:	4bbb      	ldr	r3, [pc, #748]	; (507c <main+0x424>)
    4d90:	4798      	blx	r3
    configure_adc0(&adsr_channel0, &adsr_channel1, &adsr_channel2, &adsr_channel3, &adsr_channel4);
    4d92:	4f9a      	ldr	r7, [pc, #616]	; (4ffc <main+0x3a4>)
    4d94:	4e98      	ldr	r6, [pc, #608]	; (4ff8 <main+0x3a0>)
    4d96:	4d97      	ldr	r5, [pc, #604]	; (4ff4 <main+0x39c>)
    4d98:	4b99      	ldr	r3, [pc, #612]	; (5000 <main+0x3a8>)
    4d9a:	4698      	mov	r8, r3
    4d9c:	9300      	str	r3, [sp, #0]
    4d9e:	003b      	movs	r3, r7
    4da0:	0032      	movs	r2, r6
    4da2:	0029      	movs	r1, r5
    4da4:	4891      	ldr	r0, [pc, #580]	; (4fec <main+0x394>)
    4da6:	4cb6      	ldr	r4, [pc, #728]	; (5080 <main+0x428>)
    4da8:	47a0      	blx	r4
    adc0_set_compare_value(100);
    4daa:	2064      	movs	r0, #100	; 0x64
    4dac:	4bb5      	ldr	r3, [pc, #724]	; (5084 <main+0x42c>)
    4dae:	4798      	blx	r3
    configure_tcc0();
    4db0:	4bb5      	ldr	r3, [pc, #724]	; (5088 <main+0x430>)
    4db2:	4798      	blx	r3
    configure_tcc0_callbacks(&adsr_channel0, &adsr_channel1, &adsr_channel2, &adsr_channel3, &adsr_channel4);
    4db4:	4643      	mov	r3, r8
    4db6:	9300      	str	r3, [sp, #0]
    4db8:	003b      	movs	r3, r7
    4dba:	0032      	movs	r2, r6
    4dbc:	0029      	movs	r1, r5
    4dbe:	488b      	ldr	r0, [pc, #556]	; (4fec <main+0x394>)
    4dc0:	4cb2      	ldr	r4, [pc, #712]	; (508c <main+0x434>)
    4dc2:	47a0      	blx	r4
    4dc4:	ab20      	add	r3, sp, #128	; 0x80
    4dc6:	ac30      	add	r4, sp, #192	; 0xc0
    4dc8:	001e      	movs	r6, r3
        p_to_dmx_group_menus[i] = (MENU *)malloc(sizeof(MENU));
    4dca:	4fb1      	ldr	r7, [pc, #708]	; (5090 <main+0x438>)
    4dcc:	001d      	movs	r5, r3
    4dce:	209a      	movs	r0, #154	; 0x9a
    4dd0:	0080      	lsls	r0, r0, #2
    4dd2:	47b8      	blx	r7
    4dd4:	c601      	stmia	r6!, {r0}
    for (uint8_t i = 0; i < 16; i++) {
    4dd6:	42a6      	cmp	r6, r4
    4dd8:	d1f9      	bne.n	4dce <main+0x176>
    4dda:	9507      	str	r5, [sp, #28]
    channel *p_to_channels[5] = {&trigger_channel0, &trigger_channel1, &trigger_channel2, &trigger_channel3, &trigger_channel4};
    4ddc:	a81b      	add	r0, sp, #108	; 0x6c
    4dde:	4bad      	ldr	r3, [pc, #692]	; (5094 <main+0x43c>)
    4de0:	0002      	movs	r2, r0
    4de2:	0019      	movs	r1, r3
    4de4:	c951      	ldmia	r1!, {r0, r4, r6}
    4de6:	c251      	stmia	r2!, {r0, r4, r6}
    4de8:	c911      	ldmia	r1!, {r0, r4}
    4dea:	c211      	stmia	r2!, {r0, r4}
    volatile MENU *p_to_menus[5] = {&channel1_menu, &channel2_menu, &channel3_menu, &channel4_menu, &channel5_menu};
    4dec:	a916      	add	r1, sp, #88	; 0x58
    4dee:	3314      	adds	r3, #20
    4df0:	000a      	movs	r2, r1
    4df2:	cb13      	ldmia	r3!, {r0, r1, r4}
    4df4:	c213      	stmia	r2!, {r0, r1, r4}
    4df6:	cb03      	ldmia	r3!, {r0, r1}
    4df8:	c203      	stmia	r2!, {r0, r1}
    menu_create_item(&tmp_item, "SETTINGS", TYPE_MENU, "", (void *)&settings_menu, 0, 0);
    4dfa:	2400      	movs	r4, #0
    4dfc:	9402      	str	r4, [sp, #8]
    4dfe:	9401      	str	r4, [sp, #4]
    4e00:	4ba5      	ldr	r3, [pc, #660]	; (5098 <main+0x440>)
    4e02:	9300      	str	r3, [sp, #0]
    4e04:	4ba5      	ldr	r3, [pc, #660]	; (509c <main+0x444>)
    4e06:	2204      	movs	r2, #4
    4e08:	49a5      	ldr	r1, [pc, #660]	; (50a0 <main+0x448>)
    4e0a:	a80d      	add	r0, sp, #52	; 0x34
    4e0c:	4fa5      	ldr	r7, [pc, #660]	; (50a4 <main+0x44c>)
    4e0e:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    4e10:	ab10      	add	r3, sp, #64	; 0x40
    4e12:	466a      	mov	r2, sp
    4e14:	cb43      	ldmia	r3!, {r0, r1, r6}
    4e16:	c243      	stmia	r2!, {r0, r1, r6}
    4e18:	cb43      	ldmia	r3!, {r0, r1, r6}
    4e1a:	c243      	stmia	r2!, {r0, r1, r6}
    4e1c:	990d      	ldr	r1, [sp, #52]	; 0x34
    4e1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4e20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4e22:	48a1      	ldr	r0, [pc, #644]	; (50a8 <main+0x450>)
    4e24:	4ea1      	ldr	r6, [pc, #644]	; (50ac <main+0x454>)
    4e26:	47b0      	blx	r6
    menu_create_item(&tmp_item, "CHANNEL 1", TYPE_MENU, "", (void *)p_to_menus[0], 0, 0);
    4e28:	9402      	str	r4, [sp, #8]
    4e2a:	9401      	str	r4, [sp, #4]
    4e2c:	4ba0      	ldr	r3, [pc, #640]	; (50b0 <main+0x458>)
    4e2e:	9300      	str	r3, [sp, #0]
    4e30:	4b9a      	ldr	r3, [pc, #616]	; (509c <main+0x444>)
    4e32:	2204      	movs	r2, #4
    4e34:	499f      	ldr	r1, [pc, #636]	; (50b4 <main+0x45c>)
    4e36:	a80d      	add	r0, sp, #52	; 0x34
    4e38:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    4e3a:	ab10      	add	r3, sp, #64	; 0x40
    4e3c:	466a      	mov	r2, sp
    4e3e:	cb23      	ldmia	r3!, {r0, r1, r5}
    4e40:	c223      	stmia	r2!, {r0, r1, r5}
    4e42:	cb23      	ldmia	r3!, {r0, r1, r5}
    4e44:	c223      	stmia	r2!, {r0, r1, r5}
    4e46:	990d      	ldr	r1, [sp, #52]	; 0x34
    4e48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4e4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4e4c:	4896      	ldr	r0, [pc, #600]	; (50a8 <main+0x450>)
    4e4e:	47b0      	blx	r6
    menu_create_item(&tmp_item, "CHANNEL 2", TYPE_MENU, "", (void *)p_to_menus[1], 0, 0);
    4e50:	9402      	str	r4, [sp, #8]
    4e52:	9401      	str	r4, [sp, #4]
    4e54:	4b98      	ldr	r3, [pc, #608]	; (50b8 <main+0x460>)
    4e56:	9300      	str	r3, [sp, #0]
    4e58:	4b90      	ldr	r3, [pc, #576]	; (509c <main+0x444>)
    4e5a:	2204      	movs	r2, #4
    4e5c:	4997      	ldr	r1, [pc, #604]	; (50bc <main+0x464>)
    4e5e:	a80d      	add	r0, sp, #52	; 0x34
    4e60:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    4e62:	ab10      	add	r3, sp, #64	; 0x40
    4e64:	466a      	mov	r2, sp
    4e66:	cb23      	ldmia	r3!, {r0, r1, r5}
    4e68:	c223      	stmia	r2!, {r0, r1, r5}
    4e6a:	cb23      	ldmia	r3!, {r0, r1, r5}
    4e6c:	c223      	stmia	r2!, {r0, r1, r5}
    4e6e:	990d      	ldr	r1, [sp, #52]	; 0x34
    4e70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4e72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4e74:	488c      	ldr	r0, [pc, #560]	; (50a8 <main+0x450>)
    4e76:	47b0      	blx	r6
    menu_create_item(&tmp_item, "CHANNEL 3", TYPE_MENU, "", (void *)p_to_menus[2], 0, 0);
    4e78:	9402      	str	r4, [sp, #8]
    4e7a:	9401      	str	r4, [sp, #4]
    4e7c:	4b90      	ldr	r3, [pc, #576]	; (50c0 <main+0x468>)
    4e7e:	9300      	str	r3, [sp, #0]
    4e80:	4b86      	ldr	r3, [pc, #536]	; (509c <main+0x444>)
    4e82:	2204      	movs	r2, #4
    4e84:	498f      	ldr	r1, [pc, #572]	; (50c4 <main+0x46c>)
    4e86:	a80d      	add	r0, sp, #52	; 0x34
    4e88:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    4e8a:	ab10      	add	r3, sp, #64	; 0x40
    4e8c:	466a      	mov	r2, sp
    4e8e:	cb23      	ldmia	r3!, {r0, r1, r5}
    4e90:	c223      	stmia	r2!, {r0, r1, r5}
    4e92:	cb23      	ldmia	r3!, {r0, r1, r5}
    4e94:	c223      	stmia	r2!, {r0, r1, r5}
    4e96:	990d      	ldr	r1, [sp, #52]	; 0x34
    4e98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4e9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4e9c:	4882      	ldr	r0, [pc, #520]	; (50a8 <main+0x450>)
    4e9e:	47b0      	blx	r6
    menu_create_item(&tmp_item, "CHANNEL 4", TYPE_MENU, "", (void *)p_to_menus[3], 0, 0);
    4ea0:	9402      	str	r4, [sp, #8]
    4ea2:	9401      	str	r4, [sp, #4]
    4ea4:	4b88      	ldr	r3, [pc, #544]	; (50c8 <main+0x470>)
    4ea6:	9300      	str	r3, [sp, #0]
    4ea8:	4b7c      	ldr	r3, [pc, #496]	; (509c <main+0x444>)
    4eaa:	2204      	movs	r2, #4
    4eac:	4987      	ldr	r1, [pc, #540]	; (50cc <main+0x474>)
    4eae:	a80d      	add	r0, sp, #52	; 0x34
    4eb0:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    4eb2:	ab10      	add	r3, sp, #64	; 0x40
    4eb4:	466a      	mov	r2, sp
    4eb6:	cb23      	ldmia	r3!, {r0, r1, r5}
    4eb8:	c223      	stmia	r2!, {r0, r1, r5}
    4eba:	cb23      	ldmia	r3!, {r0, r1, r5}
    4ebc:	c223      	stmia	r2!, {r0, r1, r5}
    4ebe:	990d      	ldr	r1, [sp, #52]	; 0x34
    4ec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4ec2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4ec4:	4878      	ldr	r0, [pc, #480]	; (50a8 <main+0x450>)
    4ec6:	47b0      	blx	r6
    menu_create_item(&tmp_item, "CHANNEL 5", TYPE_MENU, "", (void *)p_to_menus[4], 0, 0);
    4ec8:	9402      	str	r4, [sp, #8]
    4eca:	9401      	str	r4, [sp, #4]
    4ecc:	4b80      	ldr	r3, [pc, #512]	; (50d0 <main+0x478>)
    4ece:	9300      	str	r3, [sp, #0]
    4ed0:	4b72      	ldr	r3, [pc, #456]	; (509c <main+0x444>)
    4ed2:	2204      	movs	r2, #4
    4ed4:	497f      	ldr	r1, [pc, #508]	; (50d4 <main+0x47c>)
    4ed6:	a80d      	add	r0, sp, #52	; 0x34
    4ed8:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    4eda:	ab10      	add	r3, sp, #64	; 0x40
    4edc:	466a      	mov	r2, sp
    4ede:	cb23      	ldmia	r3!, {r0, r1, r5}
    4ee0:	c223      	stmia	r2!, {r0, r1, r5}
    4ee2:	cb23      	ldmia	r3!, {r0, r1, r5}
    4ee4:	c223      	stmia	r2!, {r0, r1, r5}
    4ee6:	990d      	ldr	r1, [sp, #52]	; 0x34
    4ee8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4eea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4eec:	486e      	ldr	r0, [pc, #440]	; (50a8 <main+0x450>)
    4eee:	47b0      	blx	r6
    menu_create_item(&tmp_item, "CONTRAST", TYPE_UINT8, "", (void *)&device_settings.contrast, 0, 16);
    4ef0:	2383      	movs	r3, #131	; 0x83
    4ef2:	05db      	lsls	r3, r3, #23
    4ef4:	469b      	mov	fp, r3
    4ef6:	9302      	str	r3, [sp, #8]
    4ef8:	9401      	str	r4, [sp, #4]
    4efa:	4b77      	ldr	r3, [pc, #476]	; (50d8 <main+0x480>)
    4efc:	469a      	mov	sl, r3
    4efe:	9300      	str	r3, [sp, #0]
    4f00:	4b66      	ldr	r3, [pc, #408]	; (509c <main+0x444>)
    4f02:	2200      	movs	r2, #0
    4f04:	4975      	ldr	r1, [pc, #468]	; (50dc <main+0x484>)
    4f06:	a80d      	add	r0, sp, #52	; 0x34
    4f08:	47b8      	blx	r7
    menu_add_item(&settings_menu, tmp_item);
    4f0a:	ab10      	add	r3, sp, #64	; 0x40
    4f0c:	466a      	mov	r2, sp
    4f0e:	cb23      	ldmia	r3!, {r0, r1, r5}
    4f10:	c223      	stmia	r2!, {r0, r1, r5}
    4f12:	cb23      	ldmia	r3!, {r0, r1, r5}
    4f14:	c223      	stmia	r2!, {r0, r1, r5}
    4f16:	990d      	ldr	r1, [sp, #52]	; 0x34
    4f18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4f1c:	485e      	ldr	r0, [pc, #376]	; (5098 <main+0x440>)
    4f1e:	47b0      	blx	r6
    menu_create_item(&tmp_item, "BRIGHTNES", TYPE_UINT8, "", (void *)&device_settings.brightness, 0, 16);
    4f20:	465b      	mov	r3, fp
    4f22:	9302      	str	r3, [sp, #8]
    4f24:	9401      	str	r4, [sp, #4]
    4f26:	4653      	mov	r3, sl
    4f28:	3301      	adds	r3, #1
    4f2a:	9300      	str	r3, [sp, #0]
    4f2c:	4b5b      	ldr	r3, [pc, #364]	; (509c <main+0x444>)
    4f2e:	2200      	movs	r2, #0
    4f30:	496b      	ldr	r1, [pc, #428]	; (50e0 <main+0x488>)
    4f32:	a80d      	add	r0, sp, #52	; 0x34
    4f34:	47b8      	blx	r7
    menu_add_item(&settings_menu, tmp_item);
    4f36:	ab10      	add	r3, sp, #64	; 0x40
    4f38:	466a      	mov	r2, sp
    4f3a:	cb23      	ldmia	r3!, {r0, r1, r5}
    4f3c:	c223      	stmia	r2!, {r0, r1, r5}
    4f3e:	cb23      	ldmia	r3!, {r0, r1, r5}
    4f40:	c223      	stmia	r2!, {r0, r1, r5}
    4f42:	990d      	ldr	r1, [sp, #52]	; 0x34
    4f44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4f46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4f48:	4853      	ldr	r0, [pc, #332]	; (5098 <main+0x440>)
    4f4a:	47b0      	blx	r6
    menu_create_item(&tmp_item, "MODE", TYPE_UINT8, "", (void *)&device_settings.mode, 0, 2);
    4f4c:	2380      	movs	r3, #128	; 0x80
    4f4e:	05db      	lsls	r3, r3, #23
    4f50:	9302      	str	r3, [sp, #8]
    4f52:	9401      	str	r4, [sp, #4]
    4f54:	4653      	mov	r3, sl
    4f56:	3303      	adds	r3, #3
    4f58:	9300      	str	r3, [sp, #0]
    4f5a:	4b50      	ldr	r3, [pc, #320]	; (509c <main+0x444>)
    4f5c:	2200      	movs	r2, #0
    4f5e:	4961      	ldr	r1, [pc, #388]	; (50e4 <main+0x48c>)
    4f60:	a80d      	add	r0, sp, #52	; 0x34
    4f62:	47b8      	blx	r7
    menu_add_item(&settings_menu, tmp_item);
    4f64:	ab10      	add	r3, sp, #64	; 0x40
    4f66:	466a      	mov	r2, sp
    4f68:	cb23      	ldmia	r3!, {r0, r1, r5}
    4f6a:	c223      	stmia	r2!, {r0, r1, r5}
    4f6c:	cb23      	ldmia	r3!, {r0, r1, r5}
    4f6e:	c223      	stmia	r2!, {r0, r1, r5}
    4f70:	990d      	ldr	r1, [sp, #52]	; 0x34
    4f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4f76:	4848      	ldr	r0, [pc, #288]	; (5098 <main+0x440>)
    4f78:	47b0      	blx	r6
    menu_create_item(&tmp_item, "FIX_SIZE", TYPE_UINT8, "", (void *)&device_settings.fixture_size, 7, 8);
    4f7a:	2382      	movs	r3, #130	; 0x82
    4f7c:	05db      	lsls	r3, r3, #23
    4f7e:	9302      	str	r3, [sp, #8]
    4f80:	4b59      	ldr	r3, [pc, #356]	; (50e8 <main+0x490>)
    4f82:	9301      	str	r3, [sp, #4]
    4f84:	4653      	mov	r3, sl
    4f86:	3302      	adds	r3, #2
    4f88:	9300      	str	r3, [sp, #0]
    4f8a:	4b44      	ldr	r3, [pc, #272]	; (509c <main+0x444>)
    4f8c:	2200      	movs	r2, #0
    4f8e:	4957      	ldr	r1, [pc, #348]	; (50ec <main+0x494>)
    4f90:	a80d      	add	r0, sp, #52	; 0x34
    4f92:	47b8      	blx	r7
    menu_add_item(&settings_menu, tmp_item);
    4f94:	ab10      	add	r3, sp, #64	; 0x40
    4f96:	466a      	mov	r2, sp
    4f98:	cb23      	ldmia	r3!, {r0, r1, r5}
    4f9a:	c223      	stmia	r2!, {r0, r1, r5}
    4f9c:	cb23      	ldmia	r3!, {r0, r1, r5}
    4f9e:	c223      	stmia	r2!, {r0, r1, r5}
    4fa0:	990d      	ldr	r1, [sp, #52]	; 0x34
    4fa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4fa6:	483c      	ldr	r0, [pc, #240]	; (5098 <main+0x440>)
    4fa8:	47b0      	blx	r6
    menu_create_item(&tmp_item, "BACK", TYPE_MENU, "", (void *)&main_menu, 0, 0);
    4faa:	9402      	str	r4, [sp, #8]
    4fac:	9401      	str	r4, [sp, #4]
    4fae:	4b3e      	ldr	r3, [pc, #248]	; (50a8 <main+0x450>)
    4fb0:	9300      	str	r3, [sp, #0]
    4fb2:	4b3a      	ldr	r3, [pc, #232]	; (509c <main+0x444>)
    4fb4:	2204      	movs	r2, #4
    4fb6:	494e      	ldr	r1, [pc, #312]	; (50f0 <main+0x498>)
    4fb8:	a80d      	add	r0, sp, #52	; 0x34
    4fba:	47b8      	blx	r7
    menu_add_item(&settings_menu, tmp_item);
    4fbc:	ab10      	add	r3, sp, #64	; 0x40
    4fbe:	466a      	mov	r2, sp
    4fc0:	cb13      	ldmia	r3!, {r0, r1, r4}
    4fc2:	c213      	stmia	r2!, {r0, r1, r4}
    4fc4:	cb13      	ldmia	r3!, {r0, r1, r4}
    4fc6:	c213      	stmia	r2!, {r0, r1, r4}
    4fc8:	990d      	ldr	r1, [sp, #52]	; 0x34
    4fca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4fcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4fce:	4832      	ldr	r0, [pc, #200]	; (5098 <main+0x440>)
    4fd0:	47b0      	blx	r6
    4fd2:	2310      	movs	r3, #16
    4fd4:	469a      	mov	sl, r3
    4fd6:	2300      	movs	r3, #0
    4fd8:	4698      	mov	r8, r3
    4fda:	469b      	mov	fp, r3
            sprintf(menu_item_name, "DMX%d", i * MENU_MAX_ITEMS + j);
    4fdc:	4b45      	ldr	r3, [pc, #276]	; (50f4 <main+0x49c>)
    4fde:	4699      	mov	r9, r3
    4fe0:	4643      	mov	r3, r8
    4fe2:	9306      	str	r3, [sp, #24]
    4fe4:	9d07      	ldr	r5, [sp, #28]
    4fe6:	4656      	mov	r6, sl
    4fe8:	e0c9      	b.n	517e <main+0x526>
    4fea:	46c0      	nop			; (mov r8, r8)
    4fec:	20002318 	.word	0x20002318
    4ff0:	00000631 	.word	0x00000631
    4ff4:	20001edc 	.word	0x20001edc
    4ff8:	20001f1c 	.word	0x20001f1c
    4ffc:	200020c0 	.word	0x200020c0
    5000:	2000205c 	.word	0x2000205c
    5004:	200020f4 	.word	0x200020f4
    5008:	20001f50 	.word	0x20001f50
    500c:	2000234c 	.word	0x2000234c
    5010:	200020b4 	.word	0x200020b4
    5014:	20001f10 	.word	0x20001f10
    5018:	00004959 	.word	0x00004959
    501c:	00000b31 	.word	0x00000b31
    5020:	0000348d 	.word	0x0000348d
    5024:	00004a49 	.word	0x00004a49
    5028:	0000034d 	.word	0x0000034d
    502c:	00004751 	.word	0x00004751
    5030:	000057e1 	.word	0x000057e1
    5034:	00001b57 	.word	0x00001b57
    5038:	00001b58 	.word	0x00001b58
    503c:	000057a1 	.word	0x000057a1
    5040:	20000001 	.word	0x20000001
    5044:	000004b5 	.word	0x000004b5
    5048:	00004b31 	.word	0x00004b31
    504c:	00004b5d 	.word	0x00004b5d
    5050:	00003d79 	.word	0x00003d79
    5054:	00001b25 	.word	0x00001b25
    5058:	000040bd 	.word	0x000040bd
    505c:	20002090 	.word	0x20002090
    5060:	00001f6d 	.word	0x00001f6d
    5064:	20001f5c 	.word	0x20001f5c
    5068:	e000e100 	.word	0xe000e100
    506c:	ffff00ff 	.word	0xffff00ff
    5070:	ff00ffff 	.word	0xff00ffff
    5074:	20000015 	.word	0x20000015
    5078:	00001ddd 	.word	0x00001ddd
    507c:	00001da9 	.word	0x00001da9
    5080:	000032a9 	.word	0x000032a9
    5084:	0000338d 	.word	0x0000338d
    5088:	00003fe1 	.word	0x00003fe1
    508c:	00004031 	.word	0x00004031
    5090:	00007cf9 	.word	0x00007cf9
    5094:	00008874 	.word	0x00008874
    5098:	20000f60 	.word	0x20000f60
    509c:	000087f4 	.word	0x000087f4
    50a0:	0000889c 	.word	0x0000889c
    50a4:	00003a39 	.word	0x00003a39
    50a8:	20000cf8 	.word	0x20000cf8
    50ac:	00003695 	.word	0x00003695
    50b0:	200000f0 	.word	0x200000f0
    50b4:	000088a8 	.word	0x000088a8
    50b8:	20000358 	.word	0x20000358
    50bc:	000088b4 	.word	0x000088b4
    50c0:	200005c0 	.word	0x200005c0
    50c4:	000088c0 	.word	0x000088c0
    50c8:	20000828 	.word	0x20000828
    50cc:	000088cc 	.word	0x000088cc
    50d0:	20000a90 	.word	0x20000a90
    50d4:	000088d8 	.word	0x000088d8
    50d8:	20000018 	.word	0x20000018
    50dc:	000088e4 	.word	0x000088e4
    50e0:	000088f0 	.word	0x000088f0
    50e4:	000088fc 	.word	0x000088fc
    50e8:	40e00000 	.word	0x40e00000
    50ec:	00008904 	.word	0x00008904
    50f0:	00008910 	.word	0x00008910
    50f4:	00007e95 	.word	0x00007e95
    50f8:	0035      	movs	r5, r6
    50fa:	4646      	mov	r6, r8
        menu_create_item(&tmp_item, "BACK", TYPE_MENU, "", (void *)&static_channels_menu, 0, 0);
    50fc:	2300      	movs	r3, #0
    50fe:	4698      	mov	r8, r3
    5100:	9302      	str	r3, [sp, #8]
    5102:	9301      	str	r3, [sp, #4]
    5104:	4bcf      	ldr	r3, [pc, #828]	; (5444 <main+0x7ec>)
    5106:	9300      	str	r3, [sp, #0]
    5108:	4bcf      	ldr	r3, [pc, #828]	; (5448 <main+0x7f0>)
    510a:	2204      	movs	r2, #4
    510c:	49cf      	ldr	r1, [pc, #828]	; (544c <main+0x7f4>)
    510e:	a80d      	add	r0, sp, #52	; 0x34
    5110:	4fcf      	ldr	r7, [pc, #828]	; (5450 <main+0x7f8>)
    5112:	46ba      	mov	sl, r7
    5114:	47b8      	blx	r7
        menu_add_item(p_to_dmx_group_menus[i], tmp_item);
    5116:	ab10      	add	r3, sp, #64	; 0x40
    5118:	466a      	mov	r2, sp
    511a:	cb83      	ldmia	r3!, {r0, r1, r7}
    511c:	c283      	stmia	r2!, {r0, r1, r7}
    511e:	cb83      	ldmia	r3!, {r0, r1, r7}
    5120:	c283      	stmia	r2!, {r0, r1, r7}
    5122:	990d      	ldr	r1, [sp, #52]	; 0x34
    5124:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5128:	0020      	movs	r0, r4
    512a:	4fca      	ldr	r7, [pc, #808]	; (5454 <main+0x7fc>)
    512c:	47b8      	blx	r7
        sprintf(menu_item_name, "DMX%d-%d", i * 16, i * 16 + 15);
    512e:	465b      	mov	r3, fp
    5130:	330f      	adds	r3, #15
    5132:	465a      	mov	r2, fp
    5134:	49c8      	ldr	r1, [pc, #800]	; (5458 <main+0x800>)
    5136:	a80a      	add	r0, sp, #40	; 0x28
    5138:	4fc8      	ldr	r7, [pc, #800]	; (545c <main+0x804>)
    513a:	47b8      	blx	r7
        menu_create_item(&tmp_item, menu_item_name, TYPE_MENU, "", (void *)p_to_dmx_group_menus[i], 0, 0);
    513c:	4643      	mov	r3, r8
    513e:	9302      	str	r3, [sp, #8]
    5140:	9301      	str	r3, [sp, #4]
    5142:	9400      	str	r4, [sp, #0]
    5144:	4bc0      	ldr	r3, [pc, #768]	; (5448 <main+0x7f0>)
    5146:	2204      	movs	r2, #4
    5148:	a90a      	add	r1, sp, #40	; 0x28
    514a:	a80d      	add	r0, sp, #52	; 0x34
    514c:	47d0      	blx	sl
        menu_add_item(&static_channels_menu, tmp_item);
    514e:	ab10      	add	r3, sp, #64	; 0x40
    5150:	466a      	mov	r2, sp
    5152:	cb13      	ldmia	r3!, {r0, r1, r4}
    5154:	c213      	stmia	r2!, {r0, r1, r4}
    5156:	cb13      	ldmia	r3!, {r0, r1, r4}
    5158:	c213      	stmia	r2!, {r0, r1, r4}
    515a:	990d      	ldr	r1, [sp, #52]	; 0x34
    515c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    515e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5160:	48b8      	ldr	r0, [pc, #736]	; (5444 <main+0x7ec>)
    5162:	4cbc      	ldr	r4, [pc, #752]	; (5454 <main+0x7fc>)
    5164:	47a0      	blx	r4
    5166:	3504      	adds	r5, #4
    5168:	2310      	movs	r3, #16
    516a:	469c      	mov	ip, r3
    516c:	44e3      	add	fp, ip
    516e:	9b06      	ldr	r3, [sp, #24]
    5170:	3b01      	subs	r3, #1
    5172:	9306      	str	r3, [sp, #24]
    5174:	3611      	adds	r6, #17
    for (uint16_t i = 0; i < (MAX_DMX_CHANNELS / 16); i++) {
    5176:	2380      	movs	r3, #128	; 0x80
    5178:	005b      	lsls	r3, r3, #1
    517a:	459b      	cmp	fp, r3
    517c:	d029      	beq.n	51d2 <main+0x57a>
    517e:	0037      	movs	r7, r6
    5180:	3f10      	subs	r7, #16
    5182:	0033      	movs	r3, r6
    5184:	002e      	movs	r6, r5
    5186:	4698      	mov	r8, r3
            sprintf(menu_item_name, "DMX%d", i * MENU_MAX_ITEMS + j);
    5188:	003a      	movs	r2, r7
    518a:	49b5      	ldr	r1, [pc, #724]	; (5460 <main+0x808>)
    518c:	a80a      	add	r0, sp, #40	; 0x28
    518e:	47c8      	blx	r9
            menu_create_item(&tmp_item, menu_item_name, TYPE_UINT8, "", dmx_values + i * 16 + j, -1, 256);
    5190:	2387      	movs	r3, #135	; 0x87
    5192:	05db      	lsls	r3, r3, #23
    5194:	9302      	str	r3, [sp, #8]
    5196:	4bb3      	ldr	r3, [pc, #716]	; (5464 <main+0x80c>)
    5198:	9301      	str	r3, [sp, #4]
    519a:	9b06      	ldr	r3, [sp, #24]
    519c:	19db      	adds	r3, r3, r7
    519e:	4ab2      	ldr	r2, [pc, #712]	; (5468 <main+0x810>)
    51a0:	189b      	adds	r3, r3, r2
    51a2:	9300      	str	r3, [sp, #0]
    51a4:	4ba8      	ldr	r3, [pc, #672]	; (5448 <main+0x7f0>)
    51a6:	2200      	movs	r2, #0
    51a8:	a90a      	add	r1, sp, #40	; 0x28
    51aa:	a80d      	add	r0, sp, #52	; 0x34
    51ac:	4ca8      	ldr	r4, [pc, #672]	; (5450 <main+0x7f8>)
    51ae:	47a0      	blx	r4
            menu_add_item(p_to_dmx_group_menus[i], tmp_item);
    51b0:	6834      	ldr	r4, [r6, #0]
    51b2:	ab10      	add	r3, sp, #64	; 0x40
    51b4:	466a      	mov	r2, sp
    51b6:	cb23      	ldmia	r3!, {r0, r1, r5}
    51b8:	c223      	stmia	r2!, {r0, r1, r5}
    51ba:	cb23      	ldmia	r3!, {r0, r1, r5}
    51bc:	c223      	stmia	r2!, {r0, r1, r5}
    51be:	990d      	ldr	r1, [sp, #52]	; 0x34
    51c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    51c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    51c4:	0020      	movs	r0, r4
    51c6:	4da3      	ldr	r5, [pc, #652]	; (5454 <main+0x7fc>)
    51c8:	47a8      	blx	r5
    51ca:	3701      	adds	r7, #1
        for (uint16_t j = 0; j < MENU_MAX_ITEMS - 1; j++) {
    51cc:	4547      	cmp	r7, r8
    51ce:	d1db      	bne.n	5188 <main+0x530>
    51d0:	e792      	b.n	50f8 <main+0x4a0>
    menu_create_item(&tmp_item, "STATIC_CH", TYPE_MENU, "", (void *)&static_channels_menu, 0, 0);
    51d2:	2400      	movs	r4, #0
    51d4:	9402      	str	r4, [sp, #8]
    51d6:	9401      	str	r4, [sp, #4]
    51d8:	4f9a      	ldr	r7, [pc, #616]	; (5444 <main+0x7ec>)
    51da:	9700      	str	r7, [sp, #0]
    51dc:	4b9a      	ldr	r3, [pc, #616]	; (5448 <main+0x7f0>)
    51de:	2204      	movs	r2, #4
    51e0:	49a2      	ldr	r1, [pc, #648]	; (546c <main+0x814>)
    51e2:	a80d      	add	r0, sp, #52	; 0x34
    51e4:	4d9a      	ldr	r5, [pc, #616]	; (5450 <main+0x7f8>)
    51e6:	47a8      	blx	r5
    menu_add_item(&main_menu, tmp_item);
    51e8:	4ba1      	ldr	r3, [pc, #644]	; (5470 <main+0x818>)
    51ea:	4699      	mov	r9, r3
    51ec:	ab10      	add	r3, sp, #64	; 0x40
    51ee:	466a      	mov	r2, sp
    51f0:	cb43      	ldmia	r3!, {r0, r1, r6}
    51f2:	c243      	stmia	r2!, {r0, r1, r6}
    51f4:	cb43      	ldmia	r3!, {r0, r1, r6}
    51f6:	c243      	stmia	r2!, {r0, r1, r6}
    51f8:	990d      	ldr	r1, [sp, #52]	; 0x34
    51fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    51fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    51fe:	4648      	mov	r0, r9
    5200:	4e94      	ldr	r6, [pc, #592]	; (5454 <main+0x7fc>)
    5202:	47b0      	blx	r6
    menu_create_item(&tmp_item, "BACK", TYPE_MENU, "", (void *)&main_menu, 0, 0);
    5204:	9402      	str	r4, [sp, #8]
    5206:	9401      	str	r4, [sp, #4]
    5208:	464b      	mov	r3, r9
    520a:	9300      	str	r3, [sp, #0]
    520c:	4b8e      	ldr	r3, [pc, #568]	; (5448 <main+0x7f0>)
    520e:	2204      	movs	r2, #4
    5210:	498e      	ldr	r1, [pc, #568]	; (544c <main+0x7f4>)
    5212:	a80d      	add	r0, sp, #52	; 0x34
    5214:	47a8      	blx	r5
    menu_add_item(&static_channels_menu, tmp_item);
    5216:	ab10      	add	r3, sp, #64	; 0x40
    5218:	466a      	mov	r2, sp
    521a:	cb13      	ldmia	r3!, {r0, r1, r4}
    521c:	c213      	stmia	r2!, {r0, r1, r4}
    521e:	cb13      	ldmia	r3!, {r0, r1, r4}
    5220:	c213      	stmia	r2!, {r0, r1, r4}
    5222:	990d      	ldr	r1, [sp, #52]	; 0x34
    5224:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5228:	0038      	movs	r0, r7
    522a:	47b0      	blx	r6
    522c:	2300      	movs	r3, #0
    522e:	4698      	mov	r8, r3
        menu_create_item(&tmp_item, "DMX CH", TYPE_UINT8, "", (void *)&p_to_channels[i]->ch, 0, 255);
    5230:	4b90      	ldr	r3, [pc, #576]	; (5474 <main+0x81c>)
    5232:	469b      	mov	fp, r3
    5234:	4e86      	ldr	r6, [pc, #536]	; (5450 <main+0x7f8>)
    5236:	4643      	mov	r3, r8
    5238:	9307      	str	r3, [sp, #28]
    523a:	ab1b      	add	r3, sp, #108	; 0x6c
    523c:	9d07      	ldr	r5, [sp, #28]
    523e:	58eb      	ldr	r3, [r5, r3]
    5240:	4699      	mov	r9, r3
    5242:	4b8d      	ldr	r3, [pc, #564]	; (5478 <main+0x820>)
    5244:	4698      	mov	r8, r3
    5246:	9302      	str	r3, [sp, #8]
    5248:	2400      	movs	r4, #0
    524a:	9401      	str	r4, [sp, #4]
    524c:	464b      	mov	r3, r9
    524e:	9300      	str	r3, [sp, #0]
    5250:	4b7d      	ldr	r3, [pc, #500]	; (5448 <main+0x7f0>)
    5252:	2200      	movs	r2, #0
    5254:	4659      	mov	r1, fp
    5256:	a80d      	add	r0, sp, #52	; 0x34
    5258:	47b0      	blx	r6
        menu_add_item(p_to_menus[i], tmp_item);
    525a:	ab16      	add	r3, sp, #88	; 0x58
    525c:	9507      	str	r5, [sp, #28]
    525e:	58eb      	ldr	r3, [r5, r3]
    5260:	0018      	movs	r0, r3
    5262:	ab10      	add	r3, sp, #64	; 0x40
    5264:	466a      	mov	r2, sp
    5266:	cba2      	ldmia	r3!, {r1, r5, r7}
    5268:	c2a2      	stmia	r2!, {r1, r5, r7}
    526a:	cba2      	ldmia	r3!, {r1, r5, r7}
    526c:	c2a2      	stmia	r2!, {r1, r5, r7}
    526e:	990d      	ldr	r1, [sp, #52]	; 0x34
    5270:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5272:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5274:	9006      	str	r0, [sp, #24]
    5276:	4d77      	ldr	r5, [pc, #476]	; (5454 <main+0x7fc>)
    5278:	47a8      	blx	r5
        menu_create_item(&tmp_item, "LEVEL", TYPE_FLOAT, "V", (void *)&p_to_channels[i]->level, 0, 5);
    527a:	4b80      	ldr	r3, [pc, #512]	; (547c <main+0x824>)
    527c:	9302      	str	r3, [sp, #8]
    527e:	9401      	str	r4, [sp, #4]
    5280:	464b      	mov	r3, r9
    5282:	3308      	adds	r3, #8
    5284:	9300      	str	r3, [sp, #0]
    5286:	4b7e      	ldr	r3, [pc, #504]	; (5480 <main+0x828>)
    5288:	2203      	movs	r2, #3
    528a:	497e      	ldr	r1, [pc, #504]	; (5484 <main+0x82c>)
    528c:	a80d      	add	r0, sp, #52	; 0x34
    528e:	47b0      	blx	r6
        menu_add_item(p_to_menus[i], tmp_item);
    5290:	ab10      	add	r3, sp, #64	; 0x40
    5292:	466a      	mov	r2, sp
    5294:	cb83      	ldmia	r3!, {r0, r1, r7}
    5296:	c283      	stmia	r2!, {r0, r1, r7}
    5298:	cb83      	ldmia	r3!, {r0, r1, r7}
    529a:	c283      	stmia	r2!, {r0, r1, r7}
    529c:	990d      	ldr	r1, [sp, #52]	; 0x34
    529e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    52a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    52a2:	9806      	ldr	r0, [sp, #24]
    52a4:	47a8      	blx	r5
        menu_create_item(&tmp_item, "ATTACK", TYPE_UINT32, "ms", (void *)&p_to_channels[i]->adsr->attack, 0, 5000);
    52a6:	4a78      	ldr	r2, [pc, #480]	; (5488 <main+0x830>)
    52a8:	4692      	mov	sl, r2
    52aa:	9202      	str	r2, [sp, #8]
    52ac:	9401      	str	r4, [sp, #4]
    52ae:	464a      	mov	r2, r9
    52b0:	6853      	ldr	r3, [r2, #4]
    52b2:	330c      	adds	r3, #12
    52b4:	9300      	str	r3, [sp, #0]
    52b6:	4b75      	ldr	r3, [pc, #468]	; (548c <main+0x834>)
    52b8:	2202      	movs	r2, #2
    52ba:	4975      	ldr	r1, [pc, #468]	; (5490 <main+0x838>)
    52bc:	a80d      	add	r0, sp, #52	; 0x34
    52be:	47b0      	blx	r6
        menu_add_item(p_to_menus[i], tmp_item);
    52c0:	ab10      	add	r3, sp, #64	; 0x40
    52c2:	466a      	mov	r2, sp
    52c4:	cb83      	ldmia	r3!, {r0, r1, r7}
    52c6:	c283      	stmia	r2!, {r0, r1, r7}
    52c8:	cb83      	ldmia	r3!, {r0, r1, r7}
    52ca:	c283      	stmia	r2!, {r0, r1, r7}
    52cc:	990d      	ldr	r1, [sp, #52]	; 0x34
    52ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    52d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    52d2:	9806      	ldr	r0, [sp, #24]
    52d4:	47a8      	blx	r5
        menu_create_item(&tmp_item, "DECAY", TYPE_UINT32, "ms", (void *)&p_to_channels[i]->adsr->decay, 0, 5000);
    52d6:	4652      	mov	r2, sl
    52d8:	9202      	str	r2, [sp, #8]
    52da:	9401      	str	r4, [sp, #4]
    52dc:	464a      	mov	r2, r9
    52de:	6853      	ldr	r3, [r2, #4]
    52e0:	3314      	adds	r3, #20
    52e2:	9300      	str	r3, [sp, #0]
    52e4:	4b69      	ldr	r3, [pc, #420]	; (548c <main+0x834>)
    52e6:	2202      	movs	r2, #2
    52e8:	496a      	ldr	r1, [pc, #424]	; (5494 <main+0x83c>)
    52ea:	a80d      	add	r0, sp, #52	; 0x34
    52ec:	47b0      	blx	r6
        menu_add_item(p_to_menus[i], tmp_item);
    52ee:	ab10      	add	r3, sp, #64	; 0x40
    52f0:	466a      	mov	r2, sp
    52f2:	cb83      	ldmia	r3!, {r0, r1, r7}
    52f4:	c283      	stmia	r2!, {r0, r1, r7}
    52f6:	cb83      	ldmia	r3!, {r0, r1, r7}
    52f8:	c283      	stmia	r2!, {r0, r1, r7}
    52fa:	990d      	ldr	r1, [sp, #52]	; 0x34
    52fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    52fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5300:	9806      	ldr	r0, [sp, #24]
    5302:	47a8      	blx	r5
        menu_create_item(&tmp_item, "SUSTAIN", TYPE_UINT32, "ms", (void *)&p_to_channels[i]->adsr->sustain, 0, 5000);
    5304:	4652      	mov	r2, sl
    5306:	9202      	str	r2, [sp, #8]
    5308:	9401      	str	r4, [sp, #4]
    530a:	464a      	mov	r2, r9
    530c:	6853      	ldr	r3, [r2, #4]
    530e:	331c      	adds	r3, #28
    5310:	9300      	str	r3, [sp, #0]
    5312:	4b5e      	ldr	r3, [pc, #376]	; (548c <main+0x834>)
    5314:	2202      	movs	r2, #2
    5316:	4960      	ldr	r1, [pc, #384]	; (5498 <main+0x840>)
    5318:	a80d      	add	r0, sp, #52	; 0x34
    531a:	47b0      	blx	r6
        menu_add_item(p_to_menus[i], tmp_item);
    531c:	ab10      	add	r3, sp, #64	; 0x40
    531e:	466a      	mov	r2, sp
    5320:	cb83      	ldmia	r3!, {r0, r1, r7}
    5322:	c283      	stmia	r2!, {r0, r1, r7}
    5324:	cb83      	ldmia	r3!, {r0, r1, r7}
    5326:	c283      	stmia	r2!, {r0, r1, r7}
    5328:	990d      	ldr	r1, [sp, #52]	; 0x34
    532a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    532c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    532e:	9806      	ldr	r0, [sp, #24]
    5330:	47a8      	blx	r5
        menu_create_item(&tmp_item, "S_LEVEL", TYPE_UINT8, "", (void *)&p_to_channels[i]->adsr->sustain_level, 0, 255);
    5332:	4642      	mov	r2, r8
    5334:	9202      	str	r2, [sp, #8]
    5336:	9401      	str	r4, [sp, #4]
    5338:	464a      	mov	r2, r9
    533a:	6853      	ldr	r3, [r2, #4]
    533c:	3320      	adds	r3, #32
    533e:	9300      	str	r3, [sp, #0]
    5340:	4b41      	ldr	r3, [pc, #260]	; (5448 <main+0x7f0>)
    5342:	2200      	movs	r2, #0
    5344:	4955      	ldr	r1, [pc, #340]	; (549c <main+0x844>)
    5346:	a80d      	add	r0, sp, #52	; 0x34
    5348:	47b0      	blx	r6
        menu_add_item(p_to_menus[i], tmp_item);
    534a:	ab10      	add	r3, sp, #64	; 0x40
    534c:	466a      	mov	r2, sp
    534e:	cb83      	ldmia	r3!, {r0, r1, r7}
    5350:	c283      	stmia	r2!, {r0, r1, r7}
    5352:	cb83      	ldmia	r3!, {r0, r1, r7}
    5354:	c283      	stmia	r2!, {r0, r1, r7}
    5356:	990d      	ldr	r1, [sp, #52]	; 0x34
    5358:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    535a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    535c:	9806      	ldr	r0, [sp, #24]
    535e:	47a8      	blx	r5
        menu_create_item(&tmp_item, "RELEASE", TYPE_UINT32, "ms", (void *)&p_to_channels[i]->adsr->release, 0, 5000);
    5360:	4653      	mov	r3, sl
    5362:	9302      	str	r3, [sp, #8]
    5364:	9401      	str	r4, [sp, #4]
    5366:	464b      	mov	r3, r9
    5368:	685b      	ldr	r3, [r3, #4]
    536a:	3328      	adds	r3, #40	; 0x28
    536c:	9300      	str	r3, [sp, #0]
    536e:	4b47      	ldr	r3, [pc, #284]	; (548c <main+0x834>)
    5370:	2202      	movs	r2, #2
    5372:	494b      	ldr	r1, [pc, #300]	; (54a0 <main+0x848>)
    5374:	a80d      	add	r0, sp, #52	; 0x34
    5376:	47b0      	blx	r6
        menu_add_item(p_to_menus[i], tmp_item);
    5378:	ab10      	add	r3, sp, #64	; 0x40
    537a:	466a      	mov	r2, sp
    537c:	cb83      	ldmia	r3!, {r0, r1, r7}
    537e:	c283      	stmia	r2!, {r0, r1, r7}
    5380:	cb83      	ldmia	r3!, {r0, r1, r7}
    5382:	c283      	stmia	r2!, {r0, r1, r7}
    5384:	990d      	ldr	r1, [sp, #52]	; 0x34
    5386:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    538a:	9806      	ldr	r0, [sp, #24]
    538c:	47a8      	blx	r5
        menu_create_item(&tmp_item, "BACK", TYPE_MENU, "", (void *)&main_menu, 0, 0);
    538e:	9402      	str	r4, [sp, #8]
    5390:	9401      	str	r4, [sp, #4]
    5392:	4b37      	ldr	r3, [pc, #220]	; (5470 <main+0x818>)
    5394:	9300      	str	r3, [sp, #0]
    5396:	4b2c      	ldr	r3, [pc, #176]	; (5448 <main+0x7f0>)
    5398:	2204      	movs	r2, #4
    539a:	492c      	ldr	r1, [pc, #176]	; (544c <main+0x7f4>)
    539c:	a80d      	add	r0, sp, #52	; 0x34
    539e:	47b0      	blx	r6
        menu_add_item(p_to_menus[i], tmp_item);
    53a0:	ab10      	add	r3, sp, #64	; 0x40
    53a2:	466a      	mov	r2, sp
    53a4:	cb92      	ldmia	r3!, {r1, r4, r7}
    53a6:	c292      	stmia	r2!, {r1, r4, r7}
    53a8:	cb92      	ldmia	r3!, {r1, r4, r7}
    53aa:	c292      	stmia	r2!, {r1, r4, r7}
    53ac:	990d      	ldr	r1, [sp, #52]	; 0x34
    53ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    53b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    53b2:	9806      	ldr	r0, [sp, #24]
    53b4:	47a8      	blx	r5
    53b6:	9b07      	ldr	r3, [sp, #28]
    53b8:	3304      	adds	r3, #4
    53ba:	9307      	str	r3, [sp, #28]
    for (uint8_t i = 0; i < 5; i++) {
    53bc:	2b14      	cmp	r3, #20
    53be:	d000      	beq.n	53c2 <main+0x76a>
    53c0:	e73b      	b.n	523a <main+0x5e2>
        dmx_values[i] = 0;
    53c2:	2300      	movs	r3, #0
    53c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    53c6:	7013      	strb	r3, [r2, #0]
    53c8:	3201      	adds	r2, #1
    for (uint16_t i = 0; i < sizeof(dmx_values); i++) {
    53ca:	9908      	ldr	r1, [sp, #32]
    53cc:	428a      	cmp	r2, r1
    53ce:	d1fa      	bne.n	53c6 <main+0x76e>
    dmx_values[0] = 255;
    53d0:	4b25      	ldr	r3, [pc, #148]	; (5468 <main+0x810>)
    53d2:	22ff      	movs	r2, #255	; 0xff
    53d4:	701a      	strb	r2, [r3, #0]
    dmx_values[6] = 255;
    53d6:	719a      	strb	r2, [r3, #6]
    uint32_t send_data_timer = 0, read_button_timer = 0;
    53d8:	2300      	movs	r3, #0
    53da:	9307      	str	r3, [sp, #28]
    53dc:	9306      	str	r3, [sp, #24]
    uint8_t prev_brightness = 0;
    53de:	2700      	movs	r7, #0
        if (device_settings.contrast != prev_contrast) {
    53e0:	4a30      	ldr	r2, [pc, #192]	; (54a4 <main+0x84c>)
    53e2:	4690      	mov	r8, r2
                        increment_menu_position(selected_menu);
    53e4:	4a30      	ldr	r2, [pc, #192]	; (54a8 <main+0x850>)
    53e6:	4692      	mov	sl, r2
    53e8:	4a30      	ldr	r2, [pc, #192]	; (54ac <main+0x854>)
    53ea:	4691      	mov	r9, r2
    53ec:	e0ad      	b.n	554a <main+0x8f2>
    53ee:	0007      	movs	r7, r0
    53f0:	e0bd      	b.n	556e <main+0x916>
            menu_draw();
    53f2:	4b2f      	ldr	r3, [pc, #188]	; (54b0 <main+0x858>)
    53f4:	4798      	blx	r3
    53f6:	e0bf      	b.n	5578 <main+0x920>
                        menu_decrement_item(selected_menu);
    53f8:	4b2b      	ldr	r3, [pc, #172]	; (54a8 <main+0x850>)
    53fa:	6818      	ldr	r0, [r3, #0]
    53fc:	4b2d      	ldr	r3, [pc, #180]	; (54b4 <main+0x85c>)
    53fe:	4798      	blx	r3
                for (uint8_t i = get_encoder_speed(); i > 0; i--)
    5400:	3c01      	subs	r4, #1
    5402:	b2e4      	uxtb	r4, r4
    5404:	2c00      	cmp	r4, #0
    5406:	d062      	beq.n	54ce <main+0x876>
                    if (state == SCROLL) {
    5408:	782b      	ldrb	r3, [r5, #0]
    540a:	2b00      	cmp	r3, #0
    540c:	d1f4      	bne.n	53f8 <main+0x7a0>
                        decrement_menu_position(selected_menu);
    540e:	465b      	mov	r3, fp
    5410:	6818      	ldr	r0, [r3, #0]
    5412:	4b29      	ldr	r3, [pc, #164]	; (54b8 <main+0x860>)
    5414:	4798      	blx	r3
    5416:	e7f3      	b.n	5400 <main+0x7a8>
                for (uint8_t i = get_encoder_speed(); i > 0; i--)
    5418:	4b28      	ldr	r3, [pc, #160]	; (54bc <main+0x864>)
    541a:	4798      	blx	r3
    541c:	1e04      	subs	r4, r0, #0
    541e:	d056      	beq.n	54ce <main+0x876>
                    if (state == SCROLL) {
    5420:	4d27      	ldr	r5, [pc, #156]	; (54c0 <main+0x868>)
    5422:	e007      	b.n	5434 <main+0x7dc>
                        menu_increment_item(selected_menu);
    5424:	4b20      	ldr	r3, [pc, #128]	; (54a8 <main+0x850>)
    5426:	6818      	ldr	r0, [r3, #0]
    5428:	4b26      	ldr	r3, [pc, #152]	; (54c4 <main+0x86c>)
    542a:	4798      	blx	r3
                for (uint8_t i = get_encoder_speed(); i > 0; i--)
    542c:	3c01      	subs	r4, #1
    542e:	b2e4      	uxtb	r4, r4
    5430:	2c00      	cmp	r4, #0
    5432:	d04c      	beq.n	54ce <main+0x876>
                    if (state == SCROLL) {
    5434:	782b      	ldrb	r3, [r5, #0]
    5436:	2b00      	cmp	r3, #0
    5438:	d1f4      	bne.n	5424 <main+0x7cc>
                        increment_menu_position(selected_menu);
    543a:	4653      	mov	r3, sl
    543c:	6818      	ldr	r0, [r3, #0]
    543e:	47c8      	blx	r9
    5440:	e7f4      	b.n	542c <main+0x7d4>
    5442:	46c0      	nop			; (mov r8, r8)
    5444:	200011cc 	.word	0x200011cc
    5448:	000087f4 	.word	0x000087f4
    544c:	00008910 	.word	0x00008910
    5450:	00003a39 	.word	0x00003a39
    5454:	00003695 	.word	0x00003695
    5458:	00008920 	.word	0x00008920
    545c:	00007e95 	.word	0x00007e95
    5460:	00008918 	.word	0x00008918
    5464:	bf800000 	.word	0xbf800000
    5468:	20001f5c 	.word	0x20001f5c
    546c:	0000892c 	.word	0x0000892c
    5470:	20000cf8 	.word	0x20000cf8
    5474:	00008938 	.word	0x00008938
    5478:	437f0000 	.word	0x437f0000
    547c:	40a00000 	.word	0x40a00000
    5480:	00008940 	.word	0x00008940
    5484:	00008944 	.word	0x00008944
    5488:	459c4000 	.word	0x459c4000
    548c:	0000894c 	.word	0x0000894c
    5490:	00008950 	.word	0x00008950
    5494:	00008958 	.word	0x00008958
    5498:	00008960 	.word	0x00008960
    549c:	00008968 	.word	0x00008968
    54a0:	00008970 	.word	0x00008970
    54a4:	20000018 	.word	0x20000018
    54a8:	20000020 	.word	0x20000020
    54ac:	000036e1 	.word	0x000036e1
    54b0:	00004bf5 	.word	0x00004bf5
    54b4:	00003ba5 	.word	0x00003ba5
    54b8:	00003715 	.word	0x00003715
    54bc:	00004095 	.word	0x00004095
    54c0:	200011c8 	.word	0x200011c8
    54c4:	00003aa5 	.word	0x00003aa5
                key_pressed = 0;
    54c8:	2200      	movs	r2, #0
    54ca:	4b3b      	ldr	r3, [pc, #236]	; (55b8 <main+0x960>)
    54cc:	701a      	strb	r2, [r3, #0]
        if (millis() - read_button_timer > 2) {
    54ce:	4b3b      	ldr	r3, [pc, #236]	; (55bc <main+0x964>)
    54d0:	4798      	blx	r3
    54d2:	9b07      	ldr	r3, [sp, #28]
    54d4:	1ac0      	subs	r0, r0, r3
    54d6:	2802      	cmp	r0, #2
    54d8:	d860      	bhi.n	559c <main+0x944>
	return (port_base->IN.reg & pin_mask);
    54da:	2382      	movs	r3, #130	; 0x82
    54dc:	05db      	lsls	r3, r3, #23
    54de:	6a1b      	ldr	r3, [r3, #32]
        if (port_pin_get_input_level(PIN_SW1) == 0)
    54e0:	04db      	lsls	r3, r3, #19
    54e2:	d564      	bpl.n	55ae <main+0x956>
        if (millis() - send_data_timer > 70) {
    54e4:	4b35      	ldr	r3, [pc, #212]	; (55bc <main+0x964>)
    54e6:	4798      	blx	r3
    54e8:	9b06      	ldr	r3, [sp, #24]
    54ea:	1ac0      	subs	r0, r0, r3
    54ec:	2846      	cmp	r0, #70	; 0x46
    54ee:	d92b      	bls.n	5548 <main+0x8f0>
            dmx_values[p_to_channels[0]->ch] = adsr_get_value(&adsr_channel0);
    54f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    54f2:	681c      	ldr	r4, [r3, #0]
    54f4:	4832      	ldr	r0, [pc, #200]	; (55c0 <main+0x968>)
    54f6:	4b33      	ldr	r3, [pc, #204]	; (55c4 <main+0x96c>)
    54f8:	4798      	blx	r3
    54fa:	4d33      	ldr	r5, [pc, #204]	; (55c8 <main+0x970>)
    54fc:	5528      	strb	r0, [r5, r4]
            send_data_timer = millis();
    54fe:	4b2f      	ldr	r3, [pc, #188]	; (55bc <main+0x964>)
    5500:	4798      	blx	r3
    5502:	9006      	str	r0, [sp, #24]
            device_mode = select_device_mode(device_mode_num);
    5504:	4c31      	ldr	r4, [pc, #196]	; (55cc <main+0x974>)
    5506:	2301      	movs	r3, #1
    5508:	7023      	strb	r3, [r4, #0]
                DMX_SendMessage(dmx_values, sizeof(dmx_values));
    550a:	2180      	movs	r1, #128	; 0x80
    550c:	0049      	lsls	r1, r1, #1
    550e:	0028      	movs	r0, r5
    5510:	4b2f      	ldr	r3, [pc, #188]	; (55d0 <main+0x978>)
    5512:	4798      	blx	r3
            if (device_mode == TRIGGER || device_mode == BOTH) {
    5514:	7823      	ldrb	r3, [r4, #0]
    5516:	2202      	movs	r2, #2
    5518:	4393      	bics	r3, r2
    551a:	d115      	bne.n	5548 <main+0x8f0>
                BREAKPOINT;
    551c:	46c0      	nop			; (mov r8, r8)
                uint8_t usb_values[] = {adsr_get_value(&adsr_channel0), adsr_get_value(&adsr_channel1), adsr_get_value(&adsr_channel2), adsr_get_value(&adsr_channel3), adsr_get_value(&adsr_channel4)};
    551e:	4828      	ldr	r0, [pc, #160]	; (55c0 <main+0x968>)
    5520:	4d28      	ldr	r5, [pc, #160]	; (55c4 <main+0x96c>)
    5522:	47a8      	blx	r5
    5524:	ac0a      	add	r4, sp, #40	; 0x28
    5526:	7020      	strb	r0, [r4, #0]
    5528:	482a      	ldr	r0, [pc, #168]	; (55d4 <main+0x97c>)
    552a:	47a8      	blx	r5
    552c:	7060      	strb	r0, [r4, #1]
    552e:	482a      	ldr	r0, [pc, #168]	; (55d8 <main+0x980>)
    5530:	47a8      	blx	r5
    5532:	70a0      	strb	r0, [r4, #2]
    5534:	4829      	ldr	r0, [pc, #164]	; (55dc <main+0x984>)
    5536:	47a8      	blx	r5
    5538:	70e0      	strb	r0, [r4, #3]
    553a:	4829      	ldr	r0, [pc, #164]	; (55e0 <main+0x988>)
    553c:	47a8      	blx	r5
    553e:	7120      	strb	r0, [r4, #4]
                USB_SendMessage(usb_values, 5);
    5540:	2105      	movs	r1, #5
    5542:	0020      	movs	r0, r4
    5544:	4b27      	ldr	r3, [pc, #156]	; (55e4 <main+0x98c>)
    5546:	4798      	blx	r3
    menu_add_item(&static_channels_menu, tmp_item);
    5548:	0033      	movs	r3, r6
        if (device_settings.contrast != prev_contrast) {
    554a:	4642      	mov	r2, r8
    554c:	7816      	ldrb	r6, [r2, #0]
    554e:	42b3      	cmp	r3, r6
    5550:	d004      	beq.n	555c <main+0x904>
            dac_chan_write(&dac_instance, DAC_CHANNEL_0, (device_settings.contrast << 5));
    5552:	0172      	lsls	r2, r6, #5
    5554:	2100      	movs	r1, #0
    5556:	4824      	ldr	r0, [pc, #144]	; (55e8 <main+0x990>)
    5558:	4b24      	ldr	r3, [pc, #144]	; (55ec <main+0x994>)
    555a:	4798      	blx	r3
        if (device_settings.brightness != prev_brightness) {
    555c:	4b24      	ldr	r3, [pc, #144]	; (55f0 <main+0x998>)
    555e:	7858      	ldrb	r0, [r3, #1]
    5560:	4287      	cmp	r7, r0
    5562:	d100      	bne.n	5566 <main+0x90e>
    5564:	e743      	b.n	53ee <main+0x796>
            set_brightness(device_settings.brightness);
    5566:	4b23      	ldr	r3, [pc, #140]	; (55f4 <main+0x99c>)
    5568:	4798      	blx	r3
            prev_brightness = device_settings.brightness;
    556a:	4b21      	ldr	r3, [pc, #132]	; (55f0 <main+0x998>)
    556c:	785f      	ldrb	r7, [r3, #1]
        if (key_pressed) {
    556e:	4b12      	ldr	r3, [pc, #72]	; (55b8 <main+0x960>)
    5570:	781b      	ldrb	r3, [r3, #0]
    5572:	2b00      	cmp	r3, #0
    5574:	d000      	beq.n	5578 <main+0x920>
    5576:	e73c      	b.n	53f2 <main+0x79a>
        key_pressed = 1;
    5578:	2201      	movs	r2, #1
    557a:	4b0f      	ldr	r3, [pc, #60]	; (55b8 <main+0x960>)
    557c:	701a      	strb	r2, [r3, #0]
        switch (get_encoder_status()) {
    557e:	4b1e      	ldr	r3, [pc, #120]	; (55f8 <main+0x9a0>)
    5580:	4798      	blx	r3
    5582:	2801      	cmp	r0, #1
    5584:	d100      	bne.n	5588 <main+0x930>
    5586:	e747      	b.n	5418 <main+0x7c0>
    5588:	2802      	cmp	r0, #2
    558a:	d19d      	bne.n	54c8 <main+0x870>
                for (uint8_t i = get_encoder_speed(); i > 0; i--)
    558c:	4b1b      	ldr	r3, [pc, #108]	; (55fc <main+0x9a4>)
    558e:	4798      	blx	r3
    5590:	1e04      	subs	r4, r0, #0
    5592:	d09c      	beq.n	54ce <main+0x876>
                    if (state == SCROLL) {
    5594:	4d1a      	ldr	r5, [pc, #104]	; (5600 <main+0x9a8>)
                        decrement_menu_position(selected_menu);
    5596:	4b1b      	ldr	r3, [pc, #108]	; (5604 <main+0x9ac>)
    5598:	469b      	mov	fp, r3
    559a:	e735      	b.n	5408 <main+0x7b0>
            read_button_timer = millis();
    559c:	4b07      	ldr	r3, [pc, #28]	; (55bc <main+0x964>)
    559e:	4798      	blx	r3
    55a0:	9007      	str	r0, [sp, #28]
            button_handler(button_read(), &state);
    55a2:	4b19      	ldr	r3, [pc, #100]	; (5608 <main+0x9b0>)
    55a4:	4798      	blx	r3
    55a6:	4916      	ldr	r1, [pc, #88]	; (5600 <main+0x9a8>)
    55a8:	4b18      	ldr	r3, [pc, #96]	; (560c <main+0x9b4>)
    55aa:	4798      	blx	r3
    55ac:	e795      	b.n	54da <main+0x882>
            adsr_trigger(&adsr_channel0);
    55ae:	4804      	ldr	r0, [pc, #16]	; (55c0 <main+0x968>)
    55b0:	4b17      	ldr	r3, [pc, #92]	; (5610 <main+0x9b8>)
    55b2:	4798      	blx	r3
    55b4:	e796      	b.n	54e4 <main+0x88c>
    55b6:	46c0      	nop			; (mov r8, r8)
    55b8:	2000001c 	.word	0x2000001c
    55bc:	00003ec5 	.word	0x00003ec5
    55c0:	20002318 	.word	0x20002318
    55c4:	00000625 	.word	0x00000625
    55c8:	20001f5c 	.word	0x20001f5c
    55cc:	20002358 	.word	0x20002358
    55d0:	00001d11 	.word	0x00001d11
    55d4:	20001edc 	.word	0x20001edc
    55d8:	20001f1c 	.word	0x20001f1c
    55dc:	200020c0 	.word	0x200020c0
    55e0:	2000205c 	.word	0x2000205c
    55e4:	00003cf9 	.word	0x00003cf9
    55e8:	20002090 	.word	0x20002090
    55ec:	00001fbd 	.word	0x00001fbd
    55f0:	20000018 	.word	0x20000018
    55f4:	00004141 	.word	0x00004141
    55f8:	00003ed1 	.word	0x00003ed1
    55fc:	00004095 	.word	0x00004095
    5600:	200011c8 	.word	0x200011c8
    5604:	20000020 	.word	0x20000020
    5608:	00000af5 	.word	0x00000af5
    560c:	00004b91 	.word	0x00004b91
    5610:	00000629 	.word	0x00000629

00005614 <__udivsi3>:
    5614:	2200      	movs	r2, #0
    5616:	0843      	lsrs	r3, r0, #1
    5618:	428b      	cmp	r3, r1
    561a:	d374      	bcc.n	5706 <__udivsi3+0xf2>
    561c:	0903      	lsrs	r3, r0, #4
    561e:	428b      	cmp	r3, r1
    5620:	d35f      	bcc.n	56e2 <__udivsi3+0xce>
    5622:	0a03      	lsrs	r3, r0, #8
    5624:	428b      	cmp	r3, r1
    5626:	d344      	bcc.n	56b2 <__udivsi3+0x9e>
    5628:	0b03      	lsrs	r3, r0, #12
    562a:	428b      	cmp	r3, r1
    562c:	d328      	bcc.n	5680 <__udivsi3+0x6c>
    562e:	0c03      	lsrs	r3, r0, #16
    5630:	428b      	cmp	r3, r1
    5632:	d30d      	bcc.n	5650 <__udivsi3+0x3c>
    5634:	22ff      	movs	r2, #255	; 0xff
    5636:	0209      	lsls	r1, r1, #8
    5638:	ba12      	rev	r2, r2
    563a:	0c03      	lsrs	r3, r0, #16
    563c:	428b      	cmp	r3, r1
    563e:	d302      	bcc.n	5646 <__udivsi3+0x32>
    5640:	1212      	asrs	r2, r2, #8
    5642:	0209      	lsls	r1, r1, #8
    5644:	d065      	beq.n	5712 <__udivsi3+0xfe>
    5646:	0b03      	lsrs	r3, r0, #12
    5648:	428b      	cmp	r3, r1
    564a:	d319      	bcc.n	5680 <__udivsi3+0x6c>
    564c:	e000      	b.n	5650 <__udivsi3+0x3c>
    564e:	0a09      	lsrs	r1, r1, #8
    5650:	0bc3      	lsrs	r3, r0, #15
    5652:	428b      	cmp	r3, r1
    5654:	d301      	bcc.n	565a <__udivsi3+0x46>
    5656:	03cb      	lsls	r3, r1, #15
    5658:	1ac0      	subs	r0, r0, r3
    565a:	4152      	adcs	r2, r2
    565c:	0b83      	lsrs	r3, r0, #14
    565e:	428b      	cmp	r3, r1
    5660:	d301      	bcc.n	5666 <__udivsi3+0x52>
    5662:	038b      	lsls	r3, r1, #14
    5664:	1ac0      	subs	r0, r0, r3
    5666:	4152      	adcs	r2, r2
    5668:	0b43      	lsrs	r3, r0, #13
    566a:	428b      	cmp	r3, r1
    566c:	d301      	bcc.n	5672 <__udivsi3+0x5e>
    566e:	034b      	lsls	r3, r1, #13
    5670:	1ac0      	subs	r0, r0, r3
    5672:	4152      	adcs	r2, r2
    5674:	0b03      	lsrs	r3, r0, #12
    5676:	428b      	cmp	r3, r1
    5678:	d301      	bcc.n	567e <__udivsi3+0x6a>
    567a:	030b      	lsls	r3, r1, #12
    567c:	1ac0      	subs	r0, r0, r3
    567e:	4152      	adcs	r2, r2
    5680:	0ac3      	lsrs	r3, r0, #11
    5682:	428b      	cmp	r3, r1
    5684:	d301      	bcc.n	568a <__udivsi3+0x76>
    5686:	02cb      	lsls	r3, r1, #11
    5688:	1ac0      	subs	r0, r0, r3
    568a:	4152      	adcs	r2, r2
    568c:	0a83      	lsrs	r3, r0, #10
    568e:	428b      	cmp	r3, r1
    5690:	d301      	bcc.n	5696 <__udivsi3+0x82>
    5692:	028b      	lsls	r3, r1, #10
    5694:	1ac0      	subs	r0, r0, r3
    5696:	4152      	adcs	r2, r2
    5698:	0a43      	lsrs	r3, r0, #9
    569a:	428b      	cmp	r3, r1
    569c:	d301      	bcc.n	56a2 <__udivsi3+0x8e>
    569e:	024b      	lsls	r3, r1, #9
    56a0:	1ac0      	subs	r0, r0, r3
    56a2:	4152      	adcs	r2, r2
    56a4:	0a03      	lsrs	r3, r0, #8
    56a6:	428b      	cmp	r3, r1
    56a8:	d301      	bcc.n	56ae <__udivsi3+0x9a>
    56aa:	020b      	lsls	r3, r1, #8
    56ac:	1ac0      	subs	r0, r0, r3
    56ae:	4152      	adcs	r2, r2
    56b0:	d2cd      	bcs.n	564e <__udivsi3+0x3a>
    56b2:	09c3      	lsrs	r3, r0, #7
    56b4:	428b      	cmp	r3, r1
    56b6:	d301      	bcc.n	56bc <__udivsi3+0xa8>
    56b8:	01cb      	lsls	r3, r1, #7
    56ba:	1ac0      	subs	r0, r0, r3
    56bc:	4152      	adcs	r2, r2
    56be:	0983      	lsrs	r3, r0, #6
    56c0:	428b      	cmp	r3, r1
    56c2:	d301      	bcc.n	56c8 <__udivsi3+0xb4>
    56c4:	018b      	lsls	r3, r1, #6
    56c6:	1ac0      	subs	r0, r0, r3
    56c8:	4152      	adcs	r2, r2
    56ca:	0943      	lsrs	r3, r0, #5
    56cc:	428b      	cmp	r3, r1
    56ce:	d301      	bcc.n	56d4 <__udivsi3+0xc0>
    56d0:	014b      	lsls	r3, r1, #5
    56d2:	1ac0      	subs	r0, r0, r3
    56d4:	4152      	adcs	r2, r2
    56d6:	0903      	lsrs	r3, r0, #4
    56d8:	428b      	cmp	r3, r1
    56da:	d301      	bcc.n	56e0 <__udivsi3+0xcc>
    56dc:	010b      	lsls	r3, r1, #4
    56de:	1ac0      	subs	r0, r0, r3
    56e0:	4152      	adcs	r2, r2
    56e2:	08c3      	lsrs	r3, r0, #3
    56e4:	428b      	cmp	r3, r1
    56e6:	d301      	bcc.n	56ec <__udivsi3+0xd8>
    56e8:	00cb      	lsls	r3, r1, #3
    56ea:	1ac0      	subs	r0, r0, r3
    56ec:	4152      	adcs	r2, r2
    56ee:	0883      	lsrs	r3, r0, #2
    56f0:	428b      	cmp	r3, r1
    56f2:	d301      	bcc.n	56f8 <__udivsi3+0xe4>
    56f4:	008b      	lsls	r3, r1, #2
    56f6:	1ac0      	subs	r0, r0, r3
    56f8:	4152      	adcs	r2, r2
    56fa:	0843      	lsrs	r3, r0, #1
    56fc:	428b      	cmp	r3, r1
    56fe:	d301      	bcc.n	5704 <__udivsi3+0xf0>
    5700:	004b      	lsls	r3, r1, #1
    5702:	1ac0      	subs	r0, r0, r3
    5704:	4152      	adcs	r2, r2
    5706:	1a41      	subs	r1, r0, r1
    5708:	d200      	bcs.n	570c <__udivsi3+0xf8>
    570a:	4601      	mov	r1, r0
    570c:	4152      	adcs	r2, r2
    570e:	4610      	mov	r0, r2
    5710:	4770      	bx	lr
    5712:	e7ff      	b.n	5714 <__udivsi3+0x100>
    5714:	b501      	push	{r0, lr}
    5716:	2000      	movs	r0, #0
    5718:	f000 f806 	bl	5728 <__aeabi_idiv0>
    571c:	bd02      	pop	{r1, pc}
    571e:	46c0      	nop			; (mov r8, r8)

00005720 <__aeabi_uidivmod>:
    5720:	2900      	cmp	r1, #0
    5722:	d0f7      	beq.n	5714 <__udivsi3+0x100>
    5724:	e776      	b.n	5614 <__udivsi3>
    5726:	4770      	bx	lr

00005728 <__aeabi_idiv0>:
    5728:	4770      	bx	lr
    572a:	46c0      	nop			; (mov r8, r8)

0000572c <__aeabi_cfrcmple>:
    572c:	4684      	mov	ip, r0
    572e:	1c08      	adds	r0, r1, #0
    5730:	4661      	mov	r1, ip
    5732:	e7ff      	b.n	5734 <__aeabi_cfcmpeq>

00005734 <__aeabi_cfcmpeq>:
    5734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5736:	f000 f9bb 	bl	5ab0 <__lesf2>
    573a:	2800      	cmp	r0, #0
    573c:	d401      	bmi.n	5742 <__aeabi_cfcmpeq+0xe>
    573e:	2100      	movs	r1, #0
    5740:	42c8      	cmn	r0, r1
    5742:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00005744 <__aeabi_fcmpeq>:
    5744:	b510      	push	{r4, lr}
    5746:	f000 f94d 	bl	59e4 <__eqsf2>
    574a:	4240      	negs	r0, r0
    574c:	3001      	adds	r0, #1
    574e:	bd10      	pop	{r4, pc}

00005750 <__aeabi_fcmplt>:
    5750:	b510      	push	{r4, lr}
    5752:	f000 f9ad 	bl	5ab0 <__lesf2>
    5756:	2800      	cmp	r0, #0
    5758:	db01      	blt.n	575e <__aeabi_fcmplt+0xe>
    575a:	2000      	movs	r0, #0
    575c:	bd10      	pop	{r4, pc}
    575e:	2001      	movs	r0, #1
    5760:	bd10      	pop	{r4, pc}
    5762:	46c0      	nop			; (mov r8, r8)

00005764 <__aeabi_fcmple>:
    5764:	b510      	push	{r4, lr}
    5766:	f000 f9a3 	bl	5ab0 <__lesf2>
    576a:	2800      	cmp	r0, #0
    576c:	dd01      	ble.n	5772 <__aeabi_fcmple+0xe>
    576e:	2000      	movs	r0, #0
    5770:	bd10      	pop	{r4, pc}
    5772:	2001      	movs	r0, #1
    5774:	bd10      	pop	{r4, pc}
    5776:	46c0      	nop			; (mov r8, r8)

00005778 <__aeabi_fcmpgt>:
    5778:	b510      	push	{r4, lr}
    577a:	f000 f959 	bl	5a30 <__gesf2>
    577e:	2800      	cmp	r0, #0
    5780:	dc01      	bgt.n	5786 <__aeabi_fcmpgt+0xe>
    5782:	2000      	movs	r0, #0
    5784:	bd10      	pop	{r4, pc}
    5786:	2001      	movs	r0, #1
    5788:	bd10      	pop	{r4, pc}
    578a:	46c0      	nop			; (mov r8, r8)

0000578c <__aeabi_fcmpge>:
    578c:	b510      	push	{r4, lr}
    578e:	f000 f94f 	bl	5a30 <__gesf2>
    5792:	2800      	cmp	r0, #0
    5794:	da01      	bge.n	579a <__aeabi_fcmpge+0xe>
    5796:	2000      	movs	r0, #0
    5798:	bd10      	pop	{r4, pc}
    579a:	2001      	movs	r0, #1
    579c:	bd10      	pop	{r4, pc}
    579e:	46c0      	nop			; (mov r8, r8)

000057a0 <__aeabi_uldivmod>:
    57a0:	2b00      	cmp	r3, #0
    57a2:	d111      	bne.n	57c8 <__aeabi_uldivmod+0x28>
    57a4:	2a00      	cmp	r2, #0
    57a6:	d10f      	bne.n	57c8 <__aeabi_uldivmod+0x28>
    57a8:	2900      	cmp	r1, #0
    57aa:	d100      	bne.n	57ae <__aeabi_uldivmod+0xe>
    57ac:	2800      	cmp	r0, #0
    57ae:	d002      	beq.n	57b6 <__aeabi_uldivmod+0x16>
    57b0:	2100      	movs	r1, #0
    57b2:	43c9      	mvns	r1, r1
    57b4:	1c08      	adds	r0, r1, #0
    57b6:	b407      	push	{r0, r1, r2}
    57b8:	4802      	ldr	r0, [pc, #8]	; (57c4 <__aeabi_uldivmod+0x24>)
    57ba:	a102      	add	r1, pc, #8	; (adr r1, 57c4 <__aeabi_uldivmod+0x24>)
    57bc:	1840      	adds	r0, r0, r1
    57be:	9002      	str	r0, [sp, #8]
    57c0:	bd03      	pop	{r0, r1, pc}
    57c2:	46c0      	nop			; (mov r8, r8)
    57c4:	ffffff65 	.word	0xffffff65
    57c8:	b403      	push	{r0, r1}
    57ca:	4668      	mov	r0, sp
    57cc:	b501      	push	{r0, lr}
    57ce:	9802      	ldr	r0, [sp, #8]
    57d0:	f000 f848 	bl	5864 <__udivmoddi4>
    57d4:	9b01      	ldr	r3, [sp, #4]
    57d6:	469e      	mov	lr, r3
    57d8:	b002      	add	sp, #8
    57da:	bc0c      	pop	{r2, r3}
    57dc:	4770      	bx	lr
    57de:	46c0      	nop			; (mov r8, r8)

000057e0 <__aeabi_lmul>:
    57e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    57e2:	46ce      	mov	lr, r9
    57e4:	4647      	mov	r7, r8
    57e6:	0415      	lsls	r5, r2, #16
    57e8:	0c2d      	lsrs	r5, r5, #16
    57ea:	002e      	movs	r6, r5
    57ec:	b580      	push	{r7, lr}
    57ee:	0407      	lsls	r7, r0, #16
    57f0:	0c14      	lsrs	r4, r2, #16
    57f2:	0c3f      	lsrs	r7, r7, #16
    57f4:	4699      	mov	r9, r3
    57f6:	0c03      	lsrs	r3, r0, #16
    57f8:	437e      	muls	r6, r7
    57fa:	435d      	muls	r5, r3
    57fc:	4367      	muls	r7, r4
    57fe:	4363      	muls	r3, r4
    5800:	197f      	adds	r7, r7, r5
    5802:	0c34      	lsrs	r4, r6, #16
    5804:	19e4      	adds	r4, r4, r7
    5806:	469c      	mov	ip, r3
    5808:	42a5      	cmp	r5, r4
    580a:	d903      	bls.n	5814 <__aeabi_lmul+0x34>
    580c:	2380      	movs	r3, #128	; 0x80
    580e:	025b      	lsls	r3, r3, #9
    5810:	4698      	mov	r8, r3
    5812:	44c4      	add	ip, r8
    5814:	464b      	mov	r3, r9
    5816:	4351      	muls	r1, r2
    5818:	4343      	muls	r3, r0
    581a:	0436      	lsls	r6, r6, #16
    581c:	0c36      	lsrs	r6, r6, #16
    581e:	0c25      	lsrs	r5, r4, #16
    5820:	0424      	lsls	r4, r4, #16
    5822:	4465      	add	r5, ip
    5824:	19a4      	adds	r4, r4, r6
    5826:	1859      	adds	r1, r3, r1
    5828:	1949      	adds	r1, r1, r5
    582a:	0020      	movs	r0, r4
    582c:	bc0c      	pop	{r2, r3}
    582e:	4690      	mov	r8, r2
    5830:	4699      	mov	r9, r3
    5832:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005834 <__aeabi_f2uiz>:
    5834:	219e      	movs	r1, #158	; 0x9e
    5836:	b510      	push	{r4, lr}
    5838:	05c9      	lsls	r1, r1, #23
    583a:	1c04      	adds	r4, r0, #0
    583c:	f7ff ffa6 	bl	578c <__aeabi_fcmpge>
    5840:	2800      	cmp	r0, #0
    5842:	d103      	bne.n	584c <__aeabi_f2uiz+0x18>
    5844:	1c20      	adds	r0, r4, #0
    5846:	f000 fc31 	bl	60ac <__aeabi_f2iz>
    584a:	bd10      	pop	{r4, pc}
    584c:	219e      	movs	r1, #158	; 0x9e
    584e:	1c20      	adds	r0, r4, #0
    5850:	05c9      	lsls	r1, r1, #23
    5852:	f000 fa8f 	bl	5d74 <__aeabi_fsub>
    5856:	f000 fc29 	bl	60ac <__aeabi_f2iz>
    585a:	2380      	movs	r3, #128	; 0x80
    585c:	061b      	lsls	r3, r3, #24
    585e:	469c      	mov	ip, r3
    5860:	4460      	add	r0, ip
    5862:	e7f2      	b.n	584a <__aeabi_f2uiz+0x16>

00005864 <__udivmoddi4>:
    5864:	b5f0      	push	{r4, r5, r6, r7, lr}
    5866:	4657      	mov	r7, sl
    5868:	464e      	mov	r6, r9
    586a:	4645      	mov	r5, r8
    586c:	46de      	mov	lr, fp
    586e:	b5e0      	push	{r5, r6, r7, lr}
    5870:	0004      	movs	r4, r0
    5872:	b083      	sub	sp, #12
    5874:	000d      	movs	r5, r1
    5876:	4692      	mov	sl, r2
    5878:	4699      	mov	r9, r3
    587a:	428b      	cmp	r3, r1
    587c:	d82f      	bhi.n	58de <__udivmoddi4+0x7a>
    587e:	d02c      	beq.n	58da <__udivmoddi4+0x76>
    5880:	4649      	mov	r1, r9
    5882:	4650      	mov	r0, sl
    5884:	f002 fa08 	bl	7c98 <__clzdi2>
    5888:	0029      	movs	r1, r5
    588a:	0006      	movs	r6, r0
    588c:	0020      	movs	r0, r4
    588e:	f002 fa03 	bl	7c98 <__clzdi2>
    5892:	1a33      	subs	r3, r6, r0
    5894:	4698      	mov	r8, r3
    5896:	3b20      	subs	r3, #32
    5898:	469b      	mov	fp, r3
    589a:	d500      	bpl.n	589e <__udivmoddi4+0x3a>
    589c:	e074      	b.n	5988 <__udivmoddi4+0x124>
    589e:	4653      	mov	r3, sl
    58a0:	465a      	mov	r2, fp
    58a2:	4093      	lsls	r3, r2
    58a4:	001f      	movs	r7, r3
    58a6:	4653      	mov	r3, sl
    58a8:	4642      	mov	r2, r8
    58aa:	4093      	lsls	r3, r2
    58ac:	001e      	movs	r6, r3
    58ae:	42af      	cmp	r7, r5
    58b0:	d829      	bhi.n	5906 <__udivmoddi4+0xa2>
    58b2:	d026      	beq.n	5902 <__udivmoddi4+0x9e>
    58b4:	465b      	mov	r3, fp
    58b6:	1ba4      	subs	r4, r4, r6
    58b8:	41bd      	sbcs	r5, r7
    58ba:	2b00      	cmp	r3, #0
    58bc:	da00      	bge.n	58c0 <__udivmoddi4+0x5c>
    58be:	e079      	b.n	59b4 <__udivmoddi4+0x150>
    58c0:	2200      	movs	r2, #0
    58c2:	2300      	movs	r3, #0
    58c4:	9200      	str	r2, [sp, #0]
    58c6:	9301      	str	r3, [sp, #4]
    58c8:	2301      	movs	r3, #1
    58ca:	465a      	mov	r2, fp
    58cc:	4093      	lsls	r3, r2
    58ce:	9301      	str	r3, [sp, #4]
    58d0:	2301      	movs	r3, #1
    58d2:	4642      	mov	r2, r8
    58d4:	4093      	lsls	r3, r2
    58d6:	9300      	str	r3, [sp, #0]
    58d8:	e019      	b.n	590e <__udivmoddi4+0xaa>
    58da:	4282      	cmp	r2, r0
    58dc:	d9d0      	bls.n	5880 <__udivmoddi4+0x1c>
    58de:	2200      	movs	r2, #0
    58e0:	2300      	movs	r3, #0
    58e2:	9200      	str	r2, [sp, #0]
    58e4:	9301      	str	r3, [sp, #4]
    58e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    58e8:	2b00      	cmp	r3, #0
    58ea:	d001      	beq.n	58f0 <__udivmoddi4+0x8c>
    58ec:	601c      	str	r4, [r3, #0]
    58ee:	605d      	str	r5, [r3, #4]
    58f0:	9800      	ldr	r0, [sp, #0]
    58f2:	9901      	ldr	r1, [sp, #4]
    58f4:	b003      	add	sp, #12
    58f6:	bc3c      	pop	{r2, r3, r4, r5}
    58f8:	4690      	mov	r8, r2
    58fa:	4699      	mov	r9, r3
    58fc:	46a2      	mov	sl, r4
    58fe:	46ab      	mov	fp, r5
    5900:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5902:	42a3      	cmp	r3, r4
    5904:	d9d6      	bls.n	58b4 <__udivmoddi4+0x50>
    5906:	2200      	movs	r2, #0
    5908:	2300      	movs	r3, #0
    590a:	9200      	str	r2, [sp, #0]
    590c:	9301      	str	r3, [sp, #4]
    590e:	4643      	mov	r3, r8
    5910:	2b00      	cmp	r3, #0
    5912:	d0e8      	beq.n	58e6 <__udivmoddi4+0x82>
    5914:	07fb      	lsls	r3, r7, #31
    5916:	0872      	lsrs	r2, r6, #1
    5918:	431a      	orrs	r2, r3
    591a:	4646      	mov	r6, r8
    591c:	087b      	lsrs	r3, r7, #1
    591e:	e00e      	b.n	593e <__udivmoddi4+0xda>
    5920:	42ab      	cmp	r3, r5
    5922:	d101      	bne.n	5928 <__udivmoddi4+0xc4>
    5924:	42a2      	cmp	r2, r4
    5926:	d80c      	bhi.n	5942 <__udivmoddi4+0xde>
    5928:	1aa4      	subs	r4, r4, r2
    592a:	419d      	sbcs	r5, r3
    592c:	2001      	movs	r0, #1
    592e:	1924      	adds	r4, r4, r4
    5930:	416d      	adcs	r5, r5
    5932:	2100      	movs	r1, #0
    5934:	3e01      	subs	r6, #1
    5936:	1824      	adds	r4, r4, r0
    5938:	414d      	adcs	r5, r1
    593a:	2e00      	cmp	r6, #0
    593c:	d006      	beq.n	594c <__udivmoddi4+0xe8>
    593e:	42ab      	cmp	r3, r5
    5940:	d9ee      	bls.n	5920 <__udivmoddi4+0xbc>
    5942:	3e01      	subs	r6, #1
    5944:	1924      	adds	r4, r4, r4
    5946:	416d      	adcs	r5, r5
    5948:	2e00      	cmp	r6, #0
    594a:	d1f8      	bne.n	593e <__udivmoddi4+0xda>
    594c:	465b      	mov	r3, fp
    594e:	9800      	ldr	r0, [sp, #0]
    5950:	9901      	ldr	r1, [sp, #4]
    5952:	1900      	adds	r0, r0, r4
    5954:	4169      	adcs	r1, r5
    5956:	2b00      	cmp	r3, #0
    5958:	db22      	blt.n	59a0 <__udivmoddi4+0x13c>
    595a:	002b      	movs	r3, r5
    595c:	465a      	mov	r2, fp
    595e:	40d3      	lsrs	r3, r2
    5960:	002a      	movs	r2, r5
    5962:	4644      	mov	r4, r8
    5964:	40e2      	lsrs	r2, r4
    5966:	001c      	movs	r4, r3
    5968:	465b      	mov	r3, fp
    596a:	0015      	movs	r5, r2
    596c:	2b00      	cmp	r3, #0
    596e:	db2c      	blt.n	59ca <__udivmoddi4+0x166>
    5970:	0026      	movs	r6, r4
    5972:	409e      	lsls	r6, r3
    5974:	0033      	movs	r3, r6
    5976:	0026      	movs	r6, r4
    5978:	4647      	mov	r7, r8
    597a:	40be      	lsls	r6, r7
    597c:	0032      	movs	r2, r6
    597e:	1a80      	subs	r0, r0, r2
    5980:	4199      	sbcs	r1, r3
    5982:	9000      	str	r0, [sp, #0]
    5984:	9101      	str	r1, [sp, #4]
    5986:	e7ae      	b.n	58e6 <__udivmoddi4+0x82>
    5988:	4642      	mov	r2, r8
    598a:	2320      	movs	r3, #32
    598c:	1a9b      	subs	r3, r3, r2
    598e:	4652      	mov	r2, sl
    5990:	40da      	lsrs	r2, r3
    5992:	4641      	mov	r1, r8
    5994:	0013      	movs	r3, r2
    5996:	464a      	mov	r2, r9
    5998:	408a      	lsls	r2, r1
    599a:	0017      	movs	r7, r2
    599c:	431f      	orrs	r7, r3
    599e:	e782      	b.n	58a6 <__udivmoddi4+0x42>
    59a0:	4642      	mov	r2, r8
    59a2:	2320      	movs	r3, #32
    59a4:	1a9b      	subs	r3, r3, r2
    59a6:	002a      	movs	r2, r5
    59a8:	4646      	mov	r6, r8
    59aa:	409a      	lsls	r2, r3
    59ac:	0023      	movs	r3, r4
    59ae:	40f3      	lsrs	r3, r6
    59b0:	4313      	orrs	r3, r2
    59b2:	e7d5      	b.n	5960 <__udivmoddi4+0xfc>
    59b4:	4642      	mov	r2, r8
    59b6:	2320      	movs	r3, #32
    59b8:	2100      	movs	r1, #0
    59ba:	1a9b      	subs	r3, r3, r2
    59bc:	2200      	movs	r2, #0
    59be:	9100      	str	r1, [sp, #0]
    59c0:	9201      	str	r2, [sp, #4]
    59c2:	2201      	movs	r2, #1
    59c4:	40da      	lsrs	r2, r3
    59c6:	9201      	str	r2, [sp, #4]
    59c8:	e782      	b.n	58d0 <__udivmoddi4+0x6c>
    59ca:	4642      	mov	r2, r8
    59cc:	2320      	movs	r3, #32
    59ce:	0026      	movs	r6, r4
    59d0:	1a9b      	subs	r3, r3, r2
    59d2:	40de      	lsrs	r6, r3
    59d4:	002f      	movs	r7, r5
    59d6:	46b4      	mov	ip, r6
    59d8:	4097      	lsls	r7, r2
    59da:	4666      	mov	r6, ip
    59dc:	003b      	movs	r3, r7
    59de:	4333      	orrs	r3, r6
    59e0:	e7c9      	b.n	5976 <__udivmoddi4+0x112>
    59e2:	46c0      	nop			; (mov r8, r8)

000059e4 <__eqsf2>:
    59e4:	b570      	push	{r4, r5, r6, lr}
    59e6:	0042      	lsls	r2, r0, #1
    59e8:	0245      	lsls	r5, r0, #9
    59ea:	024e      	lsls	r6, r1, #9
    59ec:	004c      	lsls	r4, r1, #1
    59ee:	0fc3      	lsrs	r3, r0, #31
    59f0:	0a6d      	lsrs	r5, r5, #9
    59f2:	0e12      	lsrs	r2, r2, #24
    59f4:	0a76      	lsrs	r6, r6, #9
    59f6:	0e24      	lsrs	r4, r4, #24
    59f8:	0fc9      	lsrs	r1, r1, #31
    59fa:	2001      	movs	r0, #1
    59fc:	2aff      	cmp	r2, #255	; 0xff
    59fe:	d006      	beq.n	5a0e <__eqsf2+0x2a>
    5a00:	2cff      	cmp	r4, #255	; 0xff
    5a02:	d003      	beq.n	5a0c <__eqsf2+0x28>
    5a04:	42a2      	cmp	r2, r4
    5a06:	d101      	bne.n	5a0c <__eqsf2+0x28>
    5a08:	42b5      	cmp	r5, r6
    5a0a:	d006      	beq.n	5a1a <__eqsf2+0x36>
    5a0c:	bd70      	pop	{r4, r5, r6, pc}
    5a0e:	2d00      	cmp	r5, #0
    5a10:	d1fc      	bne.n	5a0c <__eqsf2+0x28>
    5a12:	2cff      	cmp	r4, #255	; 0xff
    5a14:	d1fa      	bne.n	5a0c <__eqsf2+0x28>
    5a16:	2e00      	cmp	r6, #0
    5a18:	d1f8      	bne.n	5a0c <__eqsf2+0x28>
    5a1a:	428b      	cmp	r3, r1
    5a1c:	d006      	beq.n	5a2c <__eqsf2+0x48>
    5a1e:	2001      	movs	r0, #1
    5a20:	2a00      	cmp	r2, #0
    5a22:	d1f3      	bne.n	5a0c <__eqsf2+0x28>
    5a24:	0028      	movs	r0, r5
    5a26:	1e45      	subs	r5, r0, #1
    5a28:	41a8      	sbcs	r0, r5
    5a2a:	e7ef      	b.n	5a0c <__eqsf2+0x28>
    5a2c:	2000      	movs	r0, #0
    5a2e:	e7ed      	b.n	5a0c <__eqsf2+0x28>

00005a30 <__gesf2>:
    5a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a32:	0042      	lsls	r2, r0, #1
    5a34:	0245      	lsls	r5, r0, #9
    5a36:	024c      	lsls	r4, r1, #9
    5a38:	0fc3      	lsrs	r3, r0, #31
    5a3a:	0048      	lsls	r0, r1, #1
    5a3c:	0a6d      	lsrs	r5, r5, #9
    5a3e:	0e12      	lsrs	r2, r2, #24
    5a40:	0a64      	lsrs	r4, r4, #9
    5a42:	0e00      	lsrs	r0, r0, #24
    5a44:	0fc9      	lsrs	r1, r1, #31
    5a46:	2aff      	cmp	r2, #255	; 0xff
    5a48:	d01e      	beq.n	5a88 <__gesf2+0x58>
    5a4a:	28ff      	cmp	r0, #255	; 0xff
    5a4c:	d021      	beq.n	5a92 <__gesf2+0x62>
    5a4e:	2a00      	cmp	r2, #0
    5a50:	d10a      	bne.n	5a68 <__gesf2+0x38>
    5a52:	426e      	negs	r6, r5
    5a54:	416e      	adcs	r6, r5
    5a56:	b2f6      	uxtb	r6, r6
    5a58:	2800      	cmp	r0, #0
    5a5a:	d10f      	bne.n	5a7c <__gesf2+0x4c>
    5a5c:	2c00      	cmp	r4, #0
    5a5e:	d10d      	bne.n	5a7c <__gesf2+0x4c>
    5a60:	2000      	movs	r0, #0
    5a62:	2d00      	cmp	r5, #0
    5a64:	d009      	beq.n	5a7a <__gesf2+0x4a>
    5a66:	e005      	b.n	5a74 <__gesf2+0x44>
    5a68:	2800      	cmp	r0, #0
    5a6a:	d101      	bne.n	5a70 <__gesf2+0x40>
    5a6c:	2c00      	cmp	r4, #0
    5a6e:	d001      	beq.n	5a74 <__gesf2+0x44>
    5a70:	428b      	cmp	r3, r1
    5a72:	d011      	beq.n	5a98 <__gesf2+0x68>
    5a74:	2101      	movs	r1, #1
    5a76:	4258      	negs	r0, r3
    5a78:	4308      	orrs	r0, r1
    5a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a7c:	2e00      	cmp	r6, #0
    5a7e:	d0f7      	beq.n	5a70 <__gesf2+0x40>
    5a80:	2001      	movs	r0, #1
    5a82:	3901      	subs	r1, #1
    5a84:	4308      	orrs	r0, r1
    5a86:	e7f8      	b.n	5a7a <__gesf2+0x4a>
    5a88:	2d00      	cmp	r5, #0
    5a8a:	d0de      	beq.n	5a4a <__gesf2+0x1a>
    5a8c:	2002      	movs	r0, #2
    5a8e:	4240      	negs	r0, r0
    5a90:	e7f3      	b.n	5a7a <__gesf2+0x4a>
    5a92:	2c00      	cmp	r4, #0
    5a94:	d0db      	beq.n	5a4e <__gesf2+0x1e>
    5a96:	e7f9      	b.n	5a8c <__gesf2+0x5c>
    5a98:	4282      	cmp	r2, r0
    5a9a:	dceb      	bgt.n	5a74 <__gesf2+0x44>
    5a9c:	db04      	blt.n	5aa8 <__gesf2+0x78>
    5a9e:	42a5      	cmp	r5, r4
    5aa0:	d8e8      	bhi.n	5a74 <__gesf2+0x44>
    5aa2:	2000      	movs	r0, #0
    5aa4:	42a5      	cmp	r5, r4
    5aa6:	d2e8      	bcs.n	5a7a <__gesf2+0x4a>
    5aa8:	2101      	movs	r1, #1
    5aaa:	1e58      	subs	r0, r3, #1
    5aac:	4308      	orrs	r0, r1
    5aae:	e7e4      	b.n	5a7a <__gesf2+0x4a>

00005ab0 <__lesf2>:
    5ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ab2:	0042      	lsls	r2, r0, #1
    5ab4:	024d      	lsls	r5, r1, #9
    5ab6:	004c      	lsls	r4, r1, #1
    5ab8:	0246      	lsls	r6, r0, #9
    5aba:	0a76      	lsrs	r6, r6, #9
    5abc:	0e12      	lsrs	r2, r2, #24
    5abe:	0fc3      	lsrs	r3, r0, #31
    5ac0:	0a6d      	lsrs	r5, r5, #9
    5ac2:	0e24      	lsrs	r4, r4, #24
    5ac4:	0fc9      	lsrs	r1, r1, #31
    5ac6:	2aff      	cmp	r2, #255	; 0xff
    5ac8:	d016      	beq.n	5af8 <__lesf2+0x48>
    5aca:	2cff      	cmp	r4, #255	; 0xff
    5acc:	d018      	beq.n	5b00 <__lesf2+0x50>
    5ace:	2a00      	cmp	r2, #0
    5ad0:	d10a      	bne.n	5ae8 <__lesf2+0x38>
    5ad2:	4270      	negs	r0, r6
    5ad4:	4170      	adcs	r0, r6
    5ad6:	b2c0      	uxtb	r0, r0
    5ad8:	2c00      	cmp	r4, #0
    5ada:	d015      	beq.n	5b08 <__lesf2+0x58>
    5adc:	2800      	cmp	r0, #0
    5ade:	d005      	beq.n	5aec <__lesf2+0x3c>
    5ae0:	2001      	movs	r0, #1
    5ae2:	3901      	subs	r1, #1
    5ae4:	4308      	orrs	r0, r1
    5ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ae8:	2c00      	cmp	r4, #0
    5aea:	d013      	beq.n	5b14 <__lesf2+0x64>
    5aec:	4299      	cmp	r1, r3
    5aee:	d014      	beq.n	5b1a <__lesf2+0x6a>
    5af0:	2001      	movs	r0, #1
    5af2:	425b      	negs	r3, r3
    5af4:	4318      	orrs	r0, r3
    5af6:	e7f6      	b.n	5ae6 <__lesf2+0x36>
    5af8:	2002      	movs	r0, #2
    5afa:	2e00      	cmp	r6, #0
    5afc:	d1f3      	bne.n	5ae6 <__lesf2+0x36>
    5afe:	e7e4      	b.n	5aca <__lesf2+0x1a>
    5b00:	2002      	movs	r0, #2
    5b02:	2d00      	cmp	r5, #0
    5b04:	d1ef      	bne.n	5ae6 <__lesf2+0x36>
    5b06:	e7e2      	b.n	5ace <__lesf2+0x1e>
    5b08:	2d00      	cmp	r5, #0
    5b0a:	d1e7      	bne.n	5adc <__lesf2+0x2c>
    5b0c:	2000      	movs	r0, #0
    5b0e:	2e00      	cmp	r6, #0
    5b10:	d0e9      	beq.n	5ae6 <__lesf2+0x36>
    5b12:	e7ed      	b.n	5af0 <__lesf2+0x40>
    5b14:	2d00      	cmp	r5, #0
    5b16:	d1e9      	bne.n	5aec <__lesf2+0x3c>
    5b18:	e7ea      	b.n	5af0 <__lesf2+0x40>
    5b1a:	42a2      	cmp	r2, r4
    5b1c:	dc06      	bgt.n	5b2c <__lesf2+0x7c>
    5b1e:	dbdf      	blt.n	5ae0 <__lesf2+0x30>
    5b20:	42ae      	cmp	r6, r5
    5b22:	d803      	bhi.n	5b2c <__lesf2+0x7c>
    5b24:	2000      	movs	r0, #0
    5b26:	42ae      	cmp	r6, r5
    5b28:	d3da      	bcc.n	5ae0 <__lesf2+0x30>
    5b2a:	e7dc      	b.n	5ae6 <__lesf2+0x36>
    5b2c:	2001      	movs	r0, #1
    5b2e:	4249      	negs	r1, r1
    5b30:	4308      	orrs	r0, r1
    5b32:	e7d8      	b.n	5ae6 <__lesf2+0x36>

00005b34 <__aeabi_fmul>:
    5b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b36:	4657      	mov	r7, sl
    5b38:	464e      	mov	r6, r9
    5b3a:	4645      	mov	r5, r8
    5b3c:	46de      	mov	lr, fp
    5b3e:	b5e0      	push	{r5, r6, r7, lr}
    5b40:	0247      	lsls	r7, r0, #9
    5b42:	0046      	lsls	r6, r0, #1
    5b44:	4688      	mov	r8, r1
    5b46:	0a7f      	lsrs	r7, r7, #9
    5b48:	0e36      	lsrs	r6, r6, #24
    5b4a:	0fc4      	lsrs	r4, r0, #31
    5b4c:	2e00      	cmp	r6, #0
    5b4e:	d047      	beq.n	5be0 <__aeabi_fmul+0xac>
    5b50:	2eff      	cmp	r6, #255	; 0xff
    5b52:	d024      	beq.n	5b9e <__aeabi_fmul+0x6a>
    5b54:	00fb      	lsls	r3, r7, #3
    5b56:	2780      	movs	r7, #128	; 0x80
    5b58:	04ff      	lsls	r7, r7, #19
    5b5a:	431f      	orrs	r7, r3
    5b5c:	2300      	movs	r3, #0
    5b5e:	4699      	mov	r9, r3
    5b60:	469a      	mov	sl, r3
    5b62:	3e7f      	subs	r6, #127	; 0x7f
    5b64:	4643      	mov	r3, r8
    5b66:	025d      	lsls	r5, r3, #9
    5b68:	0058      	lsls	r0, r3, #1
    5b6a:	0fdb      	lsrs	r3, r3, #31
    5b6c:	0a6d      	lsrs	r5, r5, #9
    5b6e:	0e00      	lsrs	r0, r0, #24
    5b70:	4698      	mov	r8, r3
    5b72:	d043      	beq.n	5bfc <__aeabi_fmul+0xc8>
    5b74:	28ff      	cmp	r0, #255	; 0xff
    5b76:	d03b      	beq.n	5bf0 <__aeabi_fmul+0xbc>
    5b78:	00eb      	lsls	r3, r5, #3
    5b7a:	2580      	movs	r5, #128	; 0x80
    5b7c:	2200      	movs	r2, #0
    5b7e:	04ed      	lsls	r5, r5, #19
    5b80:	431d      	orrs	r5, r3
    5b82:	387f      	subs	r0, #127	; 0x7f
    5b84:	1836      	adds	r6, r6, r0
    5b86:	1c73      	adds	r3, r6, #1
    5b88:	4641      	mov	r1, r8
    5b8a:	469b      	mov	fp, r3
    5b8c:	464b      	mov	r3, r9
    5b8e:	4061      	eors	r1, r4
    5b90:	4313      	orrs	r3, r2
    5b92:	2b0f      	cmp	r3, #15
    5b94:	d864      	bhi.n	5c60 <__aeabi_fmul+0x12c>
    5b96:	4875      	ldr	r0, [pc, #468]	; (5d6c <__aeabi_fmul+0x238>)
    5b98:	009b      	lsls	r3, r3, #2
    5b9a:	58c3      	ldr	r3, [r0, r3]
    5b9c:	469f      	mov	pc, r3
    5b9e:	2f00      	cmp	r7, #0
    5ba0:	d142      	bne.n	5c28 <__aeabi_fmul+0xf4>
    5ba2:	2308      	movs	r3, #8
    5ba4:	4699      	mov	r9, r3
    5ba6:	3b06      	subs	r3, #6
    5ba8:	26ff      	movs	r6, #255	; 0xff
    5baa:	469a      	mov	sl, r3
    5bac:	e7da      	b.n	5b64 <__aeabi_fmul+0x30>
    5bae:	4641      	mov	r1, r8
    5bb0:	2a02      	cmp	r2, #2
    5bb2:	d028      	beq.n	5c06 <__aeabi_fmul+0xd2>
    5bb4:	2a03      	cmp	r2, #3
    5bb6:	d100      	bne.n	5bba <__aeabi_fmul+0x86>
    5bb8:	e0ce      	b.n	5d58 <__aeabi_fmul+0x224>
    5bba:	2a01      	cmp	r2, #1
    5bbc:	d000      	beq.n	5bc0 <__aeabi_fmul+0x8c>
    5bbe:	e0ac      	b.n	5d1a <__aeabi_fmul+0x1e6>
    5bc0:	4011      	ands	r1, r2
    5bc2:	2000      	movs	r0, #0
    5bc4:	2200      	movs	r2, #0
    5bc6:	b2cc      	uxtb	r4, r1
    5bc8:	0240      	lsls	r0, r0, #9
    5bca:	05d2      	lsls	r2, r2, #23
    5bcc:	0a40      	lsrs	r0, r0, #9
    5bce:	07e4      	lsls	r4, r4, #31
    5bd0:	4310      	orrs	r0, r2
    5bd2:	4320      	orrs	r0, r4
    5bd4:	bc3c      	pop	{r2, r3, r4, r5}
    5bd6:	4690      	mov	r8, r2
    5bd8:	4699      	mov	r9, r3
    5bda:	46a2      	mov	sl, r4
    5bdc:	46ab      	mov	fp, r5
    5bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5be0:	2f00      	cmp	r7, #0
    5be2:	d115      	bne.n	5c10 <__aeabi_fmul+0xdc>
    5be4:	2304      	movs	r3, #4
    5be6:	4699      	mov	r9, r3
    5be8:	3b03      	subs	r3, #3
    5bea:	2600      	movs	r6, #0
    5bec:	469a      	mov	sl, r3
    5bee:	e7b9      	b.n	5b64 <__aeabi_fmul+0x30>
    5bf0:	20ff      	movs	r0, #255	; 0xff
    5bf2:	2202      	movs	r2, #2
    5bf4:	2d00      	cmp	r5, #0
    5bf6:	d0c5      	beq.n	5b84 <__aeabi_fmul+0x50>
    5bf8:	2203      	movs	r2, #3
    5bfa:	e7c3      	b.n	5b84 <__aeabi_fmul+0x50>
    5bfc:	2d00      	cmp	r5, #0
    5bfe:	d119      	bne.n	5c34 <__aeabi_fmul+0x100>
    5c00:	2000      	movs	r0, #0
    5c02:	2201      	movs	r2, #1
    5c04:	e7be      	b.n	5b84 <__aeabi_fmul+0x50>
    5c06:	2401      	movs	r4, #1
    5c08:	22ff      	movs	r2, #255	; 0xff
    5c0a:	400c      	ands	r4, r1
    5c0c:	2000      	movs	r0, #0
    5c0e:	e7db      	b.n	5bc8 <__aeabi_fmul+0x94>
    5c10:	0038      	movs	r0, r7
    5c12:	f002 f823 	bl	7c5c <__clzsi2>
    5c16:	2676      	movs	r6, #118	; 0x76
    5c18:	1f43      	subs	r3, r0, #5
    5c1a:	409f      	lsls	r7, r3
    5c1c:	2300      	movs	r3, #0
    5c1e:	4276      	negs	r6, r6
    5c20:	1a36      	subs	r6, r6, r0
    5c22:	4699      	mov	r9, r3
    5c24:	469a      	mov	sl, r3
    5c26:	e79d      	b.n	5b64 <__aeabi_fmul+0x30>
    5c28:	230c      	movs	r3, #12
    5c2a:	4699      	mov	r9, r3
    5c2c:	3b09      	subs	r3, #9
    5c2e:	26ff      	movs	r6, #255	; 0xff
    5c30:	469a      	mov	sl, r3
    5c32:	e797      	b.n	5b64 <__aeabi_fmul+0x30>
    5c34:	0028      	movs	r0, r5
    5c36:	f002 f811 	bl	7c5c <__clzsi2>
    5c3a:	1f43      	subs	r3, r0, #5
    5c3c:	409d      	lsls	r5, r3
    5c3e:	2376      	movs	r3, #118	; 0x76
    5c40:	425b      	negs	r3, r3
    5c42:	1a18      	subs	r0, r3, r0
    5c44:	2200      	movs	r2, #0
    5c46:	e79d      	b.n	5b84 <__aeabi_fmul+0x50>
    5c48:	2080      	movs	r0, #128	; 0x80
    5c4a:	2400      	movs	r4, #0
    5c4c:	03c0      	lsls	r0, r0, #15
    5c4e:	22ff      	movs	r2, #255	; 0xff
    5c50:	e7ba      	b.n	5bc8 <__aeabi_fmul+0x94>
    5c52:	003d      	movs	r5, r7
    5c54:	4652      	mov	r2, sl
    5c56:	e7ab      	b.n	5bb0 <__aeabi_fmul+0x7c>
    5c58:	003d      	movs	r5, r7
    5c5a:	0021      	movs	r1, r4
    5c5c:	4652      	mov	r2, sl
    5c5e:	e7a7      	b.n	5bb0 <__aeabi_fmul+0x7c>
    5c60:	0c3b      	lsrs	r3, r7, #16
    5c62:	469c      	mov	ip, r3
    5c64:	042a      	lsls	r2, r5, #16
    5c66:	0c12      	lsrs	r2, r2, #16
    5c68:	0c2b      	lsrs	r3, r5, #16
    5c6a:	0014      	movs	r4, r2
    5c6c:	4660      	mov	r0, ip
    5c6e:	4665      	mov	r5, ip
    5c70:	043f      	lsls	r7, r7, #16
    5c72:	0c3f      	lsrs	r7, r7, #16
    5c74:	437c      	muls	r4, r7
    5c76:	4342      	muls	r2, r0
    5c78:	435d      	muls	r5, r3
    5c7a:	437b      	muls	r3, r7
    5c7c:	0c27      	lsrs	r7, r4, #16
    5c7e:	189b      	adds	r3, r3, r2
    5c80:	18ff      	adds	r7, r7, r3
    5c82:	42ba      	cmp	r2, r7
    5c84:	d903      	bls.n	5c8e <__aeabi_fmul+0x15a>
    5c86:	2380      	movs	r3, #128	; 0x80
    5c88:	025b      	lsls	r3, r3, #9
    5c8a:	469c      	mov	ip, r3
    5c8c:	4465      	add	r5, ip
    5c8e:	0424      	lsls	r4, r4, #16
    5c90:	043a      	lsls	r2, r7, #16
    5c92:	0c24      	lsrs	r4, r4, #16
    5c94:	1912      	adds	r2, r2, r4
    5c96:	0193      	lsls	r3, r2, #6
    5c98:	1e5c      	subs	r4, r3, #1
    5c9a:	41a3      	sbcs	r3, r4
    5c9c:	0c3f      	lsrs	r7, r7, #16
    5c9e:	0e92      	lsrs	r2, r2, #26
    5ca0:	197d      	adds	r5, r7, r5
    5ca2:	431a      	orrs	r2, r3
    5ca4:	01ad      	lsls	r5, r5, #6
    5ca6:	4315      	orrs	r5, r2
    5ca8:	012b      	lsls	r3, r5, #4
    5caa:	d504      	bpl.n	5cb6 <__aeabi_fmul+0x182>
    5cac:	2301      	movs	r3, #1
    5cae:	465e      	mov	r6, fp
    5cb0:	086a      	lsrs	r2, r5, #1
    5cb2:	401d      	ands	r5, r3
    5cb4:	4315      	orrs	r5, r2
    5cb6:	0032      	movs	r2, r6
    5cb8:	327f      	adds	r2, #127	; 0x7f
    5cba:	2a00      	cmp	r2, #0
    5cbc:	dd25      	ble.n	5d0a <__aeabi_fmul+0x1d6>
    5cbe:	076b      	lsls	r3, r5, #29
    5cc0:	d004      	beq.n	5ccc <__aeabi_fmul+0x198>
    5cc2:	230f      	movs	r3, #15
    5cc4:	402b      	ands	r3, r5
    5cc6:	2b04      	cmp	r3, #4
    5cc8:	d000      	beq.n	5ccc <__aeabi_fmul+0x198>
    5cca:	3504      	adds	r5, #4
    5ccc:	012b      	lsls	r3, r5, #4
    5cce:	d503      	bpl.n	5cd8 <__aeabi_fmul+0x1a4>
    5cd0:	0032      	movs	r2, r6
    5cd2:	4b27      	ldr	r3, [pc, #156]	; (5d70 <__aeabi_fmul+0x23c>)
    5cd4:	3280      	adds	r2, #128	; 0x80
    5cd6:	401d      	ands	r5, r3
    5cd8:	2afe      	cmp	r2, #254	; 0xfe
    5cda:	dc94      	bgt.n	5c06 <__aeabi_fmul+0xd2>
    5cdc:	2401      	movs	r4, #1
    5cde:	01a8      	lsls	r0, r5, #6
    5ce0:	0a40      	lsrs	r0, r0, #9
    5ce2:	b2d2      	uxtb	r2, r2
    5ce4:	400c      	ands	r4, r1
    5ce6:	e76f      	b.n	5bc8 <__aeabi_fmul+0x94>
    5ce8:	2080      	movs	r0, #128	; 0x80
    5cea:	03c0      	lsls	r0, r0, #15
    5cec:	4207      	tst	r7, r0
    5cee:	d007      	beq.n	5d00 <__aeabi_fmul+0x1cc>
    5cf0:	4205      	tst	r5, r0
    5cf2:	d105      	bne.n	5d00 <__aeabi_fmul+0x1cc>
    5cf4:	4328      	orrs	r0, r5
    5cf6:	0240      	lsls	r0, r0, #9
    5cf8:	0a40      	lsrs	r0, r0, #9
    5cfa:	4644      	mov	r4, r8
    5cfc:	22ff      	movs	r2, #255	; 0xff
    5cfe:	e763      	b.n	5bc8 <__aeabi_fmul+0x94>
    5d00:	4338      	orrs	r0, r7
    5d02:	0240      	lsls	r0, r0, #9
    5d04:	0a40      	lsrs	r0, r0, #9
    5d06:	22ff      	movs	r2, #255	; 0xff
    5d08:	e75e      	b.n	5bc8 <__aeabi_fmul+0x94>
    5d0a:	2401      	movs	r4, #1
    5d0c:	1aa3      	subs	r3, r4, r2
    5d0e:	2b1b      	cmp	r3, #27
    5d10:	dd05      	ble.n	5d1e <__aeabi_fmul+0x1ea>
    5d12:	400c      	ands	r4, r1
    5d14:	2200      	movs	r2, #0
    5d16:	2000      	movs	r0, #0
    5d18:	e756      	b.n	5bc8 <__aeabi_fmul+0x94>
    5d1a:	465e      	mov	r6, fp
    5d1c:	e7cb      	b.n	5cb6 <__aeabi_fmul+0x182>
    5d1e:	002a      	movs	r2, r5
    5d20:	2020      	movs	r0, #32
    5d22:	40da      	lsrs	r2, r3
    5d24:	1ac3      	subs	r3, r0, r3
    5d26:	409d      	lsls	r5, r3
    5d28:	002b      	movs	r3, r5
    5d2a:	1e5d      	subs	r5, r3, #1
    5d2c:	41ab      	sbcs	r3, r5
    5d2e:	4313      	orrs	r3, r2
    5d30:	075a      	lsls	r2, r3, #29
    5d32:	d004      	beq.n	5d3e <__aeabi_fmul+0x20a>
    5d34:	220f      	movs	r2, #15
    5d36:	401a      	ands	r2, r3
    5d38:	2a04      	cmp	r2, #4
    5d3a:	d000      	beq.n	5d3e <__aeabi_fmul+0x20a>
    5d3c:	3304      	adds	r3, #4
    5d3e:	015a      	lsls	r2, r3, #5
    5d40:	d504      	bpl.n	5d4c <__aeabi_fmul+0x218>
    5d42:	2401      	movs	r4, #1
    5d44:	2201      	movs	r2, #1
    5d46:	400c      	ands	r4, r1
    5d48:	2000      	movs	r0, #0
    5d4a:	e73d      	b.n	5bc8 <__aeabi_fmul+0x94>
    5d4c:	2401      	movs	r4, #1
    5d4e:	019b      	lsls	r3, r3, #6
    5d50:	0a58      	lsrs	r0, r3, #9
    5d52:	400c      	ands	r4, r1
    5d54:	2200      	movs	r2, #0
    5d56:	e737      	b.n	5bc8 <__aeabi_fmul+0x94>
    5d58:	2080      	movs	r0, #128	; 0x80
    5d5a:	2401      	movs	r4, #1
    5d5c:	03c0      	lsls	r0, r0, #15
    5d5e:	4328      	orrs	r0, r5
    5d60:	0240      	lsls	r0, r0, #9
    5d62:	0a40      	lsrs	r0, r0, #9
    5d64:	400c      	ands	r4, r1
    5d66:	22ff      	movs	r2, #255	; 0xff
    5d68:	e72e      	b.n	5bc8 <__aeabi_fmul+0x94>
    5d6a:	46c0      	nop			; (mov r8, r8)
    5d6c:	00008978 	.word	0x00008978
    5d70:	f7ffffff 	.word	0xf7ffffff

00005d74 <__aeabi_fsub>:
    5d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d76:	464f      	mov	r7, r9
    5d78:	46d6      	mov	lr, sl
    5d7a:	4646      	mov	r6, r8
    5d7c:	0044      	lsls	r4, r0, #1
    5d7e:	b5c0      	push	{r6, r7, lr}
    5d80:	0fc2      	lsrs	r2, r0, #31
    5d82:	0247      	lsls	r7, r0, #9
    5d84:	0248      	lsls	r0, r1, #9
    5d86:	0a40      	lsrs	r0, r0, #9
    5d88:	4684      	mov	ip, r0
    5d8a:	4666      	mov	r6, ip
    5d8c:	0a7b      	lsrs	r3, r7, #9
    5d8e:	0048      	lsls	r0, r1, #1
    5d90:	0fc9      	lsrs	r1, r1, #31
    5d92:	469a      	mov	sl, r3
    5d94:	0e24      	lsrs	r4, r4, #24
    5d96:	0015      	movs	r5, r2
    5d98:	00db      	lsls	r3, r3, #3
    5d9a:	0e00      	lsrs	r0, r0, #24
    5d9c:	4689      	mov	r9, r1
    5d9e:	00f6      	lsls	r6, r6, #3
    5da0:	28ff      	cmp	r0, #255	; 0xff
    5da2:	d100      	bne.n	5da6 <__aeabi_fsub+0x32>
    5da4:	e08f      	b.n	5ec6 <__aeabi_fsub+0x152>
    5da6:	2101      	movs	r1, #1
    5da8:	464f      	mov	r7, r9
    5daa:	404f      	eors	r7, r1
    5dac:	0039      	movs	r1, r7
    5dae:	4291      	cmp	r1, r2
    5db0:	d066      	beq.n	5e80 <__aeabi_fsub+0x10c>
    5db2:	1a22      	subs	r2, r4, r0
    5db4:	2a00      	cmp	r2, #0
    5db6:	dc00      	bgt.n	5dba <__aeabi_fsub+0x46>
    5db8:	e09d      	b.n	5ef6 <__aeabi_fsub+0x182>
    5dba:	2800      	cmp	r0, #0
    5dbc:	d13d      	bne.n	5e3a <__aeabi_fsub+0xc6>
    5dbe:	2e00      	cmp	r6, #0
    5dc0:	d100      	bne.n	5dc4 <__aeabi_fsub+0x50>
    5dc2:	e08b      	b.n	5edc <__aeabi_fsub+0x168>
    5dc4:	1e51      	subs	r1, r2, #1
    5dc6:	2900      	cmp	r1, #0
    5dc8:	d000      	beq.n	5dcc <__aeabi_fsub+0x58>
    5dca:	e0b5      	b.n	5f38 <__aeabi_fsub+0x1c4>
    5dcc:	2401      	movs	r4, #1
    5dce:	1b9b      	subs	r3, r3, r6
    5dd0:	015a      	lsls	r2, r3, #5
    5dd2:	d544      	bpl.n	5e5e <__aeabi_fsub+0xea>
    5dd4:	019b      	lsls	r3, r3, #6
    5dd6:	099f      	lsrs	r7, r3, #6
    5dd8:	0038      	movs	r0, r7
    5dda:	f001 ff3f 	bl	7c5c <__clzsi2>
    5dde:	3805      	subs	r0, #5
    5de0:	4087      	lsls	r7, r0
    5de2:	4284      	cmp	r4, r0
    5de4:	dd00      	ble.n	5de8 <__aeabi_fsub+0x74>
    5de6:	e096      	b.n	5f16 <__aeabi_fsub+0x1a2>
    5de8:	1b04      	subs	r4, r0, r4
    5dea:	003a      	movs	r2, r7
    5dec:	2020      	movs	r0, #32
    5dee:	3401      	adds	r4, #1
    5df0:	40e2      	lsrs	r2, r4
    5df2:	1b04      	subs	r4, r0, r4
    5df4:	40a7      	lsls	r7, r4
    5df6:	003b      	movs	r3, r7
    5df8:	1e5f      	subs	r7, r3, #1
    5dfa:	41bb      	sbcs	r3, r7
    5dfc:	2400      	movs	r4, #0
    5dfe:	4313      	orrs	r3, r2
    5e00:	075a      	lsls	r2, r3, #29
    5e02:	d004      	beq.n	5e0e <__aeabi_fsub+0x9a>
    5e04:	220f      	movs	r2, #15
    5e06:	401a      	ands	r2, r3
    5e08:	2a04      	cmp	r2, #4
    5e0a:	d000      	beq.n	5e0e <__aeabi_fsub+0x9a>
    5e0c:	3304      	adds	r3, #4
    5e0e:	015a      	lsls	r2, r3, #5
    5e10:	d527      	bpl.n	5e62 <__aeabi_fsub+0xee>
    5e12:	3401      	adds	r4, #1
    5e14:	2cff      	cmp	r4, #255	; 0xff
    5e16:	d100      	bne.n	5e1a <__aeabi_fsub+0xa6>
    5e18:	e079      	b.n	5f0e <__aeabi_fsub+0x19a>
    5e1a:	2201      	movs	r2, #1
    5e1c:	019b      	lsls	r3, r3, #6
    5e1e:	0a5b      	lsrs	r3, r3, #9
    5e20:	b2e4      	uxtb	r4, r4
    5e22:	402a      	ands	r2, r5
    5e24:	025b      	lsls	r3, r3, #9
    5e26:	05e4      	lsls	r4, r4, #23
    5e28:	0a58      	lsrs	r0, r3, #9
    5e2a:	07d2      	lsls	r2, r2, #31
    5e2c:	4320      	orrs	r0, r4
    5e2e:	4310      	orrs	r0, r2
    5e30:	bc1c      	pop	{r2, r3, r4}
    5e32:	4690      	mov	r8, r2
    5e34:	4699      	mov	r9, r3
    5e36:	46a2      	mov	sl, r4
    5e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e3a:	2cff      	cmp	r4, #255	; 0xff
    5e3c:	d0e0      	beq.n	5e00 <__aeabi_fsub+0x8c>
    5e3e:	2180      	movs	r1, #128	; 0x80
    5e40:	04c9      	lsls	r1, r1, #19
    5e42:	430e      	orrs	r6, r1
    5e44:	2a1b      	cmp	r2, #27
    5e46:	dc7b      	bgt.n	5f40 <__aeabi_fsub+0x1cc>
    5e48:	0031      	movs	r1, r6
    5e4a:	2020      	movs	r0, #32
    5e4c:	40d1      	lsrs	r1, r2
    5e4e:	1a82      	subs	r2, r0, r2
    5e50:	4096      	lsls	r6, r2
    5e52:	1e72      	subs	r2, r6, #1
    5e54:	4196      	sbcs	r6, r2
    5e56:	430e      	orrs	r6, r1
    5e58:	1b9b      	subs	r3, r3, r6
    5e5a:	015a      	lsls	r2, r3, #5
    5e5c:	d4ba      	bmi.n	5dd4 <__aeabi_fsub+0x60>
    5e5e:	075a      	lsls	r2, r3, #29
    5e60:	d1d0      	bne.n	5e04 <__aeabi_fsub+0x90>
    5e62:	2201      	movs	r2, #1
    5e64:	08df      	lsrs	r7, r3, #3
    5e66:	402a      	ands	r2, r5
    5e68:	2cff      	cmp	r4, #255	; 0xff
    5e6a:	d133      	bne.n	5ed4 <__aeabi_fsub+0x160>
    5e6c:	2f00      	cmp	r7, #0
    5e6e:	d100      	bne.n	5e72 <__aeabi_fsub+0xfe>
    5e70:	e0a8      	b.n	5fc4 <__aeabi_fsub+0x250>
    5e72:	2380      	movs	r3, #128	; 0x80
    5e74:	03db      	lsls	r3, r3, #15
    5e76:	433b      	orrs	r3, r7
    5e78:	025b      	lsls	r3, r3, #9
    5e7a:	0a5b      	lsrs	r3, r3, #9
    5e7c:	24ff      	movs	r4, #255	; 0xff
    5e7e:	e7d1      	b.n	5e24 <__aeabi_fsub+0xb0>
    5e80:	1a21      	subs	r1, r4, r0
    5e82:	2900      	cmp	r1, #0
    5e84:	dd4c      	ble.n	5f20 <__aeabi_fsub+0x1ac>
    5e86:	2800      	cmp	r0, #0
    5e88:	d02a      	beq.n	5ee0 <__aeabi_fsub+0x16c>
    5e8a:	2cff      	cmp	r4, #255	; 0xff
    5e8c:	d0b8      	beq.n	5e00 <__aeabi_fsub+0x8c>
    5e8e:	2080      	movs	r0, #128	; 0x80
    5e90:	04c0      	lsls	r0, r0, #19
    5e92:	4306      	orrs	r6, r0
    5e94:	291b      	cmp	r1, #27
    5e96:	dd00      	ble.n	5e9a <__aeabi_fsub+0x126>
    5e98:	e0af      	b.n	5ffa <__aeabi_fsub+0x286>
    5e9a:	0030      	movs	r0, r6
    5e9c:	2720      	movs	r7, #32
    5e9e:	40c8      	lsrs	r0, r1
    5ea0:	1a79      	subs	r1, r7, r1
    5ea2:	408e      	lsls	r6, r1
    5ea4:	1e71      	subs	r1, r6, #1
    5ea6:	418e      	sbcs	r6, r1
    5ea8:	4306      	orrs	r6, r0
    5eaa:	199b      	adds	r3, r3, r6
    5eac:	0159      	lsls	r1, r3, #5
    5eae:	d5d6      	bpl.n	5e5e <__aeabi_fsub+0xea>
    5eb0:	3401      	adds	r4, #1
    5eb2:	2cff      	cmp	r4, #255	; 0xff
    5eb4:	d100      	bne.n	5eb8 <__aeabi_fsub+0x144>
    5eb6:	e085      	b.n	5fc4 <__aeabi_fsub+0x250>
    5eb8:	2201      	movs	r2, #1
    5eba:	497a      	ldr	r1, [pc, #488]	; (60a4 <__aeabi_fsub+0x330>)
    5ebc:	401a      	ands	r2, r3
    5ebe:	085b      	lsrs	r3, r3, #1
    5ec0:	400b      	ands	r3, r1
    5ec2:	4313      	orrs	r3, r2
    5ec4:	e79c      	b.n	5e00 <__aeabi_fsub+0x8c>
    5ec6:	2e00      	cmp	r6, #0
    5ec8:	d000      	beq.n	5ecc <__aeabi_fsub+0x158>
    5eca:	e770      	b.n	5dae <__aeabi_fsub+0x3a>
    5ecc:	e76b      	b.n	5da6 <__aeabi_fsub+0x32>
    5ece:	1e3b      	subs	r3, r7, #0
    5ed0:	d1c5      	bne.n	5e5e <__aeabi_fsub+0xea>
    5ed2:	2200      	movs	r2, #0
    5ed4:	027b      	lsls	r3, r7, #9
    5ed6:	0a5b      	lsrs	r3, r3, #9
    5ed8:	b2e4      	uxtb	r4, r4
    5eda:	e7a3      	b.n	5e24 <__aeabi_fsub+0xb0>
    5edc:	0014      	movs	r4, r2
    5ede:	e78f      	b.n	5e00 <__aeabi_fsub+0x8c>
    5ee0:	2e00      	cmp	r6, #0
    5ee2:	d04d      	beq.n	5f80 <__aeabi_fsub+0x20c>
    5ee4:	1e48      	subs	r0, r1, #1
    5ee6:	2800      	cmp	r0, #0
    5ee8:	d157      	bne.n	5f9a <__aeabi_fsub+0x226>
    5eea:	199b      	adds	r3, r3, r6
    5eec:	2401      	movs	r4, #1
    5eee:	015a      	lsls	r2, r3, #5
    5ef0:	d5b5      	bpl.n	5e5e <__aeabi_fsub+0xea>
    5ef2:	2402      	movs	r4, #2
    5ef4:	e7e0      	b.n	5eb8 <__aeabi_fsub+0x144>
    5ef6:	2a00      	cmp	r2, #0
    5ef8:	d125      	bne.n	5f46 <__aeabi_fsub+0x1d2>
    5efa:	1c62      	adds	r2, r4, #1
    5efc:	b2d2      	uxtb	r2, r2
    5efe:	2a01      	cmp	r2, #1
    5f00:	dd72      	ble.n	5fe8 <__aeabi_fsub+0x274>
    5f02:	1b9f      	subs	r7, r3, r6
    5f04:	017a      	lsls	r2, r7, #5
    5f06:	d535      	bpl.n	5f74 <__aeabi_fsub+0x200>
    5f08:	1af7      	subs	r7, r6, r3
    5f0a:	000d      	movs	r5, r1
    5f0c:	e764      	b.n	5dd8 <__aeabi_fsub+0x64>
    5f0e:	2201      	movs	r2, #1
    5f10:	2300      	movs	r3, #0
    5f12:	402a      	ands	r2, r5
    5f14:	e786      	b.n	5e24 <__aeabi_fsub+0xb0>
    5f16:	003b      	movs	r3, r7
    5f18:	4a63      	ldr	r2, [pc, #396]	; (60a8 <__aeabi_fsub+0x334>)
    5f1a:	1a24      	subs	r4, r4, r0
    5f1c:	4013      	ands	r3, r2
    5f1e:	e76f      	b.n	5e00 <__aeabi_fsub+0x8c>
    5f20:	2900      	cmp	r1, #0
    5f22:	d16c      	bne.n	5ffe <__aeabi_fsub+0x28a>
    5f24:	1c61      	adds	r1, r4, #1
    5f26:	b2c8      	uxtb	r0, r1
    5f28:	2801      	cmp	r0, #1
    5f2a:	dd4e      	ble.n	5fca <__aeabi_fsub+0x256>
    5f2c:	29ff      	cmp	r1, #255	; 0xff
    5f2e:	d049      	beq.n	5fc4 <__aeabi_fsub+0x250>
    5f30:	199b      	adds	r3, r3, r6
    5f32:	085b      	lsrs	r3, r3, #1
    5f34:	000c      	movs	r4, r1
    5f36:	e763      	b.n	5e00 <__aeabi_fsub+0x8c>
    5f38:	2aff      	cmp	r2, #255	; 0xff
    5f3a:	d041      	beq.n	5fc0 <__aeabi_fsub+0x24c>
    5f3c:	000a      	movs	r2, r1
    5f3e:	e781      	b.n	5e44 <__aeabi_fsub+0xd0>
    5f40:	2601      	movs	r6, #1
    5f42:	1b9b      	subs	r3, r3, r6
    5f44:	e789      	b.n	5e5a <__aeabi_fsub+0xe6>
    5f46:	2c00      	cmp	r4, #0
    5f48:	d01c      	beq.n	5f84 <__aeabi_fsub+0x210>
    5f4a:	28ff      	cmp	r0, #255	; 0xff
    5f4c:	d021      	beq.n	5f92 <__aeabi_fsub+0x21e>
    5f4e:	2480      	movs	r4, #128	; 0x80
    5f50:	04e4      	lsls	r4, r4, #19
    5f52:	4252      	negs	r2, r2
    5f54:	4323      	orrs	r3, r4
    5f56:	2a1b      	cmp	r2, #27
    5f58:	dd00      	ble.n	5f5c <__aeabi_fsub+0x1e8>
    5f5a:	e096      	b.n	608a <__aeabi_fsub+0x316>
    5f5c:	001c      	movs	r4, r3
    5f5e:	2520      	movs	r5, #32
    5f60:	40d4      	lsrs	r4, r2
    5f62:	1aaa      	subs	r2, r5, r2
    5f64:	4093      	lsls	r3, r2
    5f66:	1e5a      	subs	r2, r3, #1
    5f68:	4193      	sbcs	r3, r2
    5f6a:	4323      	orrs	r3, r4
    5f6c:	1af3      	subs	r3, r6, r3
    5f6e:	0004      	movs	r4, r0
    5f70:	000d      	movs	r5, r1
    5f72:	e72d      	b.n	5dd0 <__aeabi_fsub+0x5c>
    5f74:	2f00      	cmp	r7, #0
    5f76:	d000      	beq.n	5f7a <__aeabi_fsub+0x206>
    5f78:	e72e      	b.n	5dd8 <__aeabi_fsub+0x64>
    5f7a:	2200      	movs	r2, #0
    5f7c:	2400      	movs	r4, #0
    5f7e:	e7a9      	b.n	5ed4 <__aeabi_fsub+0x160>
    5f80:	000c      	movs	r4, r1
    5f82:	e73d      	b.n	5e00 <__aeabi_fsub+0x8c>
    5f84:	2b00      	cmp	r3, #0
    5f86:	d058      	beq.n	603a <__aeabi_fsub+0x2c6>
    5f88:	43d2      	mvns	r2, r2
    5f8a:	2a00      	cmp	r2, #0
    5f8c:	d0ee      	beq.n	5f6c <__aeabi_fsub+0x1f8>
    5f8e:	28ff      	cmp	r0, #255	; 0xff
    5f90:	d1e1      	bne.n	5f56 <__aeabi_fsub+0x1e2>
    5f92:	0033      	movs	r3, r6
    5f94:	24ff      	movs	r4, #255	; 0xff
    5f96:	000d      	movs	r5, r1
    5f98:	e732      	b.n	5e00 <__aeabi_fsub+0x8c>
    5f9a:	29ff      	cmp	r1, #255	; 0xff
    5f9c:	d010      	beq.n	5fc0 <__aeabi_fsub+0x24c>
    5f9e:	0001      	movs	r1, r0
    5fa0:	e778      	b.n	5e94 <__aeabi_fsub+0x120>
    5fa2:	2b00      	cmp	r3, #0
    5fa4:	d06e      	beq.n	6084 <__aeabi_fsub+0x310>
    5fa6:	24ff      	movs	r4, #255	; 0xff
    5fa8:	2e00      	cmp	r6, #0
    5faa:	d100      	bne.n	5fae <__aeabi_fsub+0x23a>
    5fac:	e728      	b.n	5e00 <__aeabi_fsub+0x8c>
    5fae:	2280      	movs	r2, #128	; 0x80
    5fb0:	4651      	mov	r1, sl
    5fb2:	03d2      	lsls	r2, r2, #15
    5fb4:	4211      	tst	r1, r2
    5fb6:	d003      	beq.n	5fc0 <__aeabi_fsub+0x24c>
    5fb8:	4661      	mov	r1, ip
    5fba:	4211      	tst	r1, r2
    5fbc:	d100      	bne.n	5fc0 <__aeabi_fsub+0x24c>
    5fbe:	0033      	movs	r3, r6
    5fc0:	24ff      	movs	r4, #255	; 0xff
    5fc2:	e71d      	b.n	5e00 <__aeabi_fsub+0x8c>
    5fc4:	24ff      	movs	r4, #255	; 0xff
    5fc6:	2300      	movs	r3, #0
    5fc8:	e72c      	b.n	5e24 <__aeabi_fsub+0xb0>
    5fca:	2c00      	cmp	r4, #0
    5fcc:	d1e9      	bne.n	5fa2 <__aeabi_fsub+0x22e>
    5fce:	2b00      	cmp	r3, #0
    5fd0:	d063      	beq.n	609a <__aeabi_fsub+0x326>
    5fd2:	2e00      	cmp	r6, #0
    5fd4:	d100      	bne.n	5fd8 <__aeabi_fsub+0x264>
    5fd6:	e713      	b.n	5e00 <__aeabi_fsub+0x8c>
    5fd8:	199b      	adds	r3, r3, r6
    5fda:	015a      	lsls	r2, r3, #5
    5fdc:	d400      	bmi.n	5fe0 <__aeabi_fsub+0x26c>
    5fde:	e73e      	b.n	5e5e <__aeabi_fsub+0xea>
    5fe0:	4a31      	ldr	r2, [pc, #196]	; (60a8 <__aeabi_fsub+0x334>)
    5fe2:	000c      	movs	r4, r1
    5fe4:	4013      	ands	r3, r2
    5fe6:	e70b      	b.n	5e00 <__aeabi_fsub+0x8c>
    5fe8:	2c00      	cmp	r4, #0
    5fea:	d11e      	bne.n	602a <__aeabi_fsub+0x2b6>
    5fec:	2b00      	cmp	r3, #0
    5fee:	d12f      	bne.n	6050 <__aeabi_fsub+0x2dc>
    5ff0:	2e00      	cmp	r6, #0
    5ff2:	d04f      	beq.n	6094 <__aeabi_fsub+0x320>
    5ff4:	0033      	movs	r3, r6
    5ff6:	000d      	movs	r5, r1
    5ff8:	e702      	b.n	5e00 <__aeabi_fsub+0x8c>
    5ffa:	2601      	movs	r6, #1
    5ffc:	e755      	b.n	5eaa <__aeabi_fsub+0x136>
    5ffe:	2c00      	cmp	r4, #0
    6000:	d11f      	bne.n	6042 <__aeabi_fsub+0x2ce>
    6002:	2b00      	cmp	r3, #0
    6004:	d043      	beq.n	608e <__aeabi_fsub+0x31a>
    6006:	43c9      	mvns	r1, r1
    6008:	2900      	cmp	r1, #0
    600a:	d00b      	beq.n	6024 <__aeabi_fsub+0x2b0>
    600c:	28ff      	cmp	r0, #255	; 0xff
    600e:	d039      	beq.n	6084 <__aeabi_fsub+0x310>
    6010:	291b      	cmp	r1, #27
    6012:	dc44      	bgt.n	609e <__aeabi_fsub+0x32a>
    6014:	001c      	movs	r4, r3
    6016:	2720      	movs	r7, #32
    6018:	40cc      	lsrs	r4, r1
    601a:	1a79      	subs	r1, r7, r1
    601c:	408b      	lsls	r3, r1
    601e:	1e59      	subs	r1, r3, #1
    6020:	418b      	sbcs	r3, r1
    6022:	4323      	orrs	r3, r4
    6024:	199b      	adds	r3, r3, r6
    6026:	0004      	movs	r4, r0
    6028:	e740      	b.n	5eac <__aeabi_fsub+0x138>
    602a:	2b00      	cmp	r3, #0
    602c:	d11a      	bne.n	6064 <__aeabi_fsub+0x2f0>
    602e:	2e00      	cmp	r6, #0
    6030:	d124      	bne.n	607c <__aeabi_fsub+0x308>
    6032:	2780      	movs	r7, #128	; 0x80
    6034:	2200      	movs	r2, #0
    6036:	03ff      	lsls	r7, r7, #15
    6038:	e71b      	b.n	5e72 <__aeabi_fsub+0xfe>
    603a:	0033      	movs	r3, r6
    603c:	0004      	movs	r4, r0
    603e:	000d      	movs	r5, r1
    6040:	e6de      	b.n	5e00 <__aeabi_fsub+0x8c>
    6042:	28ff      	cmp	r0, #255	; 0xff
    6044:	d01e      	beq.n	6084 <__aeabi_fsub+0x310>
    6046:	2480      	movs	r4, #128	; 0x80
    6048:	04e4      	lsls	r4, r4, #19
    604a:	4249      	negs	r1, r1
    604c:	4323      	orrs	r3, r4
    604e:	e7df      	b.n	6010 <__aeabi_fsub+0x29c>
    6050:	2e00      	cmp	r6, #0
    6052:	d100      	bne.n	6056 <__aeabi_fsub+0x2e2>
    6054:	e6d4      	b.n	5e00 <__aeabi_fsub+0x8c>
    6056:	1b9f      	subs	r7, r3, r6
    6058:	017a      	lsls	r2, r7, #5
    605a:	d400      	bmi.n	605e <__aeabi_fsub+0x2ea>
    605c:	e737      	b.n	5ece <__aeabi_fsub+0x15a>
    605e:	1af3      	subs	r3, r6, r3
    6060:	000d      	movs	r5, r1
    6062:	e6cd      	b.n	5e00 <__aeabi_fsub+0x8c>
    6064:	24ff      	movs	r4, #255	; 0xff
    6066:	2e00      	cmp	r6, #0
    6068:	d100      	bne.n	606c <__aeabi_fsub+0x2f8>
    606a:	e6c9      	b.n	5e00 <__aeabi_fsub+0x8c>
    606c:	2280      	movs	r2, #128	; 0x80
    606e:	4650      	mov	r0, sl
    6070:	03d2      	lsls	r2, r2, #15
    6072:	4210      	tst	r0, r2
    6074:	d0a4      	beq.n	5fc0 <__aeabi_fsub+0x24c>
    6076:	4660      	mov	r0, ip
    6078:	4210      	tst	r0, r2
    607a:	d1a1      	bne.n	5fc0 <__aeabi_fsub+0x24c>
    607c:	0033      	movs	r3, r6
    607e:	000d      	movs	r5, r1
    6080:	24ff      	movs	r4, #255	; 0xff
    6082:	e6bd      	b.n	5e00 <__aeabi_fsub+0x8c>
    6084:	0033      	movs	r3, r6
    6086:	24ff      	movs	r4, #255	; 0xff
    6088:	e6ba      	b.n	5e00 <__aeabi_fsub+0x8c>
    608a:	2301      	movs	r3, #1
    608c:	e76e      	b.n	5f6c <__aeabi_fsub+0x1f8>
    608e:	0033      	movs	r3, r6
    6090:	0004      	movs	r4, r0
    6092:	e6b5      	b.n	5e00 <__aeabi_fsub+0x8c>
    6094:	2700      	movs	r7, #0
    6096:	2200      	movs	r2, #0
    6098:	e71c      	b.n	5ed4 <__aeabi_fsub+0x160>
    609a:	0033      	movs	r3, r6
    609c:	e6b0      	b.n	5e00 <__aeabi_fsub+0x8c>
    609e:	2301      	movs	r3, #1
    60a0:	e7c0      	b.n	6024 <__aeabi_fsub+0x2b0>
    60a2:	46c0      	nop			; (mov r8, r8)
    60a4:	7dffffff 	.word	0x7dffffff
    60a8:	fbffffff 	.word	0xfbffffff

000060ac <__aeabi_f2iz>:
    60ac:	0241      	lsls	r1, r0, #9
    60ae:	0043      	lsls	r3, r0, #1
    60b0:	0fc2      	lsrs	r2, r0, #31
    60b2:	0a49      	lsrs	r1, r1, #9
    60b4:	0e1b      	lsrs	r3, r3, #24
    60b6:	2000      	movs	r0, #0
    60b8:	2b7e      	cmp	r3, #126	; 0x7e
    60ba:	dd0d      	ble.n	60d8 <__aeabi_f2iz+0x2c>
    60bc:	2b9d      	cmp	r3, #157	; 0x9d
    60be:	dc0c      	bgt.n	60da <__aeabi_f2iz+0x2e>
    60c0:	2080      	movs	r0, #128	; 0x80
    60c2:	0400      	lsls	r0, r0, #16
    60c4:	4301      	orrs	r1, r0
    60c6:	2b95      	cmp	r3, #149	; 0x95
    60c8:	dc0a      	bgt.n	60e0 <__aeabi_f2iz+0x34>
    60ca:	2096      	movs	r0, #150	; 0x96
    60cc:	1ac3      	subs	r3, r0, r3
    60ce:	40d9      	lsrs	r1, r3
    60d0:	4248      	negs	r0, r1
    60d2:	2a00      	cmp	r2, #0
    60d4:	d100      	bne.n	60d8 <__aeabi_f2iz+0x2c>
    60d6:	0008      	movs	r0, r1
    60d8:	4770      	bx	lr
    60da:	4b03      	ldr	r3, [pc, #12]	; (60e8 <__aeabi_f2iz+0x3c>)
    60dc:	18d0      	adds	r0, r2, r3
    60de:	e7fb      	b.n	60d8 <__aeabi_f2iz+0x2c>
    60e0:	3b96      	subs	r3, #150	; 0x96
    60e2:	4099      	lsls	r1, r3
    60e4:	e7f4      	b.n	60d0 <__aeabi_f2iz+0x24>
    60e6:	46c0      	nop			; (mov r8, r8)
    60e8:	7fffffff 	.word	0x7fffffff

000060ec <__aeabi_i2f>:
    60ec:	b570      	push	{r4, r5, r6, lr}
    60ee:	2800      	cmp	r0, #0
    60f0:	d030      	beq.n	6154 <__aeabi_i2f+0x68>
    60f2:	17c3      	asrs	r3, r0, #31
    60f4:	18c4      	adds	r4, r0, r3
    60f6:	405c      	eors	r4, r3
    60f8:	0fc5      	lsrs	r5, r0, #31
    60fa:	0020      	movs	r0, r4
    60fc:	f001 fdae 	bl	7c5c <__clzsi2>
    6100:	239e      	movs	r3, #158	; 0x9e
    6102:	1a1b      	subs	r3, r3, r0
    6104:	2b96      	cmp	r3, #150	; 0x96
    6106:	dc0d      	bgt.n	6124 <__aeabi_i2f+0x38>
    6108:	2296      	movs	r2, #150	; 0x96
    610a:	1ad2      	subs	r2, r2, r3
    610c:	4094      	lsls	r4, r2
    610e:	002a      	movs	r2, r5
    6110:	0264      	lsls	r4, r4, #9
    6112:	0a64      	lsrs	r4, r4, #9
    6114:	b2db      	uxtb	r3, r3
    6116:	0264      	lsls	r4, r4, #9
    6118:	05db      	lsls	r3, r3, #23
    611a:	0a60      	lsrs	r0, r4, #9
    611c:	07d2      	lsls	r2, r2, #31
    611e:	4318      	orrs	r0, r3
    6120:	4310      	orrs	r0, r2
    6122:	bd70      	pop	{r4, r5, r6, pc}
    6124:	2b99      	cmp	r3, #153	; 0x99
    6126:	dc19      	bgt.n	615c <__aeabi_i2f+0x70>
    6128:	2299      	movs	r2, #153	; 0x99
    612a:	1ad2      	subs	r2, r2, r3
    612c:	2a00      	cmp	r2, #0
    612e:	dd29      	ble.n	6184 <__aeabi_i2f+0x98>
    6130:	4094      	lsls	r4, r2
    6132:	0022      	movs	r2, r4
    6134:	4c14      	ldr	r4, [pc, #80]	; (6188 <__aeabi_i2f+0x9c>)
    6136:	4014      	ands	r4, r2
    6138:	0751      	lsls	r1, r2, #29
    613a:	d004      	beq.n	6146 <__aeabi_i2f+0x5a>
    613c:	210f      	movs	r1, #15
    613e:	400a      	ands	r2, r1
    6140:	2a04      	cmp	r2, #4
    6142:	d000      	beq.n	6146 <__aeabi_i2f+0x5a>
    6144:	3404      	adds	r4, #4
    6146:	0162      	lsls	r2, r4, #5
    6148:	d413      	bmi.n	6172 <__aeabi_i2f+0x86>
    614a:	01a4      	lsls	r4, r4, #6
    614c:	0a64      	lsrs	r4, r4, #9
    614e:	b2db      	uxtb	r3, r3
    6150:	002a      	movs	r2, r5
    6152:	e7e0      	b.n	6116 <__aeabi_i2f+0x2a>
    6154:	2200      	movs	r2, #0
    6156:	2300      	movs	r3, #0
    6158:	2400      	movs	r4, #0
    615a:	e7dc      	b.n	6116 <__aeabi_i2f+0x2a>
    615c:	2205      	movs	r2, #5
    615e:	0021      	movs	r1, r4
    6160:	1a12      	subs	r2, r2, r0
    6162:	40d1      	lsrs	r1, r2
    6164:	22b9      	movs	r2, #185	; 0xb9
    6166:	1ad2      	subs	r2, r2, r3
    6168:	4094      	lsls	r4, r2
    616a:	1e62      	subs	r2, r4, #1
    616c:	4194      	sbcs	r4, r2
    616e:	430c      	orrs	r4, r1
    6170:	e7da      	b.n	6128 <__aeabi_i2f+0x3c>
    6172:	4b05      	ldr	r3, [pc, #20]	; (6188 <__aeabi_i2f+0x9c>)
    6174:	002a      	movs	r2, r5
    6176:	401c      	ands	r4, r3
    6178:	239f      	movs	r3, #159	; 0x9f
    617a:	01a4      	lsls	r4, r4, #6
    617c:	1a1b      	subs	r3, r3, r0
    617e:	0a64      	lsrs	r4, r4, #9
    6180:	b2db      	uxtb	r3, r3
    6182:	e7c8      	b.n	6116 <__aeabi_i2f+0x2a>
    6184:	0022      	movs	r2, r4
    6186:	e7d5      	b.n	6134 <__aeabi_i2f+0x48>
    6188:	fbffffff 	.word	0xfbffffff

0000618c <__aeabi_ui2f>:
    618c:	b510      	push	{r4, lr}
    618e:	1e04      	subs	r4, r0, #0
    6190:	d027      	beq.n	61e2 <__aeabi_ui2f+0x56>
    6192:	f001 fd63 	bl	7c5c <__clzsi2>
    6196:	239e      	movs	r3, #158	; 0x9e
    6198:	1a1b      	subs	r3, r3, r0
    619a:	2b96      	cmp	r3, #150	; 0x96
    619c:	dc0a      	bgt.n	61b4 <__aeabi_ui2f+0x28>
    619e:	2296      	movs	r2, #150	; 0x96
    61a0:	1ad2      	subs	r2, r2, r3
    61a2:	4094      	lsls	r4, r2
    61a4:	0264      	lsls	r4, r4, #9
    61a6:	0a64      	lsrs	r4, r4, #9
    61a8:	b2db      	uxtb	r3, r3
    61aa:	0264      	lsls	r4, r4, #9
    61ac:	05db      	lsls	r3, r3, #23
    61ae:	0a60      	lsrs	r0, r4, #9
    61b0:	4318      	orrs	r0, r3
    61b2:	bd10      	pop	{r4, pc}
    61b4:	2b99      	cmp	r3, #153	; 0x99
    61b6:	dc17      	bgt.n	61e8 <__aeabi_ui2f+0x5c>
    61b8:	2299      	movs	r2, #153	; 0x99
    61ba:	1ad2      	subs	r2, r2, r3
    61bc:	2a00      	cmp	r2, #0
    61be:	dd27      	ble.n	6210 <__aeabi_ui2f+0x84>
    61c0:	4094      	lsls	r4, r2
    61c2:	0022      	movs	r2, r4
    61c4:	4c13      	ldr	r4, [pc, #76]	; (6214 <__aeabi_ui2f+0x88>)
    61c6:	4014      	ands	r4, r2
    61c8:	0751      	lsls	r1, r2, #29
    61ca:	d004      	beq.n	61d6 <__aeabi_ui2f+0x4a>
    61cc:	210f      	movs	r1, #15
    61ce:	400a      	ands	r2, r1
    61d0:	2a04      	cmp	r2, #4
    61d2:	d000      	beq.n	61d6 <__aeabi_ui2f+0x4a>
    61d4:	3404      	adds	r4, #4
    61d6:	0162      	lsls	r2, r4, #5
    61d8:	d412      	bmi.n	6200 <__aeabi_ui2f+0x74>
    61da:	01a4      	lsls	r4, r4, #6
    61dc:	0a64      	lsrs	r4, r4, #9
    61de:	b2db      	uxtb	r3, r3
    61e0:	e7e3      	b.n	61aa <__aeabi_ui2f+0x1e>
    61e2:	2300      	movs	r3, #0
    61e4:	2400      	movs	r4, #0
    61e6:	e7e0      	b.n	61aa <__aeabi_ui2f+0x1e>
    61e8:	22b9      	movs	r2, #185	; 0xb9
    61ea:	0021      	movs	r1, r4
    61ec:	1ad2      	subs	r2, r2, r3
    61ee:	4091      	lsls	r1, r2
    61f0:	000a      	movs	r2, r1
    61f2:	1e51      	subs	r1, r2, #1
    61f4:	418a      	sbcs	r2, r1
    61f6:	2105      	movs	r1, #5
    61f8:	1a09      	subs	r1, r1, r0
    61fa:	40cc      	lsrs	r4, r1
    61fc:	4314      	orrs	r4, r2
    61fe:	e7db      	b.n	61b8 <__aeabi_ui2f+0x2c>
    6200:	4b04      	ldr	r3, [pc, #16]	; (6214 <__aeabi_ui2f+0x88>)
    6202:	401c      	ands	r4, r3
    6204:	239f      	movs	r3, #159	; 0x9f
    6206:	01a4      	lsls	r4, r4, #6
    6208:	1a1b      	subs	r3, r3, r0
    620a:	0a64      	lsrs	r4, r4, #9
    620c:	b2db      	uxtb	r3, r3
    620e:	e7cc      	b.n	61aa <__aeabi_ui2f+0x1e>
    6210:	0022      	movs	r2, r4
    6212:	e7d7      	b.n	61c4 <__aeabi_ui2f+0x38>
    6214:	fbffffff 	.word	0xfbffffff

00006218 <__aeabi_dadd>:
    6218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    621a:	4645      	mov	r5, r8
    621c:	46de      	mov	lr, fp
    621e:	4657      	mov	r7, sl
    6220:	464e      	mov	r6, r9
    6222:	030c      	lsls	r4, r1, #12
    6224:	b5e0      	push	{r5, r6, r7, lr}
    6226:	004e      	lsls	r6, r1, #1
    6228:	0fc9      	lsrs	r1, r1, #31
    622a:	4688      	mov	r8, r1
    622c:	000d      	movs	r5, r1
    622e:	0a61      	lsrs	r1, r4, #9
    6230:	0f44      	lsrs	r4, r0, #29
    6232:	430c      	orrs	r4, r1
    6234:	00c7      	lsls	r7, r0, #3
    6236:	0319      	lsls	r1, r3, #12
    6238:	0058      	lsls	r0, r3, #1
    623a:	0fdb      	lsrs	r3, r3, #31
    623c:	469b      	mov	fp, r3
    623e:	0a4b      	lsrs	r3, r1, #9
    6240:	0f51      	lsrs	r1, r2, #29
    6242:	430b      	orrs	r3, r1
    6244:	0d76      	lsrs	r6, r6, #21
    6246:	0d40      	lsrs	r0, r0, #21
    6248:	0019      	movs	r1, r3
    624a:	00d2      	lsls	r2, r2, #3
    624c:	45d8      	cmp	r8, fp
    624e:	d100      	bne.n	6252 <__aeabi_dadd+0x3a>
    6250:	e0ae      	b.n	63b0 <__aeabi_dadd+0x198>
    6252:	1a35      	subs	r5, r6, r0
    6254:	2d00      	cmp	r5, #0
    6256:	dc00      	bgt.n	625a <__aeabi_dadd+0x42>
    6258:	e0f6      	b.n	6448 <__aeabi_dadd+0x230>
    625a:	2800      	cmp	r0, #0
    625c:	d10f      	bne.n	627e <__aeabi_dadd+0x66>
    625e:	4313      	orrs	r3, r2
    6260:	d100      	bne.n	6264 <__aeabi_dadd+0x4c>
    6262:	e0db      	b.n	641c <__aeabi_dadd+0x204>
    6264:	1e6b      	subs	r3, r5, #1
    6266:	2b00      	cmp	r3, #0
    6268:	d000      	beq.n	626c <__aeabi_dadd+0x54>
    626a:	e137      	b.n	64dc <__aeabi_dadd+0x2c4>
    626c:	1aba      	subs	r2, r7, r2
    626e:	4297      	cmp	r7, r2
    6270:	41bf      	sbcs	r7, r7
    6272:	1a64      	subs	r4, r4, r1
    6274:	427f      	negs	r7, r7
    6276:	1be4      	subs	r4, r4, r7
    6278:	2601      	movs	r6, #1
    627a:	0017      	movs	r7, r2
    627c:	e024      	b.n	62c8 <__aeabi_dadd+0xb0>
    627e:	4bc6      	ldr	r3, [pc, #792]	; (6598 <__aeabi_dadd+0x380>)
    6280:	429e      	cmp	r6, r3
    6282:	d04d      	beq.n	6320 <__aeabi_dadd+0x108>
    6284:	2380      	movs	r3, #128	; 0x80
    6286:	041b      	lsls	r3, r3, #16
    6288:	4319      	orrs	r1, r3
    628a:	2d38      	cmp	r5, #56	; 0x38
    628c:	dd00      	ble.n	6290 <__aeabi_dadd+0x78>
    628e:	e107      	b.n	64a0 <__aeabi_dadd+0x288>
    6290:	2d1f      	cmp	r5, #31
    6292:	dd00      	ble.n	6296 <__aeabi_dadd+0x7e>
    6294:	e138      	b.n	6508 <__aeabi_dadd+0x2f0>
    6296:	2020      	movs	r0, #32
    6298:	1b43      	subs	r3, r0, r5
    629a:	469a      	mov	sl, r3
    629c:	000b      	movs	r3, r1
    629e:	4650      	mov	r0, sl
    62a0:	4083      	lsls	r3, r0
    62a2:	4699      	mov	r9, r3
    62a4:	0013      	movs	r3, r2
    62a6:	4648      	mov	r0, r9
    62a8:	40eb      	lsrs	r3, r5
    62aa:	4318      	orrs	r0, r3
    62ac:	0003      	movs	r3, r0
    62ae:	4650      	mov	r0, sl
    62b0:	4082      	lsls	r2, r0
    62b2:	1e50      	subs	r0, r2, #1
    62b4:	4182      	sbcs	r2, r0
    62b6:	40e9      	lsrs	r1, r5
    62b8:	431a      	orrs	r2, r3
    62ba:	1aba      	subs	r2, r7, r2
    62bc:	1a61      	subs	r1, r4, r1
    62be:	4297      	cmp	r7, r2
    62c0:	41a4      	sbcs	r4, r4
    62c2:	0017      	movs	r7, r2
    62c4:	4264      	negs	r4, r4
    62c6:	1b0c      	subs	r4, r1, r4
    62c8:	0223      	lsls	r3, r4, #8
    62ca:	d562      	bpl.n	6392 <__aeabi_dadd+0x17a>
    62cc:	0264      	lsls	r4, r4, #9
    62ce:	0a65      	lsrs	r5, r4, #9
    62d0:	2d00      	cmp	r5, #0
    62d2:	d100      	bne.n	62d6 <__aeabi_dadd+0xbe>
    62d4:	e0df      	b.n	6496 <__aeabi_dadd+0x27e>
    62d6:	0028      	movs	r0, r5
    62d8:	f001 fcc0 	bl	7c5c <__clzsi2>
    62dc:	0003      	movs	r3, r0
    62de:	3b08      	subs	r3, #8
    62e0:	2b1f      	cmp	r3, #31
    62e2:	dd00      	ble.n	62e6 <__aeabi_dadd+0xce>
    62e4:	e0d2      	b.n	648c <__aeabi_dadd+0x274>
    62e6:	2220      	movs	r2, #32
    62e8:	003c      	movs	r4, r7
    62ea:	1ad2      	subs	r2, r2, r3
    62ec:	409d      	lsls	r5, r3
    62ee:	40d4      	lsrs	r4, r2
    62f0:	409f      	lsls	r7, r3
    62f2:	4325      	orrs	r5, r4
    62f4:	429e      	cmp	r6, r3
    62f6:	dd00      	ble.n	62fa <__aeabi_dadd+0xe2>
    62f8:	e0c4      	b.n	6484 <__aeabi_dadd+0x26c>
    62fa:	1b9e      	subs	r6, r3, r6
    62fc:	1c73      	adds	r3, r6, #1
    62fe:	2b1f      	cmp	r3, #31
    6300:	dd00      	ble.n	6304 <__aeabi_dadd+0xec>
    6302:	e0f1      	b.n	64e8 <__aeabi_dadd+0x2d0>
    6304:	2220      	movs	r2, #32
    6306:	0038      	movs	r0, r7
    6308:	0029      	movs	r1, r5
    630a:	1ad2      	subs	r2, r2, r3
    630c:	40d8      	lsrs	r0, r3
    630e:	4091      	lsls	r1, r2
    6310:	4097      	lsls	r7, r2
    6312:	002c      	movs	r4, r5
    6314:	4301      	orrs	r1, r0
    6316:	1e78      	subs	r0, r7, #1
    6318:	4187      	sbcs	r7, r0
    631a:	40dc      	lsrs	r4, r3
    631c:	2600      	movs	r6, #0
    631e:	430f      	orrs	r7, r1
    6320:	077b      	lsls	r3, r7, #29
    6322:	d009      	beq.n	6338 <__aeabi_dadd+0x120>
    6324:	230f      	movs	r3, #15
    6326:	403b      	ands	r3, r7
    6328:	2b04      	cmp	r3, #4
    632a:	d005      	beq.n	6338 <__aeabi_dadd+0x120>
    632c:	1d3b      	adds	r3, r7, #4
    632e:	42bb      	cmp	r3, r7
    6330:	41bf      	sbcs	r7, r7
    6332:	427f      	negs	r7, r7
    6334:	19e4      	adds	r4, r4, r7
    6336:	001f      	movs	r7, r3
    6338:	0223      	lsls	r3, r4, #8
    633a:	d52c      	bpl.n	6396 <__aeabi_dadd+0x17e>
    633c:	4b96      	ldr	r3, [pc, #600]	; (6598 <__aeabi_dadd+0x380>)
    633e:	3601      	adds	r6, #1
    6340:	429e      	cmp	r6, r3
    6342:	d100      	bne.n	6346 <__aeabi_dadd+0x12e>
    6344:	e09a      	b.n	647c <__aeabi_dadd+0x264>
    6346:	4645      	mov	r5, r8
    6348:	4b94      	ldr	r3, [pc, #592]	; (659c <__aeabi_dadd+0x384>)
    634a:	08ff      	lsrs	r7, r7, #3
    634c:	401c      	ands	r4, r3
    634e:	0760      	lsls	r0, r4, #29
    6350:	0576      	lsls	r6, r6, #21
    6352:	0264      	lsls	r4, r4, #9
    6354:	4307      	orrs	r7, r0
    6356:	0b24      	lsrs	r4, r4, #12
    6358:	0d76      	lsrs	r6, r6, #21
    635a:	2100      	movs	r1, #0
    635c:	0324      	lsls	r4, r4, #12
    635e:	0b23      	lsrs	r3, r4, #12
    6360:	0d0c      	lsrs	r4, r1, #20
    6362:	4a8f      	ldr	r2, [pc, #572]	; (65a0 <__aeabi_dadd+0x388>)
    6364:	0524      	lsls	r4, r4, #20
    6366:	431c      	orrs	r4, r3
    6368:	4014      	ands	r4, r2
    636a:	0533      	lsls	r3, r6, #20
    636c:	4323      	orrs	r3, r4
    636e:	005b      	lsls	r3, r3, #1
    6370:	07ed      	lsls	r5, r5, #31
    6372:	085b      	lsrs	r3, r3, #1
    6374:	432b      	orrs	r3, r5
    6376:	0038      	movs	r0, r7
    6378:	0019      	movs	r1, r3
    637a:	bc3c      	pop	{r2, r3, r4, r5}
    637c:	4690      	mov	r8, r2
    637e:	4699      	mov	r9, r3
    6380:	46a2      	mov	sl, r4
    6382:	46ab      	mov	fp, r5
    6384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6386:	4664      	mov	r4, ip
    6388:	4304      	orrs	r4, r0
    638a:	d100      	bne.n	638e <__aeabi_dadd+0x176>
    638c:	e211      	b.n	67b2 <__aeabi_dadd+0x59a>
    638e:	0004      	movs	r4, r0
    6390:	4667      	mov	r7, ip
    6392:	077b      	lsls	r3, r7, #29
    6394:	d1c6      	bne.n	6324 <__aeabi_dadd+0x10c>
    6396:	4645      	mov	r5, r8
    6398:	0760      	lsls	r0, r4, #29
    639a:	08ff      	lsrs	r7, r7, #3
    639c:	4307      	orrs	r7, r0
    639e:	08e4      	lsrs	r4, r4, #3
    63a0:	4b7d      	ldr	r3, [pc, #500]	; (6598 <__aeabi_dadd+0x380>)
    63a2:	429e      	cmp	r6, r3
    63a4:	d030      	beq.n	6408 <__aeabi_dadd+0x1f0>
    63a6:	0324      	lsls	r4, r4, #12
    63a8:	0576      	lsls	r6, r6, #21
    63aa:	0b24      	lsrs	r4, r4, #12
    63ac:	0d76      	lsrs	r6, r6, #21
    63ae:	e7d4      	b.n	635a <__aeabi_dadd+0x142>
    63b0:	1a33      	subs	r3, r6, r0
    63b2:	469a      	mov	sl, r3
    63b4:	2b00      	cmp	r3, #0
    63b6:	dd78      	ble.n	64aa <__aeabi_dadd+0x292>
    63b8:	2800      	cmp	r0, #0
    63ba:	d031      	beq.n	6420 <__aeabi_dadd+0x208>
    63bc:	4876      	ldr	r0, [pc, #472]	; (6598 <__aeabi_dadd+0x380>)
    63be:	4286      	cmp	r6, r0
    63c0:	d0ae      	beq.n	6320 <__aeabi_dadd+0x108>
    63c2:	2080      	movs	r0, #128	; 0x80
    63c4:	0400      	lsls	r0, r0, #16
    63c6:	4301      	orrs	r1, r0
    63c8:	4653      	mov	r3, sl
    63ca:	2b38      	cmp	r3, #56	; 0x38
    63cc:	dc00      	bgt.n	63d0 <__aeabi_dadd+0x1b8>
    63ce:	e0e9      	b.n	65a4 <__aeabi_dadd+0x38c>
    63d0:	430a      	orrs	r2, r1
    63d2:	1e51      	subs	r1, r2, #1
    63d4:	418a      	sbcs	r2, r1
    63d6:	2100      	movs	r1, #0
    63d8:	19d2      	adds	r2, r2, r7
    63da:	42ba      	cmp	r2, r7
    63dc:	41bf      	sbcs	r7, r7
    63de:	1909      	adds	r1, r1, r4
    63e0:	427c      	negs	r4, r7
    63e2:	0017      	movs	r7, r2
    63e4:	190c      	adds	r4, r1, r4
    63e6:	0223      	lsls	r3, r4, #8
    63e8:	d5d3      	bpl.n	6392 <__aeabi_dadd+0x17a>
    63ea:	4b6b      	ldr	r3, [pc, #428]	; (6598 <__aeabi_dadd+0x380>)
    63ec:	3601      	adds	r6, #1
    63ee:	429e      	cmp	r6, r3
    63f0:	d100      	bne.n	63f4 <__aeabi_dadd+0x1dc>
    63f2:	e13a      	b.n	666a <__aeabi_dadd+0x452>
    63f4:	2001      	movs	r0, #1
    63f6:	4b69      	ldr	r3, [pc, #420]	; (659c <__aeabi_dadd+0x384>)
    63f8:	401c      	ands	r4, r3
    63fa:	087b      	lsrs	r3, r7, #1
    63fc:	4007      	ands	r7, r0
    63fe:	431f      	orrs	r7, r3
    6400:	07e0      	lsls	r0, r4, #31
    6402:	4307      	orrs	r7, r0
    6404:	0864      	lsrs	r4, r4, #1
    6406:	e78b      	b.n	6320 <__aeabi_dadd+0x108>
    6408:	0023      	movs	r3, r4
    640a:	433b      	orrs	r3, r7
    640c:	d100      	bne.n	6410 <__aeabi_dadd+0x1f8>
    640e:	e1cb      	b.n	67a8 <__aeabi_dadd+0x590>
    6410:	2280      	movs	r2, #128	; 0x80
    6412:	0312      	lsls	r2, r2, #12
    6414:	4314      	orrs	r4, r2
    6416:	0324      	lsls	r4, r4, #12
    6418:	0b24      	lsrs	r4, r4, #12
    641a:	e79e      	b.n	635a <__aeabi_dadd+0x142>
    641c:	002e      	movs	r6, r5
    641e:	e77f      	b.n	6320 <__aeabi_dadd+0x108>
    6420:	0008      	movs	r0, r1
    6422:	4310      	orrs	r0, r2
    6424:	d100      	bne.n	6428 <__aeabi_dadd+0x210>
    6426:	e0b4      	b.n	6592 <__aeabi_dadd+0x37a>
    6428:	1e58      	subs	r0, r3, #1
    642a:	2800      	cmp	r0, #0
    642c:	d000      	beq.n	6430 <__aeabi_dadd+0x218>
    642e:	e0de      	b.n	65ee <__aeabi_dadd+0x3d6>
    6430:	18ba      	adds	r2, r7, r2
    6432:	42ba      	cmp	r2, r7
    6434:	419b      	sbcs	r3, r3
    6436:	1864      	adds	r4, r4, r1
    6438:	425b      	negs	r3, r3
    643a:	18e4      	adds	r4, r4, r3
    643c:	0017      	movs	r7, r2
    643e:	2601      	movs	r6, #1
    6440:	0223      	lsls	r3, r4, #8
    6442:	d5a6      	bpl.n	6392 <__aeabi_dadd+0x17a>
    6444:	2602      	movs	r6, #2
    6446:	e7d5      	b.n	63f4 <__aeabi_dadd+0x1dc>
    6448:	2d00      	cmp	r5, #0
    644a:	d16e      	bne.n	652a <__aeabi_dadd+0x312>
    644c:	1c70      	adds	r0, r6, #1
    644e:	0540      	lsls	r0, r0, #21
    6450:	0d40      	lsrs	r0, r0, #21
    6452:	2801      	cmp	r0, #1
    6454:	dc00      	bgt.n	6458 <__aeabi_dadd+0x240>
    6456:	e0f9      	b.n	664c <__aeabi_dadd+0x434>
    6458:	1ab8      	subs	r0, r7, r2
    645a:	4684      	mov	ip, r0
    645c:	4287      	cmp	r7, r0
    645e:	4180      	sbcs	r0, r0
    6460:	1ae5      	subs	r5, r4, r3
    6462:	4240      	negs	r0, r0
    6464:	1a2d      	subs	r5, r5, r0
    6466:	0228      	lsls	r0, r5, #8
    6468:	d400      	bmi.n	646c <__aeabi_dadd+0x254>
    646a:	e089      	b.n	6580 <__aeabi_dadd+0x368>
    646c:	1bd7      	subs	r7, r2, r7
    646e:	42ba      	cmp	r2, r7
    6470:	4192      	sbcs	r2, r2
    6472:	1b1c      	subs	r4, r3, r4
    6474:	4252      	negs	r2, r2
    6476:	1aa5      	subs	r5, r4, r2
    6478:	46d8      	mov	r8, fp
    647a:	e729      	b.n	62d0 <__aeabi_dadd+0xb8>
    647c:	4645      	mov	r5, r8
    647e:	2400      	movs	r4, #0
    6480:	2700      	movs	r7, #0
    6482:	e76a      	b.n	635a <__aeabi_dadd+0x142>
    6484:	4c45      	ldr	r4, [pc, #276]	; (659c <__aeabi_dadd+0x384>)
    6486:	1af6      	subs	r6, r6, r3
    6488:	402c      	ands	r4, r5
    648a:	e749      	b.n	6320 <__aeabi_dadd+0x108>
    648c:	003d      	movs	r5, r7
    648e:	3828      	subs	r0, #40	; 0x28
    6490:	4085      	lsls	r5, r0
    6492:	2700      	movs	r7, #0
    6494:	e72e      	b.n	62f4 <__aeabi_dadd+0xdc>
    6496:	0038      	movs	r0, r7
    6498:	f001 fbe0 	bl	7c5c <__clzsi2>
    649c:	3020      	adds	r0, #32
    649e:	e71d      	b.n	62dc <__aeabi_dadd+0xc4>
    64a0:	430a      	orrs	r2, r1
    64a2:	1e51      	subs	r1, r2, #1
    64a4:	418a      	sbcs	r2, r1
    64a6:	2100      	movs	r1, #0
    64a8:	e707      	b.n	62ba <__aeabi_dadd+0xa2>
    64aa:	2b00      	cmp	r3, #0
    64ac:	d000      	beq.n	64b0 <__aeabi_dadd+0x298>
    64ae:	e0f3      	b.n	6698 <__aeabi_dadd+0x480>
    64b0:	1c70      	adds	r0, r6, #1
    64b2:	0543      	lsls	r3, r0, #21
    64b4:	0d5b      	lsrs	r3, r3, #21
    64b6:	2b01      	cmp	r3, #1
    64b8:	dc00      	bgt.n	64bc <__aeabi_dadd+0x2a4>
    64ba:	e0ad      	b.n	6618 <__aeabi_dadd+0x400>
    64bc:	4b36      	ldr	r3, [pc, #216]	; (6598 <__aeabi_dadd+0x380>)
    64be:	4298      	cmp	r0, r3
    64c0:	d100      	bne.n	64c4 <__aeabi_dadd+0x2ac>
    64c2:	e0d1      	b.n	6668 <__aeabi_dadd+0x450>
    64c4:	18ba      	adds	r2, r7, r2
    64c6:	42ba      	cmp	r2, r7
    64c8:	41bf      	sbcs	r7, r7
    64ca:	1864      	adds	r4, r4, r1
    64cc:	427f      	negs	r7, r7
    64ce:	19e4      	adds	r4, r4, r7
    64d0:	07e7      	lsls	r7, r4, #31
    64d2:	0852      	lsrs	r2, r2, #1
    64d4:	4317      	orrs	r7, r2
    64d6:	0864      	lsrs	r4, r4, #1
    64d8:	0006      	movs	r6, r0
    64da:	e721      	b.n	6320 <__aeabi_dadd+0x108>
    64dc:	482e      	ldr	r0, [pc, #184]	; (6598 <__aeabi_dadd+0x380>)
    64de:	4285      	cmp	r5, r0
    64e0:	d100      	bne.n	64e4 <__aeabi_dadd+0x2cc>
    64e2:	e093      	b.n	660c <__aeabi_dadd+0x3f4>
    64e4:	001d      	movs	r5, r3
    64e6:	e6d0      	b.n	628a <__aeabi_dadd+0x72>
    64e8:	0029      	movs	r1, r5
    64ea:	3e1f      	subs	r6, #31
    64ec:	40f1      	lsrs	r1, r6
    64ee:	2b20      	cmp	r3, #32
    64f0:	d100      	bne.n	64f4 <__aeabi_dadd+0x2dc>
    64f2:	e08d      	b.n	6610 <__aeabi_dadd+0x3f8>
    64f4:	2240      	movs	r2, #64	; 0x40
    64f6:	1ad3      	subs	r3, r2, r3
    64f8:	409d      	lsls	r5, r3
    64fa:	432f      	orrs	r7, r5
    64fc:	1e7d      	subs	r5, r7, #1
    64fe:	41af      	sbcs	r7, r5
    6500:	2400      	movs	r4, #0
    6502:	430f      	orrs	r7, r1
    6504:	2600      	movs	r6, #0
    6506:	e744      	b.n	6392 <__aeabi_dadd+0x17a>
    6508:	002b      	movs	r3, r5
    650a:	0008      	movs	r0, r1
    650c:	3b20      	subs	r3, #32
    650e:	40d8      	lsrs	r0, r3
    6510:	0003      	movs	r3, r0
    6512:	2d20      	cmp	r5, #32
    6514:	d100      	bne.n	6518 <__aeabi_dadd+0x300>
    6516:	e07d      	b.n	6614 <__aeabi_dadd+0x3fc>
    6518:	2040      	movs	r0, #64	; 0x40
    651a:	1b45      	subs	r5, r0, r5
    651c:	40a9      	lsls	r1, r5
    651e:	430a      	orrs	r2, r1
    6520:	1e51      	subs	r1, r2, #1
    6522:	418a      	sbcs	r2, r1
    6524:	2100      	movs	r1, #0
    6526:	431a      	orrs	r2, r3
    6528:	e6c7      	b.n	62ba <__aeabi_dadd+0xa2>
    652a:	2e00      	cmp	r6, #0
    652c:	d050      	beq.n	65d0 <__aeabi_dadd+0x3b8>
    652e:	4e1a      	ldr	r6, [pc, #104]	; (6598 <__aeabi_dadd+0x380>)
    6530:	42b0      	cmp	r0, r6
    6532:	d057      	beq.n	65e4 <__aeabi_dadd+0x3cc>
    6534:	2680      	movs	r6, #128	; 0x80
    6536:	426b      	negs	r3, r5
    6538:	4699      	mov	r9, r3
    653a:	0436      	lsls	r6, r6, #16
    653c:	4334      	orrs	r4, r6
    653e:	464b      	mov	r3, r9
    6540:	2b38      	cmp	r3, #56	; 0x38
    6542:	dd00      	ble.n	6546 <__aeabi_dadd+0x32e>
    6544:	e0d6      	b.n	66f4 <__aeabi_dadd+0x4dc>
    6546:	2b1f      	cmp	r3, #31
    6548:	dd00      	ble.n	654c <__aeabi_dadd+0x334>
    654a:	e135      	b.n	67b8 <__aeabi_dadd+0x5a0>
    654c:	2620      	movs	r6, #32
    654e:	1af5      	subs	r5, r6, r3
    6550:	0026      	movs	r6, r4
    6552:	40ae      	lsls	r6, r5
    6554:	46b2      	mov	sl, r6
    6556:	003e      	movs	r6, r7
    6558:	40de      	lsrs	r6, r3
    655a:	46ac      	mov	ip, r5
    655c:	0035      	movs	r5, r6
    655e:	4656      	mov	r6, sl
    6560:	432e      	orrs	r6, r5
    6562:	4665      	mov	r5, ip
    6564:	40af      	lsls	r7, r5
    6566:	1e7d      	subs	r5, r7, #1
    6568:	41af      	sbcs	r7, r5
    656a:	40dc      	lsrs	r4, r3
    656c:	4337      	orrs	r7, r6
    656e:	1bd7      	subs	r7, r2, r7
    6570:	42ba      	cmp	r2, r7
    6572:	4192      	sbcs	r2, r2
    6574:	1b0c      	subs	r4, r1, r4
    6576:	4252      	negs	r2, r2
    6578:	1aa4      	subs	r4, r4, r2
    657a:	0006      	movs	r6, r0
    657c:	46d8      	mov	r8, fp
    657e:	e6a3      	b.n	62c8 <__aeabi_dadd+0xb0>
    6580:	4664      	mov	r4, ip
    6582:	4667      	mov	r7, ip
    6584:	432c      	orrs	r4, r5
    6586:	d000      	beq.n	658a <__aeabi_dadd+0x372>
    6588:	e6a2      	b.n	62d0 <__aeabi_dadd+0xb8>
    658a:	2500      	movs	r5, #0
    658c:	2600      	movs	r6, #0
    658e:	2700      	movs	r7, #0
    6590:	e706      	b.n	63a0 <__aeabi_dadd+0x188>
    6592:	001e      	movs	r6, r3
    6594:	e6c4      	b.n	6320 <__aeabi_dadd+0x108>
    6596:	46c0      	nop			; (mov r8, r8)
    6598:	000007ff 	.word	0x000007ff
    659c:	ff7fffff 	.word	0xff7fffff
    65a0:	800fffff 	.word	0x800fffff
    65a4:	2b1f      	cmp	r3, #31
    65a6:	dc63      	bgt.n	6670 <__aeabi_dadd+0x458>
    65a8:	2020      	movs	r0, #32
    65aa:	1ac3      	subs	r3, r0, r3
    65ac:	0008      	movs	r0, r1
    65ae:	4098      	lsls	r0, r3
    65b0:	469c      	mov	ip, r3
    65b2:	4683      	mov	fp, r0
    65b4:	4653      	mov	r3, sl
    65b6:	0010      	movs	r0, r2
    65b8:	40d8      	lsrs	r0, r3
    65ba:	0003      	movs	r3, r0
    65bc:	4658      	mov	r0, fp
    65be:	4318      	orrs	r0, r3
    65c0:	4663      	mov	r3, ip
    65c2:	409a      	lsls	r2, r3
    65c4:	1e53      	subs	r3, r2, #1
    65c6:	419a      	sbcs	r2, r3
    65c8:	4653      	mov	r3, sl
    65ca:	4302      	orrs	r2, r0
    65cc:	40d9      	lsrs	r1, r3
    65ce:	e703      	b.n	63d8 <__aeabi_dadd+0x1c0>
    65d0:	0026      	movs	r6, r4
    65d2:	433e      	orrs	r6, r7
    65d4:	d006      	beq.n	65e4 <__aeabi_dadd+0x3cc>
    65d6:	43eb      	mvns	r3, r5
    65d8:	4699      	mov	r9, r3
    65da:	2b00      	cmp	r3, #0
    65dc:	d0c7      	beq.n	656e <__aeabi_dadd+0x356>
    65de:	4e94      	ldr	r6, [pc, #592]	; (6830 <__aeabi_dadd+0x618>)
    65e0:	42b0      	cmp	r0, r6
    65e2:	d1ac      	bne.n	653e <__aeabi_dadd+0x326>
    65e4:	000c      	movs	r4, r1
    65e6:	0017      	movs	r7, r2
    65e8:	0006      	movs	r6, r0
    65ea:	46d8      	mov	r8, fp
    65ec:	e698      	b.n	6320 <__aeabi_dadd+0x108>
    65ee:	4b90      	ldr	r3, [pc, #576]	; (6830 <__aeabi_dadd+0x618>)
    65f0:	459a      	cmp	sl, r3
    65f2:	d00b      	beq.n	660c <__aeabi_dadd+0x3f4>
    65f4:	4682      	mov	sl, r0
    65f6:	e6e7      	b.n	63c8 <__aeabi_dadd+0x1b0>
    65f8:	2800      	cmp	r0, #0
    65fa:	d000      	beq.n	65fe <__aeabi_dadd+0x3e6>
    65fc:	e09e      	b.n	673c <__aeabi_dadd+0x524>
    65fe:	0018      	movs	r0, r3
    6600:	4310      	orrs	r0, r2
    6602:	d100      	bne.n	6606 <__aeabi_dadd+0x3ee>
    6604:	e0e9      	b.n	67da <__aeabi_dadd+0x5c2>
    6606:	001c      	movs	r4, r3
    6608:	0017      	movs	r7, r2
    660a:	46d8      	mov	r8, fp
    660c:	4e88      	ldr	r6, [pc, #544]	; (6830 <__aeabi_dadd+0x618>)
    660e:	e687      	b.n	6320 <__aeabi_dadd+0x108>
    6610:	2500      	movs	r5, #0
    6612:	e772      	b.n	64fa <__aeabi_dadd+0x2e2>
    6614:	2100      	movs	r1, #0
    6616:	e782      	b.n	651e <__aeabi_dadd+0x306>
    6618:	0023      	movs	r3, r4
    661a:	433b      	orrs	r3, r7
    661c:	2e00      	cmp	r6, #0
    661e:	d000      	beq.n	6622 <__aeabi_dadd+0x40a>
    6620:	e0ab      	b.n	677a <__aeabi_dadd+0x562>
    6622:	2b00      	cmp	r3, #0
    6624:	d100      	bne.n	6628 <__aeabi_dadd+0x410>
    6626:	e0e7      	b.n	67f8 <__aeabi_dadd+0x5e0>
    6628:	000b      	movs	r3, r1
    662a:	4313      	orrs	r3, r2
    662c:	d100      	bne.n	6630 <__aeabi_dadd+0x418>
    662e:	e677      	b.n	6320 <__aeabi_dadd+0x108>
    6630:	18ba      	adds	r2, r7, r2
    6632:	42ba      	cmp	r2, r7
    6634:	41bf      	sbcs	r7, r7
    6636:	1864      	adds	r4, r4, r1
    6638:	427f      	negs	r7, r7
    663a:	19e4      	adds	r4, r4, r7
    663c:	0223      	lsls	r3, r4, #8
    663e:	d400      	bmi.n	6642 <__aeabi_dadd+0x42a>
    6640:	e0f2      	b.n	6828 <__aeabi_dadd+0x610>
    6642:	4b7c      	ldr	r3, [pc, #496]	; (6834 <__aeabi_dadd+0x61c>)
    6644:	0017      	movs	r7, r2
    6646:	401c      	ands	r4, r3
    6648:	0006      	movs	r6, r0
    664a:	e669      	b.n	6320 <__aeabi_dadd+0x108>
    664c:	0020      	movs	r0, r4
    664e:	4338      	orrs	r0, r7
    6650:	2e00      	cmp	r6, #0
    6652:	d1d1      	bne.n	65f8 <__aeabi_dadd+0x3e0>
    6654:	2800      	cmp	r0, #0
    6656:	d15b      	bne.n	6710 <__aeabi_dadd+0x4f8>
    6658:	001c      	movs	r4, r3
    665a:	4314      	orrs	r4, r2
    665c:	d100      	bne.n	6660 <__aeabi_dadd+0x448>
    665e:	e0a8      	b.n	67b2 <__aeabi_dadd+0x59a>
    6660:	001c      	movs	r4, r3
    6662:	0017      	movs	r7, r2
    6664:	46d8      	mov	r8, fp
    6666:	e65b      	b.n	6320 <__aeabi_dadd+0x108>
    6668:	0006      	movs	r6, r0
    666a:	2400      	movs	r4, #0
    666c:	2700      	movs	r7, #0
    666e:	e697      	b.n	63a0 <__aeabi_dadd+0x188>
    6670:	4650      	mov	r0, sl
    6672:	000b      	movs	r3, r1
    6674:	3820      	subs	r0, #32
    6676:	40c3      	lsrs	r3, r0
    6678:	4699      	mov	r9, r3
    667a:	4653      	mov	r3, sl
    667c:	2b20      	cmp	r3, #32
    667e:	d100      	bne.n	6682 <__aeabi_dadd+0x46a>
    6680:	e095      	b.n	67ae <__aeabi_dadd+0x596>
    6682:	2340      	movs	r3, #64	; 0x40
    6684:	4650      	mov	r0, sl
    6686:	1a1b      	subs	r3, r3, r0
    6688:	4099      	lsls	r1, r3
    668a:	430a      	orrs	r2, r1
    668c:	1e51      	subs	r1, r2, #1
    668e:	418a      	sbcs	r2, r1
    6690:	464b      	mov	r3, r9
    6692:	2100      	movs	r1, #0
    6694:	431a      	orrs	r2, r3
    6696:	e69f      	b.n	63d8 <__aeabi_dadd+0x1c0>
    6698:	2e00      	cmp	r6, #0
    669a:	d130      	bne.n	66fe <__aeabi_dadd+0x4e6>
    669c:	0026      	movs	r6, r4
    669e:	433e      	orrs	r6, r7
    66a0:	d067      	beq.n	6772 <__aeabi_dadd+0x55a>
    66a2:	43db      	mvns	r3, r3
    66a4:	469a      	mov	sl, r3
    66a6:	2b00      	cmp	r3, #0
    66a8:	d01c      	beq.n	66e4 <__aeabi_dadd+0x4cc>
    66aa:	4e61      	ldr	r6, [pc, #388]	; (6830 <__aeabi_dadd+0x618>)
    66ac:	42b0      	cmp	r0, r6
    66ae:	d060      	beq.n	6772 <__aeabi_dadd+0x55a>
    66b0:	4653      	mov	r3, sl
    66b2:	2b38      	cmp	r3, #56	; 0x38
    66b4:	dd00      	ble.n	66b8 <__aeabi_dadd+0x4a0>
    66b6:	e096      	b.n	67e6 <__aeabi_dadd+0x5ce>
    66b8:	2b1f      	cmp	r3, #31
    66ba:	dd00      	ble.n	66be <__aeabi_dadd+0x4a6>
    66bc:	e09f      	b.n	67fe <__aeabi_dadd+0x5e6>
    66be:	2620      	movs	r6, #32
    66c0:	1af3      	subs	r3, r6, r3
    66c2:	0026      	movs	r6, r4
    66c4:	409e      	lsls	r6, r3
    66c6:	469c      	mov	ip, r3
    66c8:	46b3      	mov	fp, r6
    66ca:	4653      	mov	r3, sl
    66cc:	003e      	movs	r6, r7
    66ce:	40de      	lsrs	r6, r3
    66d0:	0033      	movs	r3, r6
    66d2:	465e      	mov	r6, fp
    66d4:	431e      	orrs	r6, r3
    66d6:	4663      	mov	r3, ip
    66d8:	409f      	lsls	r7, r3
    66da:	1e7b      	subs	r3, r7, #1
    66dc:	419f      	sbcs	r7, r3
    66de:	4653      	mov	r3, sl
    66e0:	40dc      	lsrs	r4, r3
    66e2:	4337      	orrs	r7, r6
    66e4:	18bf      	adds	r7, r7, r2
    66e6:	4297      	cmp	r7, r2
    66e8:	4192      	sbcs	r2, r2
    66ea:	1864      	adds	r4, r4, r1
    66ec:	4252      	negs	r2, r2
    66ee:	18a4      	adds	r4, r4, r2
    66f0:	0006      	movs	r6, r0
    66f2:	e678      	b.n	63e6 <__aeabi_dadd+0x1ce>
    66f4:	4327      	orrs	r7, r4
    66f6:	1e7c      	subs	r4, r7, #1
    66f8:	41a7      	sbcs	r7, r4
    66fa:	2400      	movs	r4, #0
    66fc:	e737      	b.n	656e <__aeabi_dadd+0x356>
    66fe:	4e4c      	ldr	r6, [pc, #304]	; (6830 <__aeabi_dadd+0x618>)
    6700:	42b0      	cmp	r0, r6
    6702:	d036      	beq.n	6772 <__aeabi_dadd+0x55a>
    6704:	2680      	movs	r6, #128	; 0x80
    6706:	425b      	negs	r3, r3
    6708:	0436      	lsls	r6, r6, #16
    670a:	469a      	mov	sl, r3
    670c:	4334      	orrs	r4, r6
    670e:	e7cf      	b.n	66b0 <__aeabi_dadd+0x498>
    6710:	0018      	movs	r0, r3
    6712:	4310      	orrs	r0, r2
    6714:	d100      	bne.n	6718 <__aeabi_dadd+0x500>
    6716:	e603      	b.n	6320 <__aeabi_dadd+0x108>
    6718:	1ab8      	subs	r0, r7, r2
    671a:	4684      	mov	ip, r0
    671c:	4567      	cmp	r7, ip
    671e:	41ad      	sbcs	r5, r5
    6720:	1ae0      	subs	r0, r4, r3
    6722:	426d      	negs	r5, r5
    6724:	1b40      	subs	r0, r0, r5
    6726:	0205      	lsls	r5, r0, #8
    6728:	d400      	bmi.n	672c <__aeabi_dadd+0x514>
    672a:	e62c      	b.n	6386 <__aeabi_dadd+0x16e>
    672c:	1bd7      	subs	r7, r2, r7
    672e:	42ba      	cmp	r2, r7
    6730:	4192      	sbcs	r2, r2
    6732:	1b1c      	subs	r4, r3, r4
    6734:	4252      	negs	r2, r2
    6736:	1aa4      	subs	r4, r4, r2
    6738:	46d8      	mov	r8, fp
    673a:	e5f1      	b.n	6320 <__aeabi_dadd+0x108>
    673c:	0018      	movs	r0, r3
    673e:	4310      	orrs	r0, r2
    6740:	d100      	bne.n	6744 <__aeabi_dadd+0x52c>
    6742:	e763      	b.n	660c <__aeabi_dadd+0x3f4>
    6744:	08f8      	lsrs	r0, r7, #3
    6746:	0767      	lsls	r7, r4, #29
    6748:	4307      	orrs	r7, r0
    674a:	2080      	movs	r0, #128	; 0x80
    674c:	08e4      	lsrs	r4, r4, #3
    674e:	0300      	lsls	r0, r0, #12
    6750:	4204      	tst	r4, r0
    6752:	d008      	beq.n	6766 <__aeabi_dadd+0x54e>
    6754:	08dd      	lsrs	r5, r3, #3
    6756:	4205      	tst	r5, r0
    6758:	d105      	bne.n	6766 <__aeabi_dadd+0x54e>
    675a:	08d2      	lsrs	r2, r2, #3
    675c:	0759      	lsls	r1, r3, #29
    675e:	4311      	orrs	r1, r2
    6760:	000f      	movs	r7, r1
    6762:	002c      	movs	r4, r5
    6764:	46d8      	mov	r8, fp
    6766:	0f7b      	lsrs	r3, r7, #29
    6768:	00e4      	lsls	r4, r4, #3
    676a:	431c      	orrs	r4, r3
    676c:	00ff      	lsls	r7, r7, #3
    676e:	4e30      	ldr	r6, [pc, #192]	; (6830 <__aeabi_dadd+0x618>)
    6770:	e5d6      	b.n	6320 <__aeabi_dadd+0x108>
    6772:	000c      	movs	r4, r1
    6774:	0017      	movs	r7, r2
    6776:	0006      	movs	r6, r0
    6778:	e5d2      	b.n	6320 <__aeabi_dadd+0x108>
    677a:	2b00      	cmp	r3, #0
    677c:	d038      	beq.n	67f0 <__aeabi_dadd+0x5d8>
    677e:	000b      	movs	r3, r1
    6780:	4313      	orrs	r3, r2
    6782:	d100      	bne.n	6786 <__aeabi_dadd+0x56e>
    6784:	e742      	b.n	660c <__aeabi_dadd+0x3f4>
    6786:	08f8      	lsrs	r0, r7, #3
    6788:	0767      	lsls	r7, r4, #29
    678a:	4307      	orrs	r7, r0
    678c:	2080      	movs	r0, #128	; 0x80
    678e:	08e4      	lsrs	r4, r4, #3
    6790:	0300      	lsls	r0, r0, #12
    6792:	4204      	tst	r4, r0
    6794:	d0e7      	beq.n	6766 <__aeabi_dadd+0x54e>
    6796:	08cb      	lsrs	r3, r1, #3
    6798:	4203      	tst	r3, r0
    679a:	d1e4      	bne.n	6766 <__aeabi_dadd+0x54e>
    679c:	08d2      	lsrs	r2, r2, #3
    679e:	0749      	lsls	r1, r1, #29
    67a0:	4311      	orrs	r1, r2
    67a2:	000f      	movs	r7, r1
    67a4:	001c      	movs	r4, r3
    67a6:	e7de      	b.n	6766 <__aeabi_dadd+0x54e>
    67a8:	2700      	movs	r7, #0
    67aa:	2400      	movs	r4, #0
    67ac:	e5d5      	b.n	635a <__aeabi_dadd+0x142>
    67ae:	2100      	movs	r1, #0
    67b0:	e76b      	b.n	668a <__aeabi_dadd+0x472>
    67b2:	2500      	movs	r5, #0
    67b4:	2700      	movs	r7, #0
    67b6:	e5f3      	b.n	63a0 <__aeabi_dadd+0x188>
    67b8:	464e      	mov	r6, r9
    67ba:	0025      	movs	r5, r4
    67bc:	3e20      	subs	r6, #32
    67be:	40f5      	lsrs	r5, r6
    67c0:	464b      	mov	r3, r9
    67c2:	002e      	movs	r6, r5
    67c4:	2b20      	cmp	r3, #32
    67c6:	d02d      	beq.n	6824 <__aeabi_dadd+0x60c>
    67c8:	2540      	movs	r5, #64	; 0x40
    67ca:	1aed      	subs	r5, r5, r3
    67cc:	40ac      	lsls	r4, r5
    67ce:	4327      	orrs	r7, r4
    67d0:	1e7c      	subs	r4, r7, #1
    67d2:	41a7      	sbcs	r7, r4
    67d4:	2400      	movs	r4, #0
    67d6:	4337      	orrs	r7, r6
    67d8:	e6c9      	b.n	656e <__aeabi_dadd+0x356>
    67da:	2480      	movs	r4, #128	; 0x80
    67dc:	2500      	movs	r5, #0
    67de:	0324      	lsls	r4, r4, #12
    67e0:	4e13      	ldr	r6, [pc, #76]	; (6830 <__aeabi_dadd+0x618>)
    67e2:	2700      	movs	r7, #0
    67e4:	e5dc      	b.n	63a0 <__aeabi_dadd+0x188>
    67e6:	4327      	orrs	r7, r4
    67e8:	1e7c      	subs	r4, r7, #1
    67ea:	41a7      	sbcs	r7, r4
    67ec:	2400      	movs	r4, #0
    67ee:	e779      	b.n	66e4 <__aeabi_dadd+0x4cc>
    67f0:	000c      	movs	r4, r1
    67f2:	0017      	movs	r7, r2
    67f4:	4e0e      	ldr	r6, [pc, #56]	; (6830 <__aeabi_dadd+0x618>)
    67f6:	e593      	b.n	6320 <__aeabi_dadd+0x108>
    67f8:	000c      	movs	r4, r1
    67fa:	0017      	movs	r7, r2
    67fc:	e590      	b.n	6320 <__aeabi_dadd+0x108>
    67fe:	4656      	mov	r6, sl
    6800:	0023      	movs	r3, r4
    6802:	3e20      	subs	r6, #32
    6804:	40f3      	lsrs	r3, r6
    6806:	4699      	mov	r9, r3
    6808:	4653      	mov	r3, sl
    680a:	2b20      	cmp	r3, #32
    680c:	d00e      	beq.n	682c <__aeabi_dadd+0x614>
    680e:	2340      	movs	r3, #64	; 0x40
    6810:	4656      	mov	r6, sl
    6812:	1b9b      	subs	r3, r3, r6
    6814:	409c      	lsls	r4, r3
    6816:	4327      	orrs	r7, r4
    6818:	1e7c      	subs	r4, r7, #1
    681a:	41a7      	sbcs	r7, r4
    681c:	464b      	mov	r3, r9
    681e:	2400      	movs	r4, #0
    6820:	431f      	orrs	r7, r3
    6822:	e75f      	b.n	66e4 <__aeabi_dadd+0x4cc>
    6824:	2400      	movs	r4, #0
    6826:	e7d2      	b.n	67ce <__aeabi_dadd+0x5b6>
    6828:	0017      	movs	r7, r2
    682a:	e5b2      	b.n	6392 <__aeabi_dadd+0x17a>
    682c:	2400      	movs	r4, #0
    682e:	e7f2      	b.n	6816 <__aeabi_dadd+0x5fe>
    6830:	000007ff 	.word	0x000007ff
    6834:	ff7fffff 	.word	0xff7fffff

00006838 <__aeabi_ddiv>:
    6838:	b5f0      	push	{r4, r5, r6, r7, lr}
    683a:	4657      	mov	r7, sl
    683c:	4645      	mov	r5, r8
    683e:	46de      	mov	lr, fp
    6840:	464e      	mov	r6, r9
    6842:	b5e0      	push	{r5, r6, r7, lr}
    6844:	004c      	lsls	r4, r1, #1
    6846:	030e      	lsls	r6, r1, #12
    6848:	b087      	sub	sp, #28
    684a:	4683      	mov	fp, r0
    684c:	4692      	mov	sl, r2
    684e:	001d      	movs	r5, r3
    6850:	4680      	mov	r8, r0
    6852:	0b36      	lsrs	r6, r6, #12
    6854:	0d64      	lsrs	r4, r4, #21
    6856:	0fcf      	lsrs	r7, r1, #31
    6858:	2c00      	cmp	r4, #0
    685a:	d04f      	beq.n	68fc <__aeabi_ddiv+0xc4>
    685c:	4b6f      	ldr	r3, [pc, #444]	; (6a1c <__aeabi_ddiv+0x1e4>)
    685e:	429c      	cmp	r4, r3
    6860:	d035      	beq.n	68ce <__aeabi_ddiv+0x96>
    6862:	2380      	movs	r3, #128	; 0x80
    6864:	0f42      	lsrs	r2, r0, #29
    6866:	041b      	lsls	r3, r3, #16
    6868:	00f6      	lsls	r6, r6, #3
    686a:	4313      	orrs	r3, r2
    686c:	4333      	orrs	r3, r6
    686e:	4699      	mov	r9, r3
    6870:	00c3      	lsls	r3, r0, #3
    6872:	4698      	mov	r8, r3
    6874:	4b6a      	ldr	r3, [pc, #424]	; (6a20 <__aeabi_ddiv+0x1e8>)
    6876:	2600      	movs	r6, #0
    6878:	469c      	mov	ip, r3
    687a:	2300      	movs	r3, #0
    687c:	4464      	add	r4, ip
    687e:	9303      	str	r3, [sp, #12]
    6880:	032b      	lsls	r3, r5, #12
    6882:	0b1b      	lsrs	r3, r3, #12
    6884:	469b      	mov	fp, r3
    6886:	006b      	lsls	r3, r5, #1
    6888:	0fed      	lsrs	r5, r5, #31
    688a:	4650      	mov	r0, sl
    688c:	0d5b      	lsrs	r3, r3, #21
    688e:	9501      	str	r5, [sp, #4]
    6890:	d05e      	beq.n	6950 <__aeabi_ddiv+0x118>
    6892:	4a62      	ldr	r2, [pc, #392]	; (6a1c <__aeabi_ddiv+0x1e4>)
    6894:	4293      	cmp	r3, r2
    6896:	d053      	beq.n	6940 <__aeabi_ddiv+0x108>
    6898:	465a      	mov	r2, fp
    689a:	00d1      	lsls	r1, r2, #3
    689c:	2280      	movs	r2, #128	; 0x80
    689e:	0f40      	lsrs	r0, r0, #29
    68a0:	0412      	lsls	r2, r2, #16
    68a2:	4302      	orrs	r2, r0
    68a4:	430a      	orrs	r2, r1
    68a6:	4693      	mov	fp, r2
    68a8:	4652      	mov	r2, sl
    68aa:	00d1      	lsls	r1, r2, #3
    68ac:	4a5c      	ldr	r2, [pc, #368]	; (6a20 <__aeabi_ddiv+0x1e8>)
    68ae:	4694      	mov	ip, r2
    68b0:	2200      	movs	r2, #0
    68b2:	4463      	add	r3, ip
    68b4:	0038      	movs	r0, r7
    68b6:	4068      	eors	r0, r5
    68b8:	4684      	mov	ip, r0
    68ba:	9002      	str	r0, [sp, #8]
    68bc:	1ae4      	subs	r4, r4, r3
    68be:	4316      	orrs	r6, r2
    68c0:	2e0f      	cmp	r6, #15
    68c2:	d900      	bls.n	68c6 <__aeabi_ddiv+0x8e>
    68c4:	e0b4      	b.n	6a30 <__aeabi_ddiv+0x1f8>
    68c6:	4b57      	ldr	r3, [pc, #348]	; (6a24 <__aeabi_ddiv+0x1ec>)
    68c8:	00b6      	lsls	r6, r6, #2
    68ca:	599b      	ldr	r3, [r3, r6]
    68cc:	469f      	mov	pc, r3
    68ce:	0003      	movs	r3, r0
    68d0:	4333      	orrs	r3, r6
    68d2:	4699      	mov	r9, r3
    68d4:	d16c      	bne.n	69b0 <__aeabi_ddiv+0x178>
    68d6:	2300      	movs	r3, #0
    68d8:	4698      	mov	r8, r3
    68da:	3302      	adds	r3, #2
    68dc:	2608      	movs	r6, #8
    68de:	9303      	str	r3, [sp, #12]
    68e0:	e7ce      	b.n	6880 <__aeabi_ddiv+0x48>
    68e2:	46cb      	mov	fp, r9
    68e4:	4641      	mov	r1, r8
    68e6:	9a03      	ldr	r2, [sp, #12]
    68e8:	9701      	str	r7, [sp, #4]
    68ea:	2a02      	cmp	r2, #2
    68ec:	d165      	bne.n	69ba <__aeabi_ddiv+0x182>
    68ee:	9b01      	ldr	r3, [sp, #4]
    68f0:	4c4a      	ldr	r4, [pc, #296]	; (6a1c <__aeabi_ddiv+0x1e4>)
    68f2:	469c      	mov	ip, r3
    68f4:	2300      	movs	r3, #0
    68f6:	2200      	movs	r2, #0
    68f8:	4698      	mov	r8, r3
    68fa:	e06b      	b.n	69d4 <__aeabi_ddiv+0x19c>
    68fc:	0003      	movs	r3, r0
    68fe:	4333      	orrs	r3, r6
    6900:	4699      	mov	r9, r3
    6902:	d04e      	beq.n	69a2 <__aeabi_ddiv+0x16a>
    6904:	2e00      	cmp	r6, #0
    6906:	d100      	bne.n	690a <__aeabi_ddiv+0xd2>
    6908:	e1bc      	b.n	6c84 <__aeabi_ddiv+0x44c>
    690a:	0030      	movs	r0, r6
    690c:	f001 f9a6 	bl	7c5c <__clzsi2>
    6910:	0003      	movs	r3, r0
    6912:	3b0b      	subs	r3, #11
    6914:	2b1c      	cmp	r3, #28
    6916:	dd00      	ble.n	691a <__aeabi_ddiv+0xe2>
    6918:	e1ac      	b.n	6c74 <__aeabi_ddiv+0x43c>
    691a:	221d      	movs	r2, #29
    691c:	1ad3      	subs	r3, r2, r3
    691e:	465a      	mov	r2, fp
    6920:	0001      	movs	r1, r0
    6922:	40da      	lsrs	r2, r3
    6924:	3908      	subs	r1, #8
    6926:	408e      	lsls	r6, r1
    6928:	0013      	movs	r3, r2
    692a:	4333      	orrs	r3, r6
    692c:	4699      	mov	r9, r3
    692e:	465b      	mov	r3, fp
    6930:	408b      	lsls	r3, r1
    6932:	4698      	mov	r8, r3
    6934:	2300      	movs	r3, #0
    6936:	4c3c      	ldr	r4, [pc, #240]	; (6a28 <__aeabi_ddiv+0x1f0>)
    6938:	2600      	movs	r6, #0
    693a:	1a24      	subs	r4, r4, r0
    693c:	9303      	str	r3, [sp, #12]
    693e:	e79f      	b.n	6880 <__aeabi_ddiv+0x48>
    6940:	4651      	mov	r1, sl
    6942:	465a      	mov	r2, fp
    6944:	4311      	orrs	r1, r2
    6946:	d129      	bne.n	699c <__aeabi_ddiv+0x164>
    6948:	2200      	movs	r2, #0
    694a:	4693      	mov	fp, r2
    694c:	3202      	adds	r2, #2
    694e:	e7b1      	b.n	68b4 <__aeabi_ddiv+0x7c>
    6950:	4659      	mov	r1, fp
    6952:	4301      	orrs	r1, r0
    6954:	d01e      	beq.n	6994 <__aeabi_ddiv+0x15c>
    6956:	465b      	mov	r3, fp
    6958:	2b00      	cmp	r3, #0
    695a:	d100      	bne.n	695e <__aeabi_ddiv+0x126>
    695c:	e19e      	b.n	6c9c <__aeabi_ddiv+0x464>
    695e:	4658      	mov	r0, fp
    6960:	f001 f97c 	bl	7c5c <__clzsi2>
    6964:	0003      	movs	r3, r0
    6966:	3b0b      	subs	r3, #11
    6968:	2b1c      	cmp	r3, #28
    696a:	dd00      	ble.n	696e <__aeabi_ddiv+0x136>
    696c:	e18f      	b.n	6c8e <__aeabi_ddiv+0x456>
    696e:	0002      	movs	r2, r0
    6970:	4659      	mov	r1, fp
    6972:	3a08      	subs	r2, #8
    6974:	4091      	lsls	r1, r2
    6976:	468b      	mov	fp, r1
    6978:	211d      	movs	r1, #29
    697a:	1acb      	subs	r3, r1, r3
    697c:	4651      	mov	r1, sl
    697e:	40d9      	lsrs	r1, r3
    6980:	000b      	movs	r3, r1
    6982:	4659      	mov	r1, fp
    6984:	430b      	orrs	r3, r1
    6986:	4651      	mov	r1, sl
    6988:	469b      	mov	fp, r3
    698a:	4091      	lsls	r1, r2
    698c:	4b26      	ldr	r3, [pc, #152]	; (6a28 <__aeabi_ddiv+0x1f0>)
    698e:	2200      	movs	r2, #0
    6990:	1a1b      	subs	r3, r3, r0
    6992:	e78f      	b.n	68b4 <__aeabi_ddiv+0x7c>
    6994:	2300      	movs	r3, #0
    6996:	2201      	movs	r2, #1
    6998:	469b      	mov	fp, r3
    699a:	e78b      	b.n	68b4 <__aeabi_ddiv+0x7c>
    699c:	4651      	mov	r1, sl
    699e:	2203      	movs	r2, #3
    69a0:	e788      	b.n	68b4 <__aeabi_ddiv+0x7c>
    69a2:	2300      	movs	r3, #0
    69a4:	4698      	mov	r8, r3
    69a6:	3301      	adds	r3, #1
    69a8:	2604      	movs	r6, #4
    69aa:	2400      	movs	r4, #0
    69ac:	9303      	str	r3, [sp, #12]
    69ae:	e767      	b.n	6880 <__aeabi_ddiv+0x48>
    69b0:	2303      	movs	r3, #3
    69b2:	46b1      	mov	r9, r6
    69b4:	9303      	str	r3, [sp, #12]
    69b6:	260c      	movs	r6, #12
    69b8:	e762      	b.n	6880 <__aeabi_ddiv+0x48>
    69ba:	2a03      	cmp	r2, #3
    69bc:	d100      	bne.n	69c0 <__aeabi_ddiv+0x188>
    69be:	e25c      	b.n	6e7a <__aeabi_ddiv+0x642>
    69c0:	9b01      	ldr	r3, [sp, #4]
    69c2:	2a01      	cmp	r2, #1
    69c4:	d000      	beq.n	69c8 <__aeabi_ddiv+0x190>
    69c6:	e1e4      	b.n	6d92 <__aeabi_ddiv+0x55a>
    69c8:	4013      	ands	r3, r2
    69ca:	469c      	mov	ip, r3
    69cc:	2300      	movs	r3, #0
    69ce:	2400      	movs	r4, #0
    69d0:	2200      	movs	r2, #0
    69d2:	4698      	mov	r8, r3
    69d4:	2100      	movs	r1, #0
    69d6:	0312      	lsls	r2, r2, #12
    69d8:	0b13      	lsrs	r3, r2, #12
    69da:	0d0a      	lsrs	r2, r1, #20
    69dc:	0512      	lsls	r2, r2, #20
    69de:	431a      	orrs	r2, r3
    69e0:	0523      	lsls	r3, r4, #20
    69e2:	4c12      	ldr	r4, [pc, #72]	; (6a2c <__aeabi_ddiv+0x1f4>)
    69e4:	4640      	mov	r0, r8
    69e6:	4022      	ands	r2, r4
    69e8:	4313      	orrs	r3, r2
    69ea:	4662      	mov	r2, ip
    69ec:	005b      	lsls	r3, r3, #1
    69ee:	07d2      	lsls	r2, r2, #31
    69f0:	085b      	lsrs	r3, r3, #1
    69f2:	4313      	orrs	r3, r2
    69f4:	0019      	movs	r1, r3
    69f6:	b007      	add	sp, #28
    69f8:	bc3c      	pop	{r2, r3, r4, r5}
    69fa:	4690      	mov	r8, r2
    69fc:	4699      	mov	r9, r3
    69fe:	46a2      	mov	sl, r4
    6a00:	46ab      	mov	fp, r5
    6a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a04:	2300      	movs	r3, #0
    6a06:	2280      	movs	r2, #128	; 0x80
    6a08:	469c      	mov	ip, r3
    6a0a:	0312      	lsls	r2, r2, #12
    6a0c:	4698      	mov	r8, r3
    6a0e:	4c03      	ldr	r4, [pc, #12]	; (6a1c <__aeabi_ddiv+0x1e4>)
    6a10:	e7e0      	b.n	69d4 <__aeabi_ddiv+0x19c>
    6a12:	2300      	movs	r3, #0
    6a14:	4c01      	ldr	r4, [pc, #4]	; (6a1c <__aeabi_ddiv+0x1e4>)
    6a16:	2200      	movs	r2, #0
    6a18:	4698      	mov	r8, r3
    6a1a:	e7db      	b.n	69d4 <__aeabi_ddiv+0x19c>
    6a1c:	000007ff 	.word	0x000007ff
    6a20:	fffffc01 	.word	0xfffffc01
    6a24:	000089b8 	.word	0x000089b8
    6a28:	fffffc0d 	.word	0xfffffc0d
    6a2c:	800fffff 	.word	0x800fffff
    6a30:	45d9      	cmp	r9, fp
    6a32:	d900      	bls.n	6a36 <__aeabi_ddiv+0x1fe>
    6a34:	e139      	b.n	6caa <__aeabi_ddiv+0x472>
    6a36:	d100      	bne.n	6a3a <__aeabi_ddiv+0x202>
    6a38:	e134      	b.n	6ca4 <__aeabi_ddiv+0x46c>
    6a3a:	2300      	movs	r3, #0
    6a3c:	4646      	mov	r6, r8
    6a3e:	464d      	mov	r5, r9
    6a40:	469a      	mov	sl, r3
    6a42:	3c01      	subs	r4, #1
    6a44:	465b      	mov	r3, fp
    6a46:	0e0a      	lsrs	r2, r1, #24
    6a48:	021b      	lsls	r3, r3, #8
    6a4a:	431a      	orrs	r2, r3
    6a4c:	020b      	lsls	r3, r1, #8
    6a4e:	0c17      	lsrs	r7, r2, #16
    6a50:	9303      	str	r3, [sp, #12]
    6a52:	0413      	lsls	r3, r2, #16
    6a54:	0c1b      	lsrs	r3, r3, #16
    6a56:	0039      	movs	r1, r7
    6a58:	0028      	movs	r0, r5
    6a5a:	4690      	mov	r8, r2
    6a5c:	9301      	str	r3, [sp, #4]
    6a5e:	f7fe fdd9 	bl	5614 <__udivsi3>
    6a62:	0002      	movs	r2, r0
    6a64:	9b01      	ldr	r3, [sp, #4]
    6a66:	4683      	mov	fp, r0
    6a68:	435a      	muls	r2, r3
    6a6a:	0028      	movs	r0, r5
    6a6c:	0039      	movs	r1, r7
    6a6e:	4691      	mov	r9, r2
    6a70:	f7fe fe56 	bl	5720 <__aeabi_uidivmod>
    6a74:	0c35      	lsrs	r5, r6, #16
    6a76:	0409      	lsls	r1, r1, #16
    6a78:	430d      	orrs	r5, r1
    6a7a:	45a9      	cmp	r9, r5
    6a7c:	d90d      	bls.n	6a9a <__aeabi_ddiv+0x262>
    6a7e:	465b      	mov	r3, fp
    6a80:	4445      	add	r5, r8
    6a82:	3b01      	subs	r3, #1
    6a84:	45a8      	cmp	r8, r5
    6a86:	d900      	bls.n	6a8a <__aeabi_ddiv+0x252>
    6a88:	e13a      	b.n	6d00 <__aeabi_ddiv+0x4c8>
    6a8a:	45a9      	cmp	r9, r5
    6a8c:	d800      	bhi.n	6a90 <__aeabi_ddiv+0x258>
    6a8e:	e137      	b.n	6d00 <__aeabi_ddiv+0x4c8>
    6a90:	2302      	movs	r3, #2
    6a92:	425b      	negs	r3, r3
    6a94:	469c      	mov	ip, r3
    6a96:	4445      	add	r5, r8
    6a98:	44e3      	add	fp, ip
    6a9a:	464b      	mov	r3, r9
    6a9c:	1aeb      	subs	r3, r5, r3
    6a9e:	0039      	movs	r1, r7
    6aa0:	0018      	movs	r0, r3
    6aa2:	9304      	str	r3, [sp, #16]
    6aa4:	f7fe fdb6 	bl	5614 <__udivsi3>
    6aa8:	9b01      	ldr	r3, [sp, #4]
    6aaa:	0005      	movs	r5, r0
    6aac:	4343      	muls	r3, r0
    6aae:	0039      	movs	r1, r7
    6ab0:	9804      	ldr	r0, [sp, #16]
    6ab2:	4699      	mov	r9, r3
    6ab4:	f7fe fe34 	bl	5720 <__aeabi_uidivmod>
    6ab8:	0433      	lsls	r3, r6, #16
    6aba:	0409      	lsls	r1, r1, #16
    6abc:	0c1b      	lsrs	r3, r3, #16
    6abe:	430b      	orrs	r3, r1
    6ac0:	4599      	cmp	r9, r3
    6ac2:	d909      	bls.n	6ad8 <__aeabi_ddiv+0x2a0>
    6ac4:	4443      	add	r3, r8
    6ac6:	1e6a      	subs	r2, r5, #1
    6ac8:	4598      	cmp	r8, r3
    6aca:	d900      	bls.n	6ace <__aeabi_ddiv+0x296>
    6acc:	e11a      	b.n	6d04 <__aeabi_ddiv+0x4cc>
    6ace:	4599      	cmp	r9, r3
    6ad0:	d800      	bhi.n	6ad4 <__aeabi_ddiv+0x29c>
    6ad2:	e117      	b.n	6d04 <__aeabi_ddiv+0x4cc>
    6ad4:	3d02      	subs	r5, #2
    6ad6:	4443      	add	r3, r8
    6ad8:	464a      	mov	r2, r9
    6ada:	1a9b      	subs	r3, r3, r2
    6adc:	465a      	mov	r2, fp
    6ade:	0412      	lsls	r2, r2, #16
    6ae0:	432a      	orrs	r2, r5
    6ae2:	9903      	ldr	r1, [sp, #12]
    6ae4:	4693      	mov	fp, r2
    6ae6:	0c10      	lsrs	r0, r2, #16
    6ae8:	0c0a      	lsrs	r2, r1, #16
    6aea:	4691      	mov	r9, r2
    6aec:	0409      	lsls	r1, r1, #16
    6aee:	465a      	mov	r2, fp
    6af0:	0c09      	lsrs	r1, r1, #16
    6af2:	464e      	mov	r6, r9
    6af4:	000d      	movs	r5, r1
    6af6:	0412      	lsls	r2, r2, #16
    6af8:	0c12      	lsrs	r2, r2, #16
    6afa:	4345      	muls	r5, r0
    6afc:	9105      	str	r1, [sp, #20]
    6afe:	4351      	muls	r1, r2
    6b00:	4372      	muls	r2, r6
    6b02:	4370      	muls	r0, r6
    6b04:	1952      	adds	r2, r2, r5
    6b06:	0c0e      	lsrs	r6, r1, #16
    6b08:	18b2      	adds	r2, r6, r2
    6b0a:	4295      	cmp	r5, r2
    6b0c:	d903      	bls.n	6b16 <__aeabi_ddiv+0x2de>
    6b0e:	2580      	movs	r5, #128	; 0x80
    6b10:	026d      	lsls	r5, r5, #9
    6b12:	46ac      	mov	ip, r5
    6b14:	4460      	add	r0, ip
    6b16:	0c15      	lsrs	r5, r2, #16
    6b18:	0409      	lsls	r1, r1, #16
    6b1a:	0412      	lsls	r2, r2, #16
    6b1c:	0c09      	lsrs	r1, r1, #16
    6b1e:	1828      	adds	r0, r5, r0
    6b20:	1852      	adds	r2, r2, r1
    6b22:	4283      	cmp	r3, r0
    6b24:	d200      	bcs.n	6b28 <__aeabi_ddiv+0x2f0>
    6b26:	e0ce      	b.n	6cc6 <__aeabi_ddiv+0x48e>
    6b28:	d100      	bne.n	6b2c <__aeabi_ddiv+0x2f4>
    6b2a:	e0c8      	b.n	6cbe <__aeabi_ddiv+0x486>
    6b2c:	1a1d      	subs	r5, r3, r0
    6b2e:	4653      	mov	r3, sl
    6b30:	1a9e      	subs	r6, r3, r2
    6b32:	45b2      	cmp	sl, r6
    6b34:	4192      	sbcs	r2, r2
    6b36:	4252      	negs	r2, r2
    6b38:	1aab      	subs	r3, r5, r2
    6b3a:	469a      	mov	sl, r3
    6b3c:	4598      	cmp	r8, r3
    6b3e:	d100      	bne.n	6b42 <__aeabi_ddiv+0x30a>
    6b40:	e117      	b.n	6d72 <__aeabi_ddiv+0x53a>
    6b42:	0039      	movs	r1, r7
    6b44:	0018      	movs	r0, r3
    6b46:	f7fe fd65 	bl	5614 <__udivsi3>
    6b4a:	9b01      	ldr	r3, [sp, #4]
    6b4c:	0005      	movs	r5, r0
    6b4e:	4343      	muls	r3, r0
    6b50:	0039      	movs	r1, r7
    6b52:	4650      	mov	r0, sl
    6b54:	9304      	str	r3, [sp, #16]
    6b56:	f7fe fde3 	bl	5720 <__aeabi_uidivmod>
    6b5a:	9804      	ldr	r0, [sp, #16]
    6b5c:	040b      	lsls	r3, r1, #16
    6b5e:	0c31      	lsrs	r1, r6, #16
    6b60:	4319      	orrs	r1, r3
    6b62:	4288      	cmp	r0, r1
    6b64:	d909      	bls.n	6b7a <__aeabi_ddiv+0x342>
    6b66:	4441      	add	r1, r8
    6b68:	1e6b      	subs	r3, r5, #1
    6b6a:	4588      	cmp	r8, r1
    6b6c:	d900      	bls.n	6b70 <__aeabi_ddiv+0x338>
    6b6e:	e107      	b.n	6d80 <__aeabi_ddiv+0x548>
    6b70:	4288      	cmp	r0, r1
    6b72:	d800      	bhi.n	6b76 <__aeabi_ddiv+0x33e>
    6b74:	e104      	b.n	6d80 <__aeabi_ddiv+0x548>
    6b76:	3d02      	subs	r5, #2
    6b78:	4441      	add	r1, r8
    6b7a:	9b04      	ldr	r3, [sp, #16]
    6b7c:	1acb      	subs	r3, r1, r3
    6b7e:	0018      	movs	r0, r3
    6b80:	0039      	movs	r1, r7
    6b82:	9304      	str	r3, [sp, #16]
    6b84:	f7fe fd46 	bl	5614 <__udivsi3>
    6b88:	9b01      	ldr	r3, [sp, #4]
    6b8a:	4682      	mov	sl, r0
    6b8c:	4343      	muls	r3, r0
    6b8e:	0039      	movs	r1, r7
    6b90:	9804      	ldr	r0, [sp, #16]
    6b92:	9301      	str	r3, [sp, #4]
    6b94:	f7fe fdc4 	bl	5720 <__aeabi_uidivmod>
    6b98:	9801      	ldr	r0, [sp, #4]
    6b9a:	040b      	lsls	r3, r1, #16
    6b9c:	0431      	lsls	r1, r6, #16
    6b9e:	0c09      	lsrs	r1, r1, #16
    6ba0:	4319      	orrs	r1, r3
    6ba2:	4288      	cmp	r0, r1
    6ba4:	d90d      	bls.n	6bc2 <__aeabi_ddiv+0x38a>
    6ba6:	4653      	mov	r3, sl
    6ba8:	4441      	add	r1, r8
    6baa:	3b01      	subs	r3, #1
    6bac:	4588      	cmp	r8, r1
    6bae:	d900      	bls.n	6bb2 <__aeabi_ddiv+0x37a>
    6bb0:	e0e8      	b.n	6d84 <__aeabi_ddiv+0x54c>
    6bb2:	4288      	cmp	r0, r1
    6bb4:	d800      	bhi.n	6bb8 <__aeabi_ddiv+0x380>
    6bb6:	e0e5      	b.n	6d84 <__aeabi_ddiv+0x54c>
    6bb8:	2302      	movs	r3, #2
    6bba:	425b      	negs	r3, r3
    6bbc:	469c      	mov	ip, r3
    6bbe:	4441      	add	r1, r8
    6bc0:	44e2      	add	sl, ip
    6bc2:	9b01      	ldr	r3, [sp, #4]
    6bc4:	042d      	lsls	r5, r5, #16
    6bc6:	1ace      	subs	r6, r1, r3
    6bc8:	4651      	mov	r1, sl
    6bca:	4329      	orrs	r1, r5
    6bcc:	9d05      	ldr	r5, [sp, #20]
    6bce:	464f      	mov	r7, r9
    6bd0:	002a      	movs	r2, r5
    6bd2:	040b      	lsls	r3, r1, #16
    6bd4:	0c08      	lsrs	r0, r1, #16
    6bd6:	0c1b      	lsrs	r3, r3, #16
    6bd8:	435a      	muls	r2, r3
    6bda:	4345      	muls	r5, r0
    6bdc:	437b      	muls	r3, r7
    6bde:	4378      	muls	r0, r7
    6be0:	195b      	adds	r3, r3, r5
    6be2:	0c17      	lsrs	r7, r2, #16
    6be4:	18fb      	adds	r3, r7, r3
    6be6:	429d      	cmp	r5, r3
    6be8:	d903      	bls.n	6bf2 <__aeabi_ddiv+0x3ba>
    6bea:	2580      	movs	r5, #128	; 0x80
    6bec:	026d      	lsls	r5, r5, #9
    6bee:	46ac      	mov	ip, r5
    6bf0:	4460      	add	r0, ip
    6bf2:	0c1d      	lsrs	r5, r3, #16
    6bf4:	0412      	lsls	r2, r2, #16
    6bf6:	041b      	lsls	r3, r3, #16
    6bf8:	0c12      	lsrs	r2, r2, #16
    6bfa:	1828      	adds	r0, r5, r0
    6bfc:	189b      	adds	r3, r3, r2
    6bfe:	4286      	cmp	r6, r0
    6c00:	d200      	bcs.n	6c04 <__aeabi_ddiv+0x3cc>
    6c02:	e093      	b.n	6d2c <__aeabi_ddiv+0x4f4>
    6c04:	d100      	bne.n	6c08 <__aeabi_ddiv+0x3d0>
    6c06:	e08e      	b.n	6d26 <__aeabi_ddiv+0x4ee>
    6c08:	2301      	movs	r3, #1
    6c0a:	4319      	orrs	r1, r3
    6c0c:	4ba0      	ldr	r3, [pc, #640]	; (6e90 <__aeabi_ddiv+0x658>)
    6c0e:	18e3      	adds	r3, r4, r3
    6c10:	2b00      	cmp	r3, #0
    6c12:	dc00      	bgt.n	6c16 <__aeabi_ddiv+0x3de>
    6c14:	e099      	b.n	6d4a <__aeabi_ddiv+0x512>
    6c16:	074a      	lsls	r2, r1, #29
    6c18:	d000      	beq.n	6c1c <__aeabi_ddiv+0x3e4>
    6c1a:	e09e      	b.n	6d5a <__aeabi_ddiv+0x522>
    6c1c:	465a      	mov	r2, fp
    6c1e:	01d2      	lsls	r2, r2, #7
    6c20:	d506      	bpl.n	6c30 <__aeabi_ddiv+0x3f8>
    6c22:	465a      	mov	r2, fp
    6c24:	4b9b      	ldr	r3, [pc, #620]	; (6e94 <__aeabi_ddiv+0x65c>)
    6c26:	401a      	ands	r2, r3
    6c28:	2380      	movs	r3, #128	; 0x80
    6c2a:	4693      	mov	fp, r2
    6c2c:	00db      	lsls	r3, r3, #3
    6c2e:	18e3      	adds	r3, r4, r3
    6c30:	4a99      	ldr	r2, [pc, #612]	; (6e98 <__aeabi_ddiv+0x660>)
    6c32:	4293      	cmp	r3, r2
    6c34:	dd68      	ble.n	6d08 <__aeabi_ddiv+0x4d0>
    6c36:	2301      	movs	r3, #1
    6c38:	9a02      	ldr	r2, [sp, #8]
    6c3a:	4c98      	ldr	r4, [pc, #608]	; (6e9c <__aeabi_ddiv+0x664>)
    6c3c:	401a      	ands	r2, r3
    6c3e:	2300      	movs	r3, #0
    6c40:	4694      	mov	ip, r2
    6c42:	4698      	mov	r8, r3
    6c44:	2200      	movs	r2, #0
    6c46:	e6c5      	b.n	69d4 <__aeabi_ddiv+0x19c>
    6c48:	2280      	movs	r2, #128	; 0x80
    6c4a:	464b      	mov	r3, r9
    6c4c:	0312      	lsls	r2, r2, #12
    6c4e:	4213      	tst	r3, r2
    6c50:	d00a      	beq.n	6c68 <__aeabi_ddiv+0x430>
    6c52:	465b      	mov	r3, fp
    6c54:	4213      	tst	r3, r2
    6c56:	d106      	bne.n	6c66 <__aeabi_ddiv+0x42e>
    6c58:	431a      	orrs	r2, r3
    6c5a:	0312      	lsls	r2, r2, #12
    6c5c:	0b12      	lsrs	r2, r2, #12
    6c5e:	46ac      	mov	ip, r5
    6c60:	4688      	mov	r8, r1
    6c62:	4c8e      	ldr	r4, [pc, #568]	; (6e9c <__aeabi_ddiv+0x664>)
    6c64:	e6b6      	b.n	69d4 <__aeabi_ddiv+0x19c>
    6c66:	464b      	mov	r3, r9
    6c68:	431a      	orrs	r2, r3
    6c6a:	0312      	lsls	r2, r2, #12
    6c6c:	0b12      	lsrs	r2, r2, #12
    6c6e:	46bc      	mov	ip, r7
    6c70:	4c8a      	ldr	r4, [pc, #552]	; (6e9c <__aeabi_ddiv+0x664>)
    6c72:	e6af      	b.n	69d4 <__aeabi_ddiv+0x19c>
    6c74:	0003      	movs	r3, r0
    6c76:	465a      	mov	r2, fp
    6c78:	3b28      	subs	r3, #40	; 0x28
    6c7a:	409a      	lsls	r2, r3
    6c7c:	2300      	movs	r3, #0
    6c7e:	4691      	mov	r9, r2
    6c80:	4698      	mov	r8, r3
    6c82:	e657      	b.n	6934 <__aeabi_ddiv+0xfc>
    6c84:	4658      	mov	r0, fp
    6c86:	f000 ffe9 	bl	7c5c <__clzsi2>
    6c8a:	3020      	adds	r0, #32
    6c8c:	e640      	b.n	6910 <__aeabi_ddiv+0xd8>
    6c8e:	0003      	movs	r3, r0
    6c90:	4652      	mov	r2, sl
    6c92:	3b28      	subs	r3, #40	; 0x28
    6c94:	409a      	lsls	r2, r3
    6c96:	2100      	movs	r1, #0
    6c98:	4693      	mov	fp, r2
    6c9a:	e677      	b.n	698c <__aeabi_ddiv+0x154>
    6c9c:	f000 ffde 	bl	7c5c <__clzsi2>
    6ca0:	3020      	adds	r0, #32
    6ca2:	e65f      	b.n	6964 <__aeabi_ddiv+0x12c>
    6ca4:	4588      	cmp	r8, r1
    6ca6:	d200      	bcs.n	6caa <__aeabi_ddiv+0x472>
    6ca8:	e6c7      	b.n	6a3a <__aeabi_ddiv+0x202>
    6caa:	464b      	mov	r3, r9
    6cac:	07de      	lsls	r6, r3, #31
    6cae:	085d      	lsrs	r5, r3, #1
    6cb0:	4643      	mov	r3, r8
    6cb2:	085b      	lsrs	r3, r3, #1
    6cb4:	431e      	orrs	r6, r3
    6cb6:	4643      	mov	r3, r8
    6cb8:	07db      	lsls	r3, r3, #31
    6cba:	469a      	mov	sl, r3
    6cbc:	e6c2      	b.n	6a44 <__aeabi_ddiv+0x20c>
    6cbe:	2500      	movs	r5, #0
    6cc0:	4592      	cmp	sl, r2
    6cc2:	d300      	bcc.n	6cc6 <__aeabi_ddiv+0x48e>
    6cc4:	e733      	b.n	6b2e <__aeabi_ddiv+0x2f6>
    6cc6:	9e03      	ldr	r6, [sp, #12]
    6cc8:	4659      	mov	r1, fp
    6cca:	46b4      	mov	ip, r6
    6ccc:	44e2      	add	sl, ip
    6cce:	45b2      	cmp	sl, r6
    6cd0:	41ad      	sbcs	r5, r5
    6cd2:	426d      	negs	r5, r5
    6cd4:	4445      	add	r5, r8
    6cd6:	18eb      	adds	r3, r5, r3
    6cd8:	3901      	subs	r1, #1
    6cda:	4598      	cmp	r8, r3
    6cdc:	d207      	bcs.n	6cee <__aeabi_ddiv+0x4b6>
    6cde:	4298      	cmp	r0, r3
    6ce0:	d900      	bls.n	6ce4 <__aeabi_ddiv+0x4ac>
    6ce2:	e07f      	b.n	6de4 <__aeabi_ddiv+0x5ac>
    6ce4:	d100      	bne.n	6ce8 <__aeabi_ddiv+0x4b0>
    6ce6:	e0bc      	b.n	6e62 <__aeabi_ddiv+0x62a>
    6ce8:	1a1d      	subs	r5, r3, r0
    6cea:	468b      	mov	fp, r1
    6cec:	e71f      	b.n	6b2e <__aeabi_ddiv+0x2f6>
    6cee:	4598      	cmp	r8, r3
    6cf0:	d1fa      	bne.n	6ce8 <__aeabi_ddiv+0x4b0>
    6cf2:	9d03      	ldr	r5, [sp, #12]
    6cf4:	4555      	cmp	r5, sl
    6cf6:	d9f2      	bls.n	6cde <__aeabi_ddiv+0x4a6>
    6cf8:	4643      	mov	r3, r8
    6cfa:	468b      	mov	fp, r1
    6cfc:	1a1d      	subs	r5, r3, r0
    6cfe:	e716      	b.n	6b2e <__aeabi_ddiv+0x2f6>
    6d00:	469b      	mov	fp, r3
    6d02:	e6ca      	b.n	6a9a <__aeabi_ddiv+0x262>
    6d04:	0015      	movs	r5, r2
    6d06:	e6e7      	b.n	6ad8 <__aeabi_ddiv+0x2a0>
    6d08:	465a      	mov	r2, fp
    6d0a:	08c9      	lsrs	r1, r1, #3
    6d0c:	0752      	lsls	r2, r2, #29
    6d0e:	430a      	orrs	r2, r1
    6d10:	055b      	lsls	r3, r3, #21
    6d12:	4690      	mov	r8, r2
    6d14:	0d5c      	lsrs	r4, r3, #21
    6d16:	465a      	mov	r2, fp
    6d18:	2301      	movs	r3, #1
    6d1a:	9902      	ldr	r1, [sp, #8]
    6d1c:	0252      	lsls	r2, r2, #9
    6d1e:	4019      	ands	r1, r3
    6d20:	0b12      	lsrs	r2, r2, #12
    6d22:	468c      	mov	ip, r1
    6d24:	e656      	b.n	69d4 <__aeabi_ddiv+0x19c>
    6d26:	2b00      	cmp	r3, #0
    6d28:	d100      	bne.n	6d2c <__aeabi_ddiv+0x4f4>
    6d2a:	e76f      	b.n	6c0c <__aeabi_ddiv+0x3d4>
    6d2c:	4446      	add	r6, r8
    6d2e:	1e4a      	subs	r2, r1, #1
    6d30:	45b0      	cmp	r8, r6
    6d32:	d929      	bls.n	6d88 <__aeabi_ddiv+0x550>
    6d34:	0011      	movs	r1, r2
    6d36:	4286      	cmp	r6, r0
    6d38:	d000      	beq.n	6d3c <__aeabi_ddiv+0x504>
    6d3a:	e765      	b.n	6c08 <__aeabi_ddiv+0x3d0>
    6d3c:	9a03      	ldr	r2, [sp, #12]
    6d3e:	4293      	cmp	r3, r2
    6d40:	d000      	beq.n	6d44 <__aeabi_ddiv+0x50c>
    6d42:	e761      	b.n	6c08 <__aeabi_ddiv+0x3d0>
    6d44:	e762      	b.n	6c0c <__aeabi_ddiv+0x3d4>
    6d46:	2101      	movs	r1, #1
    6d48:	4249      	negs	r1, r1
    6d4a:	2001      	movs	r0, #1
    6d4c:	1ac2      	subs	r2, r0, r3
    6d4e:	2a38      	cmp	r2, #56	; 0x38
    6d50:	dd21      	ble.n	6d96 <__aeabi_ddiv+0x55e>
    6d52:	9b02      	ldr	r3, [sp, #8]
    6d54:	4003      	ands	r3, r0
    6d56:	469c      	mov	ip, r3
    6d58:	e638      	b.n	69cc <__aeabi_ddiv+0x194>
    6d5a:	220f      	movs	r2, #15
    6d5c:	400a      	ands	r2, r1
    6d5e:	2a04      	cmp	r2, #4
    6d60:	d100      	bne.n	6d64 <__aeabi_ddiv+0x52c>
    6d62:	e75b      	b.n	6c1c <__aeabi_ddiv+0x3e4>
    6d64:	000a      	movs	r2, r1
    6d66:	1d11      	adds	r1, r2, #4
    6d68:	4291      	cmp	r1, r2
    6d6a:	4192      	sbcs	r2, r2
    6d6c:	4252      	negs	r2, r2
    6d6e:	4493      	add	fp, r2
    6d70:	e754      	b.n	6c1c <__aeabi_ddiv+0x3e4>
    6d72:	4b47      	ldr	r3, [pc, #284]	; (6e90 <__aeabi_ddiv+0x658>)
    6d74:	18e3      	adds	r3, r4, r3
    6d76:	2b00      	cmp	r3, #0
    6d78:	dde5      	ble.n	6d46 <__aeabi_ddiv+0x50e>
    6d7a:	2201      	movs	r2, #1
    6d7c:	4252      	negs	r2, r2
    6d7e:	e7f2      	b.n	6d66 <__aeabi_ddiv+0x52e>
    6d80:	001d      	movs	r5, r3
    6d82:	e6fa      	b.n	6b7a <__aeabi_ddiv+0x342>
    6d84:	469a      	mov	sl, r3
    6d86:	e71c      	b.n	6bc2 <__aeabi_ddiv+0x38a>
    6d88:	42b0      	cmp	r0, r6
    6d8a:	d839      	bhi.n	6e00 <__aeabi_ddiv+0x5c8>
    6d8c:	d06e      	beq.n	6e6c <__aeabi_ddiv+0x634>
    6d8e:	0011      	movs	r1, r2
    6d90:	e73a      	b.n	6c08 <__aeabi_ddiv+0x3d0>
    6d92:	9302      	str	r3, [sp, #8]
    6d94:	e73a      	b.n	6c0c <__aeabi_ddiv+0x3d4>
    6d96:	2a1f      	cmp	r2, #31
    6d98:	dc3c      	bgt.n	6e14 <__aeabi_ddiv+0x5dc>
    6d9a:	2320      	movs	r3, #32
    6d9c:	1a9b      	subs	r3, r3, r2
    6d9e:	000c      	movs	r4, r1
    6da0:	4658      	mov	r0, fp
    6da2:	4099      	lsls	r1, r3
    6da4:	4098      	lsls	r0, r3
    6da6:	1e4b      	subs	r3, r1, #1
    6da8:	4199      	sbcs	r1, r3
    6daa:	465b      	mov	r3, fp
    6dac:	40d4      	lsrs	r4, r2
    6dae:	40d3      	lsrs	r3, r2
    6db0:	4320      	orrs	r0, r4
    6db2:	4308      	orrs	r0, r1
    6db4:	001a      	movs	r2, r3
    6db6:	0743      	lsls	r3, r0, #29
    6db8:	d009      	beq.n	6dce <__aeabi_ddiv+0x596>
    6dba:	230f      	movs	r3, #15
    6dbc:	4003      	ands	r3, r0
    6dbe:	2b04      	cmp	r3, #4
    6dc0:	d005      	beq.n	6dce <__aeabi_ddiv+0x596>
    6dc2:	0001      	movs	r1, r0
    6dc4:	1d08      	adds	r0, r1, #4
    6dc6:	4288      	cmp	r0, r1
    6dc8:	419b      	sbcs	r3, r3
    6dca:	425b      	negs	r3, r3
    6dcc:	18d2      	adds	r2, r2, r3
    6dce:	0213      	lsls	r3, r2, #8
    6dd0:	d53a      	bpl.n	6e48 <__aeabi_ddiv+0x610>
    6dd2:	2301      	movs	r3, #1
    6dd4:	9a02      	ldr	r2, [sp, #8]
    6dd6:	2401      	movs	r4, #1
    6dd8:	401a      	ands	r2, r3
    6dda:	2300      	movs	r3, #0
    6ddc:	4694      	mov	ip, r2
    6dde:	4698      	mov	r8, r3
    6de0:	2200      	movs	r2, #0
    6de2:	e5f7      	b.n	69d4 <__aeabi_ddiv+0x19c>
    6de4:	2102      	movs	r1, #2
    6de6:	4249      	negs	r1, r1
    6de8:	468c      	mov	ip, r1
    6dea:	9d03      	ldr	r5, [sp, #12]
    6dec:	44e3      	add	fp, ip
    6dee:	46ac      	mov	ip, r5
    6df0:	44e2      	add	sl, ip
    6df2:	45aa      	cmp	sl, r5
    6df4:	41ad      	sbcs	r5, r5
    6df6:	426d      	negs	r5, r5
    6df8:	4445      	add	r5, r8
    6dfa:	18ed      	adds	r5, r5, r3
    6dfc:	1a2d      	subs	r5, r5, r0
    6dfe:	e696      	b.n	6b2e <__aeabi_ddiv+0x2f6>
    6e00:	1e8a      	subs	r2, r1, #2
    6e02:	9903      	ldr	r1, [sp, #12]
    6e04:	004d      	lsls	r5, r1, #1
    6e06:	428d      	cmp	r5, r1
    6e08:	4189      	sbcs	r1, r1
    6e0a:	4249      	negs	r1, r1
    6e0c:	4441      	add	r1, r8
    6e0e:	1876      	adds	r6, r6, r1
    6e10:	9503      	str	r5, [sp, #12]
    6e12:	e78f      	b.n	6d34 <__aeabi_ddiv+0x4fc>
    6e14:	201f      	movs	r0, #31
    6e16:	4240      	negs	r0, r0
    6e18:	1ac3      	subs	r3, r0, r3
    6e1a:	4658      	mov	r0, fp
    6e1c:	40d8      	lsrs	r0, r3
    6e1e:	0003      	movs	r3, r0
    6e20:	2a20      	cmp	r2, #32
    6e22:	d028      	beq.n	6e76 <__aeabi_ddiv+0x63e>
    6e24:	2040      	movs	r0, #64	; 0x40
    6e26:	465d      	mov	r5, fp
    6e28:	1a82      	subs	r2, r0, r2
    6e2a:	4095      	lsls	r5, r2
    6e2c:	4329      	orrs	r1, r5
    6e2e:	1e4a      	subs	r2, r1, #1
    6e30:	4191      	sbcs	r1, r2
    6e32:	4319      	orrs	r1, r3
    6e34:	2307      	movs	r3, #7
    6e36:	2200      	movs	r2, #0
    6e38:	400b      	ands	r3, r1
    6e3a:	d009      	beq.n	6e50 <__aeabi_ddiv+0x618>
    6e3c:	230f      	movs	r3, #15
    6e3e:	2200      	movs	r2, #0
    6e40:	400b      	ands	r3, r1
    6e42:	0008      	movs	r0, r1
    6e44:	2b04      	cmp	r3, #4
    6e46:	d1bd      	bne.n	6dc4 <__aeabi_ddiv+0x58c>
    6e48:	0001      	movs	r1, r0
    6e4a:	0753      	lsls	r3, r2, #29
    6e4c:	0252      	lsls	r2, r2, #9
    6e4e:	0b12      	lsrs	r2, r2, #12
    6e50:	08c9      	lsrs	r1, r1, #3
    6e52:	4319      	orrs	r1, r3
    6e54:	2301      	movs	r3, #1
    6e56:	4688      	mov	r8, r1
    6e58:	9902      	ldr	r1, [sp, #8]
    6e5a:	2400      	movs	r4, #0
    6e5c:	4019      	ands	r1, r3
    6e5e:	468c      	mov	ip, r1
    6e60:	e5b8      	b.n	69d4 <__aeabi_ddiv+0x19c>
    6e62:	4552      	cmp	r2, sl
    6e64:	d8be      	bhi.n	6de4 <__aeabi_ddiv+0x5ac>
    6e66:	468b      	mov	fp, r1
    6e68:	2500      	movs	r5, #0
    6e6a:	e660      	b.n	6b2e <__aeabi_ddiv+0x2f6>
    6e6c:	9d03      	ldr	r5, [sp, #12]
    6e6e:	429d      	cmp	r5, r3
    6e70:	d3c6      	bcc.n	6e00 <__aeabi_ddiv+0x5c8>
    6e72:	0011      	movs	r1, r2
    6e74:	e762      	b.n	6d3c <__aeabi_ddiv+0x504>
    6e76:	2500      	movs	r5, #0
    6e78:	e7d8      	b.n	6e2c <__aeabi_ddiv+0x5f4>
    6e7a:	2280      	movs	r2, #128	; 0x80
    6e7c:	465b      	mov	r3, fp
    6e7e:	0312      	lsls	r2, r2, #12
    6e80:	431a      	orrs	r2, r3
    6e82:	9b01      	ldr	r3, [sp, #4]
    6e84:	0312      	lsls	r2, r2, #12
    6e86:	0b12      	lsrs	r2, r2, #12
    6e88:	469c      	mov	ip, r3
    6e8a:	4688      	mov	r8, r1
    6e8c:	4c03      	ldr	r4, [pc, #12]	; (6e9c <__aeabi_ddiv+0x664>)
    6e8e:	e5a1      	b.n	69d4 <__aeabi_ddiv+0x19c>
    6e90:	000003ff 	.word	0x000003ff
    6e94:	feffffff 	.word	0xfeffffff
    6e98:	000007fe 	.word	0x000007fe
    6e9c:	000007ff 	.word	0x000007ff

00006ea0 <__aeabi_dmul>:
    6ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ea2:	4657      	mov	r7, sl
    6ea4:	4645      	mov	r5, r8
    6ea6:	46de      	mov	lr, fp
    6ea8:	464e      	mov	r6, r9
    6eaa:	b5e0      	push	{r5, r6, r7, lr}
    6eac:	030c      	lsls	r4, r1, #12
    6eae:	4698      	mov	r8, r3
    6eb0:	004e      	lsls	r6, r1, #1
    6eb2:	0b23      	lsrs	r3, r4, #12
    6eb4:	b087      	sub	sp, #28
    6eb6:	0007      	movs	r7, r0
    6eb8:	4692      	mov	sl, r2
    6eba:	469b      	mov	fp, r3
    6ebc:	0d76      	lsrs	r6, r6, #21
    6ebe:	0fcd      	lsrs	r5, r1, #31
    6ec0:	2e00      	cmp	r6, #0
    6ec2:	d06b      	beq.n	6f9c <__aeabi_dmul+0xfc>
    6ec4:	4b6d      	ldr	r3, [pc, #436]	; (707c <__aeabi_dmul+0x1dc>)
    6ec6:	429e      	cmp	r6, r3
    6ec8:	d035      	beq.n	6f36 <__aeabi_dmul+0x96>
    6eca:	2480      	movs	r4, #128	; 0x80
    6ecc:	465b      	mov	r3, fp
    6ece:	0f42      	lsrs	r2, r0, #29
    6ed0:	0424      	lsls	r4, r4, #16
    6ed2:	00db      	lsls	r3, r3, #3
    6ed4:	4314      	orrs	r4, r2
    6ed6:	431c      	orrs	r4, r3
    6ed8:	00c3      	lsls	r3, r0, #3
    6eda:	4699      	mov	r9, r3
    6edc:	4b68      	ldr	r3, [pc, #416]	; (7080 <__aeabi_dmul+0x1e0>)
    6ede:	46a3      	mov	fp, r4
    6ee0:	469c      	mov	ip, r3
    6ee2:	2300      	movs	r3, #0
    6ee4:	2700      	movs	r7, #0
    6ee6:	4466      	add	r6, ip
    6ee8:	9302      	str	r3, [sp, #8]
    6eea:	4643      	mov	r3, r8
    6eec:	031c      	lsls	r4, r3, #12
    6eee:	005a      	lsls	r2, r3, #1
    6ef0:	0fdb      	lsrs	r3, r3, #31
    6ef2:	4650      	mov	r0, sl
    6ef4:	0b24      	lsrs	r4, r4, #12
    6ef6:	0d52      	lsrs	r2, r2, #21
    6ef8:	4698      	mov	r8, r3
    6efa:	d100      	bne.n	6efe <__aeabi_dmul+0x5e>
    6efc:	e076      	b.n	6fec <__aeabi_dmul+0x14c>
    6efe:	4b5f      	ldr	r3, [pc, #380]	; (707c <__aeabi_dmul+0x1dc>)
    6f00:	429a      	cmp	r2, r3
    6f02:	d06d      	beq.n	6fe0 <__aeabi_dmul+0x140>
    6f04:	2380      	movs	r3, #128	; 0x80
    6f06:	0f41      	lsrs	r1, r0, #29
    6f08:	041b      	lsls	r3, r3, #16
    6f0a:	430b      	orrs	r3, r1
    6f0c:	495c      	ldr	r1, [pc, #368]	; (7080 <__aeabi_dmul+0x1e0>)
    6f0e:	00e4      	lsls	r4, r4, #3
    6f10:	468c      	mov	ip, r1
    6f12:	431c      	orrs	r4, r3
    6f14:	00c3      	lsls	r3, r0, #3
    6f16:	2000      	movs	r0, #0
    6f18:	4462      	add	r2, ip
    6f1a:	4641      	mov	r1, r8
    6f1c:	18b6      	adds	r6, r6, r2
    6f1e:	4069      	eors	r1, r5
    6f20:	1c72      	adds	r2, r6, #1
    6f22:	9101      	str	r1, [sp, #4]
    6f24:	4694      	mov	ip, r2
    6f26:	4307      	orrs	r7, r0
    6f28:	2f0f      	cmp	r7, #15
    6f2a:	d900      	bls.n	6f2e <__aeabi_dmul+0x8e>
    6f2c:	e0b0      	b.n	7090 <__aeabi_dmul+0x1f0>
    6f2e:	4a55      	ldr	r2, [pc, #340]	; (7084 <__aeabi_dmul+0x1e4>)
    6f30:	00bf      	lsls	r7, r7, #2
    6f32:	59d2      	ldr	r2, [r2, r7]
    6f34:	4697      	mov	pc, r2
    6f36:	465b      	mov	r3, fp
    6f38:	4303      	orrs	r3, r0
    6f3a:	4699      	mov	r9, r3
    6f3c:	d000      	beq.n	6f40 <__aeabi_dmul+0xa0>
    6f3e:	e087      	b.n	7050 <__aeabi_dmul+0x1b0>
    6f40:	2300      	movs	r3, #0
    6f42:	469b      	mov	fp, r3
    6f44:	3302      	adds	r3, #2
    6f46:	2708      	movs	r7, #8
    6f48:	9302      	str	r3, [sp, #8]
    6f4a:	e7ce      	b.n	6eea <__aeabi_dmul+0x4a>
    6f4c:	4642      	mov	r2, r8
    6f4e:	9201      	str	r2, [sp, #4]
    6f50:	2802      	cmp	r0, #2
    6f52:	d067      	beq.n	7024 <__aeabi_dmul+0x184>
    6f54:	2803      	cmp	r0, #3
    6f56:	d100      	bne.n	6f5a <__aeabi_dmul+0xba>
    6f58:	e20e      	b.n	7378 <__aeabi_dmul+0x4d8>
    6f5a:	2801      	cmp	r0, #1
    6f5c:	d000      	beq.n	6f60 <__aeabi_dmul+0xc0>
    6f5e:	e162      	b.n	7226 <__aeabi_dmul+0x386>
    6f60:	2300      	movs	r3, #0
    6f62:	2400      	movs	r4, #0
    6f64:	2200      	movs	r2, #0
    6f66:	4699      	mov	r9, r3
    6f68:	9901      	ldr	r1, [sp, #4]
    6f6a:	4001      	ands	r1, r0
    6f6c:	b2cd      	uxtb	r5, r1
    6f6e:	2100      	movs	r1, #0
    6f70:	0312      	lsls	r2, r2, #12
    6f72:	0d0b      	lsrs	r3, r1, #20
    6f74:	0b12      	lsrs	r2, r2, #12
    6f76:	051b      	lsls	r3, r3, #20
    6f78:	4313      	orrs	r3, r2
    6f7a:	4a43      	ldr	r2, [pc, #268]	; (7088 <__aeabi_dmul+0x1e8>)
    6f7c:	0524      	lsls	r4, r4, #20
    6f7e:	4013      	ands	r3, r2
    6f80:	431c      	orrs	r4, r3
    6f82:	0064      	lsls	r4, r4, #1
    6f84:	07ed      	lsls	r5, r5, #31
    6f86:	0864      	lsrs	r4, r4, #1
    6f88:	432c      	orrs	r4, r5
    6f8a:	4648      	mov	r0, r9
    6f8c:	0021      	movs	r1, r4
    6f8e:	b007      	add	sp, #28
    6f90:	bc3c      	pop	{r2, r3, r4, r5}
    6f92:	4690      	mov	r8, r2
    6f94:	4699      	mov	r9, r3
    6f96:	46a2      	mov	sl, r4
    6f98:	46ab      	mov	fp, r5
    6f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f9c:	4303      	orrs	r3, r0
    6f9e:	4699      	mov	r9, r3
    6fa0:	d04f      	beq.n	7042 <__aeabi_dmul+0x1a2>
    6fa2:	465b      	mov	r3, fp
    6fa4:	2b00      	cmp	r3, #0
    6fa6:	d100      	bne.n	6faa <__aeabi_dmul+0x10a>
    6fa8:	e189      	b.n	72be <__aeabi_dmul+0x41e>
    6faa:	4658      	mov	r0, fp
    6fac:	f000 fe56 	bl	7c5c <__clzsi2>
    6fb0:	0003      	movs	r3, r0
    6fb2:	3b0b      	subs	r3, #11
    6fb4:	2b1c      	cmp	r3, #28
    6fb6:	dd00      	ble.n	6fba <__aeabi_dmul+0x11a>
    6fb8:	e17a      	b.n	72b0 <__aeabi_dmul+0x410>
    6fba:	221d      	movs	r2, #29
    6fbc:	1ad3      	subs	r3, r2, r3
    6fbe:	003a      	movs	r2, r7
    6fc0:	0001      	movs	r1, r0
    6fc2:	465c      	mov	r4, fp
    6fc4:	40da      	lsrs	r2, r3
    6fc6:	3908      	subs	r1, #8
    6fc8:	408c      	lsls	r4, r1
    6fca:	0013      	movs	r3, r2
    6fcc:	408f      	lsls	r7, r1
    6fce:	4323      	orrs	r3, r4
    6fd0:	469b      	mov	fp, r3
    6fd2:	46b9      	mov	r9, r7
    6fd4:	2300      	movs	r3, #0
    6fd6:	4e2d      	ldr	r6, [pc, #180]	; (708c <__aeabi_dmul+0x1ec>)
    6fd8:	2700      	movs	r7, #0
    6fda:	1a36      	subs	r6, r6, r0
    6fdc:	9302      	str	r3, [sp, #8]
    6fde:	e784      	b.n	6eea <__aeabi_dmul+0x4a>
    6fe0:	4653      	mov	r3, sl
    6fe2:	4323      	orrs	r3, r4
    6fe4:	d12a      	bne.n	703c <__aeabi_dmul+0x19c>
    6fe6:	2400      	movs	r4, #0
    6fe8:	2002      	movs	r0, #2
    6fea:	e796      	b.n	6f1a <__aeabi_dmul+0x7a>
    6fec:	4653      	mov	r3, sl
    6fee:	4323      	orrs	r3, r4
    6ff0:	d020      	beq.n	7034 <__aeabi_dmul+0x194>
    6ff2:	2c00      	cmp	r4, #0
    6ff4:	d100      	bne.n	6ff8 <__aeabi_dmul+0x158>
    6ff6:	e157      	b.n	72a8 <__aeabi_dmul+0x408>
    6ff8:	0020      	movs	r0, r4
    6ffa:	f000 fe2f 	bl	7c5c <__clzsi2>
    6ffe:	0003      	movs	r3, r0
    7000:	3b0b      	subs	r3, #11
    7002:	2b1c      	cmp	r3, #28
    7004:	dd00      	ble.n	7008 <__aeabi_dmul+0x168>
    7006:	e149      	b.n	729c <__aeabi_dmul+0x3fc>
    7008:	211d      	movs	r1, #29
    700a:	1acb      	subs	r3, r1, r3
    700c:	4651      	mov	r1, sl
    700e:	0002      	movs	r2, r0
    7010:	40d9      	lsrs	r1, r3
    7012:	4653      	mov	r3, sl
    7014:	3a08      	subs	r2, #8
    7016:	4094      	lsls	r4, r2
    7018:	4093      	lsls	r3, r2
    701a:	430c      	orrs	r4, r1
    701c:	4a1b      	ldr	r2, [pc, #108]	; (708c <__aeabi_dmul+0x1ec>)
    701e:	1a12      	subs	r2, r2, r0
    7020:	2000      	movs	r0, #0
    7022:	e77a      	b.n	6f1a <__aeabi_dmul+0x7a>
    7024:	2501      	movs	r5, #1
    7026:	9b01      	ldr	r3, [sp, #4]
    7028:	4c14      	ldr	r4, [pc, #80]	; (707c <__aeabi_dmul+0x1dc>)
    702a:	401d      	ands	r5, r3
    702c:	2300      	movs	r3, #0
    702e:	2200      	movs	r2, #0
    7030:	4699      	mov	r9, r3
    7032:	e79c      	b.n	6f6e <__aeabi_dmul+0xce>
    7034:	2400      	movs	r4, #0
    7036:	2200      	movs	r2, #0
    7038:	2001      	movs	r0, #1
    703a:	e76e      	b.n	6f1a <__aeabi_dmul+0x7a>
    703c:	4653      	mov	r3, sl
    703e:	2003      	movs	r0, #3
    7040:	e76b      	b.n	6f1a <__aeabi_dmul+0x7a>
    7042:	2300      	movs	r3, #0
    7044:	469b      	mov	fp, r3
    7046:	3301      	adds	r3, #1
    7048:	2704      	movs	r7, #4
    704a:	2600      	movs	r6, #0
    704c:	9302      	str	r3, [sp, #8]
    704e:	e74c      	b.n	6eea <__aeabi_dmul+0x4a>
    7050:	2303      	movs	r3, #3
    7052:	4681      	mov	r9, r0
    7054:	270c      	movs	r7, #12
    7056:	9302      	str	r3, [sp, #8]
    7058:	e747      	b.n	6eea <__aeabi_dmul+0x4a>
    705a:	2280      	movs	r2, #128	; 0x80
    705c:	2300      	movs	r3, #0
    705e:	2500      	movs	r5, #0
    7060:	0312      	lsls	r2, r2, #12
    7062:	4699      	mov	r9, r3
    7064:	4c05      	ldr	r4, [pc, #20]	; (707c <__aeabi_dmul+0x1dc>)
    7066:	e782      	b.n	6f6e <__aeabi_dmul+0xce>
    7068:	465c      	mov	r4, fp
    706a:	464b      	mov	r3, r9
    706c:	9802      	ldr	r0, [sp, #8]
    706e:	e76f      	b.n	6f50 <__aeabi_dmul+0xb0>
    7070:	465c      	mov	r4, fp
    7072:	464b      	mov	r3, r9
    7074:	9501      	str	r5, [sp, #4]
    7076:	9802      	ldr	r0, [sp, #8]
    7078:	e76a      	b.n	6f50 <__aeabi_dmul+0xb0>
    707a:	46c0      	nop			; (mov r8, r8)
    707c:	000007ff 	.word	0x000007ff
    7080:	fffffc01 	.word	0xfffffc01
    7084:	000089f8 	.word	0x000089f8
    7088:	800fffff 	.word	0x800fffff
    708c:	fffffc0d 	.word	0xfffffc0d
    7090:	464a      	mov	r2, r9
    7092:	4649      	mov	r1, r9
    7094:	0c17      	lsrs	r7, r2, #16
    7096:	0c1a      	lsrs	r2, r3, #16
    7098:	041b      	lsls	r3, r3, #16
    709a:	0c1b      	lsrs	r3, r3, #16
    709c:	0408      	lsls	r0, r1, #16
    709e:	0019      	movs	r1, r3
    70a0:	0c00      	lsrs	r0, r0, #16
    70a2:	4341      	muls	r1, r0
    70a4:	0015      	movs	r5, r2
    70a6:	4688      	mov	r8, r1
    70a8:	0019      	movs	r1, r3
    70aa:	437d      	muls	r5, r7
    70ac:	4379      	muls	r1, r7
    70ae:	9503      	str	r5, [sp, #12]
    70b0:	4689      	mov	r9, r1
    70b2:	0029      	movs	r1, r5
    70b4:	0015      	movs	r5, r2
    70b6:	4345      	muls	r5, r0
    70b8:	444d      	add	r5, r9
    70ba:	9502      	str	r5, [sp, #8]
    70bc:	4645      	mov	r5, r8
    70be:	0c2d      	lsrs	r5, r5, #16
    70c0:	46aa      	mov	sl, r5
    70c2:	9d02      	ldr	r5, [sp, #8]
    70c4:	4455      	add	r5, sl
    70c6:	45a9      	cmp	r9, r5
    70c8:	d906      	bls.n	70d8 <__aeabi_dmul+0x238>
    70ca:	468a      	mov	sl, r1
    70cc:	2180      	movs	r1, #128	; 0x80
    70ce:	0249      	lsls	r1, r1, #9
    70d0:	4689      	mov	r9, r1
    70d2:	44ca      	add	sl, r9
    70d4:	4651      	mov	r1, sl
    70d6:	9103      	str	r1, [sp, #12]
    70d8:	0c29      	lsrs	r1, r5, #16
    70da:	9104      	str	r1, [sp, #16]
    70dc:	4641      	mov	r1, r8
    70de:	0409      	lsls	r1, r1, #16
    70e0:	042d      	lsls	r5, r5, #16
    70e2:	0c09      	lsrs	r1, r1, #16
    70e4:	4688      	mov	r8, r1
    70e6:	0029      	movs	r1, r5
    70e8:	0c25      	lsrs	r5, r4, #16
    70ea:	0424      	lsls	r4, r4, #16
    70ec:	4441      	add	r1, r8
    70ee:	0c24      	lsrs	r4, r4, #16
    70f0:	9105      	str	r1, [sp, #20]
    70f2:	0021      	movs	r1, r4
    70f4:	4341      	muls	r1, r0
    70f6:	4688      	mov	r8, r1
    70f8:	0021      	movs	r1, r4
    70fa:	4379      	muls	r1, r7
    70fc:	468a      	mov	sl, r1
    70fe:	4368      	muls	r0, r5
    7100:	4641      	mov	r1, r8
    7102:	4450      	add	r0, sl
    7104:	4681      	mov	r9, r0
    7106:	0c08      	lsrs	r0, r1, #16
    7108:	4448      	add	r0, r9
    710a:	436f      	muls	r7, r5
    710c:	4582      	cmp	sl, r0
    710e:	d903      	bls.n	7118 <__aeabi_dmul+0x278>
    7110:	2180      	movs	r1, #128	; 0x80
    7112:	0249      	lsls	r1, r1, #9
    7114:	4689      	mov	r9, r1
    7116:	444f      	add	r7, r9
    7118:	0c01      	lsrs	r1, r0, #16
    711a:	4689      	mov	r9, r1
    711c:	0039      	movs	r1, r7
    711e:	4449      	add	r1, r9
    7120:	9102      	str	r1, [sp, #8]
    7122:	4641      	mov	r1, r8
    7124:	040f      	lsls	r7, r1, #16
    7126:	9904      	ldr	r1, [sp, #16]
    7128:	0c3f      	lsrs	r7, r7, #16
    712a:	4688      	mov	r8, r1
    712c:	0400      	lsls	r0, r0, #16
    712e:	19c0      	adds	r0, r0, r7
    7130:	4480      	add	r8, r0
    7132:	4641      	mov	r1, r8
    7134:	9104      	str	r1, [sp, #16]
    7136:	4659      	mov	r1, fp
    7138:	0c0f      	lsrs	r7, r1, #16
    713a:	0409      	lsls	r1, r1, #16
    713c:	0c09      	lsrs	r1, r1, #16
    713e:	4688      	mov	r8, r1
    7140:	4359      	muls	r1, r3
    7142:	468a      	mov	sl, r1
    7144:	0039      	movs	r1, r7
    7146:	4351      	muls	r1, r2
    7148:	4689      	mov	r9, r1
    714a:	4641      	mov	r1, r8
    714c:	434a      	muls	r2, r1
    714e:	4651      	mov	r1, sl
    7150:	0c09      	lsrs	r1, r1, #16
    7152:	468b      	mov	fp, r1
    7154:	437b      	muls	r3, r7
    7156:	18d2      	adds	r2, r2, r3
    7158:	445a      	add	r2, fp
    715a:	4293      	cmp	r3, r2
    715c:	d903      	bls.n	7166 <__aeabi_dmul+0x2c6>
    715e:	2380      	movs	r3, #128	; 0x80
    7160:	025b      	lsls	r3, r3, #9
    7162:	469b      	mov	fp, r3
    7164:	44d9      	add	r9, fp
    7166:	4651      	mov	r1, sl
    7168:	0409      	lsls	r1, r1, #16
    716a:	0c09      	lsrs	r1, r1, #16
    716c:	468a      	mov	sl, r1
    716e:	4641      	mov	r1, r8
    7170:	4361      	muls	r1, r4
    7172:	437c      	muls	r4, r7
    7174:	0c13      	lsrs	r3, r2, #16
    7176:	0412      	lsls	r2, r2, #16
    7178:	444b      	add	r3, r9
    717a:	4452      	add	r2, sl
    717c:	46a1      	mov	r9, r4
    717e:	468a      	mov	sl, r1
    7180:	003c      	movs	r4, r7
    7182:	4641      	mov	r1, r8
    7184:	436c      	muls	r4, r5
    7186:	434d      	muls	r5, r1
    7188:	4651      	mov	r1, sl
    718a:	444d      	add	r5, r9
    718c:	0c0f      	lsrs	r7, r1, #16
    718e:	197d      	adds	r5, r7, r5
    7190:	45a9      	cmp	r9, r5
    7192:	d903      	bls.n	719c <__aeabi_dmul+0x2fc>
    7194:	2180      	movs	r1, #128	; 0x80
    7196:	0249      	lsls	r1, r1, #9
    7198:	4688      	mov	r8, r1
    719a:	4444      	add	r4, r8
    719c:	9f04      	ldr	r7, [sp, #16]
    719e:	9903      	ldr	r1, [sp, #12]
    71a0:	46b8      	mov	r8, r7
    71a2:	4441      	add	r1, r8
    71a4:	468b      	mov	fp, r1
    71a6:	4583      	cmp	fp, r0
    71a8:	4180      	sbcs	r0, r0
    71aa:	4241      	negs	r1, r0
    71ac:	4688      	mov	r8, r1
    71ae:	4651      	mov	r1, sl
    71b0:	0408      	lsls	r0, r1, #16
    71b2:	042f      	lsls	r7, r5, #16
    71b4:	0c00      	lsrs	r0, r0, #16
    71b6:	183f      	adds	r7, r7, r0
    71b8:	4658      	mov	r0, fp
    71ba:	9902      	ldr	r1, [sp, #8]
    71bc:	1810      	adds	r0, r2, r0
    71be:	4689      	mov	r9, r1
    71c0:	4290      	cmp	r0, r2
    71c2:	4192      	sbcs	r2, r2
    71c4:	444f      	add	r7, r9
    71c6:	46ba      	mov	sl, r7
    71c8:	4252      	negs	r2, r2
    71ca:	4699      	mov	r9, r3
    71cc:	4693      	mov	fp, r2
    71ce:	44c2      	add	sl, r8
    71d0:	44d1      	add	r9, sl
    71d2:	44cb      	add	fp, r9
    71d4:	428f      	cmp	r7, r1
    71d6:	41bf      	sbcs	r7, r7
    71d8:	45c2      	cmp	sl, r8
    71da:	4189      	sbcs	r1, r1
    71dc:	4599      	cmp	r9, r3
    71de:	419b      	sbcs	r3, r3
    71e0:	4593      	cmp	fp, r2
    71e2:	4192      	sbcs	r2, r2
    71e4:	427f      	negs	r7, r7
    71e6:	4249      	negs	r1, r1
    71e8:	0c2d      	lsrs	r5, r5, #16
    71ea:	4252      	negs	r2, r2
    71ec:	430f      	orrs	r7, r1
    71ee:	425b      	negs	r3, r3
    71f0:	4313      	orrs	r3, r2
    71f2:	197f      	adds	r7, r7, r5
    71f4:	18ff      	adds	r7, r7, r3
    71f6:	465b      	mov	r3, fp
    71f8:	193c      	adds	r4, r7, r4
    71fa:	0ddb      	lsrs	r3, r3, #23
    71fc:	9a05      	ldr	r2, [sp, #20]
    71fe:	0264      	lsls	r4, r4, #9
    7200:	431c      	orrs	r4, r3
    7202:	0243      	lsls	r3, r0, #9
    7204:	4313      	orrs	r3, r2
    7206:	1e5d      	subs	r5, r3, #1
    7208:	41ab      	sbcs	r3, r5
    720a:	465a      	mov	r2, fp
    720c:	0dc0      	lsrs	r0, r0, #23
    720e:	4303      	orrs	r3, r0
    7210:	0252      	lsls	r2, r2, #9
    7212:	4313      	orrs	r3, r2
    7214:	01e2      	lsls	r2, r4, #7
    7216:	d556      	bpl.n	72c6 <__aeabi_dmul+0x426>
    7218:	2001      	movs	r0, #1
    721a:	085a      	lsrs	r2, r3, #1
    721c:	4003      	ands	r3, r0
    721e:	4313      	orrs	r3, r2
    7220:	07e2      	lsls	r2, r4, #31
    7222:	4313      	orrs	r3, r2
    7224:	0864      	lsrs	r4, r4, #1
    7226:	485a      	ldr	r0, [pc, #360]	; (7390 <__aeabi_dmul+0x4f0>)
    7228:	4460      	add	r0, ip
    722a:	2800      	cmp	r0, #0
    722c:	dd4d      	ble.n	72ca <__aeabi_dmul+0x42a>
    722e:	075a      	lsls	r2, r3, #29
    7230:	d009      	beq.n	7246 <__aeabi_dmul+0x3a6>
    7232:	220f      	movs	r2, #15
    7234:	401a      	ands	r2, r3
    7236:	2a04      	cmp	r2, #4
    7238:	d005      	beq.n	7246 <__aeabi_dmul+0x3a6>
    723a:	1d1a      	adds	r2, r3, #4
    723c:	429a      	cmp	r2, r3
    723e:	419b      	sbcs	r3, r3
    7240:	425b      	negs	r3, r3
    7242:	18e4      	adds	r4, r4, r3
    7244:	0013      	movs	r3, r2
    7246:	01e2      	lsls	r2, r4, #7
    7248:	d504      	bpl.n	7254 <__aeabi_dmul+0x3b4>
    724a:	2080      	movs	r0, #128	; 0x80
    724c:	4a51      	ldr	r2, [pc, #324]	; (7394 <__aeabi_dmul+0x4f4>)
    724e:	00c0      	lsls	r0, r0, #3
    7250:	4014      	ands	r4, r2
    7252:	4460      	add	r0, ip
    7254:	4a50      	ldr	r2, [pc, #320]	; (7398 <__aeabi_dmul+0x4f8>)
    7256:	4290      	cmp	r0, r2
    7258:	dd00      	ble.n	725c <__aeabi_dmul+0x3bc>
    725a:	e6e3      	b.n	7024 <__aeabi_dmul+0x184>
    725c:	2501      	movs	r5, #1
    725e:	08db      	lsrs	r3, r3, #3
    7260:	0762      	lsls	r2, r4, #29
    7262:	431a      	orrs	r2, r3
    7264:	0264      	lsls	r4, r4, #9
    7266:	9b01      	ldr	r3, [sp, #4]
    7268:	4691      	mov	r9, r2
    726a:	0b22      	lsrs	r2, r4, #12
    726c:	0544      	lsls	r4, r0, #21
    726e:	0d64      	lsrs	r4, r4, #21
    7270:	401d      	ands	r5, r3
    7272:	e67c      	b.n	6f6e <__aeabi_dmul+0xce>
    7274:	2280      	movs	r2, #128	; 0x80
    7276:	4659      	mov	r1, fp
    7278:	0312      	lsls	r2, r2, #12
    727a:	4211      	tst	r1, r2
    727c:	d008      	beq.n	7290 <__aeabi_dmul+0x3f0>
    727e:	4214      	tst	r4, r2
    7280:	d106      	bne.n	7290 <__aeabi_dmul+0x3f0>
    7282:	4322      	orrs	r2, r4
    7284:	0312      	lsls	r2, r2, #12
    7286:	0b12      	lsrs	r2, r2, #12
    7288:	4645      	mov	r5, r8
    728a:	4699      	mov	r9, r3
    728c:	4c43      	ldr	r4, [pc, #268]	; (739c <__aeabi_dmul+0x4fc>)
    728e:	e66e      	b.n	6f6e <__aeabi_dmul+0xce>
    7290:	465b      	mov	r3, fp
    7292:	431a      	orrs	r2, r3
    7294:	0312      	lsls	r2, r2, #12
    7296:	0b12      	lsrs	r2, r2, #12
    7298:	4c40      	ldr	r4, [pc, #256]	; (739c <__aeabi_dmul+0x4fc>)
    729a:	e668      	b.n	6f6e <__aeabi_dmul+0xce>
    729c:	0003      	movs	r3, r0
    729e:	4654      	mov	r4, sl
    72a0:	3b28      	subs	r3, #40	; 0x28
    72a2:	409c      	lsls	r4, r3
    72a4:	2300      	movs	r3, #0
    72a6:	e6b9      	b.n	701c <__aeabi_dmul+0x17c>
    72a8:	f000 fcd8 	bl	7c5c <__clzsi2>
    72ac:	3020      	adds	r0, #32
    72ae:	e6a6      	b.n	6ffe <__aeabi_dmul+0x15e>
    72b0:	0003      	movs	r3, r0
    72b2:	3b28      	subs	r3, #40	; 0x28
    72b4:	409f      	lsls	r7, r3
    72b6:	2300      	movs	r3, #0
    72b8:	46bb      	mov	fp, r7
    72ba:	4699      	mov	r9, r3
    72bc:	e68a      	b.n	6fd4 <__aeabi_dmul+0x134>
    72be:	f000 fccd 	bl	7c5c <__clzsi2>
    72c2:	3020      	adds	r0, #32
    72c4:	e674      	b.n	6fb0 <__aeabi_dmul+0x110>
    72c6:	46b4      	mov	ip, r6
    72c8:	e7ad      	b.n	7226 <__aeabi_dmul+0x386>
    72ca:	2501      	movs	r5, #1
    72cc:	1a2a      	subs	r2, r5, r0
    72ce:	2a38      	cmp	r2, #56	; 0x38
    72d0:	dd06      	ble.n	72e0 <__aeabi_dmul+0x440>
    72d2:	9b01      	ldr	r3, [sp, #4]
    72d4:	2400      	movs	r4, #0
    72d6:	401d      	ands	r5, r3
    72d8:	2300      	movs	r3, #0
    72da:	2200      	movs	r2, #0
    72dc:	4699      	mov	r9, r3
    72de:	e646      	b.n	6f6e <__aeabi_dmul+0xce>
    72e0:	2a1f      	cmp	r2, #31
    72e2:	dc21      	bgt.n	7328 <__aeabi_dmul+0x488>
    72e4:	2520      	movs	r5, #32
    72e6:	0020      	movs	r0, r4
    72e8:	1aad      	subs	r5, r5, r2
    72ea:	001e      	movs	r6, r3
    72ec:	40ab      	lsls	r3, r5
    72ee:	40a8      	lsls	r0, r5
    72f0:	40d6      	lsrs	r6, r2
    72f2:	1e5d      	subs	r5, r3, #1
    72f4:	41ab      	sbcs	r3, r5
    72f6:	4330      	orrs	r0, r6
    72f8:	4318      	orrs	r0, r3
    72fa:	40d4      	lsrs	r4, r2
    72fc:	0743      	lsls	r3, r0, #29
    72fe:	d009      	beq.n	7314 <__aeabi_dmul+0x474>
    7300:	230f      	movs	r3, #15
    7302:	4003      	ands	r3, r0
    7304:	2b04      	cmp	r3, #4
    7306:	d005      	beq.n	7314 <__aeabi_dmul+0x474>
    7308:	0003      	movs	r3, r0
    730a:	1d18      	adds	r0, r3, #4
    730c:	4298      	cmp	r0, r3
    730e:	419b      	sbcs	r3, r3
    7310:	425b      	negs	r3, r3
    7312:	18e4      	adds	r4, r4, r3
    7314:	0223      	lsls	r3, r4, #8
    7316:	d521      	bpl.n	735c <__aeabi_dmul+0x4bc>
    7318:	2501      	movs	r5, #1
    731a:	9b01      	ldr	r3, [sp, #4]
    731c:	2401      	movs	r4, #1
    731e:	401d      	ands	r5, r3
    7320:	2300      	movs	r3, #0
    7322:	2200      	movs	r2, #0
    7324:	4699      	mov	r9, r3
    7326:	e622      	b.n	6f6e <__aeabi_dmul+0xce>
    7328:	251f      	movs	r5, #31
    732a:	0021      	movs	r1, r4
    732c:	426d      	negs	r5, r5
    732e:	1a28      	subs	r0, r5, r0
    7330:	40c1      	lsrs	r1, r0
    7332:	0008      	movs	r0, r1
    7334:	2a20      	cmp	r2, #32
    7336:	d01d      	beq.n	7374 <__aeabi_dmul+0x4d4>
    7338:	355f      	adds	r5, #95	; 0x5f
    733a:	1aaa      	subs	r2, r5, r2
    733c:	4094      	lsls	r4, r2
    733e:	4323      	orrs	r3, r4
    7340:	1e5c      	subs	r4, r3, #1
    7342:	41a3      	sbcs	r3, r4
    7344:	2507      	movs	r5, #7
    7346:	4303      	orrs	r3, r0
    7348:	401d      	ands	r5, r3
    734a:	2200      	movs	r2, #0
    734c:	2d00      	cmp	r5, #0
    734e:	d009      	beq.n	7364 <__aeabi_dmul+0x4c4>
    7350:	220f      	movs	r2, #15
    7352:	2400      	movs	r4, #0
    7354:	401a      	ands	r2, r3
    7356:	0018      	movs	r0, r3
    7358:	2a04      	cmp	r2, #4
    735a:	d1d6      	bne.n	730a <__aeabi_dmul+0x46a>
    735c:	0003      	movs	r3, r0
    735e:	0765      	lsls	r5, r4, #29
    7360:	0264      	lsls	r4, r4, #9
    7362:	0b22      	lsrs	r2, r4, #12
    7364:	08db      	lsrs	r3, r3, #3
    7366:	432b      	orrs	r3, r5
    7368:	2501      	movs	r5, #1
    736a:	4699      	mov	r9, r3
    736c:	9b01      	ldr	r3, [sp, #4]
    736e:	2400      	movs	r4, #0
    7370:	401d      	ands	r5, r3
    7372:	e5fc      	b.n	6f6e <__aeabi_dmul+0xce>
    7374:	2400      	movs	r4, #0
    7376:	e7e2      	b.n	733e <__aeabi_dmul+0x49e>
    7378:	2280      	movs	r2, #128	; 0x80
    737a:	2501      	movs	r5, #1
    737c:	0312      	lsls	r2, r2, #12
    737e:	4322      	orrs	r2, r4
    7380:	9901      	ldr	r1, [sp, #4]
    7382:	0312      	lsls	r2, r2, #12
    7384:	0b12      	lsrs	r2, r2, #12
    7386:	400d      	ands	r5, r1
    7388:	4699      	mov	r9, r3
    738a:	4c04      	ldr	r4, [pc, #16]	; (739c <__aeabi_dmul+0x4fc>)
    738c:	e5ef      	b.n	6f6e <__aeabi_dmul+0xce>
    738e:	46c0      	nop			; (mov r8, r8)
    7390:	000003ff 	.word	0x000003ff
    7394:	feffffff 	.word	0xfeffffff
    7398:	000007fe 	.word	0x000007fe
    739c:	000007ff 	.word	0x000007ff

000073a0 <__aeabi_dsub>:
    73a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    73a2:	4646      	mov	r6, r8
    73a4:	46d6      	mov	lr, sl
    73a6:	464f      	mov	r7, r9
    73a8:	030c      	lsls	r4, r1, #12
    73aa:	b5c0      	push	{r6, r7, lr}
    73ac:	0fcd      	lsrs	r5, r1, #31
    73ae:	004e      	lsls	r6, r1, #1
    73b0:	0a61      	lsrs	r1, r4, #9
    73b2:	0f44      	lsrs	r4, r0, #29
    73b4:	430c      	orrs	r4, r1
    73b6:	00c1      	lsls	r1, r0, #3
    73b8:	0058      	lsls	r0, r3, #1
    73ba:	0d40      	lsrs	r0, r0, #21
    73bc:	4684      	mov	ip, r0
    73be:	468a      	mov	sl, r1
    73c0:	000f      	movs	r7, r1
    73c2:	0319      	lsls	r1, r3, #12
    73c4:	0f50      	lsrs	r0, r2, #29
    73c6:	0a49      	lsrs	r1, r1, #9
    73c8:	4301      	orrs	r1, r0
    73ca:	48c6      	ldr	r0, [pc, #792]	; (76e4 <__aeabi_dsub+0x344>)
    73cc:	0d76      	lsrs	r6, r6, #21
    73ce:	46a8      	mov	r8, r5
    73d0:	0fdb      	lsrs	r3, r3, #31
    73d2:	00d2      	lsls	r2, r2, #3
    73d4:	4584      	cmp	ip, r0
    73d6:	d100      	bne.n	73da <__aeabi_dsub+0x3a>
    73d8:	e0d8      	b.n	758c <__aeabi_dsub+0x1ec>
    73da:	2001      	movs	r0, #1
    73dc:	4043      	eors	r3, r0
    73de:	42ab      	cmp	r3, r5
    73e0:	d100      	bne.n	73e4 <__aeabi_dsub+0x44>
    73e2:	e0a6      	b.n	7532 <__aeabi_dsub+0x192>
    73e4:	4660      	mov	r0, ip
    73e6:	1a35      	subs	r5, r6, r0
    73e8:	2d00      	cmp	r5, #0
    73ea:	dc00      	bgt.n	73ee <__aeabi_dsub+0x4e>
    73ec:	e105      	b.n	75fa <__aeabi_dsub+0x25a>
    73ee:	2800      	cmp	r0, #0
    73f0:	d110      	bne.n	7414 <__aeabi_dsub+0x74>
    73f2:	000b      	movs	r3, r1
    73f4:	4313      	orrs	r3, r2
    73f6:	d100      	bne.n	73fa <__aeabi_dsub+0x5a>
    73f8:	e0d7      	b.n	75aa <__aeabi_dsub+0x20a>
    73fa:	1e6b      	subs	r3, r5, #1
    73fc:	2b00      	cmp	r3, #0
    73fe:	d000      	beq.n	7402 <__aeabi_dsub+0x62>
    7400:	e14b      	b.n	769a <__aeabi_dsub+0x2fa>
    7402:	4653      	mov	r3, sl
    7404:	1a9f      	subs	r7, r3, r2
    7406:	45ba      	cmp	sl, r7
    7408:	4180      	sbcs	r0, r0
    740a:	1a64      	subs	r4, r4, r1
    740c:	4240      	negs	r0, r0
    740e:	1a24      	subs	r4, r4, r0
    7410:	2601      	movs	r6, #1
    7412:	e01e      	b.n	7452 <__aeabi_dsub+0xb2>
    7414:	4bb3      	ldr	r3, [pc, #716]	; (76e4 <__aeabi_dsub+0x344>)
    7416:	429e      	cmp	r6, r3
    7418:	d048      	beq.n	74ac <__aeabi_dsub+0x10c>
    741a:	2380      	movs	r3, #128	; 0x80
    741c:	041b      	lsls	r3, r3, #16
    741e:	4319      	orrs	r1, r3
    7420:	2d38      	cmp	r5, #56	; 0x38
    7422:	dd00      	ble.n	7426 <__aeabi_dsub+0x86>
    7424:	e119      	b.n	765a <__aeabi_dsub+0x2ba>
    7426:	2d1f      	cmp	r5, #31
    7428:	dd00      	ble.n	742c <__aeabi_dsub+0x8c>
    742a:	e14c      	b.n	76c6 <__aeabi_dsub+0x326>
    742c:	2320      	movs	r3, #32
    742e:	000f      	movs	r7, r1
    7430:	1b5b      	subs	r3, r3, r5
    7432:	0010      	movs	r0, r2
    7434:	409a      	lsls	r2, r3
    7436:	409f      	lsls	r7, r3
    7438:	40e8      	lsrs	r0, r5
    743a:	1e53      	subs	r3, r2, #1
    743c:	419a      	sbcs	r2, r3
    743e:	40e9      	lsrs	r1, r5
    7440:	4307      	orrs	r7, r0
    7442:	4317      	orrs	r7, r2
    7444:	4653      	mov	r3, sl
    7446:	1bdf      	subs	r7, r3, r7
    7448:	1a61      	subs	r1, r4, r1
    744a:	45ba      	cmp	sl, r7
    744c:	41a4      	sbcs	r4, r4
    744e:	4264      	negs	r4, r4
    7450:	1b0c      	subs	r4, r1, r4
    7452:	0223      	lsls	r3, r4, #8
    7454:	d400      	bmi.n	7458 <__aeabi_dsub+0xb8>
    7456:	e0c5      	b.n	75e4 <__aeabi_dsub+0x244>
    7458:	0264      	lsls	r4, r4, #9
    745a:	0a65      	lsrs	r5, r4, #9
    745c:	2d00      	cmp	r5, #0
    745e:	d100      	bne.n	7462 <__aeabi_dsub+0xc2>
    7460:	e0f6      	b.n	7650 <__aeabi_dsub+0x2b0>
    7462:	0028      	movs	r0, r5
    7464:	f000 fbfa 	bl	7c5c <__clzsi2>
    7468:	0003      	movs	r3, r0
    746a:	3b08      	subs	r3, #8
    746c:	2b1f      	cmp	r3, #31
    746e:	dd00      	ble.n	7472 <__aeabi_dsub+0xd2>
    7470:	e0e9      	b.n	7646 <__aeabi_dsub+0x2a6>
    7472:	2220      	movs	r2, #32
    7474:	003c      	movs	r4, r7
    7476:	1ad2      	subs	r2, r2, r3
    7478:	409d      	lsls	r5, r3
    747a:	40d4      	lsrs	r4, r2
    747c:	409f      	lsls	r7, r3
    747e:	4325      	orrs	r5, r4
    7480:	429e      	cmp	r6, r3
    7482:	dd00      	ble.n	7486 <__aeabi_dsub+0xe6>
    7484:	e0db      	b.n	763e <__aeabi_dsub+0x29e>
    7486:	1b9e      	subs	r6, r3, r6
    7488:	1c73      	adds	r3, r6, #1
    748a:	2b1f      	cmp	r3, #31
    748c:	dd00      	ble.n	7490 <__aeabi_dsub+0xf0>
    748e:	e10a      	b.n	76a6 <__aeabi_dsub+0x306>
    7490:	2220      	movs	r2, #32
    7492:	0038      	movs	r0, r7
    7494:	1ad2      	subs	r2, r2, r3
    7496:	0029      	movs	r1, r5
    7498:	4097      	lsls	r7, r2
    749a:	002c      	movs	r4, r5
    749c:	4091      	lsls	r1, r2
    749e:	40d8      	lsrs	r0, r3
    74a0:	1e7a      	subs	r2, r7, #1
    74a2:	4197      	sbcs	r7, r2
    74a4:	40dc      	lsrs	r4, r3
    74a6:	2600      	movs	r6, #0
    74a8:	4301      	orrs	r1, r0
    74aa:	430f      	orrs	r7, r1
    74ac:	077b      	lsls	r3, r7, #29
    74ae:	d009      	beq.n	74c4 <__aeabi_dsub+0x124>
    74b0:	230f      	movs	r3, #15
    74b2:	403b      	ands	r3, r7
    74b4:	2b04      	cmp	r3, #4
    74b6:	d005      	beq.n	74c4 <__aeabi_dsub+0x124>
    74b8:	1d3b      	adds	r3, r7, #4
    74ba:	42bb      	cmp	r3, r7
    74bc:	41bf      	sbcs	r7, r7
    74be:	427f      	negs	r7, r7
    74c0:	19e4      	adds	r4, r4, r7
    74c2:	001f      	movs	r7, r3
    74c4:	0223      	lsls	r3, r4, #8
    74c6:	d525      	bpl.n	7514 <__aeabi_dsub+0x174>
    74c8:	4b86      	ldr	r3, [pc, #536]	; (76e4 <__aeabi_dsub+0x344>)
    74ca:	3601      	adds	r6, #1
    74cc:	429e      	cmp	r6, r3
    74ce:	d100      	bne.n	74d2 <__aeabi_dsub+0x132>
    74d0:	e0af      	b.n	7632 <__aeabi_dsub+0x292>
    74d2:	4b85      	ldr	r3, [pc, #532]	; (76e8 <__aeabi_dsub+0x348>)
    74d4:	2501      	movs	r5, #1
    74d6:	401c      	ands	r4, r3
    74d8:	4643      	mov	r3, r8
    74da:	0762      	lsls	r2, r4, #29
    74dc:	08ff      	lsrs	r7, r7, #3
    74de:	0264      	lsls	r4, r4, #9
    74e0:	0576      	lsls	r6, r6, #21
    74e2:	4317      	orrs	r7, r2
    74e4:	0b24      	lsrs	r4, r4, #12
    74e6:	0d76      	lsrs	r6, r6, #21
    74e8:	401d      	ands	r5, r3
    74ea:	2100      	movs	r1, #0
    74ec:	0324      	lsls	r4, r4, #12
    74ee:	0b23      	lsrs	r3, r4, #12
    74f0:	0d0c      	lsrs	r4, r1, #20
    74f2:	4a7e      	ldr	r2, [pc, #504]	; (76ec <__aeabi_dsub+0x34c>)
    74f4:	0524      	lsls	r4, r4, #20
    74f6:	431c      	orrs	r4, r3
    74f8:	4014      	ands	r4, r2
    74fa:	0533      	lsls	r3, r6, #20
    74fc:	4323      	orrs	r3, r4
    74fe:	005b      	lsls	r3, r3, #1
    7500:	07ed      	lsls	r5, r5, #31
    7502:	085b      	lsrs	r3, r3, #1
    7504:	432b      	orrs	r3, r5
    7506:	0038      	movs	r0, r7
    7508:	0019      	movs	r1, r3
    750a:	bc1c      	pop	{r2, r3, r4}
    750c:	4690      	mov	r8, r2
    750e:	4699      	mov	r9, r3
    7510:	46a2      	mov	sl, r4
    7512:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7514:	2501      	movs	r5, #1
    7516:	4643      	mov	r3, r8
    7518:	0762      	lsls	r2, r4, #29
    751a:	08ff      	lsrs	r7, r7, #3
    751c:	4317      	orrs	r7, r2
    751e:	08e4      	lsrs	r4, r4, #3
    7520:	401d      	ands	r5, r3
    7522:	4b70      	ldr	r3, [pc, #448]	; (76e4 <__aeabi_dsub+0x344>)
    7524:	429e      	cmp	r6, r3
    7526:	d036      	beq.n	7596 <__aeabi_dsub+0x1f6>
    7528:	0324      	lsls	r4, r4, #12
    752a:	0576      	lsls	r6, r6, #21
    752c:	0b24      	lsrs	r4, r4, #12
    752e:	0d76      	lsrs	r6, r6, #21
    7530:	e7db      	b.n	74ea <__aeabi_dsub+0x14a>
    7532:	4663      	mov	r3, ip
    7534:	1af3      	subs	r3, r6, r3
    7536:	2b00      	cmp	r3, #0
    7538:	dc00      	bgt.n	753c <__aeabi_dsub+0x19c>
    753a:	e094      	b.n	7666 <__aeabi_dsub+0x2c6>
    753c:	4660      	mov	r0, ip
    753e:	2800      	cmp	r0, #0
    7540:	d035      	beq.n	75ae <__aeabi_dsub+0x20e>
    7542:	4868      	ldr	r0, [pc, #416]	; (76e4 <__aeabi_dsub+0x344>)
    7544:	4286      	cmp	r6, r0
    7546:	d0b1      	beq.n	74ac <__aeabi_dsub+0x10c>
    7548:	2780      	movs	r7, #128	; 0x80
    754a:	043f      	lsls	r7, r7, #16
    754c:	4339      	orrs	r1, r7
    754e:	2b38      	cmp	r3, #56	; 0x38
    7550:	dc00      	bgt.n	7554 <__aeabi_dsub+0x1b4>
    7552:	e0fd      	b.n	7750 <__aeabi_dsub+0x3b0>
    7554:	430a      	orrs	r2, r1
    7556:	0017      	movs	r7, r2
    7558:	2100      	movs	r1, #0
    755a:	1e7a      	subs	r2, r7, #1
    755c:	4197      	sbcs	r7, r2
    755e:	4457      	add	r7, sl
    7560:	4557      	cmp	r7, sl
    7562:	4180      	sbcs	r0, r0
    7564:	1909      	adds	r1, r1, r4
    7566:	4244      	negs	r4, r0
    7568:	190c      	adds	r4, r1, r4
    756a:	0223      	lsls	r3, r4, #8
    756c:	d53a      	bpl.n	75e4 <__aeabi_dsub+0x244>
    756e:	4b5d      	ldr	r3, [pc, #372]	; (76e4 <__aeabi_dsub+0x344>)
    7570:	3601      	adds	r6, #1
    7572:	429e      	cmp	r6, r3
    7574:	d100      	bne.n	7578 <__aeabi_dsub+0x1d8>
    7576:	e14b      	b.n	7810 <__aeabi_dsub+0x470>
    7578:	2201      	movs	r2, #1
    757a:	4b5b      	ldr	r3, [pc, #364]	; (76e8 <__aeabi_dsub+0x348>)
    757c:	401c      	ands	r4, r3
    757e:	087b      	lsrs	r3, r7, #1
    7580:	4017      	ands	r7, r2
    7582:	431f      	orrs	r7, r3
    7584:	07e2      	lsls	r2, r4, #31
    7586:	4317      	orrs	r7, r2
    7588:	0864      	lsrs	r4, r4, #1
    758a:	e78f      	b.n	74ac <__aeabi_dsub+0x10c>
    758c:	0008      	movs	r0, r1
    758e:	4310      	orrs	r0, r2
    7590:	d000      	beq.n	7594 <__aeabi_dsub+0x1f4>
    7592:	e724      	b.n	73de <__aeabi_dsub+0x3e>
    7594:	e721      	b.n	73da <__aeabi_dsub+0x3a>
    7596:	0023      	movs	r3, r4
    7598:	433b      	orrs	r3, r7
    759a:	d100      	bne.n	759e <__aeabi_dsub+0x1fe>
    759c:	e1b9      	b.n	7912 <__aeabi_dsub+0x572>
    759e:	2280      	movs	r2, #128	; 0x80
    75a0:	0312      	lsls	r2, r2, #12
    75a2:	4314      	orrs	r4, r2
    75a4:	0324      	lsls	r4, r4, #12
    75a6:	0b24      	lsrs	r4, r4, #12
    75a8:	e79f      	b.n	74ea <__aeabi_dsub+0x14a>
    75aa:	002e      	movs	r6, r5
    75ac:	e77e      	b.n	74ac <__aeabi_dsub+0x10c>
    75ae:	0008      	movs	r0, r1
    75b0:	4310      	orrs	r0, r2
    75b2:	d100      	bne.n	75b6 <__aeabi_dsub+0x216>
    75b4:	e0ca      	b.n	774c <__aeabi_dsub+0x3ac>
    75b6:	1e58      	subs	r0, r3, #1
    75b8:	4684      	mov	ip, r0
    75ba:	2800      	cmp	r0, #0
    75bc:	d000      	beq.n	75c0 <__aeabi_dsub+0x220>
    75be:	e0e7      	b.n	7790 <__aeabi_dsub+0x3f0>
    75c0:	4452      	add	r2, sl
    75c2:	4552      	cmp	r2, sl
    75c4:	4180      	sbcs	r0, r0
    75c6:	1864      	adds	r4, r4, r1
    75c8:	4240      	negs	r0, r0
    75ca:	1824      	adds	r4, r4, r0
    75cc:	0017      	movs	r7, r2
    75ce:	2601      	movs	r6, #1
    75d0:	0223      	lsls	r3, r4, #8
    75d2:	d507      	bpl.n	75e4 <__aeabi_dsub+0x244>
    75d4:	2602      	movs	r6, #2
    75d6:	e7cf      	b.n	7578 <__aeabi_dsub+0x1d8>
    75d8:	4664      	mov	r4, ip
    75da:	432c      	orrs	r4, r5
    75dc:	d100      	bne.n	75e0 <__aeabi_dsub+0x240>
    75de:	e1b3      	b.n	7948 <__aeabi_dsub+0x5a8>
    75e0:	002c      	movs	r4, r5
    75e2:	4667      	mov	r7, ip
    75e4:	077b      	lsls	r3, r7, #29
    75e6:	d000      	beq.n	75ea <__aeabi_dsub+0x24a>
    75e8:	e762      	b.n	74b0 <__aeabi_dsub+0x110>
    75ea:	0763      	lsls	r3, r4, #29
    75ec:	08ff      	lsrs	r7, r7, #3
    75ee:	431f      	orrs	r7, r3
    75f0:	2501      	movs	r5, #1
    75f2:	4643      	mov	r3, r8
    75f4:	08e4      	lsrs	r4, r4, #3
    75f6:	401d      	ands	r5, r3
    75f8:	e793      	b.n	7522 <__aeabi_dsub+0x182>
    75fa:	2d00      	cmp	r5, #0
    75fc:	d178      	bne.n	76f0 <__aeabi_dsub+0x350>
    75fe:	1c75      	adds	r5, r6, #1
    7600:	056d      	lsls	r5, r5, #21
    7602:	0d6d      	lsrs	r5, r5, #21
    7604:	2d01      	cmp	r5, #1
    7606:	dc00      	bgt.n	760a <__aeabi_dsub+0x26a>
    7608:	e0f2      	b.n	77f0 <__aeabi_dsub+0x450>
    760a:	4650      	mov	r0, sl
    760c:	1a80      	subs	r0, r0, r2
    760e:	4582      	cmp	sl, r0
    7610:	41bf      	sbcs	r7, r7
    7612:	1a65      	subs	r5, r4, r1
    7614:	427f      	negs	r7, r7
    7616:	1bed      	subs	r5, r5, r7
    7618:	4684      	mov	ip, r0
    761a:	0228      	lsls	r0, r5, #8
    761c:	d400      	bmi.n	7620 <__aeabi_dsub+0x280>
    761e:	e08c      	b.n	773a <__aeabi_dsub+0x39a>
    7620:	4650      	mov	r0, sl
    7622:	1a17      	subs	r7, r2, r0
    7624:	42ba      	cmp	r2, r7
    7626:	4192      	sbcs	r2, r2
    7628:	1b0c      	subs	r4, r1, r4
    762a:	4255      	negs	r5, r2
    762c:	1b65      	subs	r5, r4, r5
    762e:	4698      	mov	r8, r3
    7630:	e714      	b.n	745c <__aeabi_dsub+0xbc>
    7632:	2501      	movs	r5, #1
    7634:	4643      	mov	r3, r8
    7636:	2400      	movs	r4, #0
    7638:	401d      	ands	r5, r3
    763a:	2700      	movs	r7, #0
    763c:	e755      	b.n	74ea <__aeabi_dsub+0x14a>
    763e:	4c2a      	ldr	r4, [pc, #168]	; (76e8 <__aeabi_dsub+0x348>)
    7640:	1af6      	subs	r6, r6, r3
    7642:	402c      	ands	r4, r5
    7644:	e732      	b.n	74ac <__aeabi_dsub+0x10c>
    7646:	003d      	movs	r5, r7
    7648:	3828      	subs	r0, #40	; 0x28
    764a:	4085      	lsls	r5, r0
    764c:	2700      	movs	r7, #0
    764e:	e717      	b.n	7480 <__aeabi_dsub+0xe0>
    7650:	0038      	movs	r0, r7
    7652:	f000 fb03 	bl	7c5c <__clzsi2>
    7656:	3020      	adds	r0, #32
    7658:	e706      	b.n	7468 <__aeabi_dsub+0xc8>
    765a:	430a      	orrs	r2, r1
    765c:	0017      	movs	r7, r2
    765e:	2100      	movs	r1, #0
    7660:	1e7a      	subs	r2, r7, #1
    7662:	4197      	sbcs	r7, r2
    7664:	e6ee      	b.n	7444 <__aeabi_dsub+0xa4>
    7666:	2b00      	cmp	r3, #0
    7668:	d000      	beq.n	766c <__aeabi_dsub+0x2cc>
    766a:	e0e5      	b.n	7838 <__aeabi_dsub+0x498>
    766c:	1c73      	adds	r3, r6, #1
    766e:	469c      	mov	ip, r3
    7670:	055b      	lsls	r3, r3, #21
    7672:	0d5b      	lsrs	r3, r3, #21
    7674:	2b01      	cmp	r3, #1
    7676:	dc00      	bgt.n	767a <__aeabi_dsub+0x2da>
    7678:	e09f      	b.n	77ba <__aeabi_dsub+0x41a>
    767a:	4b1a      	ldr	r3, [pc, #104]	; (76e4 <__aeabi_dsub+0x344>)
    767c:	459c      	cmp	ip, r3
    767e:	d100      	bne.n	7682 <__aeabi_dsub+0x2e2>
    7680:	e0c5      	b.n	780e <__aeabi_dsub+0x46e>
    7682:	4452      	add	r2, sl
    7684:	4552      	cmp	r2, sl
    7686:	4180      	sbcs	r0, r0
    7688:	1864      	adds	r4, r4, r1
    768a:	4240      	negs	r0, r0
    768c:	1824      	adds	r4, r4, r0
    768e:	07e7      	lsls	r7, r4, #31
    7690:	0852      	lsrs	r2, r2, #1
    7692:	4317      	orrs	r7, r2
    7694:	0864      	lsrs	r4, r4, #1
    7696:	4666      	mov	r6, ip
    7698:	e708      	b.n	74ac <__aeabi_dsub+0x10c>
    769a:	4812      	ldr	r0, [pc, #72]	; (76e4 <__aeabi_dsub+0x344>)
    769c:	4285      	cmp	r5, r0
    769e:	d100      	bne.n	76a2 <__aeabi_dsub+0x302>
    76a0:	e085      	b.n	77ae <__aeabi_dsub+0x40e>
    76a2:	001d      	movs	r5, r3
    76a4:	e6bc      	b.n	7420 <__aeabi_dsub+0x80>
    76a6:	0029      	movs	r1, r5
    76a8:	3e1f      	subs	r6, #31
    76aa:	40f1      	lsrs	r1, r6
    76ac:	2b20      	cmp	r3, #32
    76ae:	d100      	bne.n	76b2 <__aeabi_dsub+0x312>
    76b0:	e07f      	b.n	77b2 <__aeabi_dsub+0x412>
    76b2:	2240      	movs	r2, #64	; 0x40
    76b4:	1ad3      	subs	r3, r2, r3
    76b6:	409d      	lsls	r5, r3
    76b8:	432f      	orrs	r7, r5
    76ba:	1e7d      	subs	r5, r7, #1
    76bc:	41af      	sbcs	r7, r5
    76be:	2400      	movs	r4, #0
    76c0:	430f      	orrs	r7, r1
    76c2:	2600      	movs	r6, #0
    76c4:	e78e      	b.n	75e4 <__aeabi_dsub+0x244>
    76c6:	002b      	movs	r3, r5
    76c8:	000f      	movs	r7, r1
    76ca:	3b20      	subs	r3, #32
    76cc:	40df      	lsrs	r7, r3
    76ce:	2d20      	cmp	r5, #32
    76d0:	d071      	beq.n	77b6 <__aeabi_dsub+0x416>
    76d2:	2340      	movs	r3, #64	; 0x40
    76d4:	1b5d      	subs	r5, r3, r5
    76d6:	40a9      	lsls	r1, r5
    76d8:	430a      	orrs	r2, r1
    76da:	1e51      	subs	r1, r2, #1
    76dc:	418a      	sbcs	r2, r1
    76de:	2100      	movs	r1, #0
    76e0:	4317      	orrs	r7, r2
    76e2:	e6af      	b.n	7444 <__aeabi_dsub+0xa4>
    76e4:	000007ff 	.word	0x000007ff
    76e8:	ff7fffff 	.word	0xff7fffff
    76ec:	800fffff 	.word	0x800fffff
    76f0:	2e00      	cmp	r6, #0
    76f2:	d03e      	beq.n	7772 <__aeabi_dsub+0x3d2>
    76f4:	4eb3      	ldr	r6, [pc, #716]	; (79c4 <__aeabi_dsub+0x624>)
    76f6:	45b4      	cmp	ip, r6
    76f8:	d045      	beq.n	7786 <__aeabi_dsub+0x3e6>
    76fa:	2680      	movs	r6, #128	; 0x80
    76fc:	0436      	lsls	r6, r6, #16
    76fe:	426d      	negs	r5, r5
    7700:	4334      	orrs	r4, r6
    7702:	2d38      	cmp	r5, #56	; 0x38
    7704:	dd00      	ble.n	7708 <__aeabi_dsub+0x368>
    7706:	e0a8      	b.n	785a <__aeabi_dsub+0x4ba>
    7708:	2d1f      	cmp	r5, #31
    770a:	dd00      	ble.n	770e <__aeabi_dsub+0x36e>
    770c:	e11f      	b.n	794e <__aeabi_dsub+0x5ae>
    770e:	2620      	movs	r6, #32
    7710:	0027      	movs	r7, r4
    7712:	4650      	mov	r0, sl
    7714:	1b76      	subs	r6, r6, r5
    7716:	40b7      	lsls	r7, r6
    7718:	40e8      	lsrs	r0, r5
    771a:	4307      	orrs	r7, r0
    771c:	4650      	mov	r0, sl
    771e:	40b0      	lsls	r0, r6
    7720:	1e46      	subs	r6, r0, #1
    7722:	41b0      	sbcs	r0, r6
    7724:	40ec      	lsrs	r4, r5
    7726:	4338      	orrs	r0, r7
    7728:	1a17      	subs	r7, r2, r0
    772a:	42ba      	cmp	r2, r7
    772c:	4192      	sbcs	r2, r2
    772e:	1b0c      	subs	r4, r1, r4
    7730:	4252      	negs	r2, r2
    7732:	1aa4      	subs	r4, r4, r2
    7734:	4666      	mov	r6, ip
    7736:	4698      	mov	r8, r3
    7738:	e68b      	b.n	7452 <__aeabi_dsub+0xb2>
    773a:	4664      	mov	r4, ip
    773c:	4667      	mov	r7, ip
    773e:	432c      	orrs	r4, r5
    7740:	d000      	beq.n	7744 <__aeabi_dsub+0x3a4>
    7742:	e68b      	b.n	745c <__aeabi_dsub+0xbc>
    7744:	2500      	movs	r5, #0
    7746:	2600      	movs	r6, #0
    7748:	2700      	movs	r7, #0
    774a:	e6ea      	b.n	7522 <__aeabi_dsub+0x182>
    774c:	001e      	movs	r6, r3
    774e:	e6ad      	b.n	74ac <__aeabi_dsub+0x10c>
    7750:	2b1f      	cmp	r3, #31
    7752:	dc60      	bgt.n	7816 <__aeabi_dsub+0x476>
    7754:	2720      	movs	r7, #32
    7756:	1af8      	subs	r0, r7, r3
    7758:	000f      	movs	r7, r1
    775a:	4684      	mov	ip, r0
    775c:	4087      	lsls	r7, r0
    775e:	0010      	movs	r0, r2
    7760:	40d8      	lsrs	r0, r3
    7762:	4307      	orrs	r7, r0
    7764:	4660      	mov	r0, ip
    7766:	4082      	lsls	r2, r0
    7768:	1e50      	subs	r0, r2, #1
    776a:	4182      	sbcs	r2, r0
    776c:	40d9      	lsrs	r1, r3
    776e:	4317      	orrs	r7, r2
    7770:	e6f5      	b.n	755e <__aeabi_dsub+0x1be>
    7772:	0026      	movs	r6, r4
    7774:	4650      	mov	r0, sl
    7776:	4306      	orrs	r6, r0
    7778:	d005      	beq.n	7786 <__aeabi_dsub+0x3e6>
    777a:	43ed      	mvns	r5, r5
    777c:	2d00      	cmp	r5, #0
    777e:	d0d3      	beq.n	7728 <__aeabi_dsub+0x388>
    7780:	4e90      	ldr	r6, [pc, #576]	; (79c4 <__aeabi_dsub+0x624>)
    7782:	45b4      	cmp	ip, r6
    7784:	d1bd      	bne.n	7702 <__aeabi_dsub+0x362>
    7786:	000c      	movs	r4, r1
    7788:	0017      	movs	r7, r2
    778a:	4666      	mov	r6, ip
    778c:	4698      	mov	r8, r3
    778e:	e68d      	b.n	74ac <__aeabi_dsub+0x10c>
    7790:	488c      	ldr	r0, [pc, #560]	; (79c4 <__aeabi_dsub+0x624>)
    7792:	4283      	cmp	r3, r0
    7794:	d00b      	beq.n	77ae <__aeabi_dsub+0x40e>
    7796:	4663      	mov	r3, ip
    7798:	e6d9      	b.n	754e <__aeabi_dsub+0x1ae>
    779a:	2d00      	cmp	r5, #0
    779c:	d000      	beq.n	77a0 <__aeabi_dsub+0x400>
    779e:	e096      	b.n	78ce <__aeabi_dsub+0x52e>
    77a0:	0008      	movs	r0, r1
    77a2:	4310      	orrs	r0, r2
    77a4:	d100      	bne.n	77a8 <__aeabi_dsub+0x408>
    77a6:	e0e2      	b.n	796e <__aeabi_dsub+0x5ce>
    77a8:	000c      	movs	r4, r1
    77aa:	0017      	movs	r7, r2
    77ac:	4698      	mov	r8, r3
    77ae:	4e85      	ldr	r6, [pc, #532]	; (79c4 <__aeabi_dsub+0x624>)
    77b0:	e67c      	b.n	74ac <__aeabi_dsub+0x10c>
    77b2:	2500      	movs	r5, #0
    77b4:	e780      	b.n	76b8 <__aeabi_dsub+0x318>
    77b6:	2100      	movs	r1, #0
    77b8:	e78e      	b.n	76d8 <__aeabi_dsub+0x338>
    77ba:	0023      	movs	r3, r4
    77bc:	4650      	mov	r0, sl
    77be:	4303      	orrs	r3, r0
    77c0:	2e00      	cmp	r6, #0
    77c2:	d000      	beq.n	77c6 <__aeabi_dsub+0x426>
    77c4:	e0a8      	b.n	7918 <__aeabi_dsub+0x578>
    77c6:	2b00      	cmp	r3, #0
    77c8:	d100      	bne.n	77cc <__aeabi_dsub+0x42c>
    77ca:	e0de      	b.n	798a <__aeabi_dsub+0x5ea>
    77cc:	000b      	movs	r3, r1
    77ce:	4313      	orrs	r3, r2
    77d0:	d100      	bne.n	77d4 <__aeabi_dsub+0x434>
    77d2:	e66b      	b.n	74ac <__aeabi_dsub+0x10c>
    77d4:	4452      	add	r2, sl
    77d6:	4552      	cmp	r2, sl
    77d8:	4180      	sbcs	r0, r0
    77da:	1864      	adds	r4, r4, r1
    77dc:	4240      	negs	r0, r0
    77de:	1824      	adds	r4, r4, r0
    77e0:	0017      	movs	r7, r2
    77e2:	0223      	lsls	r3, r4, #8
    77e4:	d400      	bmi.n	77e8 <__aeabi_dsub+0x448>
    77e6:	e6fd      	b.n	75e4 <__aeabi_dsub+0x244>
    77e8:	4b77      	ldr	r3, [pc, #476]	; (79c8 <__aeabi_dsub+0x628>)
    77ea:	4666      	mov	r6, ip
    77ec:	401c      	ands	r4, r3
    77ee:	e65d      	b.n	74ac <__aeabi_dsub+0x10c>
    77f0:	0025      	movs	r5, r4
    77f2:	4650      	mov	r0, sl
    77f4:	4305      	orrs	r5, r0
    77f6:	2e00      	cmp	r6, #0
    77f8:	d1cf      	bne.n	779a <__aeabi_dsub+0x3fa>
    77fa:	2d00      	cmp	r5, #0
    77fc:	d14f      	bne.n	789e <__aeabi_dsub+0x4fe>
    77fe:	000c      	movs	r4, r1
    7800:	4314      	orrs	r4, r2
    7802:	d100      	bne.n	7806 <__aeabi_dsub+0x466>
    7804:	e0a0      	b.n	7948 <__aeabi_dsub+0x5a8>
    7806:	000c      	movs	r4, r1
    7808:	0017      	movs	r7, r2
    780a:	4698      	mov	r8, r3
    780c:	e64e      	b.n	74ac <__aeabi_dsub+0x10c>
    780e:	4666      	mov	r6, ip
    7810:	2400      	movs	r4, #0
    7812:	2700      	movs	r7, #0
    7814:	e685      	b.n	7522 <__aeabi_dsub+0x182>
    7816:	001f      	movs	r7, r3
    7818:	0008      	movs	r0, r1
    781a:	3f20      	subs	r7, #32
    781c:	40f8      	lsrs	r0, r7
    781e:	0007      	movs	r7, r0
    7820:	2b20      	cmp	r3, #32
    7822:	d100      	bne.n	7826 <__aeabi_dsub+0x486>
    7824:	e08e      	b.n	7944 <__aeabi_dsub+0x5a4>
    7826:	2040      	movs	r0, #64	; 0x40
    7828:	1ac3      	subs	r3, r0, r3
    782a:	4099      	lsls	r1, r3
    782c:	430a      	orrs	r2, r1
    782e:	1e51      	subs	r1, r2, #1
    7830:	418a      	sbcs	r2, r1
    7832:	2100      	movs	r1, #0
    7834:	4317      	orrs	r7, r2
    7836:	e692      	b.n	755e <__aeabi_dsub+0x1be>
    7838:	2e00      	cmp	r6, #0
    783a:	d114      	bne.n	7866 <__aeabi_dsub+0x4c6>
    783c:	0026      	movs	r6, r4
    783e:	4650      	mov	r0, sl
    7840:	4306      	orrs	r6, r0
    7842:	d062      	beq.n	790a <__aeabi_dsub+0x56a>
    7844:	43db      	mvns	r3, r3
    7846:	2b00      	cmp	r3, #0
    7848:	d15c      	bne.n	7904 <__aeabi_dsub+0x564>
    784a:	1887      	adds	r7, r0, r2
    784c:	4297      	cmp	r7, r2
    784e:	4192      	sbcs	r2, r2
    7850:	1864      	adds	r4, r4, r1
    7852:	4252      	negs	r2, r2
    7854:	18a4      	adds	r4, r4, r2
    7856:	4666      	mov	r6, ip
    7858:	e687      	b.n	756a <__aeabi_dsub+0x1ca>
    785a:	4650      	mov	r0, sl
    785c:	4320      	orrs	r0, r4
    785e:	1e44      	subs	r4, r0, #1
    7860:	41a0      	sbcs	r0, r4
    7862:	2400      	movs	r4, #0
    7864:	e760      	b.n	7728 <__aeabi_dsub+0x388>
    7866:	4e57      	ldr	r6, [pc, #348]	; (79c4 <__aeabi_dsub+0x624>)
    7868:	45b4      	cmp	ip, r6
    786a:	d04e      	beq.n	790a <__aeabi_dsub+0x56a>
    786c:	2680      	movs	r6, #128	; 0x80
    786e:	0436      	lsls	r6, r6, #16
    7870:	425b      	negs	r3, r3
    7872:	4334      	orrs	r4, r6
    7874:	2b38      	cmp	r3, #56	; 0x38
    7876:	dd00      	ble.n	787a <__aeabi_dsub+0x4da>
    7878:	e07f      	b.n	797a <__aeabi_dsub+0x5da>
    787a:	2b1f      	cmp	r3, #31
    787c:	dd00      	ble.n	7880 <__aeabi_dsub+0x4e0>
    787e:	e08b      	b.n	7998 <__aeabi_dsub+0x5f8>
    7880:	2620      	movs	r6, #32
    7882:	0027      	movs	r7, r4
    7884:	4650      	mov	r0, sl
    7886:	1af6      	subs	r6, r6, r3
    7888:	40b7      	lsls	r7, r6
    788a:	40d8      	lsrs	r0, r3
    788c:	4307      	orrs	r7, r0
    788e:	4650      	mov	r0, sl
    7890:	40b0      	lsls	r0, r6
    7892:	1e46      	subs	r6, r0, #1
    7894:	41b0      	sbcs	r0, r6
    7896:	4307      	orrs	r7, r0
    7898:	40dc      	lsrs	r4, r3
    789a:	18bf      	adds	r7, r7, r2
    789c:	e7d6      	b.n	784c <__aeabi_dsub+0x4ac>
    789e:	000d      	movs	r5, r1
    78a0:	4315      	orrs	r5, r2
    78a2:	d100      	bne.n	78a6 <__aeabi_dsub+0x506>
    78a4:	e602      	b.n	74ac <__aeabi_dsub+0x10c>
    78a6:	4650      	mov	r0, sl
    78a8:	1a80      	subs	r0, r0, r2
    78aa:	4582      	cmp	sl, r0
    78ac:	41bf      	sbcs	r7, r7
    78ae:	1a65      	subs	r5, r4, r1
    78b0:	427f      	negs	r7, r7
    78b2:	1bed      	subs	r5, r5, r7
    78b4:	4684      	mov	ip, r0
    78b6:	0228      	lsls	r0, r5, #8
    78b8:	d400      	bmi.n	78bc <__aeabi_dsub+0x51c>
    78ba:	e68d      	b.n	75d8 <__aeabi_dsub+0x238>
    78bc:	4650      	mov	r0, sl
    78be:	1a17      	subs	r7, r2, r0
    78c0:	42ba      	cmp	r2, r7
    78c2:	4192      	sbcs	r2, r2
    78c4:	1b0c      	subs	r4, r1, r4
    78c6:	4252      	negs	r2, r2
    78c8:	1aa4      	subs	r4, r4, r2
    78ca:	4698      	mov	r8, r3
    78cc:	e5ee      	b.n	74ac <__aeabi_dsub+0x10c>
    78ce:	000d      	movs	r5, r1
    78d0:	4315      	orrs	r5, r2
    78d2:	d100      	bne.n	78d6 <__aeabi_dsub+0x536>
    78d4:	e76b      	b.n	77ae <__aeabi_dsub+0x40e>
    78d6:	4650      	mov	r0, sl
    78d8:	0767      	lsls	r7, r4, #29
    78da:	08c0      	lsrs	r0, r0, #3
    78dc:	4307      	orrs	r7, r0
    78de:	2080      	movs	r0, #128	; 0x80
    78e0:	08e4      	lsrs	r4, r4, #3
    78e2:	0300      	lsls	r0, r0, #12
    78e4:	4204      	tst	r4, r0
    78e6:	d007      	beq.n	78f8 <__aeabi_dsub+0x558>
    78e8:	08cd      	lsrs	r5, r1, #3
    78ea:	4205      	tst	r5, r0
    78ec:	d104      	bne.n	78f8 <__aeabi_dsub+0x558>
    78ee:	002c      	movs	r4, r5
    78f0:	4698      	mov	r8, r3
    78f2:	08d7      	lsrs	r7, r2, #3
    78f4:	0749      	lsls	r1, r1, #29
    78f6:	430f      	orrs	r7, r1
    78f8:	0f7b      	lsrs	r3, r7, #29
    78fa:	00e4      	lsls	r4, r4, #3
    78fc:	431c      	orrs	r4, r3
    78fe:	00ff      	lsls	r7, r7, #3
    7900:	4e30      	ldr	r6, [pc, #192]	; (79c4 <__aeabi_dsub+0x624>)
    7902:	e5d3      	b.n	74ac <__aeabi_dsub+0x10c>
    7904:	4e2f      	ldr	r6, [pc, #188]	; (79c4 <__aeabi_dsub+0x624>)
    7906:	45b4      	cmp	ip, r6
    7908:	d1b4      	bne.n	7874 <__aeabi_dsub+0x4d4>
    790a:	000c      	movs	r4, r1
    790c:	0017      	movs	r7, r2
    790e:	4666      	mov	r6, ip
    7910:	e5cc      	b.n	74ac <__aeabi_dsub+0x10c>
    7912:	2700      	movs	r7, #0
    7914:	2400      	movs	r4, #0
    7916:	e5e8      	b.n	74ea <__aeabi_dsub+0x14a>
    7918:	2b00      	cmp	r3, #0
    791a:	d039      	beq.n	7990 <__aeabi_dsub+0x5f0>
    791c:	000b      	movs	r3, r1
    791e:	4313      	orrs	r3, r2
    7920:	d100      	bne.n	7924 <__aeabi_dsub+0x584>
    7922:	e744      	b.n	77ae <__aeabi_dsub+0x40e>
    7924:	08c0      	lsrs	r0, r0, #3
    7926:	0767      	lsls	r7, r4, #29
    7928:	4307      	orrs	r7, r0
    792a:	2080      	movs	r0, #128	; 0x80
    792c:	08e4      	lsrs	r4, r4, #3
    792e:	0300      	lsls	r0, r0, #12
    7930:	4204      	tst	r4, r0
    7932:	d0e1      	beq.n	78f8 <__aeabi_dsub+0x558>
    7934:	08cb      	lsrs	r3, r1, #3
    7936:	4203      	tst	r3, r0
    7938:	d1de      	bne.n	78f8 <__aeabi_dsub+0x558>
    793a:	08d7      	lsrs	r7, r2, #3
    793c:	0749      	lsls	r1, r1, #29
    793e:	430f      	orrs	r7, r1
    7940:	001c      	movs	r4, r3
    7942:	e7d9      	b.n	78f8 <__aeabi_dsub+0x558>
    7944:	2100      	movs	r1, #0
    7946:	e771      	b.n	782c <__aeabi_dsub+0x48c>
    7948:	2500      	movs	r5, #0
    794a:	2700      	movs	r7, #0
    794c:	e5e9      	b.n	7522 <__aeabi_dsub+0x182>
    794e:	002e      	movs	r6, r5
    7950:	0027      	movs	r7, r4
    7952:	3e20      	subs	r6, #32
    7954:	40f7      	lsrs	r7, r6
    7956:	2d20      	cmp	r5, #32
    7958:	d02f      	beq.n	79ba <__aeabi_dsub+0x61a>
    795a:	2640      	movs	r6, #64	; 0x40
    795c:	1b75      	subs	r5, r6, r5
    795e:	40ac      	lsls	r4, r5
    7960:	4650      	mov	r0, sl
    7962:	4320      	orrs	r0, r4
    7964:	1e44      	subs	r4, r0, #1
    7966:	41a0      	sbcs	r0, r4
    7968:	2400      	movs	r4, #0
    796a:	4338      	orrs	r0, r7
    796c:	e6dc      	b.n	7728 <__aeabi_dsub+0x388>
    796e:	2480      	movs	r4, #128	; 0x80
    7970:	2500      	movs	r5, #0
    7972:	0324      	lsls	r4, r4, #12
    7974:	4e13      	ldr	r6, [pc, #76]	; (79c4 <__aeabi_dsub+0x624>)
    7976:	2700      	movs	r7, #0
    7978:	e5d3      	b.n	7522 <__aeabi_dsub+0x182>
    797a:	4650      	mov	r0, sl
    797c:	4320      	orrs	r0, r4
    797e:	0007      	movs	r7, r0
    7980:	1e78      	subs	r0, r7, #1
    7982:	4187      	sbcs	r7, r0
    7984:	2400      	movs	r4, #0
    7986:	18bf      	adds	r7, r7, r2
    7988:	e760      	b.n	784c <__aeabi_dsub+0x4ac>
    798a:	000c      	movs	r4, r1
    798c:	0017      	movs	r7, r2
    798e:	e58d      	b.n	74ac <__aeabi_dsub+0x10c>
    7990:	000c      	movs	r4, r1
    7992:	0017      	movs	r7, r2
    7994:	4e0b      	ldr	r6, [pc, #44]	; (79c4 <__aeabi_dsub+0x624>)
    7996:	e589      	b.n	74ac <__aeabi_dsub+0x10c>
    7998:	001e      	movs	r6, r3
    799a:	0027      	movs	r7, r4
    799c:	3e20      	subs	r6, #32
    799e:	40f7      	lsrs	r7, r6
    79a0:	2b20      	cmp	r3, #32
    79a2:	d00c      	beq.n	79be <__aeabi_dsub+0x61e>
    79a4:	2640      	movs	r6, #64	; 0x40
    79a6:	1af3      	subs	r3, r6, r3
    79a8:	409c      	lsls	r4, r3
    79aa:	4650      	mov	r0, sl
    79ac:	4320      	orrs	r0, r4
    79ae:	1e44      	subs	r4, r0, #1
    79b0:	41a0      	sbcs	r0, r4
    79b2:	4307      	orrs	r7, r0
    79b4:	2400      	movs	r4, #0
    79b6:	18bf      	adds	r7, r7, r2
    79b8:	e748      	b.n	784c <__aeabi_dsub+0x4ac>
    79ba:	2400      	movs	r4, #0
    79bc:	e7d0      	b.n	7960 <__aeabi_dsub+0x5c0>
    79be:	2400      	movs	r4, #0
    79c0:	e7f3      	b.n	79aa <__aeabi_dsub+0x60a>
    79c2:	46c0      	nop			; (mov r8, r8)
    79c4:	000007ff 	.word	0x000007ff
    79c8:	ff7fffff 	.word	0xff7fffff

000079cc <__aeabi_d2iz>:
    79cc:	b530      	push	{r4, r5, lr}
    79ce:	4d13      	ldr	r5, [pc, #76]	; (7a1c <__aeabi_d2iz+0x50>)
    79d0:	030a      	lsls	r2, r1, #12
    79d2:	004b      	lsls	r3, r1, #1
    79d4:	0b12      	lsrs	r2, r2, #12
    79d6:	0d5b      	lsrs	r3, r3, #21
    79d8:	0fc9      	lsrs	r1, r1, #31
    79da:	2400      	movs	r4, #0
    79dc:	42ab      	cmp	r3, r5
    79de:	dd10      	ble.n	7a02 <__aeabi_d2iz+0x36>
    79e0:	4c0f      	ldr	r4, [pc, #60]	; (7a20 <__aeabi_d2iz+0x54>)
    79e2:	42a3      	cmp	r3, r4
    79e4:	dc0f      	bgt.n	7a06 <__aeabi_d2iz+0x3a>
    79e6:	2480      	movs	r4, #128	; 0x80
    79e8:	4d0e      	ldr	r5, [pc, #56]	; (7a24 <__aeabi_d2iz+0x58>)
    79ea:	0364      	lsls	r4, r4, #13
    79ec:	4322      	orrs	r2, r4
    79ee:	1aed      	subs	r5, r5, r3
    79f0:	2d1f      	cmp	r5, #31
    79f2:	dd0b      	ble.n	7a0c <__aeabi_d2iz+0x40>
    79f4:	480c      	ldr	r0, [pc, #48]	; (7a28 <__aeabi_d2iz+0x5c>)
    79f6:	1ac3      	subs	r3, r0, r3
    79f8:	40da      	lsrs	r2, r3
    79fa:	4254      	negs	r4, r2
    79fc:	2900      	cmp	r1, #0
    79fe:	d100      	bne.n	7a02 <__aeabi_d2iz+0x36>
    7a00:	0014      	movs	r4, r2
    7a02:	0020      	movs	r0, r4
    7a04:	bd30      	pop	{r4, r5, pc}
    7a06:	4b09      	ldr	r3, [pc, #36]	; (7a2c <__aeabi_d2iz+0x60>)
    7a08:	18cc      	adds	r4, r1, r3
    7a0a:	e7fa      	b.n	7a02 <__aeabi_d2iz+0x36>
    7a0c:	4c08      	ldr	r4, [pc, #32]	; (7a30 <__aeabi_d2iz+0x64>)
    7a0e:	40e8      	lsrs	r0, r5
    7a10:	46a4      	mov	ip, r4
    7a12:	4463      	add	r3, ip
    7a14:	409a      	lsls	r2, r3
    7a16:	4302      	orrs	r2, r0
    7a18:	e7ef      	b.n	79fa <__aeabi_d2iz+0x2e>
    7a1a:	46c0      	nop			; (mov r8, r8)
    7a1c:	000003fe 	.word	0x000003fe
    7a20:	0000041d 	.word	0x0000041d
    7a24:	00000433 	.word	0x00000433
    7a28:	00000413 	.word	0x00000413
    7a2c:	7fffffff 	.word	0x7fffffff
    7a30:	fffffbed 	.word	0xfffffbed

00007a34 <__aeabi_ui2d>:
    7a34:	b510      	push	{r4, lr}
    7a36:	1e04      	subs	r4, r0, #0
    7a38:	d028      	beq.n	7a8c <__aeabi_ui2d+0x58>
    7a3a:	f000 f90f 	bl	7c5c <__clzsi2>
    7a3e:	4b15      	ldr	r3, [pc, #84]	; (7a94 <__aeabi_ui2d+0x60>)
    7a40:	4a15      	ldr	r2, [pc, #84]	; (7a98 <__aeabi_ui2d+0x64>)
    7a42:	1a1b      	subs	r3, r3, r0
    7a44:	1ad2      	subs	r2, r2, r3
    7a46:	2a1f      	cmp	r2, #31
    7a48:	dd15      	ble.n	7a76 <__aeabi_ui2d+0x42>
    7a4a:	4a14      	ldr	r2, [pc, #80]	; (7a9c <__aeabi_ui2d+0x68>)
    7a4c:	1ad2      	subs	r2, r2, r3
    7a4e:	4094      	lsls	r4, r2
    7a50:	2200      	movs	r2, #0
    7a52:	0324      	lsls	r4, r4, #12
    7a54:	055b      	lsls	r3, r3, #21
    7a56:	0b24      	lsrs	r4, r4, #12
    7a58:	0d5b      	lsrs	r3, r3, #21
    7a5a:	2100      	movs	r1, #0
    7a5c:	0010      	movs	r0, r2
    7a5e:	0324      	lsls	r4, r4, #12
    7a60:	0d0a      	lsrs	r2, r1, #20
    7a62:	0b24      	lsrs	r4, r4, #12
    7a64:	0512      	lsls	r2, r2, #20
    7a66:	4322      	orrs	r2, r4
    7a68:	4c0d      	ldr	r4, [pc, #52]	; (7aa0 <__aeabi_ui2d+0x6c>)
    7a6a:	051b      	lsls	r3, r3, #20
    7a6c:	4022      	ands	r2, r4
    7a6e:	4313      	orrs	r3, r2
    7a70:	005b      	lsls	r3, r3, #1
    7a72:	0859      	lsrs	r1, r3, #1
    7a74:	bd10      	pop	{r4, pc}
    7a76:	0021      	movs	r1, r4
    7a78:	4091      	lsls	r1, r2
    7a7a:	000a      	movs	r2, r1
    7a7c:	210b      	movs	r1, #11
    7a7e:	1a08      	subs	r0, r1, r0
    7a80:	40c4      	lsrs	r4, r0
    7a82:	055b      	lsls	r3, r3, #21
    7a84:	0324      	lsls	r4, r4, #12
    7a86:	0b24      	lsrs	r4, r4, #12
    7a88:	0d5b      	lsrs	r3, r3, #21
    7a8a:	e7e6      	b.n	7a5a <__aeabi_ui2d+0x26>
    7a8c:	2300      	movs	r3, #0
    7a8e:	2400      	movs	r4, #0
    7a90:	2200      	movs	r2, #0
    7a92:	e7e2      	b.n	7a5a <__aeabi_ui2d+0x26>
    7a94:	0000041e 	.word	0x0000041e
    7a98:	00000433 	.word	0x00000433
    7a9c:	00000413 	.word	0x00000413
    7aa0:	800fffff 	.word	0x800fffff

00007aa4 <__aeabi_f2d>:
    7aa4:	0041      	lsls	r1, r0, #1
    7aa6:	0e09      	lsrs	r1, r1, #24
    7aa8:	1c4b      	adds	r3, r1, #1
    7aaa:	b570      	push	{r4, r5, r6, lr}
    7aac:	b2db      	uxtb	r3, r3
    7aae:	0246      	lsls	r6, r0, #9
    7ab0:	0a75      	lsrs	r5, r6, #9
    7ab2:	0fc4      	lsrs	r4, r0, #31
    7ab4:	2b01      	cmp	r3, #1
    7ab6:	dd14      	ble.n	7ae2 <__aeabi_f2d+0x3e>
    7ab8:	23e0      	movs	r3, #224	; 0xe0
    7aba:	009b      	lsls	r3, r3, #2
    7abc:	076d      	lsls	r5, r5, #29
    7abe:	0b36      	lsrs	r6, r6, #12
    7ac0:	18cb      	adds	r3, r1, r3
    7ac2:	2100      	movs	r1, #0
    7ac4:	0d0a      	lsrs	r2, r1, #20
    7ac6:	0028      	movs	r0, r5
    7ac8:	0512      	lsls	r2, r2, #20
    7aca:	4d1c      	ldr	r5, [pc, #112]	; (7b3c <__aeabi_f2d+0x98>)
    7acc:	4332      	orrs	r2, r6
    7ace:	055b      	lsls	r3, r3, #21
    7ad0:	402a      	ands	r2, r5
    7ad2:	085b      	lsrs	r3, r3, #1
    7ad4:	4313      	orrs	r3, r2
    7ad6:	005b      	lsls	r3, r3, #1
    7ad8:	07e4      	lsls	r4, r4, #31
    7ada:	085b      	lsrs	r3, r3, #1
    7adc:	4323      	orrs	r3, r4
    7ade:	0019      	movs	r1, r3
    7ae0:	bd70      	pop	{r4, r5, r6, pc}
    7ae2:	2900      	cmp	r1, #0
    7ae4:	d114      	bne.n	7b10 <__aeabi_f2d+0x6c>
    7ae6:	2d00      	cmp	r5, #0
    7ae8:	d01e      	beq.n	7b28 <__aeabi_f2d+0x84>
    7aea:	0028      	movs	r0, r5
    7aec:	f000 f8b6 	bl	7c5c <__clzsi2>
    7af0:	280a      	cmp	r0, #10
    7af2:	dc1c      	bgt.n	7b2e <__aeabi_f2d+0x8a>
    7af4:	230b      	movs	r3, #11
    7af6:	002a      	movs	r2, r5
    7af8:	1a1b      	subs	r3, r3, r0
    7afa:	40da      	lsrs	r2, r3
    7afc:	0003      	movs	r3, r0
    7afe:	3315      	adds	r3, #21
    7b00:	409d      	lsls	r5, r3
    7b02:	4b0f      	ldr	r3, [pc, #60]	; (7b40 <__aeabi_f2d+0x9c>)
    7b04:	0312      	lsls	r2, r2, #12
    7b06:	1a1b      	subs	r3, r3, r0
    7b08:	055b      	lsls	r3, r3, #21
    7b0a:	0b16      	lsrs	r6, r2, #12
    7b0c:	0d5b      	lsrs	r3, r3, #21
    7b0e:	e7d8      	b.n	7ac2 <__aeabi_f2d+0x1e>
    7b10:	2d00      	cmp	r5, #0
    7b12:	d006      	beq.n	7b22 <__aeabi_f2d+0x7e>
    7b14:	0b32      	lsrs	r2, r6, #12
    7b16:	2680      	movs	r6, #128	; 0x80
    7b18:	0336      	lsls	r6, r6, #12
    7b1a:	076d      	lsls	r5, r5, #29
    7b1c:	4316      	orrs	r6, r2
    7b1e:	4b09      	ldr	r3, [pc, #36]	; (7b44 <__aeabi_f2d+0xa0>)
    7b20:	e7cf      	b.n	7ac2 <__aeabi_f2d+0x1e>
    7b22:	4b08      	ldr	r3, [pc, #32]	; (7b44 <__aeabi_f2d+0xa0>)
    7b24:	2600      	movs	r6, #0
    7b26:	e7cc      	b.n	7ac2 <__aeabi_f2d+0x1e>
    7b28:	2300      	movs	r3, #0
    7b2a:	2600      	movs	r6, #0
    7b2c:	e7c9      	b.n	7ac2 <__aeabi_f2d+0x1e>
    7b2e:	0003      	movs	r3, r0
    7b30:	002a      	movs	r2, r5
    7b32:	3b0b      	subs	r3, #11
    7b34:	409a      	lsls	r2, r3
    7b36:	2500      	movs	r5, #0
    7b38:	e7e3      	b.n	7b02 <__aeabi_f2d+0x5e>
    7b3a:	46c0      	nop			; (mov r8, r8)
    7b3c:	800fffff 	.word	0x800fffff
    7b40:	00000389 	.word	0x00000389
    7b44:	000007ff 	.word	0x000007ff

00007b48 <__aeabi_d2f>:
    7b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b4a:	004c      	lsls	r4, r1, #1
    7b4c:	0d64      	lsrs	r4, r4, #21
    7b4e:	030b      	lsls	r3, r1, #12
    7b50:	1c62      	adds	r2, r4, #1
    7b52:	0f45      	lsrs	r5, r0, #29
    7b54:	0a5b      	lsrs	r3, r3, #9
    7b56:	0552      	lsls	r2, r2, #21
    7b58:	432b      	orrs	r3, r5
    7b5a:	0fc9      	lsrs	r1, r1, #31
    7b5c:	00c5      	lsls	r5, r0, #3
    7b5e:	0d52      	lsrs	r2, r2, #21
    7b60:	2a01      	cmp	r2, #1
    7b62:	dd28      	ble.n	7bb6 <__aeabi_d2f+0x6e>
    7b64:	4a3a      	ldr	r2, [pc, #232]	; (7c50 <__aeabi_d2f+0x108>)
    7b66:	18a6      	adds	r6, r4, r2
    7b68:	2efe      	cmp	r6, #254	; 0xfe
    7b6a:	dc1b      	bgt.n	7ba4 <__aeabi_d2f+0x5c>
    7b6c:	2e00      	cmp	r6, #0
    7b6e:	dd3e      	ble.n	7bee <__aeabi_d2f+0xa6>
    7b70:	0180      	lsls	r0, r0, #6
    7b72:	0002      	movs	r2, r0
    7b74:	1e50      	subs	r0, r2, #1
    7b76:	4182      	sbcs	r2, r0
    7b78:	0f6d      	lsrs	r5, r5, #29
    7b7a:	432a      	orrs	r2, r5
    7b7c:	00db      	lsls	r3, r3, #3
    7b7e:	4313      	orrs	r3, r2
    7b80:	075a      	lsls	r2, r3, #29
    7b82:	d004      	beq.n	7b8e <__aeabi_d2f+0x46>
    7b84:	220f      	movs	r2, #15
    7b86:	401a      	ands	r2, r3
    7b88:	2a04      	cmp	r2, #4
    7b8a:	d000      	beq.n	7b8e <__aeabi_d2f+0x46>
    7b8c:	3304      	adds	r3, #4
    7b8e:	2280      	movs	r2, #128	; 0x80
    7b90:	04d2      	lsls	r2, r2, #19
    7b92:	401a      	ands	r2, r3
    7b94:	d05a      	beq.n	7c4c <__aeabi_d2f+0x104>
    7b96:	3601      	adds	r6, #1
    7b98:	2eff      	cmp	r6, #255	; 0xff
    7b9a:	d003      	beq.n	7ba4 <__aeabi_d2f+0x5c>
    7b9c:	019b      	lsls	r3, r3, #6
    7b9e:	0a5b      	lsrs	r3, r3, #9
    7ba0:	b2f4      	uxtb	r4, r6
    7ba2:	e001      	b.n	7ba8 <__aeabi_d2f+0x60>
    7ba4:	24ff      	movs	r4, #255	; 0xff
    7ba6:	2300      	movs	r3, #0
    7ba8:	0258      	lsls	r0, r3, #9
    7baa:	05e4      	lsls	r4, r4, #23
    7bac:	0a40      	lsrs	r0, r0, #9
    7bae:	07c9      	lsls	r1, r1, #31
    7bb0:	4320      	orrs	r0, r4
    7bb2:	4308      	orrs	r0, r1
    7bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bb6:	2c00      	cmp	r4, #0
    7bb8:	d007      	beq.n	7bca <__aeabi_d2f+0x82>
    7bba:	431d      	orrs	r5, r3
    7bbc:	d0f2      	beq.n	7ba4 <__aeabi_d2f+0x5c>
    7bbe:	2080      	movs	r0, #128	; 0x80
    7bc0:	00db      	lsls	r3, r3, #3
    7bc2:	0480      	lsls	r0, r0, #18
    7bc4:	4303      	orrs	r3, r0
    7bc6:	26ff      	movs	r6, #255	; 0xff
    7bc8:	e7da      	b.n	7b80 <__aeabi_d2f+0x38>
    7bca:	432b      	orrs	r3, r5
    7bcc:	d003      	beq.n	7bd6 <__aeabi_d2f+0x8e>
    7bce:	2305      	movs	r3, #5
    7bd0:	08db      	lsrs	r3, r3, #3
    7bd2:	2cff      	cmp	r4, #255	; 0xff
    7bd4:	d003      	beq.n	7bde <__aeabi_d2f+0x96>
    7bd6:	025b      	lsls	r3, r3, #9
    7bd8:	0a5b      	lsrs	r3, r3, #9
    7bda:	b2e4      	uxtb	r4, r4
    7bdc:	e7e4      	b.n	7ba8 <__aeabi_d2f+0x60>
    7bde:	2b00      	cmp	r3, #0
    7be0:	d032      	beq.n	7c48 <__aeabi_d2f+0x100>
    7be2:	2080      	movs	r0, #128	; 0x80
    7be4:	03c0      	lsls	r0, r0, #15
    7be6:	4303      	orrs	r3, r0
    7be8:	025b      	lsls	r3, r3, #9
    7bea:	0a5b      	lsrs	r3, r3, #9
    7bec:	e7dc      	b.n	7ba8 <__aeabi_d2f+0x60>
    7bee:	0032      	movs	r2, r6
    7bf0:	3217      	adds	r2, #23
    7bf2:	db14      	blt.n	7c1e <__aeabi_d2f+0xd6>
    7bf4:	2280      	movs	r2, #128	; 0x80
    7bf6:	271e      	movs	r7, #30
    7bf8:	0412      	lsls	r2, r2, #16
    7bfa:	4313      	orrs	r3, r2
    7bfc:	1bbf      	subs	r7, r7, r6
    7bfe:	2f1f      	cmp	r7, #31
    7c00:	dc0f      	bgt.n	7c22 <__aeabi_d2f+0xda>
    7c02:	4a14      	ldr	r2, [pc, #80]	; (7c54 <__aeabi_d2f+0x10c>)
    7c04:	4694      	mov	ip, r2
    7c06:	4464      	add	r4, ip
    7c08:	002a      	movs	r2, r5
    7c0a:	40a5      	lsls	r5, r4
    7c0c:	002e      	movs	r6, r5
    7c0e:	40a3      	lsls	r3, r4
    7c10:	1e75      	subs	r5, r6, #1
    7c12:	41ae      	sbcs	r6, r5
    7c14:	40fa      	lsrs	r2, r7
    7c16:	4333      	orrs	r3, r6
    7c18:	4313      	orrs	r3, r2
    7c1a:	2600      	movs	r6, #0
    7c1c:	e7b0      	b.n	7b80 <__aeabi_d2f+0x38>
    7c1e:	2400      	movs	r4, #0
    7c20:	e7d5      	b.n	7bce <__aeabi_d2f+0x86>
    7c22:	2202      	movs	r2, #2
    7c24:	4252      	negs	r2, r2
    7c26:	1b96      	subs	r6, r2, r6
    7c28:	001a      	movs	r2, r3
    7c2a:	40f2      	lsrs	r2, r6
    7c2c:	2f20      	cmp	r7, #32
    7c2e:	d009      	beq.n	7c44 <__aeabi_d2f+0xfc>
    7c30:	4809      	ldr	r0, [pc, #36]	; (7c58 <__aeabi_d2f+0x110>)
    7c32:	4684      	mov	ip, r0
    7c34:	4464      	add	r4, ip
    7c36:	40a3      	lsls	r3, r4
    7c38:	432b      	orrs	r3, r5
    7c3a:	1e5d      	subs	r5, r3, #1
    7c3c:	41ab      	sbcs	r3, r5
    7c3e:	2600      	movs	r6, #0
    7c40:	4313      	orrs	r3, r2
    7c42:	e79d      	b.n	7b80 <__aeabi_d2f+0x38>
    7c44:	2300      	movs	r3, #0
    7c46:	e7f7      	b.n	7c38 <__aeabi_d2f+0xf0>
    7c48:	2300      	movs	r3, #0
    7c4a:	e7ad      	b.n	7ba8 <__aeabi_d2f+0x60>
    7c4c:	0034      	movs	r4, r6
    7c4e:	e7bf      	b.n	7bd0 <__aeabi_d2f+0x88>
    7c50:	fffffc80 	.word	0xfffffc80
    7c54:	fffffc82 	.word	0xfffffc82
    7c58:	fffffca2 	.word	0xfffffca2

00007c5c <__clzsi2>:
    7c5c:	211c      	movs	r1, #28
    7c5e:	2301      	movs	r3, #1
    7c60:	041b      	lsls	r3, r3, #16
    7c62:	4298      	cmp	r0, r3
    7c64:	d301      	bcc.n	7c6a <__clzsi2+0xe>
    7c66:	0c00      	lsrs	r0, r0, #16
    7c68:	3910      	subs	r1, #16
    7c6a:	0a1b      	lsrs	r3, r3, #8
    7c6c:	4298      	cmp	r0, r3
    7c6e:	d301      	bcc.n	7c74 <__clzsi2+0x18>
    7c70:	0a00      	lsrs	r0, r0, #8
    7c72:	3908      	subs	r1, #8
    7c74:	091b      	lsrs	r3, r3, #4
    7c76:	4298      	cmp	r0, r3
    7c78:	d301      	bcc.n	7c7e <__clzsi2+0x22>
    7c7a:	0900      	lsrs	r0, r0, #4
    7c7c:	3904      	subs	r1, #4
    7c7e:	a202      	add	r2, pc, #8	; (adr r2, 7c88 <__clzsi2+0x2c>)
    7c80:	5c10      	ldrb	r0, [r2, r0]
    7c82:	1840      	adds	r0, r0, r1
    7c84:	4770      	bx	lr
    7c86:	46c0      	nop			; (mov r8, r8)
    7c88:	02020304 	.word	0x02020304
    7c8c:	01010101 	.word	0x01010101
	...

00007c98 <__clzdi2>:
    7c98:	b510      	push	{r4, lr}
    7c9a:	2900      	cmp	r1, #0
    7c9c:	d103      	bne.n	7ca6 <__clzdi2+0xe>
    7c9e:	f7ff ffdd 	bl	7c5c <__clzsi2>
    7ca2:	3020      	adds	r0, #32
    7ca4:	e002      	b.n	7cac <__clzdi2+0x14>
    7ca6:	1c08      	adds	r0, r1, #0
    7ca8:	f7ff ffd8 	bl	7c5c <__clzsi2>
    7cac:	bd10      	pop	{r4, pc}
    7cae:	46c0      	nop			; (mov r8, r8)

00007cb0 <__libc_init_array>:
    7cb0:	b570      	push	{r4, r5, r6, lr}
    7cb2:	2600      	movs	r6, #0
    7cb4:	4d0c      	ldr	r5, [pc, #48]	; (7ce8 <__libc_init_array+0x38>)
    7cb6:	4c0d      	ldr	r4, [pc, #52]	; (7cec <__libc_init_array+0x3c>)
    7cb8:	1b64      	subs	r4, r4, r5
    7cba:	10a4      	asrs	r4, r4, #2
    7cbc:	42a6      	cmp	r6, r4
    7cbe:	d109      	bne.n	7cd4 <__libc_init_array+0x24>
    7cc0:	2600      	movs	r6, #0
    7cc2:	f000 fed3 	bl	8a6c <_init>
    7cc6:	4d0a      	ldr	r5, [pc, #40]	; (7cf0 <__libc_init_array+0x40>)
    7cc8:	4c0a      	ldr	r4, [pc, #40]	; (7cf4 <__libc_init_array+0x44>)
    7cca:	1b64      	subs	r4, r4, r5
    7ccc:	10a4      	asrs	r4, r4, #2
    7cce:	42a6      	cmp	r6, r4
    7cd0:	d105      	bne.n	7cde <__libc_init_array+0x2e>
    7cd2:	bd70      	pop	{r4, r5, r6, pc}
    7cd4:	00b3      	lsls	r3, r6, #2
    7cd6:	58eb      	ldr	r3, [r5, r3]
    7cd8:	4798      	blx	r3
    7cda:	3601      	adds	r6, #1
    7cdc:	e7ee      	b.n	7cbc <__libc_init_array+0xc>
    7cde:	00b3      	lsls	r3, r6, #2
    7ce0:	58eb      	ldr	r3, [r5, r3]
    7ce2:	4798      	blx	r3
    7ce4:	3601      	adds	r6, #1
    7ce6:	e7f2      	b.n	7cce <__libc_init_array+0x1e>
    7ce8:	00008a78 	.word	0x00008a78
    7cec:	00008a78 	.word	0x00008a78
    7cf0:	00008a78 	.word	0x00008a78
    7cf4:	00008a7c 	.word	0x00008a7c

00007cf8 <malloc>:
    7cf8:	b510      	push	{r4, lr}
    7cfa:	4b03      	ldr	r3, [pc, #12]	; (7d08 <malloc+0x10>)
    7cfc:	0001      	movs	r1, r0
    7cfe:	6818      	ldr	r0, [r3, #0]
    7d00:	f000 f858 	bl	7db4 <_malloc_r>
    7d04:	bd10      	pop	{r4, pc}
    7d06:	46c0      	nop			; (mov r8, r8)
    7d08:	20000024 	.word	0x20000024

00007d0c <memcpy>:
    7d0c:	2300      	movs	r3, #0
    7d0e:	b510      	push	{r4, lr}
    7d10:	429a      	cmp	r2, r3
    7d12:	d100      	bne.n	7d16 <memcpy+0xa>
    7d14:	bd10      	pop	{r4, pc}
    7d16:	5ccc      	ldrb	r4, [r1, r3]
    7d18:	54c4      	strb	r4, [r0, r3]
    7d1a:	3301      	adds	r3, #1
    7d1c:	e7f8      	b.n	7d10 <memcpy+0x4>
	...

00007d20 <_free_r>:
    7d20:	b570      	push	{r4, r5, r6, lr}
    7d22:	0005      	movs	r5, r0
    7d24:	2900      	cmp	r1, #0
    7d26:	d010      	beq.n	7d4a <_free_r+0x2a>
    7d28:	1f0c      	subs	r4, r1, #4
    7d2a:	6823      	ldr	r3, [r4, #0]
    7d2c:	2b00      	cmp	r3, #0
    7d2e:	da00      	bge.n	7d32 <_free_r+0x12>
    7d30:	18e4      	adds	r4, r4, r3
    7d32:	0028      	movs	r0, r5
    7d34:	f000 f8df 	bl	7ef6 <__malloc_lock>
    7d38:	4a1d      	ldr	r2, [pc, #116]	; (7db0 <_free_r+0x90>)
    7d3a:	6813      	ldr	r3, [r2, #0]
    7d3c:	2b00      	cmp	r3, #0
    7d3e:	d105      	bne.n	7d4c <_free_r+0x2c>
    7d40:	6063      	str	r3, [r4, #4]
    7d42:	6014      	str	r4, [r2, #0]
    7d44:	0028      	movs	r0, r5
    7d46:	f000 f8d7 	bl	7ef8 <__malloc_unlock>
    7d4a:	bd70      	pop	{r4, r5, r6, pc}
    7d4c:	42a3      	cmp	r3, r4
    7d4e:	d909      	bls.n	7d64 <_free_r+0x44>
    7d50:	6821      	ldr	r1, [r4, #0]
    7d52:	1860      	adds	r0, r4, r1
    7d54:	4283      	cmp	r3, r0
    7d56:	d1f3      	bne.n	7d40 <_free_r+0x20>
    7d58:	6818      	ldr	r0, [r3, #0]
    7d5a:	685b      	ldr	r3, [r3, #4]
    7d5c:	1841      	adds	r1, r0, r1
    7d5e:	6021      	str	r1, [r4, #0]
    7d60:	e7ee      	b.n	7d40 <_free_r+0x20>
    7d62:	0013      	movs	r3, r2
    7d64:	685a      	ldr	r2, [r3, #4]
    7d66:	2a00      	cmp	r2, #0
    7d68:	d001      	beq.n	7d6e <_free_r+0x4e>
    7d6a:	42a2      	cmp	r2, r4
    7d6c:	d9f9      	bls.n	7d62 <_free_r+0x42>
    7d6e:	6819      	ldr	r1, [r3, #0]
    7d70:	1858      	adds	r0, r3, r1
    7d72:	42a0      	cmp	r0, r4
    7d74:	d10b      	bne.n	7d8e <_free_r+0x6e>
    7d76:	6820      	ldr	r0, [r4, #0]
    7d78:	1809      	adds	r1, r1, r0
    7d7a:	1858      	adds	r0, r3, r1
    7d7c:	6019      	str	r1, [r3, #0]
    7d7e:	4282      	cmp	r2, r0
    7d80:	d1e0      	bne.n	7d44 <_free_r+0x24>
    7d82:	6810      	ldr	r0, [r2, #0]
    7d84:	6852      	ldr	r2, [r2, #4]
    7d86:	1841      	adds	r1, r0, r1
    7d88:	6019      	str	r1, [r3, #0]
    7d8a:	605a      	str	r2, [r3, #4]
    7d8c:	e7da      	b.n	7d44 <_free_r+0x24>
    7d8e:	42a0      	cmp	r0, r4
    7d90:	d902      	bls.n	7d98 <_free_r+0x78>
    7d92:	230c      	movs	r3, #12
    7d94:	602b      	str	r3, [r5, #0]
    7d96:	e7d5      	b.n	7d44 <_free_r+0x24>
    7d98:	6821      	ldr	r1, [r4, #0]
    7d9a:	1860      	adds	r0, r4, r1
    7d9c:	4282      	cmp	r2, r0
    7d9e:	d103      	bne.n	7da8 <_free_r+0x88>
    7da0:	6810      	ldr	r0, [r2, #0]
    7da2:	6852      	ldr	r2, [r2, #4]
    7da4:	1841      	adds	r1, r0, r1
    7da6:	6021      	str	r1, [r4, #0]
    7da8:	6062      	str	r2, [r4, #4]
    7daa:	605c      	str	r4, [r3, #4]
    7dac:	e7ca      	b.n	7d44 <_free_r+0x24>
    7dae:	46c0      	nop			; (mov r8, r8)
    7db0:	20001434 	.word	0x20001434

00007db4 <_malloc_r>:
    7db4:	2303      	movs	r3, #3
    7db6:	b570      	push	{r4, r5, r6, lr}
    7db8:	1ccd      	adds	r5, r1, #3
    7dba:	439d      	bics	r5, r3
    7dbc:	3508      	adds	r5, #8
    7dbe:	0006      	movs	r6, r0
    7dc0:	2d0c      	cmp	r5, #12
    7dc2:	d21e      	bcs.n	7e02 <_malloc_r+0x4e>
    7dc4:	250c      	movs	r5, #12
    7dc6:	42a9      	cmp	r1, r5
    7dc8:	d81d      	bhi.n	7e06 <_malloc_r+0x52>
    7dca:	0030      	movs	r0, r6
    7dcc:	f000 f893 	bl	7ef6 <__malloc_lock>
    7dd0:	4a25      	ldr	r2, [pc, #148]	; (7e68 <_malloc_r+0xb4>)
    7dd2:	6814      	ldr	r4, [r2, #0]
    7dd4:	0021      	movs	r1, r4
    7dd6:	2900      	cmp	r1, #0
    7dd8:	d119      	bne.n	7e0e <_malloc_r+0x5a>
    7dda:	4c24      	ldr	r4, [pc, #144]	; (7e6c <_malloc_r+0xb8>)
    7ddc:	6823      	ldr	r3, [r4, #0]
    7dde:	2b00      	cmp	r3, #0
    7de0:	d103      	bne.n	7dea <_malloc_r+0x36>
    7de2:	0030      	movs	r0, r6
    7de4:	f000 f844 	bl	7e70 <_sbrk_r>
    7de8:	6020      	str	r0, [r4, #0]
    7dea:	0029      	movs	r1, r5
    7dec:	0030      	movs	r0, r6
    7dee:	f000 f83f 	bl	7e70 <_sbrk_r>
    7df2:	1c43      	adds	r3, r0, #1
    7df4:	d12c      	bne.n	7e50 <_malloc_r+0x9c>
    7df6:	230c      	movs	r3, #12
    7df8:	0030      	movs	r0, r6
    7dfa:	6033      	str	r3, [r6, #0]
    7dfc:	f000 f87c 	bl	7ef8 <__malloc_unlock>
    7e00:	e003      	b.n	7e0a <_malloc_r+0x56>
    7e02:	2d00      	cmp	r5, #0
    7e04:	dadf      	bge.n	7dc6 <_malloc_r+0x12>
    7e06:	230c      	movs	r3, #12
    7e08:	6033      	str	r3, [r6, #0]
    7e0a:	2000      	movs	r0, #0
    7e0c:	bd70      	pop	{r4, r5, r6, pc}
    7e0e:	680b      	ldr	r3, [r1, #0]
    7e10:	1b5b      	subs	r3, r3, r5
    7e12:	d41a      	bmi.n	7e4a <_malloc_r+0x96>
    7e14:	2b0b      	cmp	r3, #11
    7e16:	d903      	bls.n	7e20 <_malloc_r+0x6c>
    7e18:	600b      	str	r3, [r1, #0]
    7e1a:	18cc      	adds	r4, r1, r3
    7e1c:	6025      	str	r5, [r4, #0]
    7e1e:	e003      	b.n	7e28 <_malloc_r+0x74>
    7e20:	428c      	cmp	r4, r1
    7e22:	d10e      	bne.n	7e42 <_malloc_r+0x8e>
    7e24:	6863      	ldr	r3, [r4, #4]
    7e26:	6013      	str	r3, [r2, #0]
    7e28:	0030      	movs	r0, r6
    7e2a:	f000 f865 	bl	7ef8 <__malloc_unlock>
    7e2e:	0020      	movs	r0, r4
    7e30:	2207      	movs	r2, #7
    7e32:	300b      	adds	r0, #11
    7e34:	1d23      	adds	r3, r4, #4
    7e36:	4390      	bics	r0, r2
    7e38:	1ac3      	subs	r3, r0, r3
    7e3a:	d0e7      	beq.n	7e0c <_malloc_r+0x58>
    7e3c:	425a      	negs	r2, r3
    7e3e:	50e2      	str	r2, [r4, r3]
    7e40:	e7e4      	b.n	7e0c <_malloc_r+0x58>
    7e42:	684b      	ldr	r3, [r1, #4]
    7e44:	6063      	str	r3, [r4, #4]
    7e46:	000c      	movs	r4, r1
    7e48:	e7ee      	b.n	7e28 <_malloc_r+0x74>
    7e4a:	000c      	movs	r4, r1
    7e4c:	6849      	ldr	r1, [r1, #4]
    7e4e:	e7c2      	b.n	7dd6 <_malloc_r+0x22>
    7e50:	2303      	movs	r3, #3
    7e52:	1cc4      	adds	r4, r0, #3
    7e54:	439c      	bics	r4, r3
    7e56:	42a0      	cmp	r0, r4
    7e58:	d0e0      	beq.n	7e1c <_malloc_r+0x68>
    7e5a:	1a21      	subs	r1, r4, r0
    7e5c:	0030      	movs	r0, r6
    7e5e:	f000 f807 	bl	7e70 <_sbrk_r>
    7e62:	1c43      	adds	r3, r0, #1
    7e64:	d1da      	bne.n	7e1c <_malloc_r+0x68>
    7e66:	e7c6      	b.n	7df6 <_malloc_r+0x42>
    7e68:	20001434 	.word	0x20001434
    7e6c:	20001438 	.word	0x20001438

00007e70 <_sbrk_r>:
    7e70:	2300      	movs	r3, #0
    7e72:	b570      	push	{r4, r5, r6, lr}
    7e74:	4c06      	ldr	r4, [pc, #24]	; (7e90 <_sbrk_r+0x20>)
    7e76:	0005      	movs	r5, r0
    7e78:	0008      	movs	r0, r1
    7e7a:	6023      	str	r3, [r4, #0]
    7e7c:	f7fc fdc8 	bl	4a10 <_sbrk>
    7e80:	1c43      	adds	r3, r0, #1
    7e82:	d103      	bne.n	7e8c <_sbrk_r+0x1c>
    7e84:	6823      	ldr	r3, [r4, #0]
    7e86:	2b00      	cmp	r3, #0
    7e88:	d000      	beq.n	7e8c <_sbrk_r+0x1c>
    7e8a:	602b      	str	r3, [r5, #0]
    7e8c:	bd70      	pop	{r4, r5, r6, pc}
    7e8e:	46c0      	nop			; (mov r8, r8)
    7e90:	2000235c 	.word	0x2000235c

00007e94 <siprintf>:
    7e94:	b40e      	push	{r1, r2, r3}
    7e96:	b510      	push	{r4, lr}
    7e98:	b09d      	sub	sp, #116	; 0x74
    7e9a:	a902      	add	r1, sp, #8
    7e9c:	9002      	str	r0, [sp, #8]
    7e9e:	6108      	str	r0, [r1, #16]
    7ea0:	480b      	ldr	r0, [pc, #44]	; (7ed0 <siprintf+0x3c>)
    7ea2:	2482      	movs	r4, #130	; 0x82
    7ea4:	6088      	str	r0, [r1, #8]
    7ea6:	6148      	str	r0, [r1, #20]
    7ea8:	2001      	movs	r0, #1
    7eaa:	4240      	negs	r0, r0
    7eac:	ab1f      	add	r3, sp, #124	; 0x7c
    7eae:	81c8      	strh	r0, [r1, #14]
    7eb0:	4808      	ldr	r0, [pc, #32]	; (7ed4 <siprintf+0x40>)
    7eb2:	cb04      	ldmia	r3!, {r2}
    7eb4:	00a4      	lsls	r4, r4, #2
    7eb6:	6800      	ldr	r0, [r0, #0]
    7eb8:	9301      	str	r3, [sp, #4]
    7eba:	818c      	strh	r4, [r1, #12]
    7ebc:	f000 f880 	bl	7fc0 <_svfiprintf_r>
    7ec0:	2300      	movs	r3, #0
    7ec2:	9a02      	ldr	r2, [sp, #8]
    7ec4:	7013      	strb	r3, [r2, #0]
    7ec6:	b01d      	add	sp, #116	; 0x74
    7ec8:	bc10      	pop	{r4}
    7eca:	bc08      	pop	{r3}
    7ecc:	b003      	add	sp, #12
    7ece:	4718      	bx	r3
    7ed0:	7fffffff 	.word	0x7fffffff
    7ed4:	20000024 	.word	0x20000024

00007ed8 <strcpy>:
    7ed8:	1c03      	adds	r3, r0, #0
    7eda:	780a      	ldrb	r2, [r1, #0]
    7edc:	3101      	adds	r1, #1
    7ede:	701a      	strb	r2, [r3, #0]
    7ee0:	3301      	adds	r3, #1
    7ee2:	2a00      	cmp	r2, #0
    7ee4:	d1f9      	bne.n	7eda <strcpy+0x2>
    7ee6:	4770      	bx	lr

00007ee8 <strlen>:
    7ee8:	2300      	movs	r3, #0
    7eea:	5cc2      	ldrb	r2, [r0, r3]
    7eec:	3301      	adds	r3, #1
    7eee:	2a00      	cmp	r2, #0
    7ef0:	d1fb      	bne.n	7eea <strlen+0x2>
    7ef2:	1e58      	subs	r0, r3, #1
    7ef4:	4770      	bx	lr

00007ef6 <__malloc_lock>:
    7ef6:	4770      	bx	lr

00007ef8 <__malloc_unlock>:
    7ef8:	4770      	bx	lr
	...

00007efc <__ssputs_r>:
    7efc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7efe:	688e      	ldr	r6, [r1, #8]
    7f00:	b085      	sub	sp, #20
    7f02:	0007      	movs	r7, r0
    7f04:	000c      	movs	r4, r1
    7f06:	9203      	str	r2, [sp, #12]
    7f08:	9301      	str	r3, [sp, #4]
    7f0a:	429e      	cmp	r6, r3
    7f0c:	d839      	bhi.n	7f82 <__ssputs_r+0x86>
    7f0e:	2390      	movs	r3, #144	; 0x90
    7f10:	898a      	ldrh	r2, [r1, #12]
    7f12:	00db      	lsls	r3, r3, #3
    7f14:	421a      	tst	r2, r3
    7f16:	d034      	beq.n	7f82 <__ssputs_r+0x86>
    7f18:	2503      	movs	r5, #3
    7f1a:	6909      	ldr	r1, [r1, #16]
    7f1c:	6823      	ldr	r3, [r4, #0]
    7f1e:	1a5b      	subs	r3, r3, r1
    7f20:	9302      	str	r3, [sp, #8]
    7f22:	6963      	ldr	r3, [r4, #20]
    7f24:	9802      	ldr	r0, [sp, #8]
    7f26:	435d      	muls	r5, r3
    7f28:	0feb      	lsrs	r3, r5, #31
    7f2a:	195d      	adds	r5, r3, r5
    7f2c:	9b01      	ldr	r3, [sp, #4]
    7f2e:	106d      	asrs	r5, r5, #1
    7f30:	3301      	adds	r3, #1
    7f32:	181b      	adds	r3, r3, r0
    7f34:	42ab      	cmp	r3, r5
    7f36:	d900      	bls.n	7f3a <__ssputs_r+0x3e>
    7f38:	001d      	movs	r5, r3
    7f3a:	0553      	lsls	r3, r2, #21
    7f3c:	d532      	bpl.n	7fa4 <__ssputs_r+0xa8>
    7f3e:	0029      	movs	r1, r5
    7f40:	0038      	movs	r0, r7
    7f42:	f7ff ff37 	bl	7db4 <_malloc_r>
    7f46:	1e06      	subs	r6, r0, #0
    7f48:	d109      	bne.n	7f5e <__ssputs_r+0x62>
    7f4a:	230c      	movs	r3, #12
    7f4c:	603b      	str	r3, [r7, #0]
    7f4e:	2340      	movs	r3, #64	; 0x40
    7f50:	2001      	movs	r0, #1
    7f52:	89a2      	ldrh	r2, [r4, #12]
    7f54:	4240      	negs	r0, r0
    7f56:	4313      	orrs	r3, r2
    7f58:	81a3      	strh	r3, [r4, #12]
    7f5a:	b005      	add	sp, #20
    7f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f5e:	9a02      	ldr	r2, [sp, #8]
    7f60:	6921      	ldr	r1, [r4, #16]
    7f62:	f7ff fed3 	bl	7d0c <memcpy>
    7f66:	89a3      	ldrh	r3, [r4, #12]
    7f68:	4a14      	ldr	r2, [pc, #80]	; (7fbc <__ssputs_r+0xc0>)
    7f6a:	401a      	ands	r2, r3
    7f6c:	2380      	movs	r3, #128	; 0x80
    7f6e:	4313      	orrs	r3, r2
    7f70:	81a3      	strh	r3, [r4, #12]
    7f72:	9b02      	ldr	r3, [sp, #8]
    7f74:	6126      	str	r6, [r4, #16]
    7f76:	18f6      	adds	r6, r6, r3
    7f78:	6026      	str	r6, [r4, #0]
    7f7a:	6165      	str	r5, [r4, #20]
    7f7c:	9e01      	ldr	r6, [sp, #4]
    7f7e:	1aed      	subs	r5, r5, r3
    7f80:	60a5      	str	r5, [r4, #8]
    7f82:	9b01      	ldr	r3, [sp, #4]
    7f84:	42b3      	cmp	r3, r6
    7f86:	d200      	bcs.n	7f8a <__ssputs_r+0x8e>
    7f88:	001e      	movs	r6, r3
    7f8a:	0032      	movs	r2, r6
    7f8c:	9903      	ldr	r1, [sp, #12]
    7f8e:	6820      	ldr	r0, [r4, #0]
    7f90:	f000 faad 	bl	84ee <memmove>
    7f94:	68a3      	ldr	r3, [r4, #8]
    7f96:	2000      	movs	r0, #0
    7f98:	1b9b      	subs	r3, r3, r6
    7f9a:	60a3      	str	r3, [r4, #8]
    7f9c:	6823      	ldr	r3, [r4, #0]
    7f9e:	199e      	adds	r6, r3, r6
    7fa0:	6026      	str	r6, [r4, #0]
    7fa2:	e7da      	b.n	7f5a <__ssputs_r+0x5e>
    7fa4:	002a      	movs	r2, r5
    7fa6:	0038      	movs	r0, r7
    7fa8:	f000 fab3 	bl	8512 <_realloc_r>
    7fac:	1e06      	subs	r6, r0, #0
    7fae:	d1e0      	bne.n	7f72 <__ssputs_r+0x76>
    7fb0:	6921      	ldr	r1, [r4, #16]
    7fb2:	0038      	movs	r0, r7
    7fb4:	f7ff feb4 	bl	7d20 <_free_r>
    7fb8:	e7c7      	b.n	7f4a <__ssputs_r+0x4e>
    7fba:	46c0      	nop			; (mov r8, r8)
    7fbc:	fffffb7f 	.word	0xfffffb7f

00007fc0 <_svfiprintf_r>:
    7fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fc2:	b09f      	sub	sp, #124	; 0x7c
    7fc4:	9002      	str	r0, [sp, #8]
    7fc6:	9305      	str	r3, [sp, #20]
    7fc8:	898b      	ldrh	r3, [r1, #12]
    7fca:	000f      	movs	r7, r1
    7fcc:	0016      	movs	r6, r2
    7fce:	061b      	lsls	r3, r3, #24
    7fd0:	d511      	bpl.n	7ff6 <_svfiprintf_r+0x36>
    7fd2:	690b      	ldr	r3, [r1, #16]
    7fd4:	2b00      	cmp	r3, #0
    7fd6:	d10e      	bne.n	7ff6 <_svfiprintf_r+0x36>
    7fd8:	2140      	movs	r1, #64	; 0x40
    7fda:	f7ff feeb 	bl	7db4 <_malloc_r>
    7fde:	6038      	str	r0, [r7, #0]
    7fe0:	6138      	str	r0, [r7, #16]
    7fe2:	2800      	cmp	r0, #0
    7fe4:	d105      	bne.n	7ff2 <_svfiprintf_r+0x32>
    7fe6:	230c      	movs	r3, #12
    7fe8:	9a02      	ldr	r2, [sp, #8]
    7fea:	3801      	subs	r0, #1
    7fec:	6013      	str	r3, [r2, #0]
    7fee:	b01f      	add	sp, #124	; 0x7c
    7ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ff2:	2340      	movs	r3, #64	; 0x40
    7ff4:	617b      	str	r3, [r7, #20]
    7ff6:	2300      	movs	r3, #0
    7ff8:	ad06      	add	r5, sp, #24
    7ffa:	616b      	str	r3, [r5, #20]
    7ffc:	3320      	adds	r3, #32
    7ffe:	766b      	strb	r3, [r5, #25]
    8000:	3310      	adds	r3, #16
    8002:	76ab      	strb	r3, [r5, #26]
    8004:	0034      	movs	r4, r6
    8006:	7823      	ldrb	r3, [r4, #0]
    8008:	2b00      	cmp	r3, #0
    800a:	d147      	bne.n	809c <_svfiprintf_r+0xdc>
    800c:	1ba3      	subs	r3, r4, r6
    800e:	9304      	str	r3, [sp, #16]
    8010:	d00d      	beq.n	802e <_svfiprintf_r+0x6e>
    8012:	1ba3      	subs	r3, r4, r6
    8014:	0032      	movs	r2, r6
    8016:	0039      	movs	r1, r7
    8018:	9802      	ldr	r0, [sp, #8]
    801a:	f7ff ff6f 	bl	7efc <__ssputs_r>
    801e:	1c43      	adds	r3, r0, #1
    8020:	d100      	bne.n	8024 <_svfiprintf_r+0x64>
    8022:	e0b5      	b.n	8190 <_svfiprintf_r+0x1d0>
    8024:	696a      	ldr	r2, [r5, #20]
    8026:	9b04      	ldr	r3, [sp, #16]
    8028:	4694      	mov	ip, r2
    802a:	4463      	add	r3, ip
    802c:	616b      	str	r3, [r5, #20]
    802e:	7823      	ldrb	r3, [r4, #0]
    8030:	2b00      	cmp	r3, #0
    8032:	d100      	bne.n	8036 <_svfiprintf_r+0x76>
    8034:	e0ac      	b.n	8190 <_svfiprintf_r+0x1d0>
    8036:	2201      	movs	r2, #1
    8038:	2300      	movs	r3, #0
    803a:	4252      	negs	r2, r2
    803c:	606a      	str	r2, [r5, #4]
    803e:	a902      	add	r1, sp, #8
    8040:	3254      	adds	r2, #84	; 0x54
    8042:	1852      	adds	r2, r2, r1
    8044:	3401      	adds	r4, #1
    8046:	602b      	str	r3, [r5, #0]
    8048:	60eb      	str	r3, [r5, #12]
    804a:	60ab      	str	r3, [r5, #8]
    804c:	7013      	strb	r3, [r2, #0]
    804e:	65ab      	str	r3, [r5, #88]	; 0x58
    8050:	4e58      	ldr	r6, [pc, #352]	; (81b4 <_svfiprintf_r+0x1f4>)
    8052:	2205      	movs	r2, #5
    8054:	7821      	ldrb	r1, [r4, #0]
    8056:	0030      	movs	r0, r6
    8058:	f000 fa3e 	bl	84d8 <memchr>
    805c:	1c62      	adds	r2, r4, #1
    805e:	2800      	cmp	r0, #0
    8060:	d120      	bne.n	80a4 <_svfiprintf_r+0xe4>
    8062:	6829      	ldr	r1, [r5, #0]
    8064:	06cb      	lsls	r3, r1, #27
    8066:	d504      	bpl.n	8072 <_svfiprintf_r+0xb2>
    8068:	2353      	movs	r3, #83	; 0x53
    806a:	ae02      	add	r6, sp, #8
    806c:	3020      	adds	r0, #32
    806e:	199b      	adds	r3, r3, r6
    8070:	7018      	strb	r0, [r3, #0]
    8072:	070b      	lsls	r3, r1, #28
    8074:	d504      	bpl.n	8080 <_svfiprintf_r+0xc0>
    8076:	2353      	movs	r3, #83	; 0x53
    8078:	202b      	movs	r0, #43	; 0x2b
    807a:	ae02      	add	r6, sp, #8
    807c:	199b      	adds	r3, r3, r6
    807e:	7018      	strb	r0, [r3, #0]
    8080:	7823      	ldrb	r3, [r4, #0]
    8082:	2b2a      	cmp	r3, #42	; 0x2a
    8084:	d016      	beq.n	80b4 <_svfiprintf_r+0xf4>
    8086:	2000      	movs	r0, #0
    8088:	210a      	movs	r1, #10
    808a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    808c:	7822      	ldrb	r2, [r4, #0]
    808e:	3a30      	subs	r2, #48	; 0x30
    8090:	2a09      	cmp	r2, #9
    8092:	d955      	bls.n	8140 <_svfiprintf_r+0x180>
    8094:	2800      	cmp	r0, #0
    8096:	d015      	beq.n	80c4 <_svfiprintf_r+0x104>
    8098:	9309      	str	r3, [sp, #36]	; 0x24
    809a:	e013      	b.n	80c4 <_svfiprintf_r+0x104>
    809c:	2b25      	cmp	r3, #37	; 0x25
    809e:	d0b5      	beq.n	800c <_svfiprintf_r+0x4c>
    80a0:	3401      	adds	r4, #1
    80a2:	e7b0      	b.n	8006 <_svfiprintf_r+0x46>
    80a4:	2301      	movs	r3, #1
    80a6:	1b80      	subs	r0, r0, r6
    80a8:	4083      	lsls	r3, r0
    80aa:	6829      	ldr	r1, [r5, #0]
    80ac:	0014      	movs	r4, r2
    80ae:	430b      	orrs	r3, r1
    80b0:	602b      	str	r3, [r5, #0]
    80b2:	e7cd      	b.n	8050 <_svfiprintf_r+0x90>
    80b4:	9b05      	ldr	r3, [sp, #20]
    80b6:	1d18      	adds	r0, r3, #4
    80b8:	681b      	ldr	r3, [r3, #0]
    80ba:	9005      	str	r0, [sp, #20]
    80bc:	2b00      	cmp	r3, #0
    80be:	db39      	blt.n	8134 <_svfiprintf_r+0x174>
    80c0:	9309      	str	r3, [sp, #36]	; 0x24
    80c2:	0014      	movs	r4, r2
    80c4:	7823      	ldrb	r3, [r4, #0]
    80c6:	2b2e      	cmp	r3, #46	; 0x2e
    80c8:	d10b      	bne.n	80e2 <_svfiprintf_r+0x122>
    80ca:	7863      	ldrb	r3, [r4, #1]
    80cc:	1c62      	adds	r2, r4, #1
    80ce:	2b2a      	cmp	r3, #42	; 0x2a
    80d0:	d13e      	bne.n	8150 <_svfiprintf_r+0x190>
    80d2:	9b05      	ldr	r3, [sp, #20]
    80d4:	3402      	adds	r4, #2
    80d6:	1d1a      	adds	r2, r3, #4
    80d8:	681b      	ldr	r3, [r3, #0]
    80da:	9205      	str	r2, [sp, #20]
    80dc:	2b00      	cmp	r3, #0
    80de:	db34      	blt.n	814a <_svfiprintf_r+0x18a>
    80e0:	9307      	str	r3, [sp, #28]
    80e2:	4e35      	ldr	r6, [pc, #212]	; (81b8 <_svfiprintf_r+0x1f8>)
    80e4:	7821      	ldrb	r1, [r4, #0]
    80e6:	2203      	movs	r2, #3
    80e8:	0030      	movs	r0, r6
    80ea:	f000 f9f5 	bl	84d8 <memchr>
    80ee:	2800      	cmp	r0, #0
    80f0:	d006      	beq.n	8100 <_svfiprintf_r+0x140>
    80f2:	2340      	movs	r3, #64	; 0x40
    80f4:	1b80      	subs	r0, r0, r6
    80f6:	4083      	lsls	r3, r0
    80f8:	682a      	ldr	r2, [r5, #0]
    80fa:	3401      	adds	r4, #1
    80fc:	4313      	orrs	r3, r2
    80fe:	602b      	str	r3, [r5, #0]
    8100:	7821      	ldrb	r1, [r4, #0]
    8102:	2206      	movs	r2, #6
    8104:	482d      	ldr	r0, [pc, #180]	; (81bc <_svfiprintf_r+0x1fc>)
    8106:	1c66      	adds	r6, r4, #1
    8108:	7629      	strb	r1, [r5, #24]
    810a:	f000 f9e5 	bl	84d8 <memchr>
    810e:	2800      	cmp	r0, #0
    8110:	d046      	beq.n	81a0 <_svfiprintf_r+0x1e0>
    8112:	4b2b      	ldr	r3, [pc, #172]	; (81c0 <_svfiprintf_r+0x200>)
    8114:	2b00      	cmp	r3, #0
    8116:	d12f      	bne.n	8178 <_svfiprintf_r+0x1b8>
    8118:	6829      	ldr	r1, [r5, #0]
    811a:	9b05      	ldr	r3, [sp, #20]
    811c:	2207      	movs	r2, #7
    811e:	05c9      	lsls	r1, r1, #23
    8120:	d528      	bpl.n	8174 <_svfiprintf_r+0x1b4>
    8122:	189b      	adds	r3, r3, r2
    8124:	4393      	bics	r3, r2
    8126:	3308      	adds	r3, #8
    8128:	9305      	str	r3, [sp, #20]
    812a:	696b      	ldr	r3, [r5, #20]
    812c:	9a03      	ldr	r2, [sp, #12]
    812e:	189b      	adds	r3, r3, r2
    8130:	616b      	str	r3, [r5, #20]
    8132:	e767      	b.n	8004 <_svfiprintf_r+0x44>
    8134:	425b      	negs	r3, r3
    8136:	60eb      	str	r3, [r5, #12]
    8138:	2302      	movs	r3, #2
    813a:	430b      	orrs	r3, r1
    813c:	602b      	str	r3, [r5, #0]
    813e:	e7c0      	b.n	80c2 <_svfiprintf_r+0x102>
    8140:	434b      	muls	r3, r1
    8142:	3401      	adds	r4, #1
    8144:	189b      	adds	r3, r3, r2
    8146:	2001      	movs	r0, #1
    8148:	e7a0      	b.n	808c <_svfiprintf_r+0xcc>
    814a:	2301      	movs	r3, #1
    814c:	425b      	negs	r3, r3
    814e:	e7c7      	b.n	80e0 <_svfiprintf_r+0x120>
    8150:	2300      	movs	r3, #0
    8152:	0014      	movs	r4, r2
    8154:	200a      	movs	r0, #10
    8156:	001a      	movs	r2, r3
    8158:	606b      	str	r3, [r5, #4]
    815a:	7821      	ldrb	r1, [r4, #0]
    815c:	3930      	subs	r1, #48	; 0x30
    815e:	2909      	cmp	r1, #9
    8160:	d903      	bls.n	816a <_svfiprintf_r+0x1aa>
    8162:	2b00      	cmp	r3, #0
    8164:	d0bd      	beq.n	80e2 <_svfiprintf_r+0x122>
    8166:	9207      	str	r2, [sp, #28]
    8168:	e7bb      	b.n	80e2 <_svfiprintf_r+0x122>
    816a:	4342      	muls	r2, r0
    816c:	3401      	adds	r4, #1
    816e:	1852      	adds	r2, r2, r1
    8170:	2301      	movs	r3, #1
    8172:	e7f2      	b.n	815a <_svfiprintf_r+0x19a>
    8174:	3307      	adds	r3, #7
    8176:	e7d5      	b.n	8124 <_svfiprintf_r+0x164>
    8178:	ab05      	add	r3, sp, #20
    817a:	9300      	str	r3, [sp, #0]
    817c:	003a      	movs	r2, r7
    817e:	4b11      	ldr	r3, [pc, #68]	; (81c4 <_svfiprintf_r+0x204>)
    8180:	0029      	movs	r1, r5
    8182:	9802      	ldr	r0, [sp, #8]
    8184:	e000      	b.n	8188 <_svfiprintf_r+0x1c8>
    8186:	bf00      	nop
    8188:	9003      	str	r0, [sp, #12]
    818a:	9b03      	ldr	r3, [sp, #12]
    818c:	3301      	adds	r3, #1
    818e:	d1cc      	bne.n	812a <_svfiprintf_r+0x16a>
    8190:	89bb      	ldrh	r3, [r7, #12]
    8192:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8194:	065b      	lsls	r3, r3, #25
    8196:	d400      	bmi.n	819a <_svfiprintf_r+0x1da>
    8198:	e729      	b.n	7fee <_svfiprintf_r+0x2e>
    819a:	2001      	movs	r0, #1
    819c:	4240      	negs	r0, r0
    819e:	e726      	b.n	7fee <_svfiprintf_r+0x2e>
    81a0:	ab05      	add	r3, sp, #20
    81a2:	9300      	str	r3, [sp, #0]
    81a4:	003a      	movs	r2, r7
    81a6:	4b07      	ldr	r3, [pc, #28]	; (81c4 <_svfiprintf_r+0x204>)
    81a8:	0029      	movs	r1, r5
    81aa:	9802      	ldr	r0, [sp, #8]
    81ac:	f000 f87a 	bl	82a4 <_printf_i>
    81b0:	e7ea      	b.n	8188 <_svfiprintf_r+0x1c8>
    81b2:	46c0      	nop			; (mov r8, r8)
    81b4:	00008a38 	.word	0x00008a38
    81b8:	00008a3e 	.word	0x00008a3e
    81bc:	00008a42 	.word	0x00008a42
    81c0:	00000000 	.word	0x00000000
    81c4:	00007efd 	.word	0x00007efd

000081c8 <_printf_common>:
    81c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    81ca:	0015      	movs	r5, r2
    81cc:	9301      	str	r3, [sp, #4]
    81ce:	688a      	ldr	r2, [r1, #8]
    81d0:	690b      	ldr	r3, [r1, #16]
    81d2:	9000      	str	r0, [sp, #0]
    81d4:	000c      	movs	r4, r1
    81d6:	4293      	cmp	r3, r2
    81d8:	da00      	bge.n	81dc <_printf_common+0x14>
    81da:	0013      	movs	r3, r2
    81dc:	0022      	movs	r2, r4
    81de:	602b      	str	r3, [r5, #0]
    81e0:	3243      	adds	r2, #67	; 0x43
    81e2:	7812      	ldrb	r2, [r2, #0]
    81e4:	2a00      	cmp	r2, #0
    81e6:	d001      	beq.n	81ec <_printf_common+0x24>
    81e8:	3301      	adds	r3, #1
    81ea:	602b      	str	r3, [r5, #0]
    81ec:	6823      	ldr	r3, [r4, #0]
    81ee:	069b      	lsls	r3, r3, #26
    81f0:	d502      	bpl.n	81f8 <_printf_common+0x30>
    81f2:	682b      	ldr	r3, [r5, #0]
    81f4:	3302      	adds	r3, #2
    81f6:	602b      	str	r3, [r5, #0]
    81f8:	2706      	movs	r7, #6
    81fa:	6823      	ldr	r3, [r4, #0]
    81fc:	401f      	ands	r7, r3
    81fe:	d027      	beq.n	8250 <_printf_common+0x88>
    8200:	0023      	movs	r3, r4
    8202:	3343      	adds	r3, #67	; 0x43
    8204:	781b      	ldrb	r3, [r3, #0]
    8206:	1e5a      	subs	r2, r3, #1
    8208:	4193      	sbcs	r3, r2
    820a:	6822      	ldr	r2, [r4, #0]
    820c:	0692      	lsls	r2, r2, #26
    820e:	d430      	bmi.n	8272 <_printf_common+0xaa>
    8210:	0022      	movs	r2, r4
    8212:	9901      	ldr	r1, [sp, #4]
    8214:	3243      	adds	r2, #67	; 0x43
    8216:	9800      	ldr	r0, [sp, #0]
    8218:	9e08      	ldr	r6, [sp, #32]
    821a:	47b0      	blx	r6
    821c:	1c43      	adds	r3, r0, #1
    821e:	d025      	beq.n	826c <_printf_common+0xa4>
    8220:	2306      	movs	r3, #6
    8222:	6820      	ldr	r0, [r4, #0]
    8224:	682a      	ldr	r2, [r5, #0]
    8226:	68e1      	ldr	r1, [r4, #12]
    8228:	4003      	ands	r3, r0
    822a:	2500      	movs	r5, #0
    822c:	2b04      	cmp	r3, #4
    822e:	d103      	bne.n	8238 <_printf_common+0x70>
    8230:	1a8d      	subs	r5, r1, r2
    8232:	43eb      	mvns	r3, r5
    8234:	17db      	asrs	r3, r3, #31
    8236:	401d      	ands	r5, r3
    8238:	68a3      	ldr	r3, [r4, #8]
    823a:	6922      	ldr	r2, [r4, #16]
    823c:	4293      	cmp	r3, r2
    823e:	dd01      	ble.n	8244 <_printf_common+0x7c>
    8240:	1a9b      	subs	r3, r3, r2
    8242:	18ed      	adds	r5, r5, r3
    8244:	2700      	movs	r7, #0
    8246:	42bd      	cmp	r5, r7
    8248:	d120      	bne.n	828c <_printf_common+0xc4>
    824a:	2000      	movs	r0, #0
    824c:	e010      	b.n	8270 <_printf_common+0xa8>
    824e:	3701      	adds	r7, #1
    8250:	68e3      	ldr	r3, [r4, #12]
    8252:	682a      	ldr	r2, [r5, #0]
    8254:	1a9b      	subs	r3, r3, r2
    8256:	429f      	cmp	r7, r3
    8258:	dad2      	bge.n	8200 <_printf_common+0x38>
    825a:	0022      	movs	r2, r4
    825c:	2301      	movs	r3, #1
    825e:	3219      	adds	r2, #25
    8260:	9901      	ldr	r1, [sp, #4]
    8262:	9800      	ldr	r0, [sp, #0]
    8264:	9e08      	ldr	r6, [sp, #32]
    8266:	47b0      	blx	r6
    8268:	1c43      	adds	r3, r0, #1
    826a:	d1f0      	bne.n	824e <_printf_common+0x86>
    826c:	2001      	movs	r0, #1
    826e:	4240      	negs	r0, r0
    8270:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8272:	2030      	movs	r0, #48	; 0x30
    8274:	18e1      	adds	r1, r4, r3
    8276:	3143      	adds	r1, #67	; 0x43
    8278:	7008      	strb	r0, [r1, #0]
    827a:	0021      	movs	r1, r4
    827c:	1c5a      	adds	r2, r3, #1
    827e:	3145      	adds	r1, #69	; 0x45
    8280:	7809      	ldrb	r1, [r1, #0]
    8282:	18a2      	adds	r2, r4, r2
    8284:	3243      	adds	r2, #67	; 0x43
    8286:	3302      	adds	r3, #2
    8288:	7011      	strb	r1, [r2, #0]
    828a:	e7c1      	b.n	8210 <_printf_common+0x48>
    828c:	0022      	movs	r2, r4
    828e:	2301      	movs	r3, #1
    8290:	321a      	adds	r2, #26
    8292:	9901      	ldr	r1, [sp, #4]
    8294:	9800      	ldr	r0, [sp, #0]
    8296:	9e08      	ldr	r6, [sp, #32]
    8298:	47b0      	blx	r6
    829a:	1c43      	adds	r3, r0, #1
    829c:	d0e6      	beq.n	826c <_printf_common+0xa4>
    829e:	3701      	adds	r7, #1
    82a0:	e7d1      	b.n	8246 <_printf_common+0x7e>
	...

000082a4 <_printf_i>:
    82a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    82a6:	b08b      	sub	sp, #44	; 0x2c
    82a8:	9206      	str	r2, [sp, #24]
    82aa:	000a      	movs	r2, r1
    82ac:	3243      	adds	r2, #67	; 0x43
    82ae:	9307      	str	r3, [sp, #28]
    82b0:	9005      	str	r0, [sp, #20]
    82b2:	9204      	str	r2, [sp, #16]
    82b4:	7e0a      	ldrb	r2, [r1, #24]
    82b6:	000c      	movs	r4, r1
    82b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    82ba:	2a6e      	cmp	r2, #110	; 0x6e
    82bc:	d100      	bne.n	82c0 <_printf_i+0x1c>
    82be:	e08f      	b.n	83e0 <_printf_i+0x13c>
    82c0:	d817      	bhi.n	82f2 <_printf_i+0x4e>
    82c2:	2a63      	cmp	r2, #99	; 0x63
    82c4:	d02c      	beq.n	8320 <_printf_i+0x7c>
    82c6:	d808      	bhi.n	82da <_printf_i+0x36>
    82c8:	2a00      	cmp	r2, #0
    82ca:	d100      	bne.n	82ce <_printf_i+0x2a>
    82cc:	e099      	b.n	8402 <_printf_i+0x15e>
    82ce:	2a58      	cmp	r2, #88	; 0x58
    82d0:	d054      	beq.n	837c <_printf_i+0xd8>
    82d2:	0026      	movs	r6, r4
    82d4:	3642      	adds	r6, #66	; 0x42
    82d6:	7032      	strb	r2, [r6, #0]
    82d8:	e029      	b.n	832e <_printf_i+0x8a>
    82da:	2a64      	cmp	r2, #100	; 0x64
    82dc:	d001      	beq.n	82e2 <_printf_i+0x3e>
    82de:	2a69      	cmp	r2, #105	; 0x69
    82e0:	d1f7      	bne.n	82d2 <_printf_i+0x2e>
    82e2:	6821      	ldr	r1, [r4, #0]
    82e4:	681a      	ldr	r2, [r3, #0]
    82e6:	0608      	lsls	r0, r1, #24
    82e8:	d523      	bpl.n	8332 <_printf_i+0x8e>
    82ea:	1d11      	adds	r1, r2, #4
    82ec:	6019      	str	r1, [r3, #0]
    82ee:	6815      	ldr	r5, [r2, #0]
    82f0:	e025      	b.n	833e <_printf_i+0x9a>
    82f2:	2a73      	cmp	r2, #115	; 0x73
    82f4:	d100      	bne.n	82f8 <_printf_i+0x54>
    82f6:	e088      	b.n	840a <_printf_i+0x166>
    82f8:	d808      	bhi.n	830c <_printf_i+0x68>
    82fa:	2a6f      	cmp	r2, #111	; 0x6f
    82fc:	d029      	beq.n	8352 <_printf_i+0xae>
    82fe:	2a70      	cmp	r2, #112	; 0x70
    8300:	d1e7      	bne.n	82d2 <_printf_i+0x2e>
    8302:	2220      	movs	r2, #32
    8304:	6809      	ldr	r1, [r1, #0]
    8306:	430a      	orrs	r2, r1
    8308:	6022      	str	r2, [r4, #0]
    830a:	e003      	b.n	8314 <_printf_i+0x70>
    830c:	2a75      	cmp	r2, #117	; 0x75
    830e:	d020      	beq.n	8352 <_printf_i+0xae>
    8310:	2a78      	cmp	r2, #120	; 0x78
    8312:	d1de      	bne.n	82d2 <_printf_i+0x2e>
    8314:	0022      	movs	r2, r4
    8316:	2178      	movs	r1, #120	; 0x78
    8318:	3245      	adds	r2, #69	; 0x45
    831a:	7011      	strb	r1, [r2, #0]
    831c:	4a6c      	ldr	r2, [pc, #432]	; (84d0 <_printf_i+0x22c>)
    831e:	e030      	b.n	8382 <_printf_i+0xde>
    8320:	000e      	movs	r6, r1
    8322:	681a      	ldr	r2, [r3, #0]
    8324:	3642      	adds	r6, #66	; 0x42
    8326:	1d11      	adds	r1, r2, #4
    8328:	6019      	str	r1, [r3, #0]
    832a:	6813      	ldr	r3, [r2, #0]
    832c:	7033      	strb	r3, [r6, #0]
    832e:	2301      	movs	r3, #1
    8330:	e079      	b.n	8426 <_printf_i+0x182>
    8332:	0649      	lsls	r1, r1, #25
    8334:	d5d9      	bpl.n	82ea <_printf_i+0x46>
    8336:	1d11      	adds	r1, r2, #4
    8338:	6019      	str	r1, [r3, #0]
    833a:	2300      	movs	r3, #0
    833c:	5ed5      	ldrsh	r5, [r2, r3]
    833e:	2d00      	cmp	r5, #0
    8340:	da03      	bge.n	834a <_printf_i+0xa6>
    8342:	232d      	movs	r3, #45	; 0x2d
    8344:	9a04      	ldr	r2, [sp, #16]
    8346:	426d      	negs	r5, r5
    8348:	7013      	strb	r3, [r2, #0]
    834a:	4b62      	ldr	r3, [pc, #392]	; (84d4 <_printf_i+0x230>)
    834c:	270a      	movs	r7, #10
    834e:	9303      	str	r3, [sp, #12]
    8350:	e02f      	b.n	83b2 <_printf_i+0x10e>
    8352:	6820      	ldr	r0, [r4, #0]
    8354:	6819      	ldr	r1, [r3, #0]
    8356:	0605      	lsls	r5, r0, #24
    8358:	d503      	bpl.n	8362 <_printf_i+0xbe>
    835a:	1d08      	adds	r0, r1, #4
    835c:	6018      	str	r0, [r3, #0]
    835e:	680d      	ldr	r5, [r1, #0]
    8360:	e005      	b.n	836e <_printf_i+0xca>
    8362:	0640      	lsls	r0, r0, #25
    8364:	d5f9      	bpl.n	835a <_printf_i+0xb6>
    8366:	680d      	ldr	r5, [r1, #0]
    8368:	1d08      	adds	r0, r1, #4
    836a:	6018      	str	r0, [r3, #0]
    836c:	b2ad      	uxth	r5, r5
    836e:	4b59      	ldr	r3, [pc, #356]	; (84d4 <_printf_i+0x230>)
    8370:	2708      	movs	r7, #8
    8372:	9303      	str	r3, [sp, #12]
    8374:	2a6f      	cmp	r2, #111	; 0x6f
    8376:	d018      	beq.n	83aa <_printf_i+0x106>
    8378:	270a      	movs	r7, #10
    837a:	e016      	b.n	83aa <_printf_i+0x106>
    837c:	3145      	adds	r1, #69	; 0x45
    837e:	700a      	strb	r2, [r1, #0]
    8380:	4a54      	ldr	r2, [pc, #336]	; (84d4 <_printf_i+0x230>)
    8382:	9203      	str	r2, [sp, #12]
    8384:	681a      	ldr	r2, [r3, #0]
    8386:	6821      	ldr	r1, [r4, #0]
    8388:	1d10      	adds	r0, r2, #4
    838a:	6018      	str	r0, [r3, #0]
    838c:	6815      	ldr	r5, [r2, #0]
    838e:	0608      	lsls	r0, r1, #24
    8390:	d522      	bpl.n	83d8 <_printf_i+0x134>
    8392:	07cb      	lsls	r3, r1, #31
    8394:	d502      	bpl.n	839c <_printf_i+0xf8>
    8396:	2320      	movs	r3, #32
    8398:	4319      	orrs	r1, r3
    839a:	6021      	str	r1, [r4, #0]
    839c:	2710      	movs	r7, #16
    839e:	2d00      	cmp	r5, #0
    83a0:	d103      	bne.n	83aa <_printf_i+0x106>
    83a2:	2320      	movs	r3, #32
    83a4:	6822      	ldr	r2, [r4, #0]
    83a6:	439a      	bics	r2, r3
    83a8:	6022      	str	r2, [r4, #0]
    83aa:	0023      	movs	r3, r4
    83ac:	2200      	movs	r2, #0
    83ae:	3343      	adds	r3, #67	; 0x43
    83b0:	701a      	strb	r2, [r3, #0]
    83b2:	6863      	ldr	r3, [r4, #4]
    83b4:	60a3      	str	r3, [r4, #8]
    83b6:	2b00      	cmp	r3, #0
    83b8:	db5c      	blt.n	8474 <_printf_i+0x1d0>
    83ba:	2204      	movs	r2, #4
    83bc:	6821      	ldr	r1, [r4, #0]
    83be:	4391      	bics	r1, r2
    83c0:	6021      	str	r1, [r4, #0]
    83c2:	2d00      	cmp	r5, #0
    83c4:	d158      	bne.n	8478 <_printf_i+0x1d4>
    83c6:	9e04      	ldr	r6, [sp, #16]
    83c8:	2b00      	cmp	r3, #0
    83ca:	d064      	beq.n	8496 <_printf_i+0x1f2>
    83cc:	0026      	movs	r6, r4
    83ce:	9b03      	ldr	r3, [sp, #12]
    83d0:	3642      	adds	r6, #66	; 0x42
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	7033      	strb	r3, [r6, #0]
    83d6:	e05e      	b.n	8496 <_printf_i+0x1f2>
    83d8:	0648      	lsls	r0, r1, #25
    83da:	d5da      	bpl.n	8392 <_printf_i+0xee>
    83dc:	b2ad      	uxth	r5, r5
    83de:	e7d8      	b.n	8392 <_printf_i+0xee>
    83e0:	6809      	ldr	r1, [r1, #0]
    83e2:	681a      	ldr	r2, [r3, #0]
    83e4:	0608      	lsls	r0, r1, #24
    83e6:	d505      	bpl.n	83f4 <_printf_i+0x150>
    83e8:	1d11      	adds	r1, r2, #4
    83ea:	6019      	str	r1, [r3, #0]
    83ec:	6813      	ldr	r3, [r2, #0]
    83ee:	6962      	ldr	r2, [r4, #20]
    83f0:	601a      	str	r2, [r3, #0]
    83f2:	e006      	b.n	8402 <_printf_i+0x15e>
    83f4:	0649      	lsls	r1, r1, #25
    83f6:	d5f7      	bpl.n	83e8 <_printf_i+0x144>
    83f8:	1d11      	adds	r1, r2, #4
    83fa:	6019      	str	r1, [r3, #0]
    83fc:	6813      	ldr	r3, [r2, #0]
    83fe:	8aa2      	ldrh	r2, [r4, #20]
    8400:	801a      	strh	r2, [r3, #0]
    8402:	2300      	movs	r3, #0
    8404:	9e04      	ldr	r6, [sp, #16]
    8406:	6123      	str	r3, [r4, #16]
    8408:	e054      	b.n	84b4 <_printf_i+0x210>
    840a:	681a      	ldr	r2, [r3, #0]
    840c:	1d11      	adds	r1, r2, #4
    840e:	6019      	str	r1, [r3, #0]
    8410:	6816      	ldr	r6, [r2, #0]
    8412:	2100      	movs	r1, #0
    8414:	6862      	ldr	r2, [r4, #4]
    8416:	0030      	movs	r0, r6
    8418:	f000 f85e 	bl	84d8 <memchr>
    841c:	2800      	cmp	r0, #0
    841e:	d001      	beq.n	8424 <_printf_i+0x180>
    8420:	1b80      	subs	r0, r0, r6
    8422:	6060      	str	r0, [r4, #4]
    8424:	6863      	ldr	r3, [r4, #4]
    8426:	6123      	str	r3, [r4, #16]
    8428:	2300      	movs	r3, #0
    842a:	9a04      	ldr	r2, [sp, #16]
    842c:	7013      	strb	r3, [r2, #0]
    842e:	e041      	b.n	84b4 <_printf_i+0x210>
    8430:	6923      	ldr	r3, [r4, #16]
    8432:	0032      	movs	r2, r6
    8434:	9906      	ldr	r1, [sp, #24]
    8436:	9805      	ldr	r0, [sp, #20]
    8438:	9d07      	ldr	r5, [sp, #28]
    843a:	47a8      	blx	r5
    843c:	1c43      	adds	r3, r0, #1
    843e:	d043      	beq.n	84c8 <_printf_i+0x224>
    8440:	6823      	ldr	r3, [r4, #0]
    8442:	2500      	movs	r5, #0
    8444:	079b      	lsls	r3, r3, #30
    8446:	d40f      	bmi.n	8468 <_printf_i+0x1c4>
    8448:	9b09      	ldr	r3, [sp, #36]	; 0x24
    844a:	68e0      	ldr	r0, [r4, #12]
    844c:	4298      	cmp	r0, r3
    844e:	da3d      	bge.n	84cc <_printf_i+0x228>
    8450:	0018      	movs	r0, r3
    8452:	e03b      	b.n	84cc <_printf_i+0x228>
    8454:	0022      	movs	r2, r4
    8456:	2301      	movs	r3, #1
    8458:	3219      	adds	r2, #25
    845a:	9906      	ldr	r1, [sp, #24]
    845c:	9805      	ldr	r0, [sp, #20]
    845e:	9e07      	ldr	r6, [sp, #28]
    8460:	47b0      	blx	r6
    8462:	1c43      	adds	r3, r0, #1
    8464:	d030      	beq.n	84c8 <_printf_i+0x224>
    8466:	3501      	adds	r5, #1
    8468:	68e3      	ldr	r3, [r4, #12]
    846a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    846c:	1a9b      	subs	r3, r3, r2
    846e:	429d      	cmp	r5, r3
    8470:	dbf0      	blt.n	8454 <_printf_i+0x1b0>
    8472:	e7e9      	b.n	8448 <_printf_i+0x1a4>
    8474:	2d00      	cmp	r5, #0
    8476:	d0a9      	beq.n	83cc <_printf_i+0x128>
    8478:	9e04      	ldr	r6, [sp, #16]
    847a:	0028      	movs	r0, r5
    847c:	0039      	movs	r1, r7
    847e:	f7fd f94f 	bl	5720 <__aeabi_uidivmod>
    8482:	9b03      	ldr	r3, [sp, #12]
    8484:	3e01      	subs	r6, #1
    8486:	5c5b      	ldrb	r3, [r3, r1]
    8488:	0028      	movs	r0, r5
    848a:	7033      	strb	r3, [r6, #0]
    848c:	0039      	movs	r1, r7
    848e:	f7fd f8c1 	bl	5614 <__udivsi3>
    8492:	1e05      	subs	r5, r0, #0
    8494:	d1f1      	bne.n	847a <_printf_i+0x1d6>
    8496:	2f08      	cmp	r7, #8
    8498:	d109      	bne.n	84ae <_printf_i+0x20a>
    849a:	6823      	ldr	r3, [r4, #0]
    849c:	07db      	lsls	r3, r3, #31
    849e:	d506      	bpl.n	84ae <_printf_i+0x20a>
    84a0:	6863      	ldr	r3, [r4, #4]
    84a2:	6922      	ldr	r2, [r4, #16]
    84a4:	4293      	cmp	r3, r2
    84a6:	dc02      	bgt.n	84ae <_printf_i+0x20a>
    84a8:	2330      	movs	r3, #48	; 0x30
    84aa:	3e01      	subs	r6, #1
    84ac:	7033      	strb	r3, [r6, #0]
    84ae:	9b04      	ldr	r3, [sp, #16]
    84b0:	1b9b      	subs	r3, r3, r6
    84b2:	6123      	str	r3, [r4, #16]
    84b4:	9b07      	ldr	r3, [sp, #28]
    84b6:	aa09      	add	r2, sp, #36	; 0x24
    84b8:	9300      	str	r3, [sp, #0]
    84ba:	0021      	movs	r1, r4
    84bc:	9b06      	ldr	r3, [sp, #24]
    84be:	9805      	ldr	r0, [sp, #20]
    84c0:	f7ff fe82 	bl	81c8 <_printf_common>
    84c4:	1c43      	adds	r3, r0, #1
    84c6:	d1b3      	bne.n	8430 <_printf_i+0x18c>
    84c8:	2001      	movs	r0, #1
    84ca:	4240      	negs	r0, r0
    84cc:	b00b      	add	sp, #44	; 0x2c
    84ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84d0:	00008a5a 	.word	0x00008a5a
    84d4:	00008a49 	.word	0x00008a49

000084d8 <memchr>:
    84d8:	b2c9      	uxtb	r1, r1
    84da:	1882      	adds	r2, r0, r2
    84dc:	4290      	cmp	r0, r2
    84de:	d101      	bne.n	84e4 <memchr+0xc>
    84e0:	2000      	movs	r0, #0
    84e2:	4770      	bx	lr
    84e4:	7803      	ldrb	r3, [r0, #0]
    84e6:	428b      	cmp	r3, r1
    84e8:	d0fb      	beq.n	84e2 <memchr+0xa>
    84ea:	3001      	adds	r0, #1
    84ec:	e7f6      	b.n	84dc <memchr+0x4>

000084ee <memmove>:
    84ee:	b510      	push	{r4, lr}
    84f0:	4288      	cmp	r0, r1
    84f2:	d902      	bls.n	84fa <memmove+0xc>
    84f4:	188b      	adds	r3, r1, r2
    84f6:	4298      	cmp	r0, r3
    84f8:	d308      	bcc.n	850c <memmove+0x1e>
    84fa:	2300      	movs	r3, #0
    84fc:	429a      	cmp	r2, r3
    84fe:	d007      	beq.n	8510 <memmove+0x22>
    8500:	5ccc      	ldrb	r4, [r1, r3]
    8502:	54c4      	strb	r4, [r0, r3]
    8504:	3301      	adds	r3, #1
    8506:	e7f9      	b.n	84fc <memmove+0xe>
    8508:	5c8b      	ldrb	r3, [r1, r2]
    850a:	5483      	strb	r3, [r0, r2]
    850c:	3a01      	subs	r2, #1
    850e:	d2fb      	bcs.n	8508 <memmove+0x1a>
    8510:	bd10      	pop	{r4, pc}

00008512 <_realloc_r>:
    8512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8514:	0007      	movs	r7, r0
    8516:	000d      	movs	r5, r1
    8518:	0016      	movs	r6, r2
    851a:	2900      	cmp	r1, #0
    851c:	d105      	bne.n	852a <_realloc_r+0x18>
    851e:	0011      	movs	r1, r2
    8520:	f7ff fc48 	bl	7db4 <_malloc_r>
    8524:	0004      	movs	r4, r0
    8526:	0020      	movs	r0, r4
    8528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    852a:	2a00      	cmp	r2, #0
    852c:	d103      	bne.n	8536 <_realloc_r+0x24>
    852e:	f7ff fbf7 	bl	7d20 <_free_r>
    8532:	0034      	movs	r4, r6
    8534:	e7f7      	b.n	8526 <_realloc_r+0x14>
    8536:	f000 f812 	bl	855e <_malloc_usable_size_r>
    853a:	002c      	movs	r4, r5
    853c:	4286      	cmp	r6, r0
    853e:	d9f2      	bls.n	8526 <_realloc_r+0x14>
    8540:	0031      	movs	r1, r6
    8542:	0038      	movs	r0, r7
    8544:	f7ff fc36 	bl	7db4 <_malloc_r>
    8548:	1e04      	subs	r4, r0, #0
    854a:	d0ec      	beq.n	8526 <_realloc_r+0x14>
    854c:	0029      	movs	r1, r5
    854e:	0032      	movs	r2, r6
    8550:	f7ff fbdc 	bl	7d0c <memcpy>
    8554:	0029      	movs	r1, r5
    8556:	0038      	movs	r0, r7
    8558:	f7ff fbe2 	bl	7d20 <_free_r>
    855c:	e7e3      	b.n	8526 <_realloc_r+0x14>

0000855e <_malloc_usable_size_r>:
    855e:	1f0b      	subs	r3, r1, #4
    8560:	681b      	ldr	r3, [r3, #0]
    8562:	1f18      	subs	r0, r3, #4
    8564:	2b00      	cmp	r3, #0
    8566:	da01      	bge.n	856c <_malloc_usable_size_r+0xe>
    8568:	580b      	ldr	r3, [r1, r0]
    856a:	18c0      	adds	r0, r0, r3
    856c:	4770      	bx	lr
    856e:	0000      	movs	r0, r0
    8570:	00000000 	.word	0x00000000
    8574:	00000040 	.word	0x00000040
    8578:	00000014 	.word	0x00000014
    857c:	00000054 	.word	0x00000054
    8580:	00000514 	.word	0x00000514
    8584:	00000528 	.word	0x00000528
    8588:	0000056a 	.word	0x0000056a
    858c:	000005aa 	.word	0x000005aa
    8590:	000005d8 	.word	0x000005d8
    8594:	00000616 	.word	0x00000616
    8598:	42003000 	.word	0x42003000
    859c:	42003400 	.word	0x42003400
    85a0:	42003800 	.word	0x42003800
    85a4:	42003c00 	.word	0x42003c00
    85a8:	42004000 	.word	0x42004000
    85ac:	00000002 	.word	0x00000002
    85b0:	00001000 	.word	0x00001000
    85b4:	00000002 	.word	0x00000002
    85b8:	00002000 	.word	0x00002000
    85bc:	00000002 	.word	0x00000002
    85c0:	00004000 	.word	0x00004000
    85c4:	00000002 	.word	0x00000002
    85c8:	00008000 	.word	0x00008000
    85cc:	00000002 	.word	0x00000002
    85d0:	00010000 	.word	0x00010000
    85d4:	00000e8c 	.word	0x00000e8c
    85d8:	000010f4 	.word	0x000010f4
    85dc:	000010f4 	.word	0x000010f4
    85e0:	000010f4 	.word	0x000010f4
    85e4:	000010f4 	.word	0x000010f4
    85e8:	000010f4 	.word	0x000010f4
    85ec:	000010f4 	.word	0x000010f4
    85f0:	000010f4 	.word	0x000010f4
    85f4:	000010f4 	.word	0x000010f4
    85f8:	000010f4 	.word	0x000010f4
    85fc:	000010f4 	.word	0x000010f4
    8600:	000010f4 	.word	0x000010f4
    8604:	000010f4 	.word	0x000010f4
    8608:	000010f4 	.word	0x000010f4
    860c:	000010f4 	.word	0x000010f4
    8610:	000010f4 	.word	0x000010f4
    8614:	00000e74 	.word	0x00000e74
    8618:	000010f4 	.word	0x000010f4
    861c:	000010f4 	.word	0x000010f4
    8620:	000010f4 	.word	0x000010f4
    8624:	000010f4 	.word	0x000010f4
    8628:	000010f4 	.word	0x000010f4
    862c:	000010f4 	.word	0x000010f4
    8630:	000010f4 	.word	0x000010f4
    8634:	000010f4 	.word	0x000010f4
    8638:	000010f4 	.word	0x000010f4
    863c:	000010f4 	.word	0x000010f4
    8640:	000010f4 	.word	0x000010f4
    8644:	000010f4 	.word	0x000010f4
    8648:	000010f4 	.word	0x000010f4
    864c:	000010f4 	.word	0x000010f4
    8650:	000010f4 	.word	0x000010f4
    8654:	00000e84 	.word	0x00000e84
    8658:	000010f4 	.word	0x000010f4
    865c:	000010f4 	.word	0x000010f4
    8660:	000010f4 	.word	0x000010f4
    8664:	000010f4 	.word	0x000010f4
    8668:	000010f4 	.word	0x000010f4
    866c:	000010f4 	.word	0x000010f4
    8670:	000010f4 	.word	0x000010f4
    8674:	000010f4 	.word	0x000010f4
    8678:	000010f4 	.word	0x000010f4
    867c:	000010f4 	.word	0x000010f4
    8680:	000010f4 	.word	0x000010f4
    8684:	000010f4 	.word	0x000010f4
    8688:	000010f4 	.word	0x000010f4
    868c:	000010f4 	.word	0x000010f4
    8690:	000010f4 	.word	0x000010f4
    8694:	00000e7c 	.word	0x00000e7c
    8698:	00000ec4 	.word	0x00000ec4
    869c:	00000e5c 	.word	0x00000e5c
    86a0:	00000e6c 	.word	0x00000e6c
    86a4:	00000e64 	.word	0x00000e64
    86a8:	00000002 	.word	0x00000002
    86ac:	00000003 	.word	0x00000003
    86b0:	00000028 	.word	0x00000028
    86b4:	00000029 	.word	0x00000029
    86b8:	00000004 	.word	0x00000004
    86bc:	00000005 	.word	0x00000005
    86c0:	00000006 	.word	0x00000006
    86c4:	00000007 	.word	0x00000007
    86c8:	00000008 	.word	0x00000008
    86cc:	00000009 	.word	0x00000009
    86d0:	0000000a 	.word	0x0000000a
    86d4:	0000000b 	.word	0x0000000b
    86d8:	00000020 	.word	0x00000020
    86dc:	00000021 	.word	0x00000021
    86e0:	00000022 	.word	0x00000022
    86e4:	00000023 	.word	0x00000023
    86e8:	00000028 	.word	0x00000028
    86ec:	00000029 	.word	0x00000029
    86f0:	00000024 	.word	0x00000024
    86f4:	00000025 	.word	0x00000025
    86f8:	00000026 	.word	0x00000026
    86fc:	00000027 	.word	0x00000027
    8700:	00000008 	.word	0x00000008
    8704:	00000009 	.word	0x00000009

00008708 <_adc_apbcmasks>:
    8708:	00020000 00040000                       ........

00008710 <_adc_biascomp_addr>:
    8710:	00806020 00806020                        `.. `..

00008718 <_adc_biascomp_pos>:
    8718:	00000903                                ....

0000871c <_adc_biasrefbuf_addr>:
    871c:	00806020 00806020                        `.. `..

00008724 <_adc_biasrefbuf_pos>:
    8724:	00000600                                ....

00008728 <_adc_extchannel_msb>:
    8728:	0000000b 0000000b                       ........

00008730 <_adc_gclk_ids>:
    8730:	00002221 42000400 42000800 42000c00     !".....B...B...B
    8740:	42001000 42001400 42001800              ...B...B...B

0000874c <_tcc_apbcmasks>:
    874c:	00000200 00000400 00000800              ............

00008758 <_tcc_cc_nums>:
    8758:	00020204                                ....

0000875c <_tcc_gclk_ids>:
    875c:	001d1c1c                                ....

00008760 <_tcc_maxs>:
    8760:	00ffffff 00ffffff 0000ffff              ............

0000876c <_tcc_ow_nums>:
    876c:	00020408                                ....

00008770 <_tcc_intflag>:
    8770:	00000001 00000002 00000004 00000008     ................
    8780:	00001000 00002000 00004000 00008000     ..... ...@......
    8790:	00010000 00020000 00040000 00080000     ................

000087a0 <tcc_interrupt_vectors.14047>:
    87a0:	00131211 00003214 0000321e 00003228     .....2...2..(2..
    87b0:	00003232 0000323c                       22..<2..

000087b8 <adc_interrupt_vectors.14143>:
    87b8:	00001a19 000037d2 0000380c 0000381c     .....7...8...8..
    87c8:	0000383a 0000382c 00003856 00003848     :8..,8..V8..H8..
    87d8:	756c3325 3330252e 0000756c 20202020     %3lu.%03lu..    
    87e8:	20202020 00000020 20202020 00000000          ...    ....
    87f8:	20202020 00202020 00643725 756c3725            .%7d.%7lu
    8808:	00000000 00733725 4f525245 00393952     ....%7s.ERROR99.
    8818:	2d256325 36257339 73342573 00000000     %c%-9s%6s%4s....
    8828:	73392d25 25733725 00007334 000041de     %-9s%7s%4s...A..
    8838:	000041da 000041da 0000420c 0000420c     .A...A...B...B..
    8848:	000041f6 000041e4 000041fc 00004430     .A...A...A..0D..
    8858:	00004410 00004410 00004466 00004422     .D...D..fD.."D..
    8868:	0000443e 00004414 0000444c 200020f4     >D...D..LD... . 
    8878:	20001f50 2000234c 200020b4 20001f10     P.. L#. . . ... 
    8888:	200000f0 20000358 200005c0 20000828     ... X.. ... (.. 
    8898:	20000a90 54544553 53474e49 00000000     ... SETTINGS....
    88a8:	4e414843 204c454e 00000031 4e414843     CHANNEL 1...CHAN
    88b8:	204c454e 00000032 4e414843 204c454e     NEL 2...CHANNEL 
    88c8:	00000033 4e414843 204c454e 00000034     3...CHANNEL 4...
    88d8:	4e414843 204c454e 00000035 544e4f43     CHANNEL 5...CONT
    88e8:	54534152 00000000 47495242 454e5448     RAST....BRIGHTNE
    88f8:	00000053 45444f4d 00000000 5f584946     S...MODE....FIX_
    8908:	455a4953 00000000 4b434142 00000000     SIZE....BACK....
    8918:	25584d44 00000064 25584d44 64252d64     DMX%d...DMX%d-%d
    8928:	00000000 54415453 435f4349 00000048     ....STATIC_CH...
    8938:	20584d44 00004843 00000056 4556454c     DMX CH..V...LEVE
    8948:	0000004c 0000736d 41545441 00004b43     L...ms..ATTACK..
    8958:	41434544 00000059 54535553 004e4941     DECAY...SUSTAIN.
    8968:	454c5f53 004c4556 454c4552 00455341     S_LEVEL.RELEASE.
    8978:	00005c60 00005bb0 00005bb0 00005bae     `\...[...[...[..
    8988:	00005c52 00005c52 00005c48 00005bae     R\..R\..H\...[..
    8998:	00005c52 00005c48 00005c52 00005bae     R\..H\..R\...[..
    89a8:	00005c58 00005c58 00005c58 00005ce8     X\..X\..X\...\..
    89b8:	00006a30 00006a12 000069cc 000068ea     0j...j...i...h..
    89c8:	000069cc 00006a04 000069cc 000068ea     .i...j...i...h..
    89d8:	00006a12 00006a12 00006a04 000068ea     .j...j...j...h..
    89e8:	000068e2 000068e2 000068e2 00006c48     .h...h...h..Hl..
    89f8:	00007090 00006f50 00006f50 00006f4c     .p..Po..Po..Lo..
    8a08:	00007068 00007068 0000705a 00006f4c     hp..hp..Zp..Lo..
    8a18:	00007068 0000705a 00007068 00006f4c     hp..Zp..hp..Lo..
    8a28:	00007070 00007070 00007070 00007274     pp..pp..pp..tr..
    8a38:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    8a48:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    8a58:	31300046 35343332 39383736 64636261     F.0123456789abcd
    8a68:	00006665                                ef..

00008a6c <_init>:
    8a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a6e:	46c0      	nop			; (mov r8, r8)
    8a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8a72:	bc08      	pop	{r3}
    8a74:	469e      	mov	lr, r3
    8a76:	4770      	bx	lr

00008a78 <__init_array_start>:
    8a78:	000000e5 	.word	0x000000e5

00008a7c <_fini>:
    8a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a7e:	46c0      	nop			; (mov r8, r8)
    8a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8a82:	bc08      	pop	{r3}
    8a84:	469e      	mov	lr, r3
    8a86:	4770      	bx	lr

00008a88 <__fini_array_start>:
    8a88:	000000bd 	.word	0x000000bd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
    UNUSED(n);

    __asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
        "SUB r0, r0, #1 \n"
#endif
        "CMP r0, #0  \n"
        "BNE loop         "
    );
}
2000000a:	4770      	bx	lr

2000000c <cycles_per_ms>:
2000000c:	1f40 0000                                   @...

20000010 <cycles_per_us>:
20000010:	0008 0000                                   ....

20000014 <TWI_counter>:
20000014:	0101                                             .

20000015 <g_interrupt_enabled>:
20000015:	0001 0800                                        ...

20000018 <device_settings>:
20000018:	1008 0000                                   ....

2000001c <key_pressed>:
2000001c:	0001 0000                                   ....

20000020 <selected_menu>:
20000020:	0cf8 2000                                   ... 

20000024 <_impure_ptr>:
20000024:	0028 2000                                   (.. 

20000028 <impure_data>:
	...
