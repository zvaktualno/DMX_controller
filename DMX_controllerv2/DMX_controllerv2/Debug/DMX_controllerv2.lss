
DMX_controllerv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007f04  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00007f04  00007f04  00017f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000088  20000000  00007f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001ff8  20000088  00007f94  00020088  2**2
                  ALLOC
  4 .stack        00002000  20002080  00009f8c  00020088  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  7 .debug_info   0005afb1  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000767f  00000000  00000000  0007b0ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ad87  00000000  00000000  00082739  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c18  00000000  00000000  0008d4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f58  00000000  00000000  0008e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00027250  00000000  00000000  0008f030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001bbb8  00000000  00000000  000b6280  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a56a1  00000000  00000000  000d1e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002330  00000000  00000000  001774dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 40 00 20 cd 3e 00 00 79 3f 00 00 7d 3f 00 00     .@. .>..y?..}?..
	...
      2c:	81 3f 00 00 00 00 00 00 00 00 00 00 85 3f 00 00     .?...........?..
      3c:	89 3f 00 00 c9 3e 00 00 c9 3e 00 00 c9 3e 00 00     .?...>...>...>..
      4c:	d5 12 00 00 c9 3e 00 00 c9 3e 00 00 c9 3e 00 00     .....>...>...>..
      5c:	c9 3e 00 00 c9 3e 00 00 91 28 00 00 a1 28 00 00     .>...>...(...(..
      6c:	b1 28 00 00 c1 28 00 00 d1 28 00 00 e1 28 00 00     .(...(...(...(..
      7c:	c9 3e 00 00 c9 3e 00 00 b9 21 00 00 c9 21 00 00     .>...>...!...!..
      8c:	d9 21 00 00 35 07 00 00 45 07 00 00 55 07 00 00     .!..5...E...U...
      9c:	65 07 00 00 75 07 00 00 55 12 00 00 65 12 00 00     e...u...U...e...
      ac:	79 29 00 00 91 17 00 00 c9 3e 00 00 c9 3e 00 00     y).......>...>..

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000088 	.word	0x20000088
      dc:	00000000 	.word	0x00000000
      e0:	00007f0c 	.word	0x00007f0c

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	2000008c 	.word	0x2000008c
     110:	00007f0c 	.word	0x00007f0c
     114:	00007f0c 	.word	0x00007f0c
     118:	00000000 	.word	0x00000000

0000011c <lcd_pulseEnable>:
}



void lcd_pulseEnable(void)
{
     11c:	b5f0      	push	{r4, r5, r6, r7, lr}
     11e:	46d6      	mov	lr, sl
     120:	464f      	mov	r7, r9
     122:	4646      	mov	r6, r8
     124:	b5c0      	push	{r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     126:	2480      	movs	r4, #128	; 0x80
     128:	2382      	movs	r3, #130	; 0x82
     12a:	05db      	lsls	r3, r3, #23
     12c:	469a      	mov	sl, r3
     12e:	44a2      	add	sl, r4
     130:	4653      	mov	r3, sl
     132:	615c      	str	r4, [r3, #20]
    port_pin_set_output_level(PIN_LCD_EN, 0);
    delay_us(1);
     134:	2000      	movs	r0, #0
     136:	4b1a      	ldr	r3, [pc, #104]	; (1a0 <lcd_pulseEnable+0x84>)
     138:	4699      	mov	r9, r3
     13a:	4798      	blx	r3
     13c:	0002      	movs	r2, r0
     13e:	2300      	movs	r3, #0
     140:	4e18      	ldr	r6, [pc, #96]	; (1a4 <lcd_pulseEnable+0x88>)
     142:	2700      	movs	r7, #0
     144:	1992      	adds	r2, r2, r6
     146:	417b      	adcs	r3, r7
     148:	0010      	movs	r0, r2
     14a:	0019      	movs	r1, r3
     14c:	4b16      	ldr	r3, [pc, #88]	; (1a8 <lcd_pulseEnable+0x8c>)
     14e:	4698      	mov	r8, r3
     150:	4a16      	ldr	r2, [pc, #88]	; (1ac <lcd_pulseEnable+0x90>)
     152:	2300      	movs	r3, #0
     154:	47c0      	blx	r8
     156:	4d16      	ldr	r5, [pc, #88]	; (1b0 <lcd_pulseEnable+0x94>)
     158:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     15a:	4653      	mov	r3, sl
     15c:	619c      	str	r4, [r3, #24]
    port_pin_set_output_level(PIN_LCD_EN, 1);
    delay_us(1);
     15e:	2000      	movs	r0, #0
     160:	47c8      	blx	r9
     162:	0002      	movs	r2, r0
     164:	2300      	movs	r3, #0
     166:	1992      	adds	r2, r2, r6
     168:	417b      	adcs	r3, r7
     16a:	0010      	movs	r0, r2
     16c:	0019      	movs	r1, r3
     16e:	4a0f      	ldr	r2, [pc, #60]	; (1ac <lcd_pulseEnable+0x90>)
     170:	2300      	movs	r3, #0
     172:	47c0      	blx	r8
     174:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
     176:	4653      	mov	r3, sl
     178:	615c      	str	r4, [r3, #20]
    port_pin_set_output_level(PIN_LCD_EN, 0);
    delay_us(100);
     17a:	2000      	movs	r0, #0
     17c:	47c8      	blx	r9
     17e:	2264      	movs	r2, #100	; 0x64
     180:	2300      	movs	r3, #0
     182:	2100      	movs	r1, #0
     184:	4c0b      	ldr	r4, [pc, #44]	; (1b4 <lcd_pulseEnable+0x98>)
     186:	47a0      	blx	r4
     188:	1980      	adds	r0, r0, r6
     18a:	4179      	adcs	r1, r7
     18c:	4a07      	ldr	r2, [pc, #28]	; (1ac <lcd_pulseEnable+0x90>)
     18e:	2300      	movs	r3, #0
     190:	47c0      	blx	r8
     192:	47a8      	blx	r5
}
     194:	bc1c      	pop	{r2, r3, r4}
     196:	4690      	mov	r8, r2
     198:	4699      	mov	r9, r3
     19a:	46a2      	mov	sl, r4
     19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     19e:	46c0      	nop			; (mov r8, r8)
     1a0:	00003c95 	.word	0x00003c95
     1a4:	006acfbf 	.word	0x006acfbf
     1a8:	00004c8d 	.word	0x00004c8d
     1ac:	006acfc0 	.word	0x006acfc0
     1b0:	20000001 	.word	0x20000001
     1b4:	00004ccd 	.word	0x00004ccd

000001b8 <lcd_write8bits>:
{
     1b8:	b510      	push	{r4, lr}
	if (level) {
     1ba:	07c3      	lsls	r3, r0, #31
     1bc:	d538      	bpl.n	230 <lcd_write8bits+0x78>
		port_base->OUTSET.reg = pin_mask;
     1be:	2240      	movs	r2, #64	; 0x40
     1c0:	4b2c      	ldr	r3, [pc, #176]	; (274 <lcd_write8bits+0xbc>)
     1c2:	619a      	str	r2, [r3, #24]
	if (level) {
     1c4:	0783      	lsls	r3, r0, #30
     1c6:	d537      	bpl.n	238 <lcd_write8bits+0x80>
		port_base->OUTSET.reg = pin_mask;
     1c8:	2220      	movs	r2, #32
     1ca:	4b2a      	ldr	r3, [pc, #168]	; (274 <lcd_write8bits+0xbc>)
     1cc:	619a      	str	r2, [r3, #24]
	if (level) {
     1ce:	0743      	lsls	r3, r0, #29
     1d0:	d536      	bpl.n	240 <lcd_write8bits+0x88>
		port_base->OUTSET.reg = pin_mask;
     1d2:	2210      	movs	r2, #16
     1d4:	4b27      	ldr	r3, [pc, #156]	; (274 <lcd_write8bits+0xbc>)
     1d6:	619a      	str	r2, [r3, #24]
	if (level) {
     1d8:	0703      	lsls	r3, r0, #28
     1da:	d535      	bpl.n	248 <lcd_write8bits+0x90>
		port_base->OUTSET.reg = pin_mask;
     1dc:	2208      	movs	r2, #8
     1de:	4b25      	ldr	r3, [pc, #148]	; (274 <lcd_write8bits+0xbc>)
     1e0:	619a      	str	r2, [r3, #24]
	if (level) {
     1e2:	06c3      	lsls	r3, r0, #27
     1e4:	d534      	bpl.n	250 <lcd_write8bits+0x98>
		port_base->OUTSET.reg = pin_mask;
     1e6:	2204      	movs	r2, #4
     1e8:	4b22      	ldr	r3, [pc, #136]	; (274 <lcd_write8bits+0xbc>)
     1ea:	619a      	str	r2, [r3, #24]
	if (level) {
     1ec:	0683      	lsls	r3, r0, #26
     1ee:	d533      	bpl.n	258 <lcd_write8bits+0xa0>
		port_base->OUTSET.reg = pin_mask;
     1f0:	2202      	movs	r2, #2
     1f2:	4b20      	ldr	r3, [pc, #128]	; (274 <lcd_write8bits+0xbc>)
     1f4:	619a      	str	r2, [r3, #24]
	if (level) {
     1f6:	0643      	lsls	r3, r0, #25
     1f8:	d532      	bpl.n	260 <lcd_write8bits+0xa8>
		port_base->OUTSET.reg = pin_mask;
     1fa:	2201      	movs	r2, #1
     1fc:	4b1d      	ldr	r3, [pc, #116]	; (274 <lcd_write8bits+0xbc>)
     1fe:	619a      	str	r2, [r3, #24]
	if (level) {
     200:	09c0      	lsrs	r0, r0, #7
     202:	d131      	bne.n	268 <lcd_write8bits+0xb0>
		port_base->OUTCLR.reg = pin_mask;
     204:	2280      	movs	r2, #128	; 0x80
     206:	0612      	lsls	r2, r2, #24
     208:	4b1a      	ldr	r3, [pc, #104]	; (274 <lcd_write8bits+0xbc>)
     20a:	615a      	str	r2, [r3, #20]
    delay_us(1);
     20c:	2000      	movs	r0, #0
     20e:	4b1a      	ldr	r3, [pc, #104]	; (278 <lcd_write8bits+0xc0>)
     210:	4798      	blx	r3
     212:	0002      	movs	r2, r0
     214:	2300      	movs	r3, #0
     216:	4819      	ldr	r0, [pc, #100]	; (27c <lcd_write8bits+0xc4>)
     218:	2100      	movs	r1, #0
     21a:	1880      	adds	r0, r0, r2
     21c:	4159      	adcs	r1, r3
     21e:	4a18      	ldr	r2, [pc, #96]	; (280 <lcd_write8bits+0xc8>)
     220:	2300      	movs	r3, #0
     222:	4c18      	ldr	r4, [pc, #96]	; (284 <lcd_write8bits+0xcc>)
     224:	47a0      	blx	r4
     226:	4b18      	ldr	r3, [pc, #96]	; (288 <lcd_write8bits+0xd0>)
     228:	4798      	blx	r3
    lcd_pulseEnable();
     22a:	4b18      	ldr	r3, [pc, #96]	; (28c <lcd_write8bits+0xd4>)
     22c:	4798      	blx	r3
}
     22e:	bd10      	pop	{r4, pc}
     230:	2240      	movs	r2, #64	; 0x40
     232:	4b10      	ldr	r3, [pc, #64]	; (274 <lcd_write8bits+0xbc>)
     234:	615a      	str	r2, [r3, #20]
     236:	e7c5      	b.n	1c4 <lcd_write8bits+0xc>
     238:	2220      	movs	r2, #32
     23a:	4b0e      	ldr	r3, [pc, #56]	; (274 <lcd_write8bits+0xbc>)
     23c:	615a      	str	r2, [r3, #20]
     23e:	e7c6      	b.n	1ce <lcd_write8bits+0x16>
     240:	2210      	movs	r2, #16
     242:	4b0c      	ldr	r3, [pc, #48]	; (274 <lcd_write8bits+0xbc>)
     244:	615a      	str	r2, [r3, #20]
     246:	e7c7      	b.n	1d8 <lcd_write8bits+0x20>
     248:	2208      	movs	r2, #8
     24a:	4b0a      	ldr	r3, [pc, #40]	; (274 <lcd_write8bits+0xbc>)
     24c:	615a      	str	r2, [r3, #20]
     24e:	e7c8      	b.n	1e2 <lcd_write8bits+0x2a>
     250:	2204      	movs	r2, #4
     252:	4b08      	ldr	r3, [pc, #32]	; (274 <lcd_write8bits+0xbc>)
     254:	615a      	str	r2, [r3, #20]
     256:	e7c9      	b.n	1ec <lcd_write8bits+0x34>
     258:	2202      	movs	r2, #2
     25a:	4b06      	ldr	r3, [pc, #24]	; (274 <lcd_write8bits+0xbc>)
     25c:	615a      	str	r2, [r3, #20]
     25e:	e7ca      	b.n	1f6 <lcd_write8bits+0x3e>
     260:	2201      	movs	r2, #1
     262:	4b04      	ldr	r3, [pc, #16]	; (274 <lcd_write8bits+0xbc>)
     264:	615a      	str	r2, [r3, #20]
     266:	e7cb      	b.n	200 <lcd_write8bits+0x48>
		port_base->OUTSET.reg = pin_mask;
     268:	2280      	movs	r2, #128	; 0x80
     26a:	0612      	lsls	r2, r2, #24
     26c:	4b01      	ldr	r3, [pc, #4]	; (274 <lcd_write8bits+0xbc>)
     26e:	619a      	str	r2, [r3, #24]
     270:	e7cc      	b.n	20c <lcd_write8bits+0x54>
     272:	46c0      	nop			; (mov r8, r8)
     274:	41000080 	.word	0x41000080
     278:	00003c95 	.word	0x00003c95
     27c:	006acfbf 	.word	0x006acfbf
     280:	006acfc0 	.word	0x006acfc0
     284:	00004c8d 	.word	0x00004c8d
     288:	20000001 	.word	0x20000001
     28c:	0000011d 	.word	0x0000011d

00000290 <lcd_send>:
{
     290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     292:	46ce      	mov	lr, r9
     294:	4647      	mov	r7, r8
     296:	b580      	push	{r7, lr}
     298:	0006      	movs	r6, r0
	if (level) {
     29a:	2900      	cmp	r1, #0
     29c:	d12a      	bne.n	2f4 <lcd_send+0x64>
		port_base->OUTCLR.reg = pin_mask;
     29e:	2280      	movs	r2, #128	; 0x80
     2a0:	0092      	lsls	r2, r2, #2
     2a2:	4b17      	ldr	r3, [pc, #92]	; (300 <lcd_send+0x70>)
     2a4:	615a      	str	r2, [r3, #20]
    delay_us(1);
     2a6:	2000      	movs	r0, #0
     2a8:	4f16      	ldr	r7, [pc, #88]	; (304 <lcd_send+0x74>)
     2aa:	47b8      	blx	r7
     2ac:	0002      	movs	r2, r0
     2ae:	2300      	movs	r3, #0
     2b0:	4c15      	ldr	r4, [pc, #84]	; (308 <lcd_send+0x78>)
     2b2:	2500      	movs	r5, #0
     2b4:	1912      	adds	r2, r2, r4
     2b6:	416b      	adcs	r3, r5
     2b8:	0010      	movs	r0, r2
     2ba:	0019      	movs	r1, r3
     2bc:	4b13      	ldr	r3, [pc, #76]	; (30c <lcd_send+0x7c>)
     2be:	4698      	mov	r8, r3
     2c0:	4a13      	ldr	r2, [pc, #76]	; (310 <lcd_send+0x80>)
     2c2:	2300      	movs	r3, #0
     2c4:	47c0      	blx	r8
     2c6:	4b13      	ldr	r3, [pc, #76]	; (314 <lcd_send+0x84>)
     2c8:	4699      	mov	r9, r3
     2ca:	4798      	blx	r3
    lcd_write8bits(value);
     2cc:	0030      	movs	r0, r6
     2ce:	4b12      	ldr	r3, [pc, #72]	; (318 <lcd_send+0x88>)
     2d0:	4798      	blx	r3
    delay_us(100);
     2d2:	2000      	movs	r0, #0
     2d4:	47b8      	blx	r7
     2d6:	2264      	movs	r2, #100	; 0x64
     2d8:	2300      	movs	r3, #0
     2da:	2100      	movs	r1, #0
     2dc:	4e0f      	ldr	r6, [pc, #60]	; (31c <lcd_send+0x8c>)
     2de:	47b0      	blx	r6
     2e0:	1900      	adds	r0, r0, r4
     2e2:	4169      	adcs	r1, r5
     2e4:	4a0a      	ldr	r2, [pc, #40]	; (310 <lcd_send+0x80>)
     2e6:	2300      	movs	r3, #0
     2e8:	47c0      	blx	r8
     2ea:	47c8      	blx	r9
}
     2ec:	bc0c      	pop	{r2, r3}
     2ee:	4690      	mov	r8, r2
     2f0:	4699      	mov	r9, r3
     2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		port_base->OUTSET.reg = pin_mask;
     2f4:	2280      	movs	r2, #128	; 0x80
     2f6:	0092      	lsls	r2, r2, #2
     2f8:	4b01      	ldr	r3, [pc, #4]	; (300 <lcd_send+0x70>)
     2fa:	619a      	str	r2, [r3, #24]
     2fc:	e7d3      	b.n	2a6 <lcd_send+0x16>
     2fe:	46c0      	nop			; (mov r8, r8)
     300:	41000080 	.word	0x41000080
     304:	00003c95 	.word	0x00003c95
     308:	006acfbf 	.word	0x006acfbf
     30c:	00004c8d 	.word	0x00004c8d
     310:	006acfc0 	.word	0x006acfc0
     314:	20000001 	.word	0x20000001
     318:	000001b9 	.word	0x000001b9
     31c:	00004ccd 	.word	0x00004ccd

00000320 <lcd_command>:
{
     320:	b510      	push	{r4, lr}
    lcd_send(value, 0);
     322:	2100      	movs	r1, #0
     324:	4b01      	ldr	r3, [pc, #4]	; (32c <lcd_command+0xc>)
     326:	4798      	blx	r3
}
     328:	bd10      	pop	{r4, pc}
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	00000291 	.word	0x00000291

00000330 <lcd_clear>:
{
     330:	b510      	push	{r4, lr}
    lcd_command(LCD_CLEARDISPLAY);
     332:	2001      	movs	r0, #1
     334:	4b0b      	ldr	r3, [pc, #44]	; (364 <lcd_clear+0x34>)
     336:	4798      	blx	r3
    delay_us(3);
     338:	2000      	movs	r0, #0
     33a:	4b0b      	ldr	r3, [pc, #44]	; (368 <lcd_clear+0x38>)
     33c:	4798      	blx	r3
     33e:	0002      	movs	r2, r0
     340:	2300      	movs	r3, #0
     342:	0019      	movs	r1, r3
     344:	1880      	adds	r0, r0, r2
     346:	4159      	adcs	r1, r3
     348:	1880      	adds	r0, r0, r2
     34a:	4159      	adcs	r1, r3
     34c:	4a07      	ldr	r2, [pc, #28]	; (36c <lcd_clear+0x3c>)
     34e:	2300      	movs	r3, #0
     350:	1880      	adds	r0, r0, r2
     352:	4159      	adcs	r1, r3
     354:	4a06      	ldr	r2, [pc, #24]	; (370 <lcd_clear+0x40>)
     356:	2300      	movs	r3, #0
     358:	4c06      	ldr	r4, [pc, #24]	; (374 <lcd_clear+0x44>)
     35a:	47a0      	blx	r4
     35c:	4b06      	ldr	r3, [pc, #24]	; (378 <lcd_clear+0x48>)
     35e:	4798      	blx	r3
}
     360:	bd10      	pop	{r4, pc}
     362:	46c0      	nop			; (mov r8, r8)
     364:	00000321 	.word	0x00000321
     368:	00003c95 	.word	0x00003c95
     36c:	006acfbf 	.word	0x006acfbf
     370:	006acfc0 	.word	0x006acfc0
     374:	00004c8d 	.word	0x00004c8d
     378:	20000001 	.word	0x20000001

0000037c <lcd_home>:
{
     37c:	b510      	push	{r4, lr}
    lcd_command(LCD_RETURNHOME);
     37e:	2002      	movs	r0, #2
     380:	4b0b      	ldr	r3, [pc, #44]	; (3b0 <lcd_home+0x34>)
     382:	4798      	blx	r3
    delay_us(3);
     384:	2000      	movs	r0, #0
     386:	4b0b      	ldr	r3, [pc, #44]	; (3b4 <lcd_home+0x38>)
     388:	4798      	blx	r3
     38a:	0002      	movs	r2, r0
     38c:	2300      	movs	r3, #0
     38e:	0019      	movs	r1, r3
     390:	1880      	adds	r0, r0, r2
     392:	4159      	adcs	r1, r3
     394:	1880      	adds	r0, r0, r2
     396:	4159      	adcs	r1, r3
     398:	4a07      	ldr	r2, [pc, #28]	; (3b8 <lcd_home+0x3c>)
     39a:	2300      	movs	r3, #0
     39c:	1880      	adds	r0, r0, r2
     39e:	4159      	adcs	r1, r3
     3a0:	4a06      	ldr	r2, [pc, #24]	; (3bc <lcd_home+0x40>)
     3a2:	2300      	movs	r3, #0
     3a4:	4c06      	ldr	r4, [pc, #24]	; (3c0 <lcd_home+0x44>)
     3a6:	47a0      	blx	r4
     3a8:	4b06      	ldr	r3, [pc, #24]	; (3c4 <lcd_home+0x48>)
     3aa:	4798      	blx	r3
}
     3ac:	bd10      	pop	{r4, pc}
     3ae:	46c0      	nop			; (mov r8, r8)
     3b0:	00000321 	.word	0x00000321
     3b4:	00003c95 	.word	0x00003c95
     3b8:	006acfbf 	.word	0x006acfbf
     3bc:	006acfc0 	.word	0x006acfc0
     3c0:	00004c8d 	.word	0x00004c8d
     3c4:	20000001 	.word	0x20000001

000003c8 <lcd_begin>:
{
     3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3ca:	46de      	mov	lr, fp
     3cc:	4657      	mov	r7, sl
     3ce:	464e      	mov	r6, r9
     3d0:	4645      	mov	r5, r8
     3d2:	b5e0      	push	{r5, r6, r7, lr}
    _displayfunction = LCD_2LINE| LCD_8BITMODE | LCD_5x8DOTS;
     3d4:	4d38      	ldr	r5, [pc, #224]	; (4b8 <lcd_begin+0xf0>)
     3d6:	2318      	movs	r3, #24
     3d8:	702b      	strb	r3, [r5, #0]
    delay_ms(50);
     3da:	2000      	movs	r0, #0
     3dc:	4b37      	ldr	r3, [pc, #220]	; (4bc <lcd_begin+0xf4>)
     3de:	469b      	mov	fp, r3
     3e0:	4798      	blx	r3
     3e2:	4b37      	ldr	r3, [pc, #220]	; (4c0 <lcd_begin+0xf8>)
     3e4:	469a      	mov	sl, r3
     3e6:	2232      	movs	r2, #50	; 0x32
     3e8:	2300      	movs	r3, #0
     3ea:	2100      	movs	r1, #0
     3ec:	47d0      	blx	sl
     3ee:	4e35      	ldr	r6, [pc, #212]	; (4c4 <lcd_begin+0xfc>)
     3f0:	2700      	movs	r7, #0
     3f2:	1980      	adds	r0, r0, r6
     3f4:	4179      	adcs	r1, r7
     3f6:	4b34      	ldr	r3, [pc, #208]	; (4c8 <lcd_begin+0x100>)
     3f8:	4699      	mov	r9, r3
     3fa:	4a34      	ldr	r2, [pc, #208]	; (4cc <lcd_begin+0x104>)
     3fc:	2300      	movs	r3, #0
     3fe:	47c8      	blx	r9
     400:	4b33      	ldr	r3, [pc, #204]	; (4d0 <lcd_begin+0x108>)
     402:	4698      	mov	r8, r3
     404:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     406:	2280      	movs	r2, #128	; 0x80
     408:	2382      	movs	r3, #130	; 0x82
     40a:	05db      	lsls	r3, r3, #23
     40c:	18d3      	adds	r3, r2, r3
     40e:	2180      	movs	r1, #128	; 0x80
     410:	0089      	lsls	r1, r1, #2
     412:	6159      	str	r1, [r3, #20]
     414:	3901      	subs	r1, #1
     416:	39ff      	subs	r1, #255	; 0xff
     418:	6159      	str	r1, [r3, #20]
     41a:	615a      	str	r2, [r3, #20]
    delay_ms(50);
     41c:	2000      	movs	r0, #0
     41e:	47d8      	blx	fp
     420:	2232      	movs	r2, #50	; 0x32
     422:	2300      	movs	r3, #0
     424:	2100      	movs	r1, #0
     426:	47d0      	blx	sl
     428:	1980      	adds	r0, r0, r6
     42a:	4179      	adcs	r1, r7
     42c:	4a27      	ldr	r2, [pc, #156]	; (4cc <lcd_begin+0x104>)
     42e:	2300      	movs	r3, #0
     430:	47c8      	blx	r9
     432:	47c0      	blx	r8
    lcd_command(LCD_FUNCTIONSET | _displayfunction);
     434:	2620      	movs	r6, #32
     436:	7828      	ldrb	r0, [r5, #0]
     438:	4330      	orrs	r0, r6
     43a:	b2c0      	uxtb	r0, r0
     43c:	4c25      	ldr	r4, [pc, #148]	; (4d4 <lcd_begin+0x10c>)
     43e:	47a0      	blx	r4
    delay_us(4500);
     440:	2000      	movs	r0, #0
     442:	47d8      	blx	fp
     444:	4a24      	ldr	r2, [pc, #144]	; (4d8 <lcd_begin+0x110>)
     446:	2300      	movs	r3, #0
     448:	2100      	movs	r1, #0
     44a:	47d0      	blx	sl
     44c:	4a23      	ldr	r2, [pc, #140]	; (4dc <lcd_begin+0x114>)
     44e:	2300      	movs	r3, #0
     450:	1880      	adds	r0, r0, r2
     452:	4159      	adcs	r1, r3
     454:	4a22      	ldr	r2, [pc, #136]	; (4e0 <lcd_begin+0x118>)
     456:	2300      	movs	r3, #0
     458:	47c8      	blx	r9
     45a:	47c0      	blx	r8
    lcd_command(LCD_FUNCTIONSET | _displayfunction);
     45c:	7828      	ldrb	r0, [r5, #0]
     45e:	4330      	orrs	r0, r6
     460:	b2c0      	uxtb	r0, r0
     462:	47a0      	blx	r4
    delay_us(150);
     464:	2000      	movs	r0, #0
     466:	47d8      	blx	fp
     468:	2296      	movs	r2, #150	; 0x96
     46a:	2300      	movs	r3, #0
     46c:	2100      	movs	r1, #0
     46e:	47d0      	blx	sl
     470:	4a1a      	ldr	r2, [pc, #104]	; (4dc <lcd_begin+0x114>)
     472:	2300      	movs	r3, #0
     474:	1880      	adds	r0, r0, r2
     476:	4159      	adcs	r1, r3
     478:	4a19      	ldr	r2, [pc, #100]	; (4e0 <lcd_begin+0x118>)
     47a:	2300      	movs	r3, #0
     47c:	47c8      	blx	r9
     47e:	47c0      	blx	r8
    lcd_command(LCD_FUNCTIONSET | _displayfunction);
     480:	7828      	ldrb	r0, [r5, #0]
     482:	4330      	orrs	r0, r6
     484:	b2c0      	uxtb	r0, r0
     486:	47a0      	blx	r4
    lcd_command(LCD_FUNCTIONSET | _displayfunction);
     488:	7828      	ldrb	r0, [r5, #0]
     48a:	4330      	orrs	r0, r6
     48c:	b2c0      	uxtb	r0, r0
     48e:	47a0      	blx	r4
    _displaycontrol = LCD_DISPLAYON | LCD_CURSORON | LCD_BLINKOFF;
     490:	2206      	movs	r2, #6
     492:	4b14      	ldr	r3, [pc, #80]	; (4e4 <lcd_begin+0x11c>)
     494:	701a      	strb	r2, [r3, #0]
    lcd_command(LCD_DISPLAYCONTROL | _displaycontrol);
     496:	200e      	movs	r0, #14
     498:	47a0      	blx	r4
    lcd_clear();
     49a:	4b13      	ldr	r3, [pc, #76]	; (4e8 <lcd_begin+0x120>)
     49c:	4798      	blx	r3
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     49e:	2202      	movs	r2, #2
     4a0:	4b12      	ldr	r3, [pc, #72]	; (4ec <lcd_begin+0x124>)
     4a2:	701a      	strb	r2, [r3, #0]
    lcd_command(LCD_ENTRYMODESET | _displaymode);
     4a4:	2006      	movs	r0, #6
     4a6:	47a0      	blx	r4
    lcd_home();
     4a8:	4b11      	ldr	r3, [pc, #68]	; (4f0 <lcd_begin+0x128>)
     4aa:	4798      	blx	r3
}
     4ac:	bc3c      	pop	{r2, r3, r4, r5}
     4ae:	4690      	mov	r8, r2
     4b0:	4699      	mov	r9, r3
     4b2:	46a2      	mov	sl, r4
     4b4:	46ab      	mov	fp, r5
     4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4b8:	200000a5 	.word	0x200000a5
     4bc:	00003c95 	.word	0x00003c95
     4c0:	00004ccd 	.word	0x00004ccd
     4c4:	00001b57 	.word	0x00001b57
     4c8:	00004c8d 	.word	0x00004c8d
     4cc:	00001b58 	.word	0x00001b58
     4d0:	20000001 	.word	0x20000001
     4d4:	00000321 	.word	0x00000321
     4d8:	00001194 	.word	0x00001194
     4dc:	006acfbf 	.word	0x006acfbf
     4e0:	006acfc0 	.word	0x006acfc0
     4e4:	200000a4 	.word	0x200000a4
     4e8:	00000331 	.word	0x00000331
     4ec:	200000a6 	.word	0x200000a6
     4f0:	0000037d 	.word	0x0000037d

000004f4 <lcd_setCursor>:
{
     4f4:	b570      	push	{r4, r5, r6, lr}
     4f6:	b084      	sub	sp, #16
    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
     4f8:	466a      	mov	r2, sp
     4fa:	4b0b      	ldr	r3, [pc, #44]	; (528 <lcd_setCursor+0x34>)
     4fc:	cb70      	ldmia	r3!, {r4, r5, r6}
     4fe:	c270      	stmia	r2!, {r4, r5, r6}
     500:	681b      	ldr	r3, [r3, #0]
     502:	6013      	str	r3, [r2, #0]
    if(row>3||col>19)
     504:	2903      	cmp	r1, #3
     506:	d801      	bhi.n	50c <lcd_setCursor+0x18>
     508:	2813      	cmp	r0, #19
     50a:	d901      	bls.n	510 <lcd_setCursor+0x1c>
}
     50c:	b004      	add	sp, #16
     50e:	bd70      	pop	{r4, r5, r6, pc}
    lcd_command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
     510:	0089      	lsls	r1, r1, #2
     512:	466b      	mov	r3, sp
     514:	58cb      	ldr	r3, [r1, r3]
     516:	18c0      	adds	r0, r0, r3
     518:	2380      	movs	r3, #128	; 0x80
     51a:	425b      	negs	r3, r3
     51c:	4318      	orrs	r0, r3
     51e:	b2c0      	uxtb	r0, r0
     520:	4b02      	ldr	r3, [pc, #8]	; (52c <lcd_setCursor+0x38>)
     522:	4798      	blx	r3
     524:	e7f2      	b.n	50c <lcd_setCursor+0x18>
     526:	46c0      	nop			; (mov r8, r8)
     528:	000079f4 	.word	0x000079f4
     52c:	00000321 	.word	0x00000321

00000530 <lcd_noCursor>:
{
     530:	b510      	push	{r4, lr}
    _displaycontrol &= ~LCD_CURSORON;
     532:	4b05      	ldr	r3, [pc, #20]	; (548 <lcd_noCursor+0x18>)
     534:	7818      	ldrb	r0, [r3, #0]
     536:	2202      	movs	r2, #2
     538:	4390      	bics	r0, r2
     53a:	7018      	strb	r0, [r3, #0]
    lcd_command(LCD_DISPLAYCONTROL | _displaycontrol);
     53c:	2308      	movs	r3, #8
     53e:	4318      	orrs	r0, r3
     540:	4b02      	ldr	r3, [pc, #8]	; (54c <lcd_noCursor+0x1c>)
     542:	4798      	blx	r3
}
     544:	bd10      	pop	{r4, pc}
     546:	46c0      	nop			; (mov r8, r8)
     548:	200000a4 	.word	0x200000a4
     54c:	00000321 	.word	0x00000321

00000550 <lcd_write>:
{
     550:	b510      	push	{r4, lr}
    lcd_send(value, 1);
     552:	2101      	movs	r1, #1
     554:	4b01      	ldr	r3, [pc, #4]	; (55c <lcd_write+0xc>)
     556:	4798      	blx	r3
}
     558:	bd10      	pop	{r4, pc}
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	00000291 	.word	0x00000291

00000560 <lcd_printstr>:
{
    /*manka*/
}

void lcd_printstr(char *str)
{
     560:	b570      	push	{r4, r5, r6, lr}
     562:	0004      	movs	r4, r0
    while(*str) {
     564:	7800      	ldrb	r0, [r0, #0]
     566:	2800      	cmp	r0, #0
     568:	d005      	beq.n	576 <lcd_printstr+0x16>
        lcd_write(*str++);
     56a:	4d03      	ldr	r5, [pc, #12]	; (578 <lcd_printstr+0x18>)
     56c:	3401      	adds	r4, #1
     56e:	47a8      	blx	r5
    while(*str) {
     570:	7820      	ldrb	r0, [r4, #0]
     572:	2800      	cmp	r0, #0
     574:	d1fa      	bne.n	56c <lcd_printstr+0xc>
    }
     576:	bd70      	pop	{r4, r5, r6, pc}
     578:	00000551 	.word	0x00000551

0000057c <adsr_process>:
#include "config.h"

#define MAX_32BIT_VALUE 0xFFFFFFFF

void adsr_process(ADSR *adsr)
{
     57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     57e:	0004      	movs	r4, r0
    switch(adsr->state) {
     580:	2330      	movs	r3, #48	; 0x30
     582:	5cc2      	ldrb	r2, [r0, r3]
     584:	2a05      	cmp	r2, #5
     586:	d80c      	bhi.n	5a2 <adsr_process+0x26>
     588:	0093      	lsls	r3, r2, #2
     58a:	4a43      	ldr	r2, [pc, #268]	; (698 <adsr_process+0x11c>)
     58c:	58d3      	ldr	r3, [r2, r3]
     58e:	469f      	mov	pc, r3
        case START:
            adsr->attack_counter = 0;
     590:	2300      	movs	r3, #0
     592:	6103      	str	r3, [r0, #16]
            adsr->sustain_counter = 0;
     594:	6243      	str	r3, [r0, #36]	; 0x24
            adsr->decay_counter = 0;
     596:	6183      	str	r3, [r0, #24]
            adsr->release_counter = 0;
     598:	62c3      	str	r3, [r0, #44]	; 0x2c
            adsr->state = ATTACK;
     59a:	2101      	movs	r1, #1
     59c:	2230      	movs	r2, #48	; 0x30
     59e:	5481      	strb	r1, [r0, r2]
            adsr->value = 0;
     5a0:	6043      	str	r3, [r0, #4]
            break;
        case END:
            adsr->value=0;
            break;
    }
}
     5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(adsr->attack==0) {
     5a4:	68c6      	ldr	r6, [r0, #12]
     5a6:	2e00      	cmp	r6, #0
     5a8:	d016      	beq.n	5d8 <adsr_process+0x5c>
            adsr->value = MAX_32BIT_VALUE / adsr->attack  * adsr->attack_counter;
     5aa:	6905      	ldr	r5, [r0, #16]
     5ac:	0031      	movs	r1, r6
     5ae:	2001      	movs	r0, #1
     5b0:	4240      	negs	r0, r0
     5b2:	4b3a      	ldr	r3, [pc, #232]	; (69c <adsr_process+0x120>)
     5b4:	4798      	blx	r3
     5b6:	4368      	muls	r0, r5
     5b8:	6060      	str	r0, [r4, #4]
            adsr->attack_counter += adsr->interval;
     5ba:	68a3      	ldr	r3, [r4, #8]
     5bc:	469c      	mov	ip, r3
     5be:	4465      	add	r5, ip
     5c0:	6125      	str	r5, [r4, #16]
            if(adsr->attack_counter > adsr->attack) {
     5c2:	42ae      	cmp	r6, r5
     5c4:	d2ed      	bcs.n	5a2 <adsr_process+0x26>
                adsr->value = MAX_32BIT_VALUE; //max value
     5c6:	2301      	movs	r3, #1
     5c8:	425b      	negs	r3, r3
     5ca:	6063      	str	r3, [r4, #4]
                adsr->state = DECAY;
     5cc:	2202      	movs	r2, #2
     5ce:	3331      	adds	r3, #49	; 0x31
     5d0:	54e2      	strb	r2, [r4, r3]
                adsr->attack_counter = 0;
     5d2:	2300      	movs	r3, #0
     5d4:	6123      	str	r3, [r4, #16]
     5d6:	e7e4      	b.n	5a2 <adsr_process+0x26>
                adsr->value = MAX_32BIT_VALUE;
     5d8:	2301      	movs	r3, #1
     5da:	425b      	negs	r3, r3
     5dc:	6043      	str	r3, [r0, #4]
                adsr->state = DECAY;
     5de:	2202      	movs	r2, #2
     5e0:	3331      	adds	r3, #49	; 0x31
     5e2:	54c2      	strb	r2, [r0, r3]
                break;
     5e4:	e7dd      	b.n	5a2 <adsr_process+0x26>
            if(adsr->decay==0) {
     5e6:	6946      	ldr	r6, [r0, #20]
     5e8:	2e00      	cmp	r6, #0
     5ea:	d016      	beq.n	61a <adsr_process+0x9e>
            adsr->value =  MAX_32BIT_VALUE - (MAX_32BIT_VALUE - (adsr->sustain_level<<24)) / adsr->decay * adsr->decay_counter ;
     5ec:	6a03      	ldr	r3, [r0, #32]
     5ee:	061f      	lsls	r7, r3, #24
     5f0:	6985      	ldr	r5, [r0, #24]
     5f2:	43f8      	mvns	r0, r7
     5f4:	0031      	movs	r1, r6
     5f6:	4b29      	ldr	r3, [pc, #164]	; (69c <adsr_process+0x120>)
     5f8:	4798      	blx	r3
     5fa:	4368      	muls	r0, r5
     5fc:	43c0      	mvns	r0, r0
     5fe:	6060      	str	r0, [r4, #4]
            adsr->decay_counter += adsr->interval;
     600:	68a3      	ldr	r3, [r4, #8]
     602:	469c      	mov	ip, r3
     604:	4465      	add	r5, ip
     606:	61a5      	str	r5, [r4, #24]
            if(adsr->decay_counter > adsr->decay) {
     608:	42ae      	cmp	r6, r5
     60a:	d2ca      	bcs.n	5a2 <adsr_process+0x26>
                adsr->value = adsr->sustain_level<<24;
     60c:	6067      	str	r7, [r4, #4]
                adsr->state = SUSTAIN;
     60e:	2203      	movs	r2, #3
     610:	2330      	movs	r3, #48	; 0x30
     612:	54e2      	strb	r2, [r4, r3]
                adsr->decay_counter = 0;
     614:	2300      	movs	r3, #0
     616:	61a3      	str	r3, [r4, #24]
     618:	e7c3      	b.n	5a2 <adsr_process+0x26>
                adsr->value = adsr->sustain_level;
     61a:	6a03      	ldr	r3, [r0, #32]
     61c:	6043      	str	r3, [r0, #4]
                adsr->state = SUSTAIN;
     61e:	2203      	movs	r2, #3
     620:	2330      	movs	r3, #48	; 0x30
     622:	54c2      	strb	r2, [r0, r3]
                break;
     624:	e7bd      	b.n	5a2 <adsr_process+0x26>
            if(adsr->sustain==0) {
     626:	69c2      	ldr	r2, [r0, #28]
     628:	2a00      	cmp	r2, #0
     62a:	d00f      	beq.n	64c <adsr_process+0xd0>
            adsr->value = adsr->sustain_level<<24;
     62c:	6a03      	ldr	r3, [r0, #32]
     62e:	061b      	lsls	r3, r3, #24
     630:	6043      	str	r3, [r0, #4]
            adsr->sustain_counter += adsr->interval;
     632:	6a43      	ldr	r3, [r0, #36]	; 0x24
     634:	6881      	ldr	r1, [r0, #8]
     636:	468c      	mov	ip, r1
     638:	4463      	add	r3, ip
     63a:	6243      	str	r3, [r0, #36]	; 0x24
            if(adsr->sustain_counter > adsr->sustain) {
     63c:	429a      	cmp	r2, r3
     63e:	d2b0      	bcs.n	5a2 <adsr_process+0x26>
                adsr->state = RELEASE;
     640:	2204      	movs	r2, #4
     642:	2330      	movs	r3, #48	; 0x30
     644:	54c2      	strb	r2, [r0, r3]
                adsr->sustain_counter = 0;
     646:	2300      	movs	r3, #0
     648:	6243      	str	r3, [r0, #36]	; 0x24
     64a:	e7aa      	b.n	5a2 <adsr_process+0x26>
                adsr->state = RELEASE;
     64c:	3204      	adds	r2, #4
     64e:	2330      	movs	r3, #48	; 0x30
     650:	54c2      	strb	r2, [r0, r3]
                break;
     652:	e7a6      	b.n	5a2 <adsr_process+0x26>
            if(adsr->release==0) {
     654:	6a87      	ldr	r7, [r0, #40]	; 0x28
     656:	2f00      	cmp	r7, #0
     658:	d017      	beq.n	68a <adsr_process+0x10e>
            adsr->value = ((adsr->sustain_level<<24) - (adsr->sustain_level<<24) / adsr->release * adsr->release_counter);
     65a:	6a03      	ldr	r3, [r0, #32]
     65c:	061d      	lsls	r5, r3, #24
     65e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
     660:	0039      	movs	r1, r7
     662:	0028      	movs	r0, r5
     664:	4b0d      	ldr	r3, [pc, #52]	; (69c <adsr_process+0x120>)
     666:	4798      	blx	r3
     668:	4370      	muls	r0, r6
     66a:	1a2d      	subs	r5, r5, r0
     66c:	6065      	str	r5, [r4, #4]
            adsr->release_counter += adsr->interval;
     66e:	68a3      	ldr	r3, [r4, #8]
     670:	469c      	mov	ip, r3
     672:	4466      	add	r6, ip
     674:	62e6      	str	r6, [r4, #44]	; 0x2c
            if(adsr->release_counter > adsr->release) {
     676:	42b7      	cmp	r7, r6
     678:	d300      	bcc.n	67c <adsr_process+0x100>
     67a:	e792      	b.n	5a2 <adsr_process+0x26>
                adsr->value = 0;
     67c:	2300      	movs	r3, #0
     67e:	6063      	str	r3, [r4, #4]
                adsr->state = END;
     680:	2105      	movs	r1, #5
     682:	2230      	movs	r2, #48	; 0x30
     684:	54a1      	strb	r1, [r4, r2]
                adsr->release_counter = 0;
     686:	62e3      	str	r3, [r4, #44]	; 0x2c
     688:	e78b      	b.n	5a2 <adsr_process+0x26>
                adsr->state = END;
     68a:	2205      	movs	r2, #5
     68c:	2330      	movs	r3, #48	; 0x30
     68e:	54c2      	strb	r2, [r0, r3]
                break;
     690:	e787      	b.n	5a2 <adsr_process+0x26>
            adsr->value=0;
     692:	2300      	movs	r3, #0
     694:	6043      	str	r3, [r0, #4]
}
     696:	e784      	b.n	5a2 <adsr_process+0x26>
     698:	00007a04 	.word	0x00007a04
     69c:	00004b01 	.word	0x00004b01

000006a0 <adsr_get_value>:
uint8_t adsr_get_value(ADSR *adsr)
{
    return adsr->value >> 24;
     6a0:	79c0      	ldrb	r0, [r0, #7]
}
     6a2:	4770      	bx	lr

000006a4 <adsr_trigger>:

void adsr_trigger(ADSR *adsr)
{
    adsr->state=START;
     6a4:	2200      	movs	r2, #0
     6a6:	2330      	movs	r3, #48	; 0x30
     6a8:	54c2      	strb	r2, [r0, r3]
}
     6aa:	4770      	bx	lr

000006ac <adsr_init>:

void adsr_init(ADSR *adsr, uint32_t interval)
{
    adsr->attack_counter = 0;
     6ac:	2300      	movs	r3, #0
     6ae:	6103      	str	r3, [r0, #16]
    adsr->decay_counter = 0;
     6b0:	6183      	str	r3, [r0, #24]
    adsr->sustain_counter = 0;
     6b2:	6243      	str	r3, [r0, #36]	; 0x24
    adsr->release_counter = 0;
     6b4:	62c3      	str	r3, [r0, #44]	; 0x2c
    adsr->value = 0;
     6b6:	6043      	str	r3, [r0, #4]
    adsr->state = END;
     6b8:	2205      	movs	r2, #5
     6ba:	3330      	adds	r3, #48	; 0x30
     6bc:	54c2      	strb	r2, [r0, r3]
    adsr->interval=interval;
     6be:	6081      	str	r1, [r0, #8]
    adsr->attack=100;
     6c0:	3334      	adds	r3, #52	; 0x34
     6c2:	60c3      	str	r3, [r0, #12]
    adsr->decay=100;
     6c4:	6143      	str	r3, [r0, #20]
    adsr->sustain=100;
     6c6:	61c3      	str	r3, [r0, #28]
    adsr->release=100;
     6c8:	6283      	str	r3, [r0, #40]	; 0x28
    adsr->sustain_level=128;
     6ca:	331c      	adds	r3, #28
     6cc:	6203      	str	r3, [r0, #32]




     6ce:	4770      	bx	lr

000006d0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     6d0:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     6d2:	0080      	lsls	r0, r0, #2
     6d4:	4b16      	ldr	r3, [pc, #88]	; (730 <_tc_interrupt_handler+0x60>)
     6d6:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     6d8:	6823      	ldr	r3, [r4, #0]
     6da:	7a9d      	ldrb	r5, [r3, #10]
     6dc:	7e22      	ldrb	r2, [r4, #24]
     6de:	7e63      	ldrb	r3, [r4, #25]
     6e0:	4013      	ands	r3, r2
     6e2:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     6e4:	07eb      	lsls	r3, r5, #31
     6e6:	d406      	bmi.n	6f6 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     6e8:	07ab      	lsls	r3, r5, #30
     6ea:	d40b      	bmi.n	704 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     6ec:	06eb      	lsls	r3, r5, #27
     6ee:	d410      	bmi.n	712 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     6f0:	06ab      	lsls	r3, r5, #26
     6f2:	d415      	bmi.n	720 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     6f4:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     6f6:	0020      	movs	r0, r4
     6f8:	68a3      	ldr	r3, [r4, #8]
     6fa:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     6fc:	2301      	movs	r3, #1
     6fe:	6822      	ldr	r2, [r4, #0]
     700:	7293      	strb	r3, [r2, #10]
     702:	e7f1      	b.n	6e8 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     704:	0020      	movs	r0, r4
     706:	68e3      	ldr	r3, [r4, #12]
     708:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     70a:	2302      	movs	r3, #2
     70c:	6822      	ldr	r2, [r4, #0]
     70e:	7293      	strb	r3, [r2, #10]
     710:	e7ec      	b.n	6ec <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     712:	0020      	movs	r0, r4
     714:	6923      	ldr	r3, [r4, #16]
     716:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     718:	2310      	movs	r3, #16
     71a:	6822      	ldr	r2, [r4, #0]
     71c:	7293      	strb	r3, [r2, #10]
     71e:	e7e7      	b.n	6f0 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     720:	0020      	movs	r0, r4
     722:	6963      	ldr	r3, [r4, #20]
     724:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     726:	6823      	ldr	r3, [r4, #0]
     728:	2220      	movs	r2, #32
     72a:	729a      	strb	r2, [r3, #10]
}
     72c:	e7e2      	b.n	6f4 <_tc_interrupt_handler+0x24>
     72e:	46c0      	nop			; (mov r8, r8)
     730:	2000143c 	.word	0x2000143c

00000734 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     734:	b510      	push	{r4, lr}
     736:	2000      	movs	r0, #0
     738:	4b01      	ldr	r3, [pc, #4]	; (740 <TC0_Handler+0xc>)
     73a:	4798      	blx	r3
     73c:	bd10      	pop	{r4, pc}
     73e:	46c0      	nop			; (mov r8, r8)
     740:	000006d1 	.word	0x000006d1

00000744 <TC1_Handler>:
     744:	b510      	push	{r4, lr}
     746:	2001      	movs	r0, #1
     748:	4b01      	ldr	r3, [pc, #4]	; (750 <TC1_Handler+0xc>)
     74a:	4798      	blx	r3
     74c:	bd10      	pop	{r4, pc}
     74e:	46c0      	nop			; (mov r8, r8)
     750:	000006d1 	.word	0x000006d1

00000754 <TC2_Handler>:
     754:	b510      	push	{r4, lr}
     756:	2002      	movs	r0, #2
     758:	4b01      	ldr	r3, [pc, #4]	; (760 <TC2_Handler+0xc>)
     75a:	4798      	blx	r3
     75c:	bd10      	pop	{r4, pc}
     75e:	46c0      	nop			; (mov r8, r8)
     760:	000006d1 	.word	0x000006d1

00000764 <TC3_Handler>:
     764:	b510      	push	{r4, lr}
     766:	2003      	movs	r0, #3
     768:	4b01      	ldr	r3, [pc, #4]	; (770 <TC3_Handler+0xc>)
     76a:	4798      	blx	r3
     76c:	bd10      	pop	{r4, pc}
     76e:	46c0      	nop			; (mov r8, r8)
     770:	000006d1 	.word	0x000006d1

00000774 <TC4_Handler>:
     774:	b510      	push	{r4, lr}
     776:	2004      	movs	r0, #4
     778:	4b01      	ldr	r3, [pc, #4]	; (780 <TC4_Handler+0xc>)
     77a:	4798      	blx	r3
     77c:	bd10      	pop	{r4, pc}
     77e:	46c0      	nop			; (mov r8, r8)
     780:	000006d1 	.word	0x000006d1

00000784 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     784:	b530      	push	{r4, r5, lr}
     786:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     788:	a901      	add	r1, sp, #4
     78a:	4b0c      	ldr	r3, [pc, #48]	; (7bc <_tc_get_inst_index+0x38>)
     78c:	000a      	movs	r2, r1
     78e:	cb32      	ldmia	r3!, {r1, r4, r5}
     790:	c232      	stmia	r2!, {r1, r4, r5}
     792:	cb12      	ldmia	r3!, {r1, r4}
     794:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     796:	9b01      	ldr	r3, [sp, #4]
     798:	4298      	cmp	r0, r3
     79a:	d00b      	beq.n	7b4 <_tc_get_inst_index+0x30>
     79c:	2301      	movs	r3, #1
     79e:	a901      	add	r1, sp, #4
     7a0:	009a      	lsls	r2, r3, #2
     7a2:	5852      	ldr	r2, [r2, r1]
     7a4:	4282      	cmp	r2, r0
     7a6:	d006      	beq.n	7b6 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     7a8:	3301      	adds	r3, #1
     7aa:	2b05      	cmp	r3, #5
     7ac:	d1f8      	bne.n	7a0 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     7ae:	2000      	movs	r0, #0
}
     7b0:	b007      	add	sp, #28
     7b2:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     7b4:	2300      	movs	r3, #0
			return i;
     7b6:	b2d8      	uxtb	r0, r3
     7b8:	e7fa      	b.n	7b0 <_tc_get_inst_index+0x2c>
     7ba:	46c0      	nop			; (mov r8, r8)
     7bc:	00007a1c 	.word	0x00007a1c

000007c0 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7c2:	46c6      	mov	lr, r8
     7c4:	b500      	push	{lr}
     7c6:	b08e      	sub	sp, #56	; 0x38
     7c8:	0004      	movs	r4, r0
     7ca:	000d      	movs	r5, r1
     7cc:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     7ce:	0008      	movs	r0, r1
     7d0:	4ba7      	ldr	r3, [pc, #668]	; (a70 <tc_init+0x2b0>)
     7d2:	4798      	blx	r3
     7d4:	4680      	mov	r8, r0

#if (SAMC20) || (SAMC21)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
     7d6:	ab0c      	add	r3, sp, #48	; 0x30
     7d8:	221e      	movs	r2, #30
     7da:	701a      	strb	r2, [r3, #0]
     7dc:	705a      	strb	r2, [r3, #1]
     7de:	3201      	adds	r2, #1
     7e0:	709a      	strb	r2, [r3, #2]
     7e2:	70da      	strb	r2, [r3, #3]
     7e4:	3201      	adds	r2, #1
     7e6:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
     7e8:	a902      	add	r1, sp, #8
     7ea:	4ba2      	ldr	r3, [pc, #648]	; (a74 <tc_init+0x2b4>)
     7ec:	3314      	adds	r3, #20
     7ee:	000a      	movs	r2, r1
     7f0:	cb83      	ldmia	r3!, {r0, r1, r7}
     7f2:	c283      	stmia	r2!, {r0, r1, r7}
     7f4:	cb83      	ldmia	r3!, {r0, r1, r7}
     7f6:	c283      	stmia	r2!, {r0, r1, r7}
     7f8:	cb83      	ldmia	r3!, {r0, r1, r7}
     7fa:	c283      	stmia	r2!, {r0, r1, r7}
     7fc:	681b      	ldr	r3, [r3, #0]
     7fe:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     800:	2300      	movs	r3, #0
     802:	60a3      	str	r3, [r4, #8]
     804:	60e3      	str	r3, [r4, #12]
     806:	6123      	str	r3, [r4, #16]
     808:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     80a:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     80c:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     80e:	4643      	mov	r3, r8
     810:	009a      	lsls	r2, r3, #2
     812:	4b99      	ldr	r3, [pc, #612]	; (a78 <tc_init+0x2b8>)
     814:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     816:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     818:	2334      	movs	r3, #52	; 0x34
     81a:	5cf3      	ldrb	r3, [r6, r3]
     81c:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     81e:	78f3      	ldrb	r3, [r6, #3]
     820:	2b08      	cmp	r3, #8
     822:	d008      	beq.n	836 <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     824:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     826:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     828:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     82a:	07db      	lsls	r3, r3, #31
     82c:	d508      	bpl.n	840 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     82e:	b00e      	add	sp, #56	; 0x38
     830:	bc04      	pop	{r2}
     832:	4690      	mov	r8, r2
     834:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     836:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     838:	4642      	mov	r2, r8
     83a:	07d2      	lsls	r2, r2, #31
     83c:	d4f7      	bmi.n	82e <tc_init+0x6e>
     83e:	e7f1      	b.n	824 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     840:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
     842:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     844:	079b      	lsls	r3, r3, #30
     846:	d4f2      	bmi.n	82e <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     848:	682b      	ldr	r3, [r5, #0]
     84a:	079b      	lsls	r3, r3, #30
     84c:	d4ef      	bmi.n	82e <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
     84e:	7c33      	ldrb	r3, [r6, #16]
     850:	2b00      	cmp	r3, #0
     852:	d000      	beq.n	856 <tc_init+0x96>
     854:	e08e      	b.n	974 <tc_init+0x1b4>
	if (config->pwm_channel[1].enabled) {
     856:	7f33      	ldrb	r3, [r6, #28]
     858:	2b00      	cmp	r3, #0
     85a:	d000      	beq.n	85e <tc_init+0x9e>
     85c:	e096      	b.n	98c <tc_init+0x1cc>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
     85e:	4643      	mov	r3, r8
     860:	005a      	lsls	r2, r3, #1
     862:	a902      	add	r1, sp, #8
     864:	1c53      	adds	r3, r2, #1
     866:	009b      	lsls	r3, r3, #2
     868:	5858      	ldr	r0, [r3, r1]
     86a:	4643      	mov	r3, r8
     86c:	00db      	lsls	r3, r3, #3
     86e:	585b      	ldr	r3, [r3, r1]
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
     870:	b2d9      	uxtb	r1, r3
     872:	2901      	cmp	r1, #1
     874:	d100      	bne.n	878 <tc_init+0xb8>
     876:	e09e      	b.n	9b6 <tc_init+0x1f6>
     878:	2900      	cmp	r1, #0
     87a:	d100      	bne.n	87e <tc_init+0xbe>
     87c:	e096      	b.n	9ac <tc_init+0x1ec>
     87e:	2902      	cmp	r1, #2
     880:	d100      	bne.n	884 <tc_init+0xc4>
     882:	e09d      	b.n	9c0 <tc_init+0x200>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
     884:	78f3      	ldrb	r3, [r6, #3]
     886:	2b08      	cmp	r3, #8
     888:	d100      	bne.n	88c <tc_init+0xcc>
     88a:	e09e      	b.n	9ca <tc_init+0x20a>
	gclk_chan_config.source_generator = config->clock_source;
     88c:	7833      	ldrb	r3, [r6, #0]
     88e:	466a      	mov	r2, sp
     890:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     892:	ab0c      	add	r3, sp, #48	; 0x30
     894:	4642      	mov	r2, r8
     896:	5c9f      	ldrb	r7, [r3, r2]
     898:	4669      	mov	r1, sp
     89a:	0038      	movs	r0, r7
     89c:	4b77      	ldr	r3, [pc, #476]	; (a7c <tc_init+0x2bc>)
     89e:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     8a0:	0038      	movs	r0, r7
     8a2:	4b77      	ldr	r3, [pc, #476]	; (a80 <tc_init+0x2c0>)
     8a4:	4798      	blx	r3
			(uint32_t)config->counter_size |
     8a6:	78f3      	ldrb	r3, [r6, #3]
     8a8:	79f2      	ldrb	r2, [r6, #7]
     8aa:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
     8ac:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
     8ae:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
     8b0:	7a72      	ldrb	r2, [r6, #9]
     8b2:	2a00      	cmp	r2, #0
     8b4:	d002      	beq.n	8bc <tc_init+0xfc>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
     8b6:	2280      	movs	r2, #128	; 0x80
     8b8:	0252      	lsls	r2, r2, #9
     8ba:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
     8bc:	7ab2      	ldrb	r2, [r6, #10]
     8be:	2a00      	cmp	r2, #0
     8c0:	d002      	beq.n	8c8 <tc_init+0x108>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
     8c2:	2280      	movs	r2, #128	; 0x80
     8c4:	0292      	lsls	r2, r2, #10
     8c6:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
     8c8:	7af2      	ldrb	r2, [r6, #11]
     8ca:	2a00      	cmp	r2, #0
     8cc:	d002      	beq.n	8d4 <tc_init+0x114>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
     8ce:	2280      	movs	r2, #128	; 0x80
     8d0:	0352      	lsls	r2, r2, #13
     8d2:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
     8d4:	7b32      	ldrb	r2, [r6, #12]
     8d6:	2a00      	cmp	r2, #0
     8d8:	d002      	beq.n	8e0 <tc_init+0x120>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
     8da:	2280      	movs	r2, #128	; 0x80
     8dc:	0392      	lsls	r2, r2, #14
     8de:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
     8e0:	7871      	ldrb	r1, [r6, #1]
     8e2:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
     8e4:	78b2      	ldrb	r2, [r6, #2]
     8e6:	01d2      	lsls	r2, r2, #7
     8e8:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
     8ea:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     8ec:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
     8ee:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     8f0:	2b00      	cmp	r3, #0
     8f2:	d1fc      	bne.n	8ee <tc_init+0x12e>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     8f4:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     8f6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     8f8:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     8fa:	2b00      	cmp	r3, #0
     8fc:	d1fc      	bne.n	8f8 <tc_init+0x138>
	hw->COUNT8.WAVE.reg = config->wave_generation;
     8fe:	79b3      	ldrb	r3, [r6, #6]
     900:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
     902:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     904:	1e4b      	subs	r3, r1, #1
     906:	4199      	sbcs	r1, r3
     908:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     90a:	7bb3      	ldrb	r3, [r6, #14]
     90c:	2b00      	cmp	r3, #0
     90e:	d001      	beq.n	914 <tc_init+0x154>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     910:	2301      	movs	r3, #1
     912:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     914:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     916:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     918:	2b00      	cmp	r3, #0
     91a:	d1fc      	bne.n	916 <tc_init+0x156>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     91c:	33ff      	adds	r3, #255	; 0xff
     91e:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     920:	2900      	cmp	r1, #0
     922:	d004      	beq.n	92e <tc_init+0x16e>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     924:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     926:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
     928:	2b00      	cmp	r3, #0
     92a:	d1fc      	bne.n	926 <tc_init+0x166>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     92c:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
     92e:	7a33      	ldrb	r3, [r6, #8]
     930:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     932:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     934:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
     936:	2b00      	cmp	r3, #0
     938:	d1fc      	bne.n	934 <tc_init+0x174>
	switch (module_inst->counter_size) {
     93a:	7923      	ldrb	r3, [r4, #4]
     93c:	2b04      	cmp	r3, #4
     93e:	d067      	beq.n	a10 <tc_init+0x250>
     940:	2b08      	cmp	r3, #8
     942:	d100      	bne.n	946 <tc_init+0x186>
     944:	e081      	b.n	a4a <tc_init+0x28a>
	return STATUS_ERR_INVALID_ARG;
     946:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     948:	2b00      	cmp	r3, #0
     94a:	d000      	beq.n	94e <tc_init+0x18e>
     94c:	e76f      	b.n	82e <tc_init+0x6e>
     94e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     950:	2b00      	cmp	r3, #0
     952:	d1fc      	bne.n	94e <tc_init+0x18e>
				= config->counter_16_bit.value;
     954:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     956:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     958:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     95a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     95c:	2b00      	cmp	r3, #0
     95e:	d1fc      	bne.n	95a <tc_init+0x19a>
					config->counter_16_bit.compare_capture_channel[0];
     960:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     962:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     964:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     966:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     968:	2b00      	cmp	r3, #0
     96a:	d1fc      	bne.n	966 <tc_init+0x1a6>
					config->counter_16_bit.compare_capture_channel[1];
     96c:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     96e:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
     970:	2000      	movs	r0, #0
     972:	e75c      	b.n	82e <tc_init+0x6e>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     974:	a901      	add	r1, sp, #4
     976:	2301      	movs	r3, #1
     978:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     97a:	2200      	movs	r2, #0
     97c:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     97e:	7e32      	ldrb	r2, [r6, #24]
     980:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     982:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     984:	7d30      	ldrb	r0, [r6, #20]
     986:	4b3f      	ldr	r3, [pc, #252]	; (a84 <tc_init+0x2c4>)
     988:	4798      	blx	r3
     98a:	e764      	b.n	856 <tc_init+0x96>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     98c:	a901      	add	r1, sp, #4
     98e:	2301      	movs	r3, #1
     990:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     992:	2200      	movs	r2, #0
     994:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     996:	3224      	adds	r2, #36	; 0x24
     998:	18b2      	adds	r2, r6, r2
     99a:	7812      	ldrb	r2, [r2, #0]
     99c:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     99e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     9a0:	331f      	adds	r3, #31
     9a2:	18f3      	adds	r3, r6, r3
     9a4:	7818      	ldrb	r0, [r3, #0]
     9a6:	4b37      	ldr	r3, [pc, #220]	; (a84 <tc_init+0x2c4>)
     9a8:	4798      	blx	r3
     9aa:	e758      	b.n	85e <tc_init+0x9e>
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     9ac:	4936      	ldr	r1, [pc, #216]	; (a88 <tc_init+0x2c8>)
     9ae:	694b      	ldr	r3, [r1, #20]
     9b0:	4318      	orrs	r0, r3
     9b2:	6148      	str	r0, [r1, #20]
     9b4:	e766      	b.n	884 <tc_init+0xc4>
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
     9b6:	4934      	ldr	r1, [pc, #208]	; (a88 <tc_init+0x2c8>)
     9b8:	698b      	ldr	r3, [r1, #24]
     9ba:	4318      	orrs	r0, r3
     9bc:	6188      	str	r0, [r1, #24]
     9be:	e761      	b.n	884 <tc_init+0xc4>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     9c0:	4b31      	ldr	r3, [pc, #196]	; (a88 <tc_init+0x2c8>)
     9c2:	69d9      	ldr	r1, [r3, #28]
     9c4:	4308      	orrs	r0, r1
     9c6:	61d8      	str	r0, [r3, #28]
     9c8:	e75c      	b.n	884 <tc_init+0xc4>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
     9ca:	4643      	mov	r3, r8
     9cc:	3301      	adds	r3, #1
     9ce:	2b04      	cmp	r3, #4
     9d0:	dd00      	ble.n	9d4 <tc_init+0x214>
     9d2:	e75b      	b.n	88c <tc_init+0xcc>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
     9d4:	ab02      	add	r3, sp, #8
     9d6:	1cd1      	adds	r1, r2, #3
     9d8:	0089      	lsls	r1, r1, #2
     9da:	58c9      	ldr	r1, [r1, r3]
     9dc:	3202      	adds	r2, #2
     9de:	0092      	lsls	r2, r2, #2
     9e0:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
     9e2:	b2da      	uxtb	r2, r3
     9e4:	2a01      	cmp	r2, #1
     9e6:	d00e      	beq.n	a06 <tc_init+0x246>
     9e8:	2a00      	cmp	r2, #0
     9ea:	d007      	beq.n	9fc <tc_init+0x23c>
     9ec:	2a02      	cmp	r2, #2
     9ee:	d000      	beq.n	9f2 <tc_init+0x232>
     9f0:	e74c      	b.n	88c <tc_init+0xcc>
			MCLK->APBCMASK.reg |= mask;
     9f2:	4b25      	ldr	r3, [pc, #148]	; (a88 <tc_init+0x2c8>)
     9f4:	69da      	ldr	r2, [r3, #28]
     9f6:	4311      	orrs	r1, r2
     9f8:	61d9      	str	r1, [r3, #28]
     9fa:	e747      	b.n	88c <tc_init+0xcc>
			MCLK->APBAMASK.reg |= mask;
     9fc:	4a22      	ldr	r2, [pc, #136]	; (a88 <tc_init+0x2c8>)
     9fe:	6953      	ldr	r3, [r2, #20]
     a00:	4319      	orrs	r1, r3
     a02:	6151      	str	r1, [r2, #20]
     a04:	e742      	b.n	88c <tc_init+0xcc>
			MCLK->APBBMASK.reg |= mask;
     a06:	4a20      	ldr	r2, [pc, #128]	; (a88 <tc_init+0x2c8>)
     a08:	6993      	ldr	r3, [r2, #24]
     a0a:	4319      	orrs	r1, r3
     a0c:	6191      	str	r1, [r2, #24]
     a0e:	e73d      	b.n	88c <tc_init+0xcc>
     a10:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     a12:	2b00      	cmp	r3, #0
     a14:	d1fc      	bne.n	a10 <tc_init+0x250>
					config->counter_8_bit.value;
     a16:	3328      	adds	r3, #40	; 0x28
     a18:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     a1a:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     a1c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     a1e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     a20:	2b00      	cmp	r3, #0
     a22:	d1fc      	bne.n	a1e <tc_init+0x25e>
					config->counter_8_bit.period;
     a24:	3329      	adds	r3, #41	; 0x29
     a26:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     a28:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     a2a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     a2c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     a2e:	2b00      	cmp	r3, #0
     a30:	d1fc      	bne.n	a2c <tc_init+0x26c>
					config->counter_8_bit.compare_capture_channel[0];
     a32:	332a      	adds	r3, #42	; 0x2a
     a34:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     a36:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     a38:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     a3a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     a3c:	2b00      	cmp	r3, #0
     a3e:	d1fc      	bne.n	a3a <tc_init+0x27a>
					config->counter_8_bit.compare_capture_channel[1];
     a40:	332b      	adds	r3, #43	; 0x2b
     a42:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     a44:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
     a46:	2000      	movs	r0, #0
     a48:	e6f1      	b.n	82e <tc_init+0x6e>
     a4a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     a4c:	2b00      	cmp	r3, #0
     a4e:	d1fc      	bne.n	a4a <tc_init+0x28a>
				= config->counter_32_bit.value;
     a50:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     a52:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     a54:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     a56:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     a58:	2b00      	cmp	r3, #0
     a5a:	d1fc      	bne.n	a56 <tc_init+0x296>
			hw->COUNT32.CC[0].reg =
     a5c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     a5e:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     a60:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
     a62:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
     a64:	2b00      	cmp	r3, #0
     a66:	d1fc      	bne.n	a62 <tc_init+0x2a2>
					config->counter_32_bit.compare_capture_channel[1];
     a68:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     a6a:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
     a6c:	2000      	movs	r0, #0
     a6e:	e6de      	b.n	82e <tc_init+0x6e>
     a70:	00000785 	.word	0x00000785
     a74:	00007a1c 	.word	0x00007a1c
     a78:	2000143c 	.word	0x2000143c
     a7c:	00003d71 	.word	0x00003d71
     a80:	00003d01 	.word	0x00003d01
     a84:	00003e6d 	.word	0x00003e6d
     a88:	40000800 	.word	0x40000800

00000a8c <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
     a8c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     a8e:	6804      	ldr	r4, [r0, #0]
     a90:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
     a92:	2b00      	cmp	r3, #0
     a94:	d1fc      	bne.n	a90 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
     a96:	7903      	ldrb	r3, [r0, #4]
     a98:	2b04      	cmp	r3, #4
     a9a:	d006      	beq.n	aaa <tc_set_compare_value+0x1e>
     a9c:	2b08      	cmp	r3, #8
     a9e:	d028      	beq.n	af2 <tc_set_compare_value+0x66>
     aa0:	2b00      	cmp	r3, #0
     aa2:	d013      	beq.n	acc <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     aa4:	2317      	movs	r3, #23
}
     aa6:	0018      	movs	r0, r3
     aa8:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
     aaa:	2317      	movs	r3, #23
			if (channel_index <
     aac:	2901      	cmp	r1, #1
     aae:	d8fa      	bhi.n	aa6 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
     ab0:	7e83      	ldrb	r3, [r0, #26]
     ab2:	2b00      	cmp	r3, #0
     ab4:	d005      	beq.n	ac2 <tc_set_compare_value+0x36>
							(uint8_t)compare;
     ab6:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
     ab8:	1861      	adds	r1, r4, r1
     aba:	3130      	adds	r1, #48	; 0x30
     abc:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
     abe:	2300      	movs	r3, #0
     ac0:	e7f1      	b.n	aa6 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
     ac2:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
     ac4:	1864      	adds	r4, r4, r1
     ac6:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
     ac8:	2300      	movs	r3, #0
     aca:	e7ec      	b.n	aa6 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
     acc:	2317      	movs	r3, #23
			if (channel_index <
     ace:	2901      	cmp	r1, #1
     ad0:	d8e9      	bhi.n	aa6 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
     ad2:	7e83      	ldrb	r3, [r0, #26]
     ad4:	2b00      	cmp	r3, #0
     ad6:	d005      	beq.n	ae4 <tc_set_compare_value+0x58>
							(uint16_t)compare;
     ad8:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
     ada:	3118      	adds	r1, #24
     adc:	0049      	lsls	r1, r1, #1
     ade:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
     ae0:	2300      	movs	r3, #0
     ae2:	e7e0      	b.n	aa6 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
     ae4:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
     ae6:	310c      	adds	r1, #12
     ae8:	0049      	lsls	r1, r1, #1
     aea:	1864      	adds	r4, r4, r1
     aec:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
     aee:	2300      	movs	r3, #0
     af0:	e7d9      	b.n	aa6 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
     af2:	2317      	movs	r3, #23
			if (channel_index <
     af4:	2901      	cmp	r1, #1
     af6:	d8d6      	bhi.n	aa6 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
     af8:	7e83      	ldrb	r3, [r0, #26]
     afa:	2b00      	cmp	r3, #0
     afc:	d105      	bne.n	b0a <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
     afe:	3106      	adds	r1, #6
     b00:	0089      	lsls	r1, r1, #2
     b02:	1864      	adds	r4, r4, r1
     b04:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
     b06:	2300      	movs	r3, #0
     b08:	e7cd      	b.n	aa6 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
     b0a:	310c      	adds	r1, #12
     b0c:	0089      	lsls	r1, r1, #2
     b0e:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
     b10:	2300      	movs	r3, #0
     b12:	e7c8      	b.n	aa6 <tc_set_compare_value+0x1a>

00000b14 <tc_set_top_value>:
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(top_value);

	Tc *const tc_module = module_inst->hw;
     b14:	6802      	ldr	r2, [r0, #0]
     b16:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
     b18:	2b00      	cmp	r3, #0
     b1a:	d1fc      	bne.n	b16 <tc_set_top_value+0x2>
		/* Wait for sync */
	}

	switch (module_inst->counter_size) {
     b1c:	7903      	ldrb	r3, [r0, #4]
     b1e:	2b04      	cmp	r3, #4
     b20:	d005      	beq.n	b2e <tc_set_top_value+0x1a>
     b22:	2b08      	cmp	r3, #8
     b24:	d01a      	beq.n	b5c <tc_set_top_value+0x48>
     b26:	2b00      	cmp	r3, #0
     b28:	d00d      	beq.n	b46 <tc_set_top_value+0x32>
			}
			return STATUS_OK;

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     b2a:	2017      	movs	r0, #23
	}
}
     b2c:	4770      	bx	lr
			if (module_inst->double_buffering_enabled){
     b2e:	7e83      	ldrb	r3, [r0, #26]
     b30:	2b00      	cmp	r3, #0
     b32:	d004      	beq.n	b3e <tc_set_top_value+0x2a>
				tc_module->COUNT8.PERBUF.reg = (uint8_t)top_value;
     b34:	b2c9      	uxtb	r1, r1
     b36:	232f      	movs	r3, #47	; 0x2f
     b38:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
     b3a:	2000      	movs	r0, #0
     b3c:	e7f6      	b.n	b2c <tc_set_top_value+0x18>
				tc_module->COUNT8.PER.reg = (uint8_t)top_value;
     b3e:	b2c9      	uxtb	r1, r1
     b40:	76d1      	strb	r1, [r2, #27]
			return STATUS_OK;
     b42:	2000      	movs	r0, #0
     b44:	e7f2      	b.n	b2c <tc_set_top_value+0x18>
			if (module_inst->double_buffering_enabled){
     b46:	7e83      	ldrb	r3, [r0, #26]
     b48:	2b00      	cmp	r3, #0
     b4a:	d003      	beq.n	b54 <tc_set_top_value+0x40>
				tc_module->COUNT16.CCBUF[0].reg = (uint16_t)top_value;
     b4c:	b289      	uxth	r1, r1
     b4e:	8611      	strh	r1, [r2, #48]	; 0x30
			return STATUS_OK;
     b50:	2000      	movs	r0, #0
     b52:	e7eb      	b.n	b2c <tc_set_top_value+0x18>
				tc_module->COUNT16.CC[0].reg = (uint16_t)top_value;
     b54:	b289      	uxth	r1, r1
     b56:	8391      	strh	r1, [r2, #28]
			return STATUS_OK;
     b58:	2000      	movs	r0, #0
     b5a:	e7e7      	b.n	b2c <tc_set_top_value+0x18>
			if (module_inst->double_buffering_enabled){
     b5c:	7e83      	ldrb	r3, [r0, #26]
     b5e:	2b00      	cmp	r3, #0
     b60:	d102      	bne.n	b68 <tc_set_top_value+0x54>
				tc_module->COUNT32.CC[0].reg = (uint32_t)top_value;
     b62:	61d1      	str	r1, [r2, #28]
			return STATUS_OK;
     b64:	2000      	movs	r0, #0
     b66:	e7e1      	b.n	b2c <tc_set_top_value+0x18>
				tc_module->COUNT32.CCBUF[0].reg = (uint32_t)top_value;
     b68:	6311      	str	r1, [r2, #48]	; 0x30
			return STATUS_OK;
     b6a:	2000      	movs	r0, #0
     b6c:	e7de      	b.n	b2c <tc_set_top_value+0x18>
	...

00000b70 <button_read>:
{
    //button_state |= (port_pin_get_input_level(PIN_SW2)<<1)|(!port_pin_get_input_level(PIN_SW1)<<0);
}

TIPKA button_read(void)
{
     b70:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
     b72:	2282      	movs	r2, #130	; 0x82
     b74:	05d2      	lsls	r2, r2, #23
     b76:	6a13      	ldr	r3, [r2, #32]
     b78:	6a12      	ldr	r2, [r2, #32]
     b7a:	0b5b      	lsrs	r3, r3, #13
     b7c:	2101      	movs	r1, #1
     b7e:	400b      	ands	r3, r1
    button_state = (port_pin_get_input_level(PIN_SW2)<<1) | (!port_pin_get_input_level(PIN_SW1)<<0);
     b80:	005b      	lsls	r3, r3, #1
     b82:	0b12      	lsrs	r2, r2, #12
     b84:	404a      	eors	r2, r1
     b86:	400a      	ands	r2, r1
     b88:	4313      	orrs	r3, r2
     b8a:	4a06      	ldr	r2, [pc, #24]	; (ba4 <button_read+0x34>)
     b8c:	7013      	strb	r3, [r2, #0]

    uint8_t pressed_keys = (button_state ^ previous_button_state) & button_state;
     b8e:	4806      	ldr	r0, [pc, #24]	; (ba8 <button_read+0x38>)
     b90:	7802      	ldrb	r2, [r0, #0]
     b92:	001c      	movs	r4, r3
     b94:	4394      	bics	r4, r2
    uint8_t released_keys = (button_state ^ previous_button_state) & previous_button_state;
    previous_button_state=button_state;
     b96:	7003      	strb	r3, [r0, #0]
    if(pressed_keys & (1<<0)) {
        return BUTTON_1;
     b98:	2001      	movs	r0, #1
    if(pressed_keys & (1<<0)) {
     b9a:	4221      	tst	r1, r4
     b9c:	d101      	bne.n	ba2 <button_read+0x32>
    if(pressed_keys & (1<<1)) {
        return BUTTON_2;
    }

    pressed_keys &=~(released_keys);
    return BUTTON_NONE;
     b9e:	0862      	lsrs	r2, r4, #1
     ba0:	0050      	lsls	r0, r2, #1
    if((button_state>>1)&1) {
        button_state &=~(1<<1);
        return BUTTON_2;
    }
    return BUTTON_NONE;*/
     ba2:	bd10      	pop	{r4, pc}
     ba4:	200000a7 	.word	0x200000a7
     ba8:	200000a8 	.word	0x200000a8

00000bac <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     bac:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     bae:	2000      	movs	r0, #0
     bb0:	4b08      	ldr	r3, [pc, #32]	; (bd4 <delay_init+0x28>)
     bb2:	4798      	blx	r3
     bb4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     bb6:	4c08      	ldr	r4, [pc, #32]	; (bd8 <delay_init+0x2c>)
     bb8:	21fa      	movs	r1, #250	; 0xfa
     bba:	0089      	lsls	r1, r1, #2
     bbc:	47a0      	blx	r4
     bbe:	4b07      	ldr	r3, [pc, #28]	; (bdc <delay_init+0x30>)
     bc0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     bc2:	4907      	ldr	r1, [pc, #28]	; (be0 <delay_init+0x34>)
     bc4:	0028      	movs	r0, r5
     bc6:	47a0      	blx	r4
     bc8:	4b06      	ldr	r3, [pc, #24]	; (be4 <delay_init+0x38>)
     bca:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     bcc:	2205      	movs	r2, #5
     bce:	4b06      	ldr	r3, [pc, #24]	; (be8 <delay_init+0x3c>)
     bd0:	601a      	str	r2, [r3, #0]
}
     bd2:	bd70      	pop	{r4, r5, r6, pc}
     bd4:	00003c95 	.word	0x00003c95
     bd8:	00004b01 	.word	0x00004b01
     bdc:	2000000c 	.word	0x2000000c
     be0:	000f4240 	.word	0x000f4240
     be4:	20000010 	.word	0x20000010
     be8:	e000e010 	.word	0xe000e010

00000bec <_adc_get_inst_index>:
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
		if (hw == adc_modules[i]) {
     bec:	4b06      	ldr	r3, [pc, #24]	; (c08 <_adc_get_inst_index+0x1c>)
     bee:	4298      	cmp	r0, r3
     bf0:	d008      	beq.n	c04 <_adc_get_inst_index+0x18>
     bf2:	4a06      	ldr	r2, [pc, #24]	; (c0c <_adc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     bf4:	2300      	movs	r3, #0
		if (hw == adc_modules[i]) {
     bf6:	4290      	cmp	r0, r2
     bf8:	d001      	beq.n	bfe <_adc_get_inst_index+0x12>
}
     bfa:	0018      	movs	r0, r3
     bfc:	4770      	bx	lr
     bfe:	3301      	adds	r3, #1
			return i;
     c00:	b2db      	uxtb	r3, r3
     c02:	e7fa      	b.n	bfa <_adc_get_inst_index+0xe>
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     c04:	2300      	movs	r3, #0
     c06:	e7fb      	b.n	c00 <_adc_get_inst_index+0x14>
     c08:	42004400 	.word	0x42004400
     c0c:	42004800 	.word	0x42004800

00000c10 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     c10:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     c12:	2300      	movs	r3, #0
     c14:	2200      	movs	r2, #0
     c16:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     c18:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     c1a:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     c1c:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     c1e:	2100      	movs	r1, #0
     c20:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     c22:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     c24:	61c3      	str	r3, [r0, #28]
#if SAMR30 || SAMR34 || SAMR35
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     c26:	2401      	movs	r4, #1
     c28:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     c2a:	24c0      	movs	r4, #192	; 0xc0
     c2c:	0164      	lsls	r4, r4, #5
     c2e:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     c30:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     c32:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     c34:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     c36:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     c38:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     c3a:	242a      	movs	r4, #42	; 0x2a
     c3c:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     c3e:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     c40:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     c42:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     c44:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     c46:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     c48:	3c06      	subs	r4, #6
     c4a:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     c4c:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     c4e:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     c50:	7541      	strb	r1, [r0, #21]
}
     c52:	bd10      	pop	{r4, pc}

00000c54 <adc_set_window_mode>:
void adc_set_window_mode(
		struct adc_module *const module_inst,
		const enum adc_window_mode window_mode,
		const int16_t window_lower_value,
		const int16_t window_upper_value)
{
     c54:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     c56:	6805      	ldr	r5, [r0, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
     c58:	8c2c      	ldrh	r4, [r5, #32]
     c5a:	b2a4      	uxth	r4, r4

	while (adc_is_syncing(module_inst)) {
     c5c:	2c00      	cmp	r4, #0
     c5e:	d1fb      	bne.n	c58 <adc_set_window_mode+0x4>
		/* Wait for synchronization */
	}

	/* Set window mode */
	uint32_t ctrlc = adc_module->CTRLC.reg;
     c60:	896c      	ldrh	r4, [r5, #10]
	ctrlc = (ctrlc & (~ADC_CTRLC_WINMODE_Msk)) | window_mode;
     c62:	4e0c      	ldr	r6, [pc, #48]	; (c94 <adc_set_window_mode+0x40>)
     c64:	4034      	ands	r4, r6
	adc_module->CTRLC.reg = ctrlc;
     c66:	4321      	orrs	r1, r4
     c68:	8169      	strh	r1, [r5, #10]
	Adc *const adc_module = module_inst->hw;
     c6a:	6804      	ldr	r4, [r0, #0]
	if (adc_module->SYNCBUSY.reg) {
     c6c:	8c21      	ldrh	r1, [r4, #32]
     c6e:	b289      	uxth	r1, r1

	while (adc_is_syncing(module_inst)) {
     c70:	2900      	cmp	r1, #0
     c72:	d1fb      	bne.n	c6c <adc_set_window_mode+0x18>
		/* Wait for synchronization */
	}

	/* Set lower window monitor threshold value */
	adc_module->WINLT.reg = window_lower_value;
     c74:	b292      	uxth	r2, r2
     c76:	81ea      	strh	r2, [r5, #14]
	Adc *const adc_module = module_inst->hw;
     c78:	6801      	ldr	r1, [r0, #0]
	if (adc_module->SYNCBUSY.reg) {
     c7a:	8c0a      	ldrh	r2, [r1, #32]
     c7c:	b292      	uxth	r2, r2

	while (adc_is_syncing(module_inst)) {
     c7e:	2a00      	cmp	r2, #0
     c80:	d1fb      	bne.n	c7a <adc_set_window_mode+0x26>
		/* Wait for synchronization */
	}

	/* Set upper window monitor threshold value */
	adc_module->WINUT.reg = window_upper_value;
     c82:	b29b      	uxth	r3, r3
     c84:	822b      	strh	r3, [r5, #16]
	Adc *const adc_module = module_inst->hw;
     c86:	6802      	ldr	r2, [r0, #0]
	if (adc_module->SYNCBUSY.reg) {
     c88:	8c13      	ldrh	r3, [r2, #32]
     c8a:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     c8c:	2b00      	cmp	r3, #0
     c8e:	d1fb      	bne.n	c88 <adc_set_window_mode+0x34>
		/* Wait for synchronization */
	}
}
     c90:	bd70      	pop	{r4, r5, r6, pc}
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	fffff8ff 	.word	0xfffff8ff

00000c98 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     c98:	b5f0      	push	{r4, r5, r6, r7, lr}
     c9a:	46de      	mov	lr, fp
     c9c:	4657      	mov	r7, sl
     c9e:	464e      	mov	r6, r9
     ca0:	4645      	mov	r5, r8
     ca2:	b5e0      	push	{r5, r6, r7, lr}
     ca4:	b09f      	sub	sp, #124	; 0x7c
     ca6:	0005      	movs	r5, r0
     ca8:	000e      	movs	r6, r1
     caa:	0017      	movs	r7, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     cac:	0008      	movs	r0, r1
     cae:	4b98      	ldr	r3, [pc, #608]	; (f10 <adc_init+0x278>)
     cb0:	4798      	blx	r3
     cb2:	0004      	movs	r4, r0
     cb4:	9001      	str	r0, [sp, #4]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     cb6:	602e      	str	r6, [r5, #0]
			MCLK->APBCMASK.reg |= mask;
     cb8:	4a96      	ldr	r2, [pc, #600]	; (f14 <adc_init+0x27c>)
     cba:	69d3      	ldr	r3, [r2, #28]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_ADC);
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
     cbc:	0080      	lsls	r0, r0, #2
     cbe:	4996      	ldr	r1, [pc, #600]	; (f18 <adc_init+0x280>)
     cc0:	5841      	ldr	r1, [r0, r1]
     cc2:	430b      	orrs	r3, r1
     cc4:	61d3      	str	r3, [r2, #28]
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     cc6:	7833      	ldrb	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     cc8:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     cca:	07db      	lsls	r3, r3, #31
     ccc:	d506      	bpl.n	cdc <adc_init+0x44>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     cce:	b01f      	add	sp, #124	; 0x7c
     cd0:	bc3c      	pop	{r2, r3, r4, r5}
     cd2:	4690      	mov	r8, r2
     cd4:	4699      	mov	r9, r3
     cd6:	46a2      	mov	sl, r4
     cd8:	46ab      	mov	fp, r5
     cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Adc *const adc_module = module_inst->hw;
     cdc:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     cde:	8c13      	ldrh	r3, [r2, #32]
     ce0:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     ce2:	2b00      	cmp	r3, #0
     ce4:	d1fb      	bne.n	cde <adc_init+0x46>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     ce6:	7833      	ldrb	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     ce8:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     cea:	079b      	lsls	r3, r3, #30
     cec:	d4ef      	bmi.n	cce <adc_init+0x36>
	module_inst->reference = config->reference;
     cee:	787b      	ldrb	r3, [r7, #1]
     cf0:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     cf2:	2b00      	cmp	r3, #0
     cf4:	d104      	bne.n	d00 <adc_init+0x68>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     cf6:	4a89      	ldr	r2, [pc, #548]	; (f1c <adc_init+0x284>)
     cf8:	69d3      	ldr	r3, [r2, #28]
     cfa:	2104      	movs	r1, #4
     cfc:	430b      	orrs	r3, r1
     cfe:	61d3      	str	r3, [r2, #28]
		module_inst->callback[i] = NULL;
     d00:	2300      	movs	r3, #0
     d02:	60ab      	str	r3, [r5, #8]
     d04:	60eb      	str	r3, [r5, #12]
     d06:	612b      	str	r3, [r5, #16]
	module_inst->registered_callback_mask = 0;
     d08:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
     d0a:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
     d0c:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
     d0e:	772b      	strb	r3, [r5, #28]
	_adc_instances[instance] = module_inst;
     d10:	00a3      	lsls	r3, r4, #2
     d12:	4a83      	ldr	r2, [pc, #524]	; (f20 <adc_init+0x288>)
     d14:	509d      	str	r5, [r3, r2]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     d16:	232a      	movs	r3, #42	; 0x2a
     d18:	5cfb      	ldrb	r3, [r7, r3]
     d1a:	2b00      	cmp	r3, #0
     d1c:	d105      	bne.n	d2a <adc_init+0x92>
     d1e:	7b3b      	ldrb	r3, [r7, #12]
     d20:	2b00      	cmp	r3, #0
     d22:	d102      	bne.n	d2a <adc_init+0x92>
		module_inst->software_trigger = true;
     d24:	3301      	adds	r3, #1
     d26:	776b      	strb	r3, [r5, #29]
     d28:	e001      	b.n	d2e <adc_init+0x96>
		module_inst->software_trigger = false;
     d2a:	2300      	movs	r3, #0
     d2c:	776b      	strb	r3, [r5, #29]
	Adc *const adc_module = module_inst->hw;
     d2e:	682b      	ldr	r3, [r5, #0]
     d30:	469a      	mov	sl, r3
	gclk_chan_conf.source_generator = config->clock_source;
     d32:	783b      	ldrb	r3, [r7, #0]
     d34:	aa04      	add	r2, sp, #16
     d36:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     d38:	4b7a      	ldr	r3, [pc, #488]	; (f24 <adc_init+0x28c>)
     d3a:	5d1e      	ldrb	r6, [r3, r4]
     d3c:	0011      	movs	r1, r2
     d3e:	0030      	movs	r0, r6
     d40:	4b79      	ldr	r3, [pc, #484]	; (f28 <adc_init+0x290>)
     d42:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     d44:	0030      	movs	r0, r6
     d46:	4b79      	ldr	r3, [pc, #484]	; (f2c <adc_init+0x294>)
     d48:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
     d4a:	793b      	ldrb	r3, [r7, #4]
     d4c:	4698      	mov	r8, r3
	const uint32_t pinmapping0[] = {
     d4e:	ae06      	add	r6, sp, #24
     d50:	4b77      	ldr	r3, [pc, #476]	; (f30 <adc_init+0x298>)
     d52:	469c      	mov	ip, r3
     d54:	0032      	movs	r2, r6
     d56:	0019      	movs	r1, r3
     d58:	c949      	ldmia	r1!, {r0, r3, r6}
     d5a:	c249      	stmia	r2!, {r0, r3, r6}
     d5c:	c949      	ldmia	r1!, {r0, r3, r6}
     d5e:	c249      	stmia	r2!, {r0, r3, r6}
     d60:	c949      	ldmia	r1!, {r0, r3, r6}
     d62:	c249      	stmia	r2!, {r0, r3, r6}
     d64:	c949      	ldmia	r1!, {r0, r3, r6}
     d66:	c249      	stmia	r2!, {r0, r3, r6}
	const uint32_t pinmapping1[] = {
     d68:	a912      	add	r1, sp, #72	; 0x48
     d6a:	4663      	mov	r3, ip
     d6c:	3330      	adds	r3, #48	; 0x30
     d6e:	000a      	movs	r2, r1
     d70:	cb43      	ldmia	r3!, {r0, r1, r6}
     d72:	c243      	stmia	r2!, {r0, r1, r6}
     d74:	cb43      	ldmia	r3!, {r0, r1, r6}
     d76:	c243      	stmia	r2!, {r0, r1, r6}
     d78:	cb43      	ldmia	r3!, {r0, r1, r6}
     d7a:	c243      	stmia	r2!, {r0, r1, r6}
     d7c:	cb43      	ldmia	r3!, {r0, r1, r6}
     d7e:	c243      	stmia	r2!, {r0, r1, r6}
	switch(index) {
     d80:	9b01      	ldr	r3, [sp, #4]
     d82:	2b00      	cmp	r3, #0
     d84:	d004      	beq.n	d90 <adc_init+0xf8>
		pinmapping = pinmapping1;
     d86:	a912      	add	r1, sp, #72	; 0x48
	switch(index) {
     d88:	2b01      	cmp	r3, #1
     d8a:	d002      	beq.n	d92 <adc_init+0xfa>
	const uint32_t *pinmapping = NULL;;
     d8c:	2100      	movs	r1, #0
     d8e:	e000      	b.n	d92 <adc_init+0xfa>
		pinmapping = pinmapping0;
     d90:	a906      	add	r1, sp, #24
	if (pin <= _adc_extchannel_msb[index]) {
     d92:	00a3      	lsls	r3, r4, #2
     d94:	4a67      	ldr	r2, [pc, #412]	; (f34 <adc_init+0x29c>)
     d96:	589b      	ldr	r3, [r3, r2]
     d98:	469b      	mov	fp, r3
     d9a:	4598      	cmp	r8, r3
     d9c:	d922      	bls.n	de4 <adc_init+0x14c>
	_adc_configure_ain_pin(index, config->negative_input);
     d9e:	88fb      	ldrh	r3, [r7, #6]
     da0:	4698      	mov	r8, r3
	const uint32_t pinmapping0[] = {
     da2:	ae06      	add	r6, sp, #24
     da4:	4b62      	ldr	r3, [pc, #392]	; (f30 <adc_init+0x298>)
     da6:	469c      	mov	ip, r3
     da8:	0032      	movs	r2, r6
     daa:	0019      	movs	r1, r3
     dac:	c949      	ldmia	r1!, {r0, r3, r6}
     dae:	c249      	stmia	r2!, {r0, r3, r6}
     db0:	c949      	ldmia	r1!, {r0, r3, r6}
     db2:	c249      	stmia	r2!, {r0, r3, r6}
     db4:	c949      	ldmia	r1!, {r0, r3, r6}
     db6:	c249      	stmia	r2!, {r0, r3, r6}
     db8:	c949      	ldmia	r1!, {r0, r3, r6}
     dba:	c249      	stmia	r2!, {r0, r3, r6}
	const uint32_t pinmapping1[] = {
     dbc:	a912      	add	r1, sp, #72	; 0x48
     dbe:	4663      	mov	r3, ip
     dc0:	3330      	adds	r3, #48	; 0x30
     dc2:	000a      	movs	r2, r1
     dc4:	cb43      	ldmia	r3!, {r0, r1, r6}
     dc6:	c243      	stmia	r2!, {r0, r1, r6}
     dc8:	cb43      	ldmia	r3!, {r0, r1, r6}
     dca:	c243      	stmia	r2!, {r0, r1, r6}
     dcc:	cb43      	ldmia	r3!, {r0, r1, r6}
     dce:	c243      	stmia	r2!, {r0, r1, r6}
     dd0:	cb43      	ldmia	r3!, {r0, r1, r6}
     dd2:	c243      	stmia	r2!, {r0, r1, r6}
	switch(index) {
     dd4:	9a01      	ldr	r2, [sp, #4]
     dd6:	2a00      	cmp	r2, #0
     dd8:	d012      	beq.n	e00 <adc_init+0x168>
		pinmapping = pinmapping1;
     dda:	ab12      	add	r3, sp, #72	; 0x48
	switch(index) {
     ddc:	2a01      	cmp	r2, #1
     dde:	d010      	beq.n	e02 <adc_init+0x16a>
	const uint32_t *pinmapping = NULL;;
     de0:	2300      	movs	r3, #0
     de2:	e00e      	b.n	e02 <adc_init+0x16a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     de4:	4643      	mov	r3, r8
     de6:	0098      	lsls	r0, r3, #2
     de8:	5840      	ldr	r0, [r0, r1]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     dea:	a905      	add	r1, sp, #20
     dec:	2300      	movs	r3, #0
     dee:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     df0:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     df2:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     df4:	3301      	adds	r3, #1
     df6:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     df8:	b2c0      	uxtb	r0, r0
     dfa:	4b4f      	ldr	r3, [pc, #316]	; (f38 <adc_init+0x2a0>)
     dfc:	4798      	blx	r3
     dfe:	e7ce      	b.n	d9e <adc_init+0x106>
		pinmapping = pinmapping0;
     e00:	ab06      	add	r3, sp, #24
	if (pin <= _adc_extchannel_msb[index]) {
     e02:	45d8      	cmp	r8, fp
     e04:	d90a      	bls.n	e1c <adc_init+0x184>
     e06:	2100      	movs	r1, #0
     e08:	2600      	movs	r6, #0
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     e0a:	2301      	movs	r3, #1
     e0c:	4699      	mov	r9, r3
	const uint32_t pinmapping0[] = {
     e0e:	4b48      	ldr	r3, [pc, #288]	; (f30 <adc_init+0x298>)
     e10:	4698      	mov	r8, r3
		system_pinmux_pin_set_config(pin_map_result, &config);
     e12:	9403      	str	r4, [sp, #12]
     e14:	465b      	mov	r3, fp
     e16:	9302      	str	r3, [sp, #8]
     e18:	46ab      	mov	fp, r5
     e1a:	e020      	b.n	e5e <adc_init+0x1c6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     e1c:	4642      	mov	r2, r8
     e1e:	0090      	lsls	r0, r2, #2
     e20:	58c0      	ldr	r0, [r0, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e22:	a905      	add	r1, sp, #20
     e24:	2300      	movs	r3, #0
     e26:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     e28:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     e2a:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     e2c:	3301      	adds	r3, #1
     e2e:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     e30:	b2c0      	uxtb	r0, r0
     e32:	4b41      	ldr	r3, [pc, #260]	; (f38 <adc_init+0x2a0>)
     e34:	4798      	blx	r3
     e36:	e7e6      	b.n	e06 <adc_init+0x16e>
		pinmapping = pinmapping0;
     e38:	ab06      	add	r3, sp, #24
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     e3a:	0089      	lsls	r1, r1, #2
     e3c:	58c8      	ldr	r0, [r1, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e3e:	a905      	add	r1, sp, #20
     e40:	2300      	movs	r3, #0
     e42:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     e44:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     e46:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     e48:	464b      	mov	r3, r9
     e4a:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     e4c:	b2c0      	uxtb	r0, r0
     e4e:	4b3a      	ldr	r3, [pc, #232]	; (f38 <adc_init+0x2a0>)
     e50:	4798      	blx	r3
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     e52:	3601      	adds	r6, #1
     e54:	b2f6      	uxtb	r6, r6
     e56:	0031      	movs	r1, r6
     e58:	9b02      	ldr	r3, [sp, #8]
     e5a:	429e      	cmp	r6, r3
     e5c:	d823      	bhi.n	ea6 <adc_init+0x20e>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     e5e:	464b      	mov	r3, r9
     e60:	40b3      	lsls	r3, r6
     e62:	693a      	ldr	r2, [r7, #16]
     e64:	421a      	tst	r2, r3
     e66:	d0f4      	beq.n	e52 <adc_init+0x1ba>
	const uint32_t pinmapping0[] = {
     e68:	a806      	add	r0, sp, #24
     e6a:	0003      	movs	r3, r0
     e6c:	4642      	mov	r2, r8
     e6e:	ca31      	ldmia	r2!, {r0, r4, r5}
     e70:	c331      	stmia	r3!, {r0, r4, r5}
     e72:	ca31      	ldmia	r2!, {r0, r4, r5}
     e74:	c331      	stmia	r3!, {r0, r4, r5}
     e76:	ca31      	ldmia	r2!, {r0, r4, r5}
     e78:	c331      	stmia	r3!, {r0, r4, r5}
     e7a:	ca31      	ldmia	r2!, {r0, r4, r5}
     e7c:	c331      	stmia	r3!, {r0, r4, r5}
	const uint32_t pinmapping1[] = {
     e7e:	a812      	add	r0, sp, #72	; 0x48
     e80:	4643      	mov	r3, r8
     e82:	3330      	adds	r3, #48	; 0x30
     e84:	0002      	movs	r2, r0
     e86:	cb31      	ldmia	r3!, {r0, r4, r5}
     e88:	c231      	stmia	r2!, {r0, r4, r5}
     e8a:	cb31      	ldmia	r3!, {r0, r4, r5}
     e8c:	c231      	stmia	r2!, {r0, r4, r5}
     e8e:	cb31      	ldmia	r3!, {r0, r4, r5}
     e90:	c231      	stmia	r2!, {r0, r4, r5}
     e92:	cb31      	ldmia	r3!, {r0, r4, r5}
     e94:	c231      	stmia	r2!, {r0, r4, r5}
	switch(index) {
     e96:	9a01      	ldr	r2, [sp, #4]
     e98:	2a00      	cmp	r2, #0
     e9a:	d0cd      	beq.n	e38 <adc_init+0x1a0>
		pinmapping = pinmapping1;
     e9c:	ab12      	add	r3, sp, #72	; 0x48
	switch(index) {
     e9e:	2a01      	cmp	r2, #1
     ea0:	d0cb      	beq.n	e3a <adc_init+0x1a2>
	const uint32_t *pinmapping = NULL;;
     ea2:	2300      	movs	r3, #0
     ea4:	e7c9      	b.n	e3a <adc_init+0x1a2>
     ea6:	465d      	mov	r5, fp
     ea8:	9c03      	ldr	r4, [sp, #12]
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     eaa:	7b7b      	ldrb	r3, [r7, #13]
     eac:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     eae:	7bba      	ldrb	r2, [r7, #14]
     eb0:	01d2      	lsls	r2, r2, #7
     eb2:	4313      	orrs	r3, r2
     eb4:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     eb6:	4652      	mov	r2, sl
     eb8:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     eba:	7d3b      	ldrb	r3, [r7, #20]
     ebc:	01db      	lsls	r3, r3, #7
			| (config->reference);
     ebe:	787a      	ldrb	r2, [r7, #1]
     ec0:	4313      	orrs	r3, r2
     ec2:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     ec4:	4652      	mov	r2, sl
     ec6:	7093      	strb	r3, [r2, #2]
	switch (config->resolution) {
     ec8:	78fb      	ldrb	r3, [r7, #3]
     eca:	2b34      	cmp	r3, #52	; 0x34
     ecc:	d900      	bls.n	ed0 <adc_init+0x238>
     ece:	e14f      	b.n	1170 <adc_init+0x4d8>
     ed0:	009b      	lsls	r3, r3, #2
     ed2:	4a1a      	ldr	r2, [pc, #104]	; (f3c <adc_init+0x2a4>)
     ed4:	58d3      	ldr	r3, [r2, r3]
     ed6:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     ed8:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     eda:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_4;
     edc:	2102      	movs	r1, #2
     ede:	e032      	b.n	f46 <adc_init+0x2ae>
		adjres = config->divide_result;
     ee0:	7a79      	ldrb	r1, [r7, #9]
		accumulate = config->accumulate_samples;
     ee2:	7a3a      	ldrb	r2, [r7, #8]
		resolution = ADC_RESOLUTION_16BIT;
     ee4:	2610      	movs	r6, #16
     ee6:	e02e      	b.n	f46 <adc_init+0x2ae>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     ee8:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     eea:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_2;
     eec:	2101      	movs	r1, #1
     eee:	e02a      	b.n	f46 <adc_init+0x2ae>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     ef0:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
     ef2:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     ef4:	2100      	movs	r1, #0
     ef6:	e026      	b.n	f46 <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     ef8:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
     efa:	2630      	movs	r6, #48	; 0x30
	uint8_t adjres = 0;
     efc:	2100      	movs	r1, #0
     efe:	e022      	b.n	f46 <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     f00:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
     f02:	2620      	movs	r6, #32
	uint8_t adjres = 0;
     f04:	2100      	movs	r1, #0
     f06:	e01e      	b.n	f46 <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     f08:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
     f0a:	2600      	movs	r6, #0
	uint8_t adjres = 0;
     f0c:	2100      	movs	r1, #0
     f0e:	e01a      	b.n	f46 <adc_init+0x2ae>
     f10:	00000bed 	.word	0x00000bed
     f14:	40000800 	.word	0x40000800
     f18:	00007b8c 	.word	0x00007b8c
     f1c:	40001800 	.word	0x40001800
     f20:	20001450 	.word	0x20001450
     f24:	00007bb4 	.word	0x00007bb4
     f28:	00003d71 	.word	0x00003d71
     f2c:	00003d01 	.word	0x00003d01
     f30:	00007b2c 	.word	0x00007b2c
     f34:	00007bac 	.word	0x00007bac
     f38:	00003e6d 	.word	0x00003e6d
     f3c:	00007a58 	.word	0x00007a58
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     f40:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
     f42:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_2;
     f44:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     f46:	0109      	lsls	r1, r1, #4
     f48:	2370      	movs	r3, #112	; 0x70
     f4a:	400b      	ands	r3, r1
     f4c:	4313      	orrs	r3, r2
     f4e:	4652      	mov	r2, sl
     f50:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     f52:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     f54:	8c13      	ldrh	r3, [r2, #32]
     f56:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     f58:	2b00      	cmp	r3, #0
     f5a:	d1fb      	bne.n	f54 <adc_init+0x2bc>
	if (config->sample_length > 63) {
     f5c:	7d7b      	ldrb	r3, [r7, #21]
		return STATUS_ERR_INVALID_ARG;
     f5e:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     f60:	2b3f      	cmp	r3, #63	; 0x3f
     f62:	d900      	bls.n	f66 <adc_init+0x2ce>
     f64:	e6b3      	b.n	cce <adc_init+0x36>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     f66:	7bfa      	ldrb	r2, [r7, #15]
     f68:	01d2      	lsls	r2, r2, #7
     f6a:	4313      	orrs	r3, r2
     f6c:	b2db      	uxtb	r3, r3
		adc_module->SAMPCTRL.reg =
     f6e:	4652      	mov	r2, sl
     f70:	7353      	strb	r3, [r2, #13]
	Adc *const adc_module = module_inst->hw;
     f72:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     f74:	8c13      	ldrh	r3, [r2, #32]
     f76:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     f78:	2b00      	cmp	r3, #0
     f7a:	d1fb      	bne.n	f74 <adc_init+0x2dc>
			config->clock_prescaler;
     f7c:	78bb      	ldrb	r3, [r7, #2]
	adc_module->CTRLB.reg =
     f7e:	4652      	mov	r2, sl
     f80:	7053      	strb	r3, [r2, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     f82:	2324      	movs	r3, #36	; 0x24
     f84:	5cfb      	ldrb	r3, [r7, r3]
     f86:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     f88:	7b3a      	ldrb	r2, [r7, #12]
     f8a:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     f8c:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     f8e:	7afb      	ldrb	r3, [r7, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     f90:	4313      	orrs	r3, r2
     f92:	7aba      	ldrb	r2, [r7, #10]
     f94:	0052      	lsls	r2, r2, #1
     f96:	4313      	orrs	r3, r2
     f98:	4333      	orrs	r3, r6
	adc_module->CTRLC.reg =
     f9a:	4652      	mov	r2, sl
     f9c:	8153      	strh	r3, [r2, #10]
	Adc *const adc_module = module_inst->hw;
     f9e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     fa0:	8c13      	ldrh	r3, [r2, #32]
     fa2:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     fa4:	2b00      	cmp	r3, #0
     fa6:	d1fb      	bne.n	fa0 <adc_init+0x308>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     fa8:	8b3b      	ldrh	r3, [r7, #24]
     faa:	2b00      	cmp	r3, #0
     fac:	d020      	beq.n	ff0 <adc_init+0x358>
		switch (resolution) {
     fae:	2e10      	cmp	r6, #16
     fb0:	d100      	bne.n	fb4 <adc_init+0x31c>
     fb2:	e0bf      	b.n	1134 <adc_init+0x49c>
     fb4:	d800      	bhi.n	fb8 <adc_init+0x320>
     fb6:	e07f      	b.n	10b8 <adc_init+0x420>
     fb8:	2e20      	cmp	r6, #32
     fba:	d100      	bne.n	fbe <adc_init+0x326>
     fbc:	e09c      	b.n	10f8 <adc_init+0x460>
     fbe:	2e30      	cmp	r6, #48	; 0x30
     fc0:	d116      	bne.n	ff0 <adc_init+0x358>
			if (config->differential_mode &&
     fc2:	7afa      	ldrb	r2, [r7, #11]
     fc4:	2a00      	cmp	r2, #0
     fc6:	d00a      	beq.n	fde <adc_init+0x346>
					(config->window.window_lower_value > 127 ||
     fc8:	69fa      	ldr	r2, [r7, #28]
     fca:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     fcc:	2017      	movs	r0, #23
			if (config->differential_mode &&
     fce:	2aff      	cmp	r2, #255	; 0xff
     fd0:	d900      	bls.n	fd4 <adc_init+0x33c>
     fd2:	e67c      	b.n	cce <adc_init+0x36>
					config->window.window_lower_value < -128 ||
     fd4:	6a3a      	ldr	r2, [r7, #32]
     fd6:	3280      	adds	r2, #128	; 0x80
     fd8:	2aff      	cmp	r2, #255	; 0xff
     fda:	d900      	bls.n	fde <adc_init+0x346>
     fdc:	e677      	b.n	cce <adc_init+0x36>
				return STATUS_ERR_INVALID_ARG;
     fde:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     fe0:	69fa      	ldr	r2, [r7, #28]
     fe2:	2aff      	cmp	r2, #255	; 0xff
     fe4:	dd00      	ble.n	fe8 <adc_init+0x350>
     fe6:	e672      	b.n	cce <adc_init+0x36>
     fe8:	6a3a      	ldr	r2, [r7, #32]
     fea:	2aff      	cmp	r2, #255	; 0xff
     fec:	dd00      	ble.n	ff0 <adc_init+0x358>
     fee:	e66e      	b.n	cce <adc_init+0x36>
	adc_module->CTRLC.reg |= config->window.window_mode;
     ff0:	4652      	mov	r2, sl
     ff2:	8952      	ldrh	r2, [r2, #10]
     ff4:	4313      	orrs	r3, r2
     ff6:	4652      	mov	r2, sl
     ff8:	8153      	strh	r3, [r2, #10]
	Adc *const adc_module = module_inst->hw;
     ffa:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     ffc:	8c13      	ldrh	r3, [r2, #32]
     ffe:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    1000:	2b00      	cmp	r3, #0
    1002:	d1fb      	bne.n	ffc <adc_init+0x364>
	adc_module->WINLT.reg =
    1004:	8bbb      	ldrh	r3, [r7, #28]
    1006:	4652      	mov	r2, sl
    1008:	81d3      	strh	r3, [r2, #14]
	Adc *const adc_module = module_inst->hw;
    100a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    100c:	8c13      	ldrh	r3, [r2, #32]
    100e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    1010:	2b00      	cmp	r3, #0
    1012:	d1fb      	bne.n	100c <adc_init+0x374>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1014:	8c3b      	ldrh	r3, [r7, #32]
    1016:	4652      	mov	r2, sl
    1018:	8213      	strh	r3, [r2, #16]
	Adc *const adc_module = module_inst->hw;
    101a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    101c:	8c13      	ldrh	r3, [r2, #32]
    101e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    1020:	2b00      	cmp	r3, #0
    1022:	d1fb      	bne.n	101c <adc_init+0x384>
			config->positive_input;
    1024:	793b      	ldrb	r3, [r7, #4]
			config->negative_input |
    1026:	88fa      	ldrh	r2, [r7, #6]
    1028:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    102a:	4652      	mov	r2, sl
    102c:	8113      	strh	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    102e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    1030:	8c13      	ldrh	r3, [r2, #32]
    1032:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    1034:	2b00      	cmp	r3, #0
    1036:	d1fb      	bne.n	1030 <adc_init+0x398>
	adc_module->EVCTRL.reg = config->event_action;
    1038:	332a      	adds	r3, #42	; 0x2a
    103a:	5cfb      	ldrb	r3, [r7, r3]
    103c:	4652      	mov	r2, sl
    103e:	70d3      	strb	r3, [r2, #3]
	adc_module->INTENCLR.reg =
    1040:	2307      	movs	r3, #7
    1042:	7113      	strb	r3, [r2, #4]
	if (config->correction.correction_enable){
    1044:	331d      	adds	r3, #29
    1046:	5cfb      	ldrb	r3, [r7, r3]
    1048:	2b00      	cmp	r3, #0
    104a:	d01d      	beq.n	1088 <adc_init+0x3f0>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    104c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    104e:	4a49      	ldr	r2, [pc, #292]	; (1174 <adc_init+0x4dc>)
			return STATUS_ERR_INVALID_ARG;
    1050:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1052:	4293      	cmp	r3, r2
    1054:	d900      	bls.n	1058 <adc_init+0x3c0>
    1056:	e63a      	b.n	cce <adc_init+0x36>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    1058:	4652      	mov	r2, sl
    105a:	8253      	strh	r3, [r2, #18]
	Adc *const adc_module = module_inst->hw;
    105c:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    105e:	8c13      	ldrh	r3, [r2, #32]
    1060:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
    1062:	2b00      	cmp	r3, #0
    1064:	d1fb      	bne.n	105e <adc_init+0x3c6>
		if (config->correction.offset_correction > 2047 ||
    1066:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    1068:	2380      	movs	r3, #128	; 0x80
    106a:	011b      	lsls	r3, r3, #4
    106c:	18d3      	adds	r3, r2, r3
    106e:	4941      	ldr	r1, [pc, #260]	; (1174 <adc_init+0x4dc>)
    1070:	b29b      	uxth	r3, r3
			return STATUS_ERR_INVALID_ARG;
    1072:	2017      	movs	r0, #23
		if (config->correction.offset_correction > 2047 ||
    1074:	428b      	cmp	r3, r1
    1076:	d900      	bls.n	107a <adc_init+0x3e2>
    1078:	e629      	b.n	cce <adc_init+0x36>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    107a:	4653      	mov	r3, sl
    107c:	829a      	strh	r2, [r3, #20]
	Adc *const adc_module = module_inst->hw;
    107e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    1080:	8c13      	ldrh	r3, [r2, #32]
    1082:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
    1084:	2b00      	cmp	r3, #0
    1086:	d1fb      	bne.n	1080 <adc_init+0x3e8>
			ADC_CALIB_BIASREFBUF(
    1088:	00a2      	lsls	r2, r4, #2
    108a:	4b3b      	ldr	r3, [pc, #236]	; (1178 <adc_init+0x4e0>)
    108c:	58d3      	ldr	r3, [r2, r3]
    108e:	493b      	ldr	r1, [pc, #236]	; (117c <adc_init+0x4e4>)
    1090:	5d09      	ldrb	r1, [r1, r4]
    1092:	681b      	ldr	r3, [r3, #0]
    1094:	40cb      	lsrs	r3, r1
    1096:	021b      	lsls	r3, r3, #8
    1098:	21e0      	movs	r1, #224	; 0xe0
    109a:	00c9      	lsls	r1, r1, #3
    109c:	400b      	ands	r3, r1
			ADC_CALIB_BIASCOMP(
    109e:	4938      	ldr	r1, [pc, #224]	; (1180 <adc_init+0x4e8>)
    10a0:	5852      	ldr	r2, [r2, r1]
    10a2:	4938      	ldr	r1, [pc, #224]	; (1184 <adc_init+0x4ec>)
    10a4:	5d09      	ldrb	r1, [r1, r4]
    10a6:	6812      	ldr	r2, [r2, #0]
    10a8:	40ca      	lsrs	r2, r1
    10aa:	2107      	movs	r1, #7
    10ac:	400a      	ands	r2, r1
			) |
    10ae:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    10b0:	4652      	mov	r2, sl
    10b2:	8593      	strh	r3, [r2, #44]	; 0x2c
	return STATUS_OK;
    10b4:	2000      	movs	r0, #0
    10b6:	e60a      	b.n	cce <adc_init+0x36>
		switch (resolution) {
    10b8:	2e00      	cmp	r6, #0
    10ba:	d199      	bne.n	ff0 <adc_init+0x358>
			if (config->differential_mode &&
    10bc:	7afa      	ldrb	r2, [r7, #11]
    10be:	2a00      	cmp	r2, #0
    10c0:	d00f      	beq.n	10e2 <adc_init+0x44a>
					(config->window.window_lower_value > 2047 ||
    10c2:	69fa      	ldr	r2, [r7, #28]
    10c4:	2180      	movs	r1, #128	; 0x80
    10c6:	0109      	lsls	r1, r1, #4
    10c8:	468c      	mov	ip, r1
    10ca:	4462      	add	r2, ip
			if (config->differential_mode &&
    10cc:	4929      	ldr	r1, [pc, #164]	; (1174 <adc_init+0x4dc>)
				return STATUS_ERR_INVALID_ARG;
    10ce:	2017      	movs	r0, #23
			if (config->differential_mode &&
    10d0:	428a      	cmp	r2, r1
    10d2:	d900      	bls.n	10d6 <adc_init+0x43e>
    10d4:	e5fb      	b.n	cce <adc_init+0x36>
					config->window.window_lower_value < -2048 ||
    10d6:	6a3a      	ldr	r2, [r7, #32]
    10d8:	4462      	add	r2, ip
    10da:	4926      	ldr	r1, [pc, #152]	; (1174 <adc_init+0x4dc>)
    10dc:	428a      	cmp	r2, r1
    10de:	d900      	bls.n	10e2 <adc_init+0x44a>
    10e0:	e5f5      	b.n	cce <adc_init+0x36>
			} else if (config->window.window_lower_value > 4095 ||
    10e2:	4a24      	ldr	r2, [pc, #144]	; (1174 <adc_init+0x4dc>)
				return STATUS_ERR_INVALID_ARG;
    10e4:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    10e6:	69f9      	ldr	r1, [r7, #28]
    10e8:	4291      	cmp	r1, r2
    10ea:	dd00      	ble.n	10ee <adc_init+0x456>
    10ec:	e5ef      	b.n	cce <adc_init+0x36>
    10ee:	6a39      	ldr	r1, [r7, #32]
    10f0:	4291      	cmp	r1, r2
    10f2:	dd00      	ble.n	10f6 <adc_init+0x45e>
    10f4:	e5eb      	b.n	cce <adc_init+0x36>
    10f6:	e77b      	b.n	ff0 <adc_init+0x358>
			if (config->differential_mode &&
    10f8:	7afa      	ldrb	r2, [r7, #11]
    10fa:	2a00      	cmp	r2, #0
    10fc:	d00f      	beq.n	111e <adc_init+0x486>
					(config->window.window_lower_value > 511 ||
    10fe:	69fa      	ldr	r2, [r7, #28]
    1100:	2180      	movs	r1, #128	; 0x80
    1102:	0089      	lsls	r1, r1, #2
    1104:	468c      	mov	ip, r1
    1106:	4462      	add	r2, ip
			if (config->differential_mode &&
    1108:	491f      	ldr	r1, [pc, #124]	; (1188 <adc_init+0x4f0>)
				return STATUS_ERR_INVALID_ARG;
    110a:	2017      	movs	r0, #23
			if (config->differential_mode &&
    110c:	428a      	cmp	r2, r1
    110e:	d900      	bls.n	1112 <adc_init+0x47a>
    1110:	e5dd      	b.n	cce <adc_init+0x36>
					config->window.window_lower_value < -512 ||
    1112:	6a3a      	ldr	r2, [r7, #32]
    1114:	4462      	add	r2, ip
    1116:	491c      	ldr	r1, [pc, #112]	; (1188 <adc_init+0x4f0>)
    1118:	428a      	cmp	r2, r1
    111a:	d900      	bls.n	111e <adc_init+0x486>
    111c:	e5d7      	b.n	cce <adc_init+0x36>
			} else if (config->window.window_lower_value > 1023 ||
    111e:	4a1a      	ldr	r2, [pc, #104]	; (1188 <adc_init+0x4f0>)
				return STATUS_ERR_INVALID_ARG;
    1120:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    1122:	69f9      	ldr	r1, [r7, #28]
    1124:	4291      	cmp	r1, r2
    1126:	dd00      	ble.n	112a <adc_init+0x492>
    1128:	e5d1      	b.n	cce <adc_init+0x36>
    112a:	6a39      	ldr	r1, [r7, #32]
    112c:	4291      	cmp	r1, r2
    112e:	dd00      	ble.n	1132 <adc_init+0x49a>
    1130:	e5cd      	b.n	cce <adc_init+0x36>
    1132:	e75d      	b.n	ff0 <adc_init+0x358>
			if (config->differential_mode &&
    1134:	7afa      	ldrb	r2, [r7, #11]
    1136:	2a00      	cmp	r2, #0
    1138:	d00f      	beq.n	115a <adc_init+0x4c2>
					(config->window.window_lower_value > 32767 ||
    113a:	69fa      	ldr	r2, [r7, #28]
    113c:	2180      	movs	r1, #128	; 0x80
    113e:	0209      	lsls	r1, r1, #8
    1140:	468c      	mov	ip, r1
    1142:	4462      	add	r2, ip
			if (config->differential_mode &&
    1144:	4911      	ldr	r1, [pc, #68]	; (118c <adc_init+0x4f4>)
				return STATUS_ERR_INVALID_ARG;
    1146:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1148:	428a      	cmp	r2, r1
    114a:	d900      	bls.n	114e <adc_init+0x4b6>
    114c:	e5bf      	b.n	cce <adc_init+0x36>
					config->window.window_lower_value < -32768 ||
    114e:	6a3a      	ldr	r2, [r7, #32]
    1150:	4462      	add	r2, ip
    1152:	490e      	ldr	r1, [pc, #56]	; (118c <adc_init+0x4f4>)
    1154:	428a      	cmp	r2, r1
    1156:	d900      	bls.n	115a <adc_init+0x4c2>
    1158:	e5b9      	b.n	cce <adc_init+0x36>
			} else if (config->window.window_lower_value > 65535 ||
    115a:	4a0c      	ldr	r2, [pc, #48]	; (118c <adc_init+0x4f4>)
				return STATUS_ERR_INVALID_ARG;
    115c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    115e:	69f9      	ldr	r1, [r7, #28]
    1160:	4291      	cmp	r1, r2
    1162:	dd00      	ble.n	1166 <adc_init+0x4ce>
    1164:	e5b3      	b.n	cce <adc_init+0x36>
    1166:	6a39      	ldr	r1, [r7, #32]
    1168:	4291      	cmp	r1, r2
    116a:	dd00      	ble.n	116e <adc_init+0x4d6>
    116c:	e5af      	b.n	cce <adc_init+0x36>
    116e:	e73f      	b.n	ff0 <adc_init+0x358>
		return STATUS_ERR_INVALID_ARG;
    1170:	2017      	movs	r0, #23
    1172:	e5ac      	b.n	cce <adc_init+0x36>
    1174:	00000fff 	.word	0x00000fff
    1178:	00007ba0 	.word	0x00007ba0
    117c:	00007ba8 	.word	0x00007ba8
    1180:	00007b94 	.word	0x00007b94
    1184:	00007b9c 	.word	0x00007b9c
    1188:	000003ff 	.word	0x000003ff
    118c:	0000ffff 	.word	0x0000ffff

00001190 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    1190:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    1192:	0080      	lsls	r0, r0, #2
    1194:	4b2e      	ldr	r3, [pc, #184]	; (1250 <_adc_interrupt_handler+0xc0>)
    1196:	58c4      	ldr	r4, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    1198:	6823      	ldr	r3, [r4, #0]
    119a:	799a      	ldrb	r2, [r3, #6]
    119c:	795d      	ldrb	r5, [r3, #5]
    119e:	4015      	ands	r5, r2

	if (flags & ADC_INTFLAG_RESRDY) {
    11a0:	07ea      	lsls	r2, r5, #31
    11a2:	d52a      	bpl.n	11fa <_adc_interrupt_handler+0x6a>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    11a4:	2201      	movs	r2, #1
    11a6:	719a      	strb	r2, [r3, #6]

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
    11a8:	6962      	ldr	r2, [r4, #20]
    11aa:	1c93      	adds	r3, r2, #2
    11ac:	6163      	str	r3, [r4, #20]
    11ae:	6823      	ldr	r3, [r4, #0]
    11b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    11b2:	b29b      	uxth	r3, r3
    11b4:	8013      	strh	r3, [r2, #0]

		if (--module->remaining_conversions > 0) {
    11b6:	8b23      	ldrh	r3, [r4, #24]
    11b8:	3b01      	subs	r3, #1
    11ba:	b29b      	uxth	r3, r3
    11bc:	8323      	strh	r3, [r4, #24]
    11be:	2b00      	cmp	r3, #0
    11c0:	d015      	beq.n	11ee <_adc_interrupt_handler+0x5e>
			if (module->software_trigger == true
    11c2:	7f63      	ldrb	r3, [r4, #29]
    11c4:	2b00      	cmp	r3, #0
    11c6:	d018      	beq.n	11fa <_adc_interrupt_handler+0x6a>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
    11c8:	6822      	ldr	r2, [r4, #0]
    11ca:	79d3      	ldrb	r3, [r2, #7]
    11cc:	b25b      	sxtb	r3, r3
    11ce:	2b00      	cmp	r3, #0
    11d0:	db13      	blt.n	11fa <_adc_interrupt_handler+0x6a>
    11d2:	8c13      	ldrh	r3, [r2, #32]
    11d4:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    11d6:	2b00      	cmp	r3, #0
    11d8:	d1fb      	bne.n	11d2 <_adc_interrupt_handler+0x42>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    11da:	7e13      	ldrb	r3, [r2, #24]
    11dc:	2102      	movs	r1, #2
    11de:	430b      	orrs	r3, r1
    11e0:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
    11e2:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
    11e4:	8c13      	ldrh	r3, [r2, #32]
    11e6:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    11e8:	2b00      	cmp	r3, #0
    11ea:	d1fb      	bne.n	11e4 <_adc_interrupt_handler+0x54>
    11ec:	e005      	b.n	11fa <_adc_interrupt_handler+0x6a>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    11ee:	2301      	movs	r3, #1
    11f0:	6822      	ldr	r2, [r4, #0]
    11f2:	7113      	strb	r3, [r2, #4]
				adc_start_conversion(module);
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
			if (module->job_status == STATUS_BUSY) {
    11f4:	7f23      	ldrb	r3, [r4, #28]
    11f6:	2b05      	cmp	r3, #5
    11f8:	d016      	beq.n	1228 <_adc_interrupt_handler+0x98>
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    11fa:	076b      	lsls	r3, r5, #29
    11fc:	d508      	bpl.n	1210 <_adc_interrupt_handler+0x80>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    11fe:	2304      	movs	r3, #4
    1200:	6822      	ldr	r2, [r4, #0]
    1202:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    1204:	7ee3      	ldrb	r3, [r4, #27]
    1206:	079b      	lsls	r3, r3, #30
    1208:	d502      	bpl.n	1210 <_adc_interrupt_handler+0x80>
    120a:	7ea3      	ldrb	r3, [r4, #26]
    120c:	079b      	lsls	r3, r3, #30
    120e:	d417      	bmi.n	1240 <_adc_interrupt_handler+0xb0>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    1210:	07ab      	lsls	r3, r5, #30
    1212:	d508      	bpl.n	1226 <_adc_interrupt_handler+0x96>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    1214:	2302      	movs	r3, #2
    1216:	6822      	ldr	r2, [r4, #0]
    1218:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    121a:	7ee3      	ldrb	r3, [r4, #27]
    121c:	075b      	lsls	r3, r3, #29
    121e:	d502      	bpl.n	1226 <_adc_interrupt_handler+0x96>
    1220:	7ea3      	ldrb	r3, [r4, #26]
    1222:	075b      	lsls	r3, r3, #29
    1224:	d410      	bmi.n	1248 <_adc_interrupt_handler+0xb8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
		}
	}
}
    1226:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
    1228:	2300      	movs	r3, #0
    122a:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
    122c:	7ee3      	ldrb	r3, [r4, #27]
    122e:	07db      	lsls	r3, r3, #31
    1230:	d5e3      	bpl.n	11fa <_adc_interrupt_handler+0x6a>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    1232:	7ea3      	ldrb	r3, [r4, #26]
    1234:	07db      	lsls	r3, r3, #31
    1236:	d5e0      	bpl.n	11fa <_adc_interrupt_handler+0x6a>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    1238:	0020      	movs	r0, r4
    123a:	68a3      	ldr	r3, [r4, #8]
    123c:	4798      	blx	r3
    123e:	e7dc      	b.n	11fa <_adc_interrupt_handler+0x6a>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    1240:	0020      	movs	r0, r4
    1242:	68e3      	ldr	r3, [r4, #12]
    1244:	4798      	blx	r3
    1246:	e7e3      	b.n	1210 <_adc_interrupt_handler+0x80>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    1248:	6923      	ldr	r3, [r4, #16]
    124a:	0020      	movs	r0, r4
    124c:	4798      	blx	r3
}
    124e:	e7ea      	b.n	1226 <_adc_interrupt_handler+0x96>
    1250:	20001450 	.word	0x20001450

00001254 <ADC0_Handler>:
		void ADC##n##_Handler(void) \
		{ \
			_adc_interrupt_handler(n); \
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
    1254:	b510      	push	{r4, lr}
    1256:	2000      	movs	r0, #0
    1258:	4b01      	ldr	r3, [pc, #4]	; (1260 <ADC0_Handler+0xc>)
    125a:	4798      	blx	r3
    125c:	bd10      	pop	{r4, pc}
    125e:	46c0      	nop			; (mov r8, r8)
    1260:	00001191 	.word	0x00001191

00001264 <ADC1_Handler>:
    1264:	b510      	push	{r4, lr}
    1266:	2001      	movs	r0, #1
    1268:	4b01      	ldr	r3, [pc, #4]	; (1270 <ADC1_Handler+0xc>)
    126a:	4798      	blx	r3
    126c:	bd10      	pop	{r4, pc}
    126e:	46c0      	nop			; (mov r8, r8)
    1270:	00001191 	.word	0x00001191

00001274 <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1274:	1c93      	adds	r3, r2, #2
    1276:	009b      	lsls	r3, r3, #2
    1278:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
    127a:	2301      	movs	r3, #1
    127c:	4093      	lsls	r3, r2
    127e:	001a      	movs	r2, r3
    1280:	7e83      	ldrb	r3, [r0, #26]
    1282:	4313      	orrs	r3, r2
    1284:	7683      	strb	r3, [r0, #26]
}
    1286:	4770      	bx	lr

00001288 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
    1288:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
    128a:	8b03      	ldrh	r3, [r0, #24]
    128c:	b29b      	uxth	r3, r3
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
    128e:	2405      	movs	r4, #5
	if(module_inst->remaining_conversions != 0 ||
    1290:	2b00      	cmp	r3, #0
    1292:	d001      	beq.n	1298 <adc_read_buffer_job+0x10>
	if(module_inst->software_trigger == true) {
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
}
    1294:	0020      	movs	r0, r4
    1296:	bd10      	pop	{r4, pc}
			module_inst->job_status == STATUS_BUSY){
    1298:	7f03      	ldrb	r3, [r0, #28]
	if(module_inst->remaining_conversions != 0 ||
    129a:	2b05      	cmp	r3, #5
    129c:	d0fa      	beq.n	1294 <adc_read_buffer_job+0xc>
	module_inst->job_status = STATUS_BUSY;
    129e:	2305      	movs	r3, #5
    12a0:	7703      	strb	r3, [r0, #28]
	module_inst->remaining_conversions = samples;
    12a2:	8302      	strh	r2, [r0, #24]
	module_inst->job_buffer = buffer;
    12a4:	6141      	str	r1, [r0, #20]
	adc_module->INTENSET.reg = interrupt;
    12a6:	3b04      	subs	r3, #4
    12a8:	6802      	ldr	r2, [r0, #0]
    12aa:	7153      	strb	r3, [r2, #5]
	if(module_inst->software_trigger == true) {
    12ac:	7f43      	ldrb	r3, [r0, #29]
	return STATUS_OK;
    12ae:	2400      	movs	r4, #0
	if(module_inst->software_trigger == true) {
    12b0:	2b00      	cmp	r3, #0
    12b2:	d0ef      	beq.n	1294 <adc_read_buffer_job+0xc>
	Adc *const adc_module = module_inst->hw;
    12b4:	6802      	ldr	r2, [r0, #0]
    12b6:	8c13      	ldrh	r3, [r2, #32]
    12b8:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    12ba:	2b00      	cmp	r3, #0
    12bc:	d1fb      	bne.n	12b6 <adc_read_buffer_job+0x2e>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    12be:	7e13      	ldrb	r3, [r2, #24]
    12c0:	2102      	movs	r1, #2
    12c2:	430b      	orrs	r3, r1
    12c4:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
    12c6:	6802      	ldr	r2, [r0, #0]
	if (adc_module->SYNCBUSY.reg) {
    12c8:	8c13      	ldrh	r3, [r2, #32]
    12ca:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    12cc:	2b00      	cmp	r3, #0
    12ce:	d1fb      	bne.n	12c8 <adc_read_buffer_job+0x40>
	return STATUS_OK;
    12d0:	2400      	movs	r4, #0
    12d2:	e7df      	b.n	1294 <adc_read_buffer_job+0xc>

000012d4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    12d4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    12d6:	2200      	movs	r2, #0
    12d8:	4b10      	ldr	r3, [pc, #64]	; (131c <EIC_Handler+0x48>)
    12da:	701a      	strb	r2, [r3, #0]
    12dc:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    12de:	4910      	ldr	r1, [pc, #64]	; (1320 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    12e0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    12e2:	4e10      	ldr	r6, [pc, #64]	; (1324 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    12e4:	4c0d      	ldr	r4, [pc, #52]	; (131c <EIC_Handler+0x48>)
    12e6:	e00a      	b.n	12fe <EIC_Handler+0x2a>
		return eics[eic_index];
    12e8:	490d      	ldr	r1, [pc, #52]	; (1320 <EIC_Handler+0x4c>)
    12ea:	e008      	b.n	12fe <EIC_Handler+0x2a>
    12ec:	7823      	ldrb	r3, [r4, #0]
    12ee:	3301      	adds	r3, #1
    12f0:	b2db      	uxtb	r3, r3
    12f2:	7023      	strb	r3, [r4, #0]
    12f4:	2b0f      	cmp	r3, #15
    12f6:	d810      	bhi.n	131a <EIC_Handler+0x46>
		return NULL;
    12f8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    12fa:	2b1f      	cmp	r3, #31
    12fc:	d9f4      	bls.n	12e8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    12fe:	0028      	movs	r0, r5
    1300:	4018      	ands	r0, r3
    1302:	2201      	movs	r2, #1
    1304:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    1306:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    1308:	4210      	tst	r0, r2
    130a:	d0ef      	beq.n	12ec <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    130c:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    130e:	009b      	lsls	r3, r3, #2
    1310:	599b      	ldr	r3, [r3, r6]
    1312:	2b00      	cmp	r3, #0
    1314:	d0ea      	beq.n	12ec <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1316:	4798      	blx	r3
    1318:	e7e8      	b.n	12ec <EIC_Handler+0x18>
			}
		}
	}
}
    131a:	bd70      	pop	{r4, r5, r6, pc}
    131c:	20001458 	.word	0x20001458
    1320:	40002800 	.word	0x40002800
    1324:	2000145c 	.word	0x2000145c

00001328 <_extint_enable>:
{
    Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

    /* Enable all EIC hardware modules. */
    for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
        eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1328:	4a06      	ldr	r2, [pc, #24]	; (1344 <_extint_enable+0x1c>)
    132a:	7813      	ldrb	r3, [r2, #0]
    132c:	2102      	movs	r1, #2
    132e:	430b      	orrs	r3, r1
    1330:	7013      	strb	r3, [r2, #0]
                || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)) {
    1332:	2001      	movs	r0, #1
        if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    1334:	6853      	ldr	r3, [r2, #4]
    1336:	4219      	tst	r1, r3
    1338:	d1fc      	bne.n	1334 <_extint_enable+0xc>
                || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)) {
    133a:	6853      	ldr	r3, [r2, #4]
    133c:	4218      	tst	r0, r3
    133e:	d1f9      	bne.n	1334 <_extint_enable+0xc>
    }

    while (extint_is_syncing()) {
        /* Wait for all hardware modules to complete synchronization */
    }
}
    1340:	4770      	bx	lr
    1342:	46c0      	nop			; (mov r8, r8)
    1344:	40002800 	.word	0x40002800

00001348 <_system_extint_init>:
{
    1348:	b500      	push	{lr}
    134a:	b083      	sub	sp, #12
			MCLK->APBAMASK.reg |= mask;
    134c:	4a17      	ldr	r2, [pc, #92]	; (13ac <_system_extint_init+0x64>)
    134e:	6951      	ldr	r1, [r2, #20]
    1350:	2380      	movs	r3, #128	; 0x80
    1352:	00db      	lsls	r3, r3, #3
    1354:	430b      	orrs	r3, r1
    1356:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1358:	a901      	add	r1, sp, #4
    135a:	2300      	movs	r3, #0
    135c:	700b      	strb	r3, [r1, #0]
    system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    135e:	2002      	movs	r0, #2
    1360:	4b13      	ldr	r3, [pc, #76]	; (13b0 <_system_extint_init+0x68>)
    1362:	4798      	blx	r3
    system_gclk_chan_enable(EIC_GCLK_ID);
    1364:	2002      	movs	r0, #2
    1366:	4b13      	ldr	r3, [pc, #76]	; (13b4 <_system_extint_init+0x6c>)
    1368:	4798      	blx	r3
        eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    136a:	4a13      	ldr	r2, [pc, #76]	; (13b8 <_system_extint_init+0x70>)
    136c:	7813      	ldrb	r3, [r2, #0]
    136e:	2101      	movs	r1, #1
    1370:	430b      	orrs	r3, r1
    1372:	7013      	strb	r3, [r2, #0]
        if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    1374:	3101      	adds	r1, #1
                || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)) {
    1376:	2001      	movs	r0, #1
        if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    1378:	6853      	ldr	r3, [r2, #4]
    137a:	4219      	tst	r1, r3
    137c:	d1fc      	bne.n	1378 <_system_extint_init+0x30>
                || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)) {
    137e:	6853      	ldr	r3, [r2, #4]
    1380:	4218      	tst	r0, r3
    1382:	d1f9      	bne.n	1378 <_system_extint_init+0x30>
        eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
    1384:	4a0c      	ldr	r2, [pc, #48]	; (13b8 <_system_extint_init+0x70>)
    1386:	7813      	ldrb	r3, [r2, #0]
    1388:	2110      	movs	r1, #16
    138a:	438b      	bics	r3, r1
    138c:	7013      	strb	r3, [r2, #0]
    138e:	4b0b      	ldr	r3, [pc, #44]	; (13bc <_system_extint_init+0x74>)
    1390:	0019      	movs	r1, r3
    1392:	3140      	adds	r1, #64	; 0x40
        _extint_dev.callbacks[j] = NULL;
    1394:	2200      	movs	r2, #0
    1396:	c304      	stmia	r3!, {r2}
    for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1398:	428b      	cmp	r3, r1
    139a:	d1fc      	bne.n	1396 <_system_extint_init+0x4e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    139c:	2208      	movs	r2, #8
    139e:	4b08      	ldr	r3, [pc, #32]	; (13c0 <_system_extint_init+0x78>)
    13a0:	601a      	str	r2, [r3, #0]
    _extint_enable();
    13a2:	4b08      	ldr	r3, [pc, #32]	; (13c4 <_system_extint_init+0x7c>)
    13a4:	4798      	blx	r3
}
    13a6:	b003      	add	sp, #12
    13a8:	bd00      	pop	{pc}
    13aa:	46c0      	nop			; (mov r8, r8)
    13ac:	40000800 	.word	0x40000800
    13b0:	00003d71 	.word	0x00003d71
    13b4:	00003d01 	.word	0x00003d01
    13b8:	40002800 	.word	0x40002800
    13bc:	2000145c 	.word	0x2000145c
    13c0:	e000e100 	.word	0xe000e100
    13c4:	00001329 	.word	0x00001329

000013c8 <DMX_transmit_enable>:
    DMX_flags &= ~(1 << DMX_RXR);
}

void DMX_transmit_enable(void)
{
    DMX_flags |= (1 << DMX_TXR);
    13c8:	4a02      	ldr	r2, [pc, #8]	; (13d4 <DMX_transmit_enable+0xc>)
    13ca:	7813      	ldrb	r3, [r2, #0]
    13cc:	2104      	movs	r1, #4
    13ce:	430b      	orrs	r3, r1
    13d0:	7013      	strb	r3, [r2, #0]
}
    13d2:	4770      	bx	lr
    13d4:	200018ac 	.word	0x200018ac

000013d8 <configure_DMX>:
{
    13d8:	b530      	push	{r4, r5, lr}
    13da:	b093      	sub	sp, #76	; 0x4c
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    13dc:	2380      	movs	r3, #128	; 0x80
    13de:	05db      	lsls	r3, r3, #23
    13e0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    13e2:	2300      	movs	r3, #0
    13e4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    13e6:	22ff      	movs	r2, #255	; 0xff
    13e8:	4669      	mov	r1, sp
    13ea:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    13ec:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    13ee:	2201      	movs	r2, #1
    13f0:	212c      	movs	r1, #44	; 0x2c
    13f2:	4668      	mov	r0, sp
    13f4:	5442      	strb	r2, [r0, r1]
	config->transmitter_enable = true;
    13f6:	3101      	adds	r1, #1
    13f8:	5442      	strb	r2, [r0, r1]
	config->clock_polarity_inverted = false;
    13fa:	322d      	adds	r2, #45	; 0x2d
    13fc:	5483      	strb	r3, [r0, r2]
	config->use_external_clock = false;
    13fe:	3201      	adds	r2, #1
    1400:	5483      	strb	r3, [r0, r2]
	config->ext_clock_freq   = 0;
    1402:	930c      	str	r3, [sp, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1404:	3205      	adds	r2, #5
    1406:	5483      	strb	r3, [r0, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1408:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    140a:	2200      	movs	r2, #0
    140c:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    140e:	76c2      	strb	r2, [r0, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    1410:	9307      	str	r3, [sp, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    1412:	8403      	strh	r3, [r0, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    1414:	8443      	strh	r3, [r0, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1416:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1418:	2324      	movs	r3, #36	; 0x24
    141a:	54c2      	strb	r2, [r0, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    141c:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    141e:	2313      	movs	r3, #19
    1420:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1422:	3313      	adds	r3, #19
    1424:	54c2      	strb	r2, [r0, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    1426:	3b01      	subs	r3, #1
    1428:	54c2      	strb	r2, [r0, r3]
    config_usart.baudrate    =					250000;
    142a:	4b28      	ldr	r3, [pc, #160]	; (14cc <configure_DMX+0xf4>)
    142c:	930a      	str	r3, [sp, #40]	; 0x28
    config_usart.mux_setting =					USART_RX_1_TX_0_XCK_1;
    142e:	2380      	movs	r3, #128	; 0x80
    1430:	035b      	lsls	r3, r3, #13
    1432:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 =					PINMUX_PB16C_SERCOM5_PAD0;
    1434:	4b26      	ldr	r3, [pc, #152]	; (14d0 <configure_DMX+0xf8>)
    1436:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad1 =					PINMUX_PB17C_SERCOM5_PAD1;
    1438:	4b26      	ldr	r3, [pc, #152]	; (14d4 <configure_DMX+0xfc>)
    143a:	930f      	str	r3, [sp, #60]	; 0x3c
    config_usart.pinmux_pad2 =					PINMUX_UNUSED;
    143c:	2301      	movs	r3, #1
    143e:	425b      	negs	r3, r3
    1440:	9310      	str	r3, [sp, #64]	; 0x40
    config_usart.pinmux_pad3 =					PINMUX_UNUSED;
    1442:	9311      	str	r3, [sp, #68]	; 0x44
    config_usart.stopbits =						USART_STOPBITS_2;
    1444:	3341      	adds	r3, #65	; 0x41
    1446:	7283      	strb	r3, [r0, #10]
    config_usart.generator_source =				GCLK_GENERATOR_3;
    1448:	2203      	movs	r2, #3
    144a:	3b0b      	subs	r3, #11
    144c:	54c2      	strb	r2, [r0, r3]
    while (usart_init(&DMX_instance, DMX_MODULE, &config_usart) != STATUS_OK);
    144e:	4d22      	ldr	r5, [pc, #136]	; (14d8 <configure_DMX+0x100>)
    1450:	4c22      	ldr	r4, [pc, #136]	; (14dc <configure_DMX+0x104>)
    1452:	466a      	mov	r2, sp
    1454:	4922      	ldr	r1, [pc, #136]	; (14e0 <configure_DMX+0x108>)
    1456:	0028      	movs	r0, r5
    1458:	47a0      	blx	r4
    145a:	2800      	cmp	r0, #0
    145c:	d1f9      	bne.n	1452 <configure_DMX+0x7a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    145e:	4d1e      	ldr	r5, [pc, #120]	; (14d8 <configure_DMX+0x100>)
    1460:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1462:	0020      	movs	r0, r4
    1464:	4b1f      	ldr	r3, [pc, #124]	; (14e4 <configure_DMX+0x10c>)
    1466:	4798      	blx	r3
    1468:	231f      	movs	r3, #31
    146a:	4018      	ands	r0, r3
    146c:	3b1e      	subs	r3, #30
    146e:	4083      	lsls	r3, r0
    1470:	4a1d      	ldr	r2, [pc, #116]	; (14e8 <configure_DMX+0x110>)
    1472:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1474:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1476:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1478:	2b00      	cmp	r3, #0
    147a:	d1fc      	bne.n	1476 <configure_DMX+0x9e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    147c:	6823      	ldr	r3, [r4, #0]
    147e:	2202      	movs	r2, #2
    1480:	4313      	orrs	r3, r2
    1482:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1484:	4b14      	ldr	r3, [pc, #80]	; (14d8 <configure_DMX+0x100>)
    1486:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    1488:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    148a:	2a00      	cmp	r2, #0
    148c:	d1fc      	bne.n	1488 <configure_DMX+0xb0>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    148e:	6859      	ldr	r1, [r3, #4]
    1490:	2280      	movs	r2, #128	; 0x80
    1492:	0252      	lsls	r2, r2, #9
    1494:	430a      	orrs	r2, r1
    1496:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    1498:	2101      	movs	r1, #1
    149a:	4a0f      	ldr	r2, [pc, #60]	; (14d8 <configure_DMX+0x100>)
    149c:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    149e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    14a0:	2a00      	cmp	r2, #0
    14a2:	d1fc      	bne.n	149e <configure_DMX+0xc6>
    delay_ms(1);
    14a4:	2000      	movs	r0, #0
    14a6:	4b11      	ldr	r3, [pc, #68]	; (14ec <configure_DMX+0x114>)
    14a8:	4798      	blx	r3
    14aa:	0002      	movs	r2, r0
    14ac:	2300      	movs	r3, #0
    14ae:	4810      	ldr	r0, [pc, #64]	; (14f0 <configure_DMX+0x118>)
    14b0:	2100      	movs	r1, #0
    14b2:	1880      	adds	r0, r0, r2
    14b4:	4159      	adcs	r1, r3
    14b6:	4a0f      	ldr	r2, [pc, #60]	; (14f4 <configure_DMX+0x11c>)
    14b8:	2300      	movs	r3, #0
    14ba:	4c0f      	ldr	r4, [pc, #60]	; (14f8 <configure_DMX+0x120>)
    14bc:	47a0      	blx	r4
    14be:	4b0f      	ldr	r3, [pc, #60]	; (14fc <configure_DMX+0x124>)
    14c0:	4798      	blx	r3
    DMX_transmit_enable();
    14c2:	4b0f      	ldr	r3, [pc, #60]	; (1500 <configure_DMX+0x128>)
    14c4:	4798      	blx	r3
}
    14c6:	b013      	add	sp, #76	; 0x4c
    14c8:	bd30      	pop	{r4, r5, pc}
    14ca:	46c0      	nop			; (mov r8, r8)
    14cc:	0003d090 	.word	0x0003d090
    14d0:	00300002 	.word	0x00300002
    14d4:	00310002 	.word	0x00310002
    14d8:	200018b0 	.word	0x200018b0
    14dc:	000021e9 	.word	0x000021e9
    14e0:	42001800 	.word	0x42001800
    14e4:	00002861 	.word	0x00002861
    14e8:	e000e100 	.word	0xe000e100
    14ec:	00003c95 	.word	0x00003c95
    14f0:	00001b57 	.word	0x00001b57
    14f4:	00001b58 	.word	0x00001b58
    14f8:	00004c8d 	.word	0x00004c8d
    14fc:	20000001 	.word	0x20000001
    1500:	000013c9 	.word	0x000013c9

00001504 <DMX_change_baudrate>:
    /* usart_register_callback(&DMX_instance, DMX_transmit_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
     usart_enable_callback(&DMX_instance, USART_CALLBACK_BUFFER_TRANSMITTED);*/
}

void DMX_change_baudrate(uint32_t baud)
{
    1504:	b510      	push	{r4, lr}
    float part = 1.0 - 16.0 * baud / 48000000;
    1506:	4b22      	ldr	r3, [pc, #136]	; (1590 <DMX_change_baudrate+0x8c>)
    1508:	4798      	blx	r3
    150a:	2200      	movs	r2, #0
    150c:	4b21      	ldr	r3, [pc, #132]	; (1594 <DMX_change_baudrate+0x90>)
    150e:	4c22      	ldr	r4, [pc, #136]	; (1598 <DMX_change_baudrate+0x94>)
    1510:	47a0      	blx	r4
    1512:	2200      	movs	r2, #0
    1514:	4b21      	ldr	r3, [pc, #132]	; (159c <DMX_change_baudrate+0x98>)
    1516:	4c22      	ldr	r4, [pc, #136]	; (15a0 <DMX_change_baudrate+0x9c>)
    1518:	47a0      	blx	r4
    151a:	0002      	movs	r2, r0
    151c:	000b      	movs	r3, r1
    151e:	2000      	movs	r0, #0
    1520:	4920      	ldr	r1, [pc, #128]	; (15a4 <DMX_change_baudrate+0xa0>)
    1522:	4c21      	ldr	r4, [pc, #132]	; (15a8 <DMX_change_baudrate+0xa4>)
    1524:	47a0      	blx	r4
    1526:	4b21      	ldr	r3, [pc, #132]	; (15ac <DMX_change_baudrate+0xa8>)
    1528:	4798      	blx	r3
    uint16_t baudrate = (uint16_t)(65536 * part);
    152a:	218f      	movs	r1, #143	; 0x8f
    152c:	05c9      	lsls	r1, r1, #23
    152e:	4b20      	ldr	r3, [pc, #128]	; (15b0 <DMX_change_baudrate+0xac>)
    1530:	4798      	blx	r3
    1532:	4b20      	ldr	r3, [pc, #128]	; (15b4 <DMX_change_baudrate+0xb0>)
    1534:	4798      	blx	r3
    1536:	b280      	uxth	r0, r0

    if(baudrate == DMX_MODULE->USART.BAUD.reg)return;
    1538:	4b1f      	ldr	r3, [pc, #124]	; (15b8 <DMX_change_baudrate+0xb4>)
    153a:	899b      	ldrh	r3, [r3, #12]
    153c:	b29b      	uxth	r3, r3
    153e:	4298      	cmp	r0, r3
    1540:	d024      	beq.n	158c <DMX_change_baudrate+0x88>

    DMX_MODULE->USART.CTRLA.reg &= ~(1 << SERCOM_USART_CTRLA_ENABLE_Pos);
    1542:	4b1d      	ldr	r3, [pc, #116]	; (15b8 <DMX_change_baudrate+0xb4>)
    1544:	681a      	ldr	r2, [r3, #0]
    1546:	2102      	movs	r1, #2
    1548:	438a      	bics	r2, r1
    154a:	601a      	str	r2, [r3, #0]
    DMX_MODULE->USART.CTRLB.bit.TXEN = 0;
    154c:	685a      	ldr	r2, [r3, #4]
    154e:	491b      	ldr	r1, [pc, #108]	; (15bc <DMX_change_baudrate+0xb8>)
    1550:	400a      	ands	r2, r1
    1552:	605a      	str	r2, [r3, #4]
    DMX_MODULE->USART.CTRLB.bit.RXEN = 0;
    1554:	685a      	ldr	r2, [r3, #4]
    1556:	491a      	ldr	r1, [pc, #104]	; (15c0 <DMX_change_baudrate+0xbc>)
    1558:	400a      	ands	r2, r1
    155a:	605a      	str	r2, [r3, #4]
    while(DMX_MODULE->USART.SYNCBUSY.reg);
    155c:	001a      	movs	r2, r3
    155e:	69d3      	ldr	r3, [r2, #28]
    1560:	2b00      	cmp	r3, #0
    1562:	d1fc      	bne.n	155e <DMX_change_baudrate+0x5a>

    DMX_MODULE->USART.BAUD.reg = baudrate;
    1564:	4b14      	ldr	r3, [pc, #80]	; (15b8 <DMX_change_baudrate+0xb4>)
    1566:	8198      	strh	r0, [r3, #12]
    DMX_MODULE->USART.CTRLB.bit.TXEN = 1;
    1568:	6859      	ldr	r1, [r3, #4]
    156a:	2280      	movs	r2, #128	; 0x80
    156c:	0252      	lsls	r2, r2, #9
    156e:	430a      	orrs	r2, r1
    1570:	605a      	str	r2, [r3, #4]
    DMX_MODULE->USART.CTRLB.bit.RXEN = 1;
    1572:	6859      	ldr	r1, [r3, #4]
    1574:	2280      	movs	r2, #128	; 0x80
    1576:	0292      	lsls	r2, r2, #10
    1578:	430a      	orrs	r2, r1
    157a:	605a      	str	r2, [r3, #4]
    DMX_MODULE->USART.CTRLA.reg |= (1 << SERCOM_USART_CTRLA_ENABLE_Pos);
    157c:	681a      	ldr	r2, [r3, #0]
    157e:	2102      	movs	r1, #2
    1580:	430a      	orrs	r2, r1
    1582:	601a      	str	r2, [r3, #0]
    while(DMX_MODULE->USART.SYNCBUSY.reg);
    1584:	001a      	movs	r2, r3
    1586:	69d3      	ldr	r3, [r2, #28]
    1588:	2b00      	cmp	r3, #0
    158a:	d1fc      	bne.n	1586 <DMX_change_baudrate+0x82>

    158c:	bd10      	pop	{r4, pc}
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	00006eb9 	.word	0x00006eb9
    1594:	40300000 	.word	0x40300000
    1598:	0000638d 	.word	0x0000638d
    159c:	4186e360 	.word	0x4186e360
    15a0:	00005d25 	.word	0x00005d25
    15a4:	3ff00000 	.word	0x3ff00000
    15a8:	0000688d 	.word	0x0000688d
    15ac:	00006fcd 	.word	0x00006fcd
    15b0:	00005021 	.word	0x00005021
    15b4:	00004d21 	.word	0x00004d21
    15b8:	42001800 	.word	0x42001800
    15bc:	fffeffff 	.word	0xfffeffff
    15c0:	fffdffff 	.word	0xfffdffff

000015c4 <DMX_SendMessage>:
{
    15c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15c6:	b083      	sub	sp, #12
    15c8:	0004      	movs	r4, r0
    15ca:	000d      	movs	r5, r1
		port_base->OUTSET.reg = pin_mask;
    15cc:	2280      	movs	r2, #128	; 0x80
    15ce:	0352      	lsls	r2, r2, #13
    15d0:	2382      	movs	r3, #130	; 0x82
    15d2:	05db      	lsls	r3, r3, #23
    15d4:	619a      	str	r2, [r3, #24]
    uint8_t null_var =0;
    15d6:	2200      	movs	r2, #0
    15d8:	466b      	mov	r3, sp
    15da:	71da      	strb	r2, [r3, #7]
    DMX_change_baudrate(100000);
    15dc:	480f      	ldr	r0, [pc, #60]	; (161c <DMX_SendMessage+0x58>)
    15de:	4b10      	ldr	r3, [pc, #64]	; (1620 <DMX_SendMessage+0x5c>)
    15e0:	4798      	blx	r3
    while(usart_write_buffer_job(&DMX_instance, &null_var, 1)!=STATUS_OK);
    15e2:	4e10      	ldr	r6, [pc, #64]	; (1624 <DMX_SendMessage+0x60>)
    15e4:	4f10      	ldr	r7, [pc, #64]	; (1628 <DMX_SendMessage+0x64>)
    15e6:	2201      	movs	r2, #1
    15e8:	466b      	mov	r3, sp
    15ea:	1dd9      	adds	r1, r3, #7
    15ec:	0030      	movs	r0, r6
    15ee:	47b8      	blx	r7
    15f0:	2800      	cmp	r0, #0
    15f2:	d1f8      	bne.n	15e6 <DMX_SendMessage+0x22>
    DMX_change_baudrate(250000);
    15f4:	480d      	ldr	r0, [pc, #52]	; (162c <DMX_SendMessage+0x68>)
    15f6:	4b0a      	ldr	r3, [pc, #40]	; (1620 <DMX_SendMessage+0x5c>)
    15f8:	4798      	blx	r3
    while(usart_write_buffer_job(&DMX_instance, &null_var, 1)!=STATUS_OK);
    15fa:	4e0a      	ldr	r6, [pc, #40]	; (1624 <DMX_SendMessage+0x60>)
    15fc:	4f0a      	ldr	r7, [pc, #40]	; (1628 <DMX_SendMessage+0x64>)
    15fe:	2201      	movs	r2, #1
    1600:	466b      	mov	r3, sp
    1602:	1dd9      	adds	r1, r3, #7
    1604:	0030      	movs	r0, r6
    1606:	47b8      	blx	r7
    1608:	2800      	cmp	r0, #0
    160a:	d1f8      	bne.n	15fe <DMX_SendMessage+0x3a>
    usart_write_buffer_job(&DMX_instance, p_string, length);
    160c:	002a      	movs	r2, r5
    160e:	0021      	movs	r1, r4
    1610:	4804      	ldr	r0, [pc, #16]	; (1624 <DMX_SendMessage+0x60>)
    1612:	4b05      	ldr	r3, [pc, #20]	; (1628 <DMX_SendMessage+0x64>)
    1614:	4798      	blx	r3
}
    1616:	b003      	add	sp, #12
    1618:	bdf0      	pop	{r4, r5, r6, r7, pc}
    161a:	46c0      	nop			; (mov r8, r8)
    161c:	000186a0 	.word	0x000186a0
    1620:	00001505 	.word	0x00001505
    1624:	200018b0 	.word	0x200018b0
    1628:	00002649 	.word	0x00002649
    162c:	0003d090 	.word	0x0003d090

00001630 <dac_is_syncing>:
		struct dac_module *const dev_inst)
{
	/* Sanity check arguments */
	Assert(dev_inst);

	Dac *const dac_module = dev_inst->hw;
    1630:	6803      	ldr	r3, [r0, #0]

#if (SAMC21)
	if (dac_module->SYNCBUSY.reg) {
    1632:	6918      	ldr	r0, [r3, #16]
    1634:	1e43      	subs	r3, r0, #1
    1636:	4198      	sbcs	r0, r3
    1638:	b2c0      	uxtb	r0, r0
#endif
		return true;
	}

	return false;
}
    163a:	4770      	bx	lr

0000163c <dac_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->reference      = DAC_REFERENCE_INT1V;
    163c:	2300      	movs	r3, #0
    163e:	7003      	strb	r3, [r0, #0]
	config->output         = DAC_OUTPUT_EXTERNAL;
    1640:	2201      	movs	r2, #1
    1642:	7042      	strb	r2, [r0, #1]
	config->left_adjust    = false;
    1644:	7083      	strb	r3, [r0, #2]
#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	config->databuf_protection_bypass = false;
#endif
	config->voltage_pump_disable = false;
    1646:	7103      	strb	r3, [r0, #4]
	config->clock_source   = GCLK_GENERATOR_0;
    1648:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby = false;
    164a:	7143      	strb	r3, [r0, #5]
#if (SAMC21)
	config->dither_mode    = false;
    164c:	7183      	strb	r3, [r0, #6]
#endif
}
    164e:	4770      	bx	lr

00001650 <dac_init>:
 */
enum status_code dac_init(
		struct dac_module *const module_inst,
		Dac *const module,
		struct dac_config *const config)
{
    1650:	b5f0      	push	{r4, r5, r6, r7, lr}
    1652:	46c6      	mov	lr, r8
    1654:	b500      	push	{lr}
    1656:	b082      	sub	sp, #8
    1658:	0005      	movs	r5, r0
    165a:	0014      	movs	r4, r2
	Assert(module_inst);
	Assert(module);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = module;
    165c:	6001      	str	r1, [r0, #0]
			MCLK->APBCMASK.reg |= mask;
    165e:	4a28      	ldr	r2, [pc, #160]	; (1700 <dac_init+0xb0>)
    1660:	69d0      	ldr	r0, [r2, #28]
    1662:	2380      	movs	r3, #128	; 0x80
    1664:	039b      	lsls	r3, r3, #14
    1666:	4303      	orrs	r3, r0
    1668:	61d3      	str	r3, [r2, #28]
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_DAC);
#endif

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
    166a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    166c:	201c      	movs	r0, #28
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
    166e:	079b      	lsls	r3, r3, #30
    1670:	d503      	bpl.n	167a <dac_init+0x2a>

	_dac_instances[0] = module_inst;
#endif

	return STATUS_OK;
}
    1672:	b002      	add	sp, #8
    1674:	bc04      	pop	{r2}
    1676:	4690      	mov	r8, r2
    1678:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
    167a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_BUSY;
    167c:	3817      	subs	r0, #23
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
    167e:	07db      	lsls	r3, r3, #31
    1680:	d4f7      	bmi.n	1672 <dac_init+0x22>
	gclk_chan_conf.source_generator = config->clock_source;
    1682:	a901      	add	r1, sp, #4
    1684:	78e3      	ldrb	r3, [r4, #3]
    1686:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(DAC_GCLK_ID, &gclk_chan_conf);
    1688:	301f      	adds	r0, #31
    168a:	4b1e      	ldr	r3, [pc, #120]	; (1704 <dac_init+0xb4>)
    168c:	4798      	blx	r3
	system_gclk_chan_enable(DAC_GCLK_ID);
    168e:	2024      	movs	r0, #36	; 0x24
    1690:	4b1d      	ldr	r3, [pc, #116]	; (1708 <dac_init+0xb8>)
    1692:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1694:	2600      	movs	r6, #0
    1696:	466b      	mov	r3, sp
    1698:	705e      	strb	r6, [r3, #1]
	config->powersave    = false;
    169a:	70de      	strb	r6, [r3, #3]
	pin_conf.mux_position = MUX_PA02B_DAC_VOUT;
    169c:	2301      	movs	r3, #1
    169e:	466a      	mov	r2, sp
    16a0:	7013      	strb	r3, [r2, #0]
	pin_conf.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    16a2:	7096      	strb	r6, [r2, #2]
	system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT, &pin_conf);
    16a4:	4669      	mov	r1, sp
    16a6:	2002      	movs	r0, #2
    16a8:	4b18      	ldr	r3, [pc, #96]	; (170c <dac_init+0xbc>)
    16aa:	4798      	blx	r3
	Dac *const dac_module = module_inst->hw;
    16ac:	682f      	ldr	r7, [r5, #0]
	module_inst->output = config->output;
    16ae:	7863      	ldrb	r3, [r4, #1]
    16b0:	712b      	strb	r3, [r5, #4]
	module_inst->start_on_event = false;
    16b2:	71ae      	strb	r6, [r5, #6]
	if (config->run_in_standby) {
    16b4:	7963      	ldrb	r3, [r4, #5]
		new_ctrla |= DAC_CTRLA_RUNSTDBY;
    16b6:	1e5a      	subs	r2, r3, #1
    16b8:	4193      	sbcs	r3, r2
    16ba:	019b      	lsls	r3, r3, #6
	new_ctrlb |= config->reference;
    16bc:	7822      	ldrb	r2, [r4, #0]
    16be:	4690      	mov	r8, r2
	if (config->left_adjust) {
    16c0:	78a2      	ldrb	r2, [r4, #2]
    16c2:	2a00      	cmp	r2, #0
    16c4:	d003      	beq.n	16ce <dac_init+0x7e>
    16c6:	2204      	movs	r2, #4
    16c8:	4641      	mov	r1, r8
    16ca:	4311      	orrs	r1, r2
    16cc:	4688      	mov	r8, r1
	if (config->voltage_pump_disable) {
    16ce:	7922      	ldrb	r2, [r4, #4]
    16d0:	2a00      	cmp	r2, #0
    16d2:	d003      	beq.n	16dc <dac_init+0x8c>
    16d4:	2208      	movs	r2, #8
    16d6:	4641      	mov	r1, r8
    16d8:	4311      	orrs	r1, r2
    16da:	4688      	mov	r8, r1
	dac_module->CTRLA.reg = new_ctrla;
    16dc:	b2db      	uxtb	r3, r3
    16de:	703b      	strb	r3, [r7, #0]
	while (dac_is_syncing(module_inst)) {
    16e0:	4e0b      	ldr	r6, [pc, #44]	; (1710 <dac_init+0xc0>)
    16e2:	0028      	movs	r0, r5
    16e4:	47b0      	blx	r6
    16e6:	2800      	cmp	r0, #0
    16e8:	d1fb      	bne.n	16e2 <dac_init+0x92>
	dac_module->CTRLB.reg = new_ctrlb;
    16ea:	4643      	mov	r3, r8
    16ec:	707b      	strb	r3, [r7, #1]
	module_inst->reference = config->reference;
    16ee:	7823      	ldrb	r3, [r4, #0]
    16f0:	716b      	strb	r3, [r5, #5]
		module_inst->callback[i] = NULL;
    16f2:	2300      	movs	r3, #0
    16f4:	616b      	str	r3, [r5, #20]
    16f6:	61ab      	str	r3, [r5, #24]
    16f8:	61eb      	str	r3, [r5, #28]
	_dac_instances[0] = module_inst;
    16fa:	4b06      	ldr	r3, [pc, #24]	; (1714 <dac_init+0xc4>)
    16fc:	601d      	str	r5, [r3, #0]
	return STATUS_OK;
    16fe:	e7b8      	b.n	1672 <dac_init+0x22>
    1700:	40000800 	.word	0x40000800
    1704:	00003d71 	.word	0x00003d71
    1708:	00003d01 	.word	0x00003d01
    170c:	00003e6d 	.word	0x00003e6d
    1710:	00001631 	.word	0x00001631
    1714:	200018e4 	.word	0x200018e4

00001718 <dac_enable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_enable(
		struct dac_module *const module_inst)
{
    1718:	b570      	push	{r4, r5, r6, lr}
    171a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
    171c:	6805      	ldr	r5, [r0, #0]

	/* Enable selected output */
	dac_module->CTRLB.reg |= module_inst->output;
    171e:	786b      	ldrb	r3, [r5, #1]
    1720:	7902      	ldrb	r2, [r0, #4]
    1722:	4313      	orrs	r3, r2
    1724:	706b      	strb	r3, [r5, #1]

	while (dac_is_syncing(module_inst)) {
    1726:	4e0c      	ldr	r6, [pc, #48]	; (1758 <dac_enable+0x40>)
    1728:	0020      	movs	r0, r4
    172a:	47b0      	blx	r6
    172c:	2800      	cmp	r0, #0
    172e:	d1fb      	bne.n	1728 <dac_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	dac_module->CTRLA.reg |= DAC_CTRLA_ENABLE;
    1730:	782b      	ldrb	r3, [r5, #0]
    1732:	2202      	movs	r2, #2
    1734:	4313      	orrs	r3, r2
    1736:	702b      	strb	r3, [r5, #0]

	/* Enable internal bandgap reference if selected in the configuration */
	if (module_inst->reference == DAC_REFERENCE_INT1V) {
    1738:	7963      	ldrb	r3, [r4, #5]
    173a:	2b00      	cmp	r3, #0
    173c:	d104      	bne.n	1748 <dac_enable+0x30>
    173e:	4a07      	ldr	r2, [pc, #28]	; (175c <dac_enable+0x44>)
    1740:	69d3      	ldr	r3, [r2, #28]
    1742:	2104      	movs	r1, #4
    1744:	430b      	orrs	r3, r1
    1746:	61d3      	str	r3, [r2, #28]
#if (SAMC21)
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
	}

	if(dac_module->CTRLA.reg & DAC_CTRLA_ENABLE) {
    1748:	782b      	ldrb	r3, [r5, #0]
    174a:	079b      	lsls	r3, r3, #30
    174c:	d503      	bpl.n	1756 <dac_enable+0x3e>
		while(! (dac_module->STATUS.reg & DAC_STATUS_READY)) {
    174e:	2201      	movs	r2, #1
    1750:	79eb      	ldrb	r3, [r5, #7]
    1752:	4213      	tst	r3, r2
    1754:	d0fc      	beq.n	1750 <dac_enable+0x38>
#else
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#endif
}
    1756:	bd70      	pop	{r4, r5, r6, pc}
    1758:	00001631 	.word	0x00001631
    175c:	40001800 	.word	0x40001800

00001760 <dac_chan_get_config_defaults>:
void dac_chan_get_config_defaults(
		struct dac_chan_config *const config)
{
	/* Sanity check arguments */
	Assert(config);
}
    1760:	4770      	bx	lr

00001762 <dac_chan_set_config>:
		const enum dac_channel channel,
		struct dac_chan_config *const config)
{
	/* No channel support yet */
	UNUSED(channel);
}
    1762:	4770      	bx	lr

00001764 <dac_chan_enable>:
		struct dac_module *const module_inst,
		enum dac_channel channel)
{
	/* No channel support yet */
	UNUSED(channel);
}
    1764:	4770      	bx	lr
	...

00001768 <dac_chan_write>:
 */
enum status_code dac_chan_write(
		struct dac_module *const module_inst,
		enum dac_channel channel,
		const uint16_t data)
{
    1768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    176a:	0004      	movs	r4, r0
    176c:	0017      	movs	r7, r2
	Assert(module_inst->hw);

	/* No channel support yet */
	UNUSED(channel);

	Dac *const dac_module = module_inst->hw;
    176e:	6806      	ldr	r6, [r0, #0]

	/* Wait until the synchronization is complete */
	while (dac_is_syncing(module_inst)) {
    1770:	4d06      	ldr	r5, [pc, #24]	; (178c <dac_chan_write+0x24>)
    1772:	0020      	movs	r0, r4
    1774:	47a8      	blx	r5
    1776:	2800      	cmp	r0, #0
    1778:	d1fb      	bne.n	1772 <dac_chan_write+0xa>
	};

	if (module_inst->start_on_event) {
    177a:	79a3      	ldrb	r3, [r4, #6]
    177c:	2b00      	cmp	r3, #0
    177e:	d102      	bne.n	1786 <dac_chan_write+0x1e>
		/* Write the new value to the buffered DAC data register */
		dac_module->DATABUF.reg = data;
	} else {
		/* Write the new value to the DAC data register */
		dac_module->DATA.reg = data;
    1780:	8137      	strh	r7, [r6, #8]
	}

	return STATUS_OK;
}
    1782:	2000      	movs	r0, #0
    1784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dac_module->DATABUF.reg = data;
    1786:	81b7      	strh	r7, [r6, #12]
    1788:	e7fb      	b.n	1782 <dac_chan_write+0x1a>
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	00001631 	.word	0x00001631

00001790 <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
    1790:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
    1792:	4b27      	ldr	r3, [pc, #156]	; (1830 <DAC_Handler+0xa0>)
    1794:	681c      	ldr	r4, [r3, #0]
	Dac *const dac_hw = module->hw;
    1796:	6825      	ldr	r5, [r4, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
    1798:	79ab      	ldrb	r3, [r5, #6]
    179a:	07db      	lsls	r3, r3, #31
    179c:	d507      	bpl.n	17ae <DAC_Handler+0x1e>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
    179e:	2301      	movs	r3, #1
    17a0:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
    17a2:	0023      	movs	r3, r4
    17a4:	3314      	adds	r3, #20
    17a6:	d002      	beq.n	17ae <DAC_Handler+0x1e>
    17a8:	7c63      	ldrb	r3, [r4, #17]
    17aa:	2b00      	cmp	r3, #0
    17ac:	d131      	bne.n	1812 <DAC_Handler+0x82>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
    17ae:	79ab      	ldrb	r3, [r5, #6]
    17b0:	079b      	lsls	r3, r3, #30
    17b2:	d538      	bpl.n	1826 <DAC_Handler+0x96>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    17b4:	2302      	movs	r3, #2
    17b6:	71ab      	strb	r3, [r5, #6]
		if (module->remaining_conversions) {
    17b8:	89a3      	ldrh	r3, [r4, #12]
    17ba:	b29b      	uxth	r3, r3
    17bc:	2b00      	cmp	r3, #0
    17be:	d02c      	beq.n	181a <DAC_Handler+0x8a>
				module->job_buffer[module->transferred_conversions++];
    17c0:	89e3      	ldrh	r3, [r4, #14]
    17c2:	b29b      	uxth	r3, r3
    17c4:	1c5a      	adds	r2, r3, #1
    17c6:	b292      	uxth	r2, r2
    17c8:	81e2      	strh	r2, [r4, #14]
    17ca:	005b      	lsls	r3, r3, #1
    17cc:	68a2      	ldr	r2, [r4, #8]
    17ce:	4694      	mov	ip, r2
    17d0:	4463      	add	r3, ip
    17d2:	881b      	ldrh	r3, [r3, #0]
    17d4:	b29b      	uxth	r3, r3
			dac_hw->DATABUF.reg =
    17d6:	81ab      	strh	r3, [r5, #12]
			module->remaining_conversions --;
    17d8:	89a3      	ldrh	r3, [r4, #12]
    17da:	3b01      	subs	r3, #1
    17dc:	b29b      	uxth	r3, r3
    17de:	81a3      	strh	r3, [r4, #12]
			if (module->remaining_conversions == 0) {
    17e0:	89a3      	ldrh	r3, [r4, #12]
    17e2:	b29b      	uxth	r3, r3
    17e4:	2b00      	cmp	r3, #0
    17e6:	d118      	bne.n	181a <DAC_Handler+0x8a>
				module->job_status = STATUS_OK;
    17e8:	2200      	movs	r2, #0
    17ea:	3320      	adds	r3, #32
    17ec:	54e2      	strb	r2, [r4, r3]
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
    17ee:	3b1e      	subs	r3, #30
    17f0:	712b      	strb	r3, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    17f2:	71ab      	strb	r3, [r5, #6]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    17f4:	2180      	movs	r1, #128	; 0x80
    17f6:	0549      	lsls	r1, r1, #21
    17f8:	337e      	adds	r3, #126	; 0x7e
    17fa:	4a0e      	ldr	r2, [pc, #56]	; (1834 <DAC_Handler+0xa4>)
    17fc:	50d1      	str	r1, [r2, r3]
				if ((module->callback) &&
    17fe:	0023      	movs	r3, r4
    1800:	3314      	adds	r3, #20
    1802:	d010      	beq.n	1826 <DAC_Handler+0x96>
    1804:	7ca3      	ldrb	r3, [r4, #18]
    1806:	2b00      	cmp	r3, #0
    1808:	d00a      	beq.n	1820 <DAC_Handler+0x90>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
    180a:	2000      	movs	r0, #0
    180c:	69e3      	ldr	r3, [r4, #28]
    180e:	4798      	blx	r3
    1810:	e006      	b.n	1820 <DAC_Handler+0x90>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
    1812:	2000      	movs	r0, #0
    1814:	69a3      	ldr	r3, [r4, #24]
    1816:	4798      	blx	r3
    1818:	e7c9      	b.n	17ae <DAC_Handler+0x1e>
		if ((module->callback) &&
    181a:	0023      	movs	r3, r4
    181c:	3314      	adds	r3, #20
    181e:	d002      	beq.n	1826 <DAC_Handler+0x96>
    1820:	7c23      	ldrb	r3, [r4, #16]
    1822:	2b00      	cmp	r3, #0
    1824:	d100      	bne.n	1828 <DAC_Handler+0x98>
	_dac_interrupt_handler(0);
}
    1826:	bd70      	pop	{r4, r5, r6, pc}
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
    1828:	6963      	ldr	r3, [r4, #20]
    182a:	2000      	movs	r0, #0
    182c:	4798      	blx	r3
}
    182e:	e7fa      	b.n	1826 <DAC_Handler+0x96>
    1830:	200018e4 	.word	0x200018e4
    1834:	e000e100 	.word	0xe000e100

00001838 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1838:	b5f0      	push	{r4, r5, r6, r7, lr}
    183a:	46de      	mov	lr, fp
    183c:	4657      	mov	r7, sl
    183e:	464e      	mov	r6, r9
    1840:	4645      	mov	r5, r8
    1842:	b5e0      	push	{r5, r6, r7, lr}
    1844:	b087      	sub	sp, #28
    1846:	4680      	mov	r8, r0
    1848:	9104      	str	r1, [sp, #16]
    184a:	0016      	movs	r6, r2
    184c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    184e:	2200      	movs	r2, #0
    1850:	2300      	movs	r3, #0
    1852:	2100      	movs	r1, #0
    1854:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1856:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1858:	2001      	movs	r0, #1
    185a:	0021      	movs	r1, r4
    185c:	9600      	str	r6, [sp, #0]
    185e:	9701      	str	r7, [sp, #4]
    1860:	465c      	mov	r4, fp
    1862:	9403      	str	r4, [sp, #12]
    1864:	4644      	mov	r4, r8
    1866:	9405      	str	r4, [sp, #20]
    1868:	e013      	b.n	1892 <long_division+0x5a>
    186a:	2420      	movs	r4, #32
    186c:	1a64      	subs	r4, r4, r1
    186e:	0005      	movs	r5, r0
    1870:	40e5      	lsrs	r5, r4
    1872:	46a8      	mov	r8, r5
    1874:	e014      	b.n	18a0 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1876:	9c00      	ldr	r4, [sp, #0]
    1878:	9d01      	ldr	r5, [sp, #4]
    187a:	1b12      	subs	r2, r2, r4
    187c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    187e:	465c      	mov	r4, fp
    1880:	464d      	mov	r5, r9
    1882:	432c      	orrs	r4, r5
    1884:	46a3      	mov	fp, r4
    1886:	9c03      	ldr	r4, [sp, #12]
    1888:	4645      	mov	r5, r8
    188a:	432c      	orrs	r4, r5
    188c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    188e:	3901      	subs	r1, #1
    1890:	d325      	bcc.n	18de <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1892:	2420      	movs	r4, #32
    1894:	4264      	negs	r4, r4
    1896:	190c      	adds	r4, r1, r4
    1898:	d4e7      	bmi.n	186a <long_division+0x32>
    189a:	0005      	movs	r5, r0
    189c:	40a5      	lsls	r5, r4
    189e:	46a8      	mov	r8, r5
    18a0:	0004      	movs	r4, r0
    18a2:	408c      	lsls	r4, r1
    18a4:	46a1      	mov	r9, r4
		r = r << 1;
    18a6:	1892      	adds	r2, r2, r2
    18a8:	415b      	adcs	r3, r3
    18aa:	0014      	movs	r4, r2
    18ac:	001d      	movs	r5, r3
		if (n & bit_shift) {
    18ae:	9e05      	ldr	r6, [sp, #20]
    18b0:	464f      	mov	r7, r9
    18b2:	403e      	ands	r6, r7
    18b4:	46b4      	mov	ip, r6
    18b6:	9e04      	ldr	r6, [sp, #16]
    18b8:	4647      	mov	r7, r8
    18ba:	403e      	ands	r6, r7
    18bc:	46b2      	mov	sl, r6
    18be:	4666      	mov	r6, ip
    18c0:	4657      	mov	r7, sl
    18c2:	433e      	orrs	r6, r7
    18c4:	d003      	beq.n	18ce <long_division+0x96>
			r |= 0x01;
    18c6:	0006      	movs	r6, r0
    18c8:	4326      	orrs	r6, r4
    18ca:	0032      	movs	r2, r6
    18cc:	002b      	movs	r3, r5
		if (r >= d) {
    18ce:	9c00      	ldr	r4, [sp, #0]
    18d0:	9d01      	ldr	r5, [sp, #4]
    18d2:	429d      	cmp	r5, r3
    18d4:	d8db      	bhi.n	188e <long_division+0x56>
    18d6:	d1ce      	bne.n	1876 <long_division+0x3e>
    18d8:	4294      	cmp	r4, r2
    18da:	d8d8      	bhi.n	188e <long_division+0x56>
    18dc:	e7cb      	b.n	1876 <long_division+0x3e>
    18de:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    18e0:	4658      	mov	r0, fp
    18e2:	0019      	movs	r1, r3
    18e4:	b007      	add	sp, #28
    18e6:	bc3c      	pop	{r2, r3, r4, r5}
    18e8:	4690      	mov	r8, r2
    18ea:	4699      	mov	r9, r3
    18ec:	46a2      	mov	sl, r4
    18ee:	46ab      	mov	fp, r5
    18f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000018f2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    18f2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    18f4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    18f6:	2340      	movs	r3, #64	; 0x40
    18f8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    18fa:	4281      	cmp	r1, r0
    18fc:	d202      	bcs.n	1904 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    18fe:	0018      	movs	r0, r3
    1900:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1902:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1904:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1906:	1c63      	adds	r3, r4, #1
    1908:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    190a:	4288      	cmp	r0, r1
    190c:	d9f9      	bls.n	1902 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    190e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1910:	2cff      	cmp	r4, #255	; 0xff
    1912:	d8f4      	bhi.n	18fe <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1914:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1916:	2300      	movs	r3, #0
    1918:	e7f1      	b.n	18fe <_sercom_get_sync_baud_val+0xc>
	...

0000191c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    191c:	b5f0      	push	{r4, r5, r6, r7, lr}
    191e:	b083      	sub	sp, #12
    1920:	000f      	movs	r7, r1
    1922:	0016      	movs	r6, r2
    1924:	aa08      	add	r2, sp, #32
    1926:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1928:	0004      	movs	r4, r0
    192a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    192c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    192e:	42bc      	cmp	r4, r7
    1930:	d902      	bls.n	1938 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1932:	0010      	movs	r0, r2
    1934:	b003      	add	sp, #12
    1936:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1938:	2b00      	cmp	r3, #0
    193a:	d114      	bne.n	1966 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    193c:	0002      	movs	r2, r0
    193e:	0008      	movs	r0, r1
    1940:	2100      	movs	r1, #0
    1942:	4c19      	ldr	r4, [pc, #100]	; (19a8 <_sercom_get_async_baud_val+0x8c>)
    1944:	47a0      	blx	r4
    1946:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1948:	003a      	movs	r2, r7
    194a:	2300      	movs	r3, #0
    194c:	2000      	movs	r0, #0
    194e:	4c17      	ldr	r4, [pc, #92]	; (19ac <_sercom_get_async_baud_val+0x90>)
    1950:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1952:	2200      	movs	r2, #0
    1954:	2301      	movs	r3, #1
    1956:	1a12      	subs	r2, r2, r0
    1958:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    195a:	0c12      	lsrs	r2, r2, #16
    195c:	041b      	lsls	r3, r3, #16
    195e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1960:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1962:	2200      	movs	r2, #0
    1964:	e7e5      	b.n	1932 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1966:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1968:	2b01      	cmp	r3, #1
    196a:	d1f9      	bne.n	1960 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    196c:	000a      	movs	r2, r1
    196e:	2300      	movs	r3, #0
    1970:	2100      	movs	r1, #0
    1972:	4c0d      	ldr	r4, [pc, #52]	; (19a8 <_sercom_get_async_baud_val+0x8c>)
    1974:	47a0      	blx	r4
    1976:	0002      	movs	r2, r0
    1978:	000b      	movs	r3, r1
    197a:	9200      	str	r2, [sp, #0]
    197c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    197e:	0038      	movs	r0, r7
    1980:	2100      	movs	r1, #0
    1982:	4c0a      	ldr	r4, [pc, #40]	; (19ac <_sercom_get_async_baud_val+0x90>)
    1984:	47a0      	blx	r4
    1986:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1988:	2380      	movs	r3, #128	; 0x80
    198a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    198c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    198e:	4298      	cmp	r0, r3
    1990:	d8cf      	bhi.n	1932 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1992:	0f79      	lsrs	r1, r7, #29
    1994:	00f8      	lsls	r0, r7, #3
    1996:	9a00      	ldr	r2, [sp, #0]
    1998:	9b01      	ldr	r3, [sp, #4]
    199a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    199c:	00ea      	lsls	r2, r5, #3
    199e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    19a0:	b2d2      	uxtb	r2, r2
    19a2:	0352      	lsls	r2, r2, #13
    19a4:	432a      	orrs	r2, r5
    19a6:	e7db      	b.n	1960 <_sercom_get_async_baud_val+0x44>
    19a8:	00004ccd 	.word	0x00004ccd
    19ac:	00001839 	.word	0x00001839

000019b0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    19b0:	b510      	push	{r4, lr}
    19b2:	b082      	sub	sp, #8
    19b4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    19b6:	4b0e      	ldr	r3, [pc, #56]	; (19f0 <sercom_set_gclk_generator+0x40>)
    19b8:	781b      	ldrb	r3, [r3, #0]
    19ba:	2b00      	cmp	r3, #0
    19bc:	d007      	beq.n	19ce <sercom_set_gclk_generator+0x1e>
    19be:	2900      	cmp	r1, #0
    19c0:	d105      	bne.n	19ce <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    19c2:	4b0b      	ldr	r3, [pc, #44]	; (19f0 <sercom_set_gclk_generator+0x40>)
    19c4:	785b      	ldrb	r3, [r3, #1]
    19c6:	4283      	cmp	r3, r0
    19c8:	d010      	beq.n	19ec <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    19ca:	201d      	movs	r0, #29
    19cc:	e00c      	b.n	19e8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    19ce:	a901      	add	r1, sp, #4
    19d0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    19d2:	2012      	movs	r0, #18
    19d4:	4b07      	ldr	r3, [pc, #28]	; (19f4 <sercom_set_gclk_generator+0x44>)
    19d6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    19d8:	2012      	movs	r0, #18
    19da:	4b07      	ldr	r3, [pc, #28]	; (19f8 <sercom_set_gclk_generator+0x48>)
    19dc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    19de:	4b04      	ldr	r3, [pc, #16]	; (19f0 <sercom_set_gclk_generator+0x40>)
    19e0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    19e2:	2201      	movs	r2, #1
    19e4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    19e6:	2000      	movs	r0, #0
}
    19e8:	b002      	add	sp, #8
    19ea:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    19ec:	2000      	movs	r0, #0
    19ee:	e7fb      	b.n	19e8 <sercom_set_gclk_generator+0x38>
    19f0:	200000ac 	.word	0x200000ac
    19f4:	00003d71 	.word	0x00003d71
    19f8:	00003d01 	.word	0x00003d01

000019fc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    19fc:	4b40      	ldr	r3, [pc, #256]	; (1b00 <_sercom_get_default_pad+0x104>)
    19fe:	4298      	cmp	r0, r3
    1a00:	d031      	beq.n	1a66 <_sercom_get_default_pad+0x6a>
    1a02:	d90a      	bls.n	1a1a <_sercom_get_default_pad+0x1e>
    1a04:	4b3f      	ldr	r3, [pc, #252]	; (1b04 <_sercom_get_default_pad+0x108>)
    1a06:	4298      	cmp	r0, r3
    1a08:	d04d      	beq.n	1aa6 <_sercom_get_default_pad+0xaa>
    1a0a:	4b3f      	ldr	r3, [pc, #252]	; (1b08 <_sercom_get_default_pad+0x10c>)
    1a0c:	4298      	cmp	r0, r3
    1a0e:	d05a      	beq.n	1ac6 <_sercom_get_default_pad+0xca>
    1a10:	4b3e      	ldr	r3, [pc, #248]	; (1b0c <_sercom_get_default_pad+0x110>)
    1a12:	4298      	cmp	r0, r3
    1a14:	d037      	beq.n	1a86 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1a16:	2000      	movs	r0, #0
}
    1a18:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1a1a:	4b3d      	ldr	r3, [pc, #244]	; (1b10 <_sercom_get_default_pad+0x114>)
    1a1c:	4298      	cmp	r0, r3
    1a1e:	d00c      	beq.n	1a3a <_sercom_get_default_pad+0x3e>
    1a20:	4b3c      	ldr	r3, [pc, #240]	; (1b14 <_sercom_get_default_pad+0x118>)
    1a22:	4298      	cmp	r0, r3
    1a24:	d1f7      	bne.n	1a16 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a26:	2901      	cmp	r1, #1
    1a28:	d017      	beq.n	1a5a <_sercom_get_default_pad+0x5e>
    1a2a:	2900      	cmp	r1, #0
    1a2c:	d05d      	beq.n	1aea <_sercom_get_default_pad+0xee>
    1a2e:	2902      	cmp	r1, #2
    1a30:	d015      	beq.n	1a5e <_sercom_get_default_pad+0x62>
    1a32:	2903      	cmp	r1, #3
    1a34:	d015      	beq.n	1a62 <_sercom_get_default_pad+0x66>
	return 0;
    1a36:	2000      	movs	r0, #0
    1a38:	e7ee      	b.n	1a18 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a3a:	2901      	cmp	r1, #1
    1a3c:	d007      	beq.n	1a4e <_sercom_get_default_pad+0x52>
    1a3e:	2900      	cmp	r1, #0
    1a40:	d051      	beq.n	1ae6 <_sercom_get_default_pad+0xea>
    1a42:	2902      	cmp	r1, #2
    1a44:	d005      	beq.n	1a52 <_sercom_get_default_pad+0x56>
    1a46:	2903      	cmp	r1, #3
    1a48:	d005      	beq.n	1a56 <_sercom_get_default_pad+0x5a>
	return 0;
    1a4a:	2000      	movs	r0, #0
    1a4c:	e7e4      	b.n	1a18 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a4e:	4832      	ldr	r0, [pc, #200]	; (1b18 <_sercom_get_default_pad+0x11c>)
    1a50:	e7e2      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1a52:	4832      	ldr	r0, [pc, #200]	; (1b1c <_sercom_get_default_pad+0x120>)
    1a54:	e7e0      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1a56:	4832      	ldr	r0, [pc, #200]	; (1b20 <_sercom_get_default_pad+0x124>)
    1a58:	e7de      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1a5a:	4832      	ldr	r0, [pc, #200]	; (1b24 <_sercom_get_default_pad+0x128>)
    1a5c:	e7dc      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1a5e:	4832      	ldr	r0, [pc, #200]	; (1b28 <_sercom_get_default_pad+0x12c>)
    1a60:	e7da      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1a62:	4832      	ldr	r0, [pc, #200]	; (1b2c <_sercom_get_default_pad+0x130>)
    1a64:	e7d8      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1a66:	2901      	cmp	r1, #1
    1a68:	d007      	beq.n	1a7a <_sercom_get_default_pad+0x7e>
    1a6a:	2900      	cmp	r1, #0
    1a6c:	d03f      	beq.n	1aee <_sercom_get_default_pad+0xf2>
    1a6e:	2902      	cmp	r1, #2
    1a70:	d005      	beq.n	1a7e <_sercom_get_default_pad+0x82>
    1a72:	2903      	cmp	r1, #3
    1a74:	d005      	beq.n	1a82 <_sercom_get_default_pad+0x86>
	return 0;
    1a76:	2000      	movs	r0, #0
    1a78:	e7ce      	b.n	1a18 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a7a:	482d      	ldr	r0, [pc, #180]	; (1b30 <_sercom_get_default_pad+0x134>)
    1a7c:	e7cc      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1a7e:	482d      	ldr	r0, [pc, #180]	; (1b34 <_sercom_get_default_pad+0x138>)
    1a80:	e7ca      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1a82:	482d      	ldr	r0, [pc, #180]	; (1b38 <_sercom_get_default_pad+0x13c>)
    1a84:	e7c8      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1a86:	2901      	cmp	r1, #1
    1a88:	d007      	beq.n	1a9a <_sercom_get_default_pad+0x9e>
    1a8a:	2900      	cmp	r1, #0
    1a8c:	d031      	beq.n	1af2 <_sercom_get_default_pad+0xf6>
    1a8e:	2902      	cmp	r1, #2
    1a90:	d005      	beq.n	1a9e <_sercom_get_default_pad+0xa2>
    1a92:	2903      	cmp	r1, #3
    1a94:	d005      	beq.n	1aa2 <_sercom_get_default_pad+0xa6>
	return 0;
    1a96:	2000      	movs	r0, #0
    1a98:	e7be      	b.n	1a18 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1a9a:	4828      	ldr	r0, [pc, #160]	; (1b3c <_sercom_get_default_pad+0x140>)
    1a9c:	e7bc      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1a9e:	4828      	ldr	r0, [pc, #160]	; (1b40 <_sercom_get_default_pad+0x144>)
    1aa0:	e7ba      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1aa2:	4828      	ldr	r0, [pc, #160]	; (1b44 <_sercom_get_default_pad+0x148>)
    1aa4:	e7b8      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1aa6:	2901      	cmp	r1, #1
    1aa8:	d007      	beq.n	1aba <_sercom_get_default_pad+0xbe>
    1aaa:	2900      	cmp	r1, #0
    1aac:	d023      	beq.n	1af6 <_sercom_get_default_pad+0xfa>
    1aae:	2902      	cmp	r1, #2
    1ab0:	d005      	beq.n	1abe <_sercom_get_default_pad+0xc2>
    1ab2:	2903      	cmp	r1, #3
    1ab4:	d005      	beq.n	1ac2 <_sercom_get_default_pad+0xc6>
	return 0;
    1ab6:	2000      	movs	r0, #0
    1ab8:	e7ae      	b.n	1a18 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1aba:	4823      	ldr	r0, [pc, #140]	; (1b48 <_sercom_get_default_pad+0x14c>)
    1abc:	e7ac      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1abe:	4823      	ldr	r0, [pc, #140]	; (1b4c <_sercom_get_default_pad+0x150>)
    1ac0:	e7aa      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1ac2:	4823      	ldr	r0, [pc, #140]	; (1b50 <_sercom_get_default_pad+0x154>)
    1ac4:	e7a8      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1ac6:	2901      	cmp	r1, #1
    1ac8:	d007      	beq.n	1ada <_sercom_get_default_pad+0xde>
    1aca:	2900      	cmp	r1, #0
    1acc:	d015      	beq.n	1afa <_sercom_get_default_pad+0xfe>
    1ace:	2902      	cmp	r1, #2
    1ad0:	d005      	beq.n	1ade <_sercom_get_default_pad+0xe2>
    1ad2:	2903      	cmp	r1, #3
    1ad4:	d005      	beq.n	1ae2 <_sercom_get_default_pad+0xe6>
	return 0;
    1ad6:	2000      	movs	r0, #0
    1ad8:	e79e      	b.n	1a18 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ada:	481e      	ldr	r0, [pc, #120]	; (1b54 <_sercom_get_default_pad+0x158>)
    1adc:	e79c      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1ade:	481e      	ldr	r0, [pc, #120]	; (1b58 <_sercom_get_default_pad+0x15c>)
    1ae0:	e79a      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1ae2:	481e      	ldr	r0, [pc, #120]	; (1b5c <_sercom_get_default_pad+0x160>)
    1ae4:	e798      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1ae6:	481e      	ldr	r0, [pc, #120]	; (1b60 <_sercom_get_default_pad+0x164>)
    1ae8:	e796      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1aea:	481e      	ldr	r0, [pc, #120]	; (1b64 <_sercom_get_default_pad+0x168>)
    1aec:	e794      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1aee:	481e      	ldr	r0, [pc, #120]	; (1b68 <_sercom_get_default_pad+0x16c>)
    1af0:	e792      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1af2:	481e      	ldr	r0, [pc, #120]	; (1b6c <_sercom_get_default_pad+0x170>)
    1af4:	e790      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1af6:	481e      	ldr	r0, [pc, #120]	; (1b70 <_sercom_get_default_pad+0x174>)
    1af8:	e78e      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1afa:	481e      	ldr	r0, [pc, #120]	; (1b74 <_sercom_get_default_pad+0x178>)
    1afc:	e78c      	b.n	1a18 <_sercom_get_default_pad+0x1c>
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	42000c00 	.word	0x42000c00
    1b04:	42001400 	.word	0x42001400
    1b08:	42001800 	.word	0x42001800
    1b0c:	42001000 	.word	0x42001000
    1b10:	42000400 	.word	0x42000400
    1b14:	42000800 	.word	0x42000800
    1b18:	00050003 	.word	0x00050003
    1b1c:	00060003 	.word	0x00060003
    1b20:	00070003 	.word	0x00070003
    1b24:	00110002 	.word	0x00110002
    1b28:	00120002 	.word	0x00120002
    1b2c:	00130002 	.word	0x00130002
    1b30:	000d0002 	.word	0x000d0002
    1b34:	000e0002 	.word	0x000e0002
    1b38:	000f0002 	.word	0x000f0002
    1b3c:	00170002 	.word	0x00170002
    1b40:	00180002 	.word	0x00180002
    1b44:	00190002 	.word	0x00190002
    1b48:	00290003 	.word	0x00290003
    1b4c:	002a0003 	.word	0x002a0003
    1b50:	002b0003 	.word	0x002b0003
    1b54:	00230003 	.word	0x00230003
    1b58:	00200003 	.word	0x00200003
    1b5c:	00210003 	.word	0x00210003
    1b60:	00040003 	.word	0x00040003
    1b64:	00100002 	.word	0x00100002
    1b68:	000c0002 	.word	0x000c0002
    1b6c:	00160002 	.word	0x00160002
    1b70:	00280003 	.word	0x00280003
    1b74:	00220003 	.word	0x00220003

00001b78 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1b78:	b530      	push	{r4, r5, lr}
    1b7a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1b7c:	4b0b      	ldr	r3, [pc, #44]	; (1bac <_sercom_get_sercom_inst_index+0x34>)
    1b7e:	466a      	mov	r2, sp
    1b80:	cb32      	ldmia	r3!, {r1, r4, r5}
    1b82:	c232      	stmia	r2!, {r1, r4, r5}
    1b84:	cb32      	ldmia	r3!, {r1, r4, r5}
    1b86:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1b88:	9b00      	ldr	r3, [sp, #0]
    1b8a:	4283      	cmp	r3, r0
    1b8c:	d00b      	beq.n	1ba6 <_sercom_get_sercom_inst_index+0x2e>
    1b8e:	2301      	movs	r3, #1
    1b90:	009a      	lsls	r2, r3, #2
    1b92:	4669      	mov	r1, sp
    1b94:	5852      	ldr	r2, [r2, r1]
    1b96:	4282      	cmp	r2, r0
    1b98:	d006      	beq.n	1ba8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1b9a:	3301      	adds	r3, #1
    1b9c:	2b06      	cmp	r3, #6
    1b9e:	d1f7      	bne.n	1b90 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1ba0:	2000      	movs	r0, #0
}
    1ba2:	b007      	add	sp, #28
    1ba4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1ba6:	2300      	movs	r3, #0
			return i;
    1ba8:	b2d8      	uxtb	r0, r3
    1baa:	e7fa      	b.n	1ba2 <_sercom_get_sercom_inst_index+0x2a>
    1bac:	00007bb8 	.word	0x00007bb8

00001bb0 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    1bb0:	4b09      	ldr	r3, [pc, #36]	; (1bd8 <_tcc_get_inst_index+0x28>)
    1bb2:	4298      	cmp	r0, r3
    1bb4:	d00c      	beq.n	1bd0 <_tcc_get_inst_index+0x20>
    1bb6:	4b09      	ldr	r3, [pc, #36]	; (1bdc <_tcc_get_inst_index+0x2c>)
    1bb8:	4298      	cmp	r0, r3
    1bba:	d007      	beq.n	1bcc <_tcc_get_inst_index+0x1c>
    1bbc:	4a08      	ldr	r2, [pc, #32]	; (1be0 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1bbe:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    1bc0:	4290      	cmp	r0, r2
    1bc2:	d001      	beq.n	1bc8 <_tcc_get_inst_index+0x18>
}
    1bc4:	0018      	movs	r0, r3
    1bc6:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    1bc8:	3302      	adds	r3, #2
    1bca:	e002      	b.n	1bd2 <_tcc_get_inst_index+0x22>
    1bcc:	2301      	movs	r3, #1
    1bce:	e000      	b.n	1bd2 <_tcc_get_inst_index+0x22>
    1bd0:	2300      	movs	r3, #0
			return i;
    1bd2:	b2db      	uxtb	r3, r3
    1bd4:	e7f6      	b.n	1bc4 <_tcc_get_inst_index+0x14>
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	42002400 	.word	0x42002400
    1bdc:	42002800 	.word	0x42002800
    1be0:	42002c00 	.word	0x42002c00

00001be4 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    1be4:	b510      	push	{r4, lr}
    1be6:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    1be8:	0008      	movs	r0, r1
    1bea:	4b4f      	ldr	r3, [pc, #316]	; (1d28 <tcc_get_config_defaults+0x144>)
    1bec:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    1bee:	2300      	movs	r3, #0
    1bf0:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    1bf2:	0080      	lsls	r0, r0, #2
    1bf4:	4a4d      	ldr	r2, [pc, #308]	; (1d2c <tcc_get_config_defaults+0x148>)
    1bf6:	5882      	ldr	r2, [r0, r2]
    1bf8:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    1bfa:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    1bfc:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    1bfe:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    1c00:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    1c02:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    1c04:	61e3      	str	r3, [r4, #28]
    1c06:	6223      	str	r3, [r4, #32]
    1c08:	6263      	str	r3, [r4, #36]	; 0x24
    1c0a:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    1c0c:	7523      	strb	r3, [r4, #20]
    1c0e:	7563      	strb	r3, [r4, #21]
    1c10:	75a3      	strb	r3, [r4, #22]
    1c12:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    1c14:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    1c16:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    1c18:	7423      	strb	r3, [r4, #16]
    1c1a:	7463      	strb	r3, [r4, #17]
    1c1c:	74a3      	strb	r3, [r4, #18]
    1c1e:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    1c20:	222c      	movs	r2, #44	; 0x2c
    1c22:	54a3      	strb	r3, [r4, r2]
    1c24:	3201      	adds	r2, #1
    1c26:	54a3      	strb	r3, [r4, r2]
    1c28:	3201      	adds	r2, #1
    1c2a:	54a3      	strb	r3, [r4, r2]
    1c2c:	3201      	adds	r2, #1
    1c2e:	54a3      	strb	r3, [r4, r2]
    1c30:	3201      	adds	r2, #1
    1c32:	54a3      	strb	r3, [r4, r2]
    1c34:	3201      	adds	r2, #1
    1c36:	54a3      	strb	r3, [r4, r2]
    1c38:	3201      	adds	r2, #1
    1c3a:	54a3      	strb	r3, [r4, r2]
    1c3c:	3201      	adds	r2, #1
    1c3e:	54a3      	strb	r3, [r4, r2]
    1c40:	3201      	adds	r2, #1
    1c42:	54a3      	strb	r3, [r4, r2]
    1c44:	3201      	adds	r2, #1
    1c46:	54a3      	strb	r3, [r4, r2]
    1c48:	3201      	adds	r2, #1
    1c4a:	54a3      	strb	r3, [r4, r2]
    1c4c:	3201      	adds	r2, #1
    1c4e:	54a3      	strb	r3, [r4, r2]
    1c50:	3201      	adds	r2, #1
    1c52:	54a3      	strb	r3, [r4, r2]
    1c54:	3201      	adds	r2, #1
    1c56:	54a3      	strb	r3, [r4, r2]
    1c58:	3201      	adds	r2, #1
    1c5a:	54a3      	strb	r3, [r4, r2]
    1c5c:	3201      	adds	r2, #1
    1c5e:	54a3      	strb	r3, [r4, r2]
    1c60:	3201      	adds	r2, #1
    1c62:	54a3      	strb	r3, [r4, r2]
    1c64:	3201      	adds	r2, #1
    1c66:	54a3      	strb	r3, [r4, r2]
    1c68:	3201      	adds	r2, #1
    1c6a:	54a3      	strb	r3, [r4, r2]
    1c6c:	3201      	adds	r2, #1
    1c6e:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    1c70:	3201      	adds	r2, #1
    1c72:	54a3      	strb	r3, [r4, r2]
    1c74:	3201      	adds	r2, #1
    1c76:	54a3      	strb	r3, [r4, r2]
    1c78:	3201      	adds	r2, #1
    1c7a:	54a3      	strb	r3, [r4, r2]
    1c7c:	3201      	adds	r2, #1
    1c7e:	54a3      	strb	r3, [r4, r2]
    1c80:	3201      	adds	r2, #1
    1c82:	54a3      	strb	r3, [r4, r2]
    1c84:	3201      	adds	r2, #1
    1c86:	54a3      	strb	r3, [r4, r2]
    1c88:	3201      	adds	r2, #1
    1c8a:	54a3      	strb	r3, [r4, r2]
    1c8c:	3201      	adds	r2, #1
    1c8e:	54a3      	strb	r3, [r4, r2]
    1c90:	3201      	adds	r2, #1
    1c92:	54a3      	strb	r3, [r4, r2]
    1c94:	3201      	adds	r2, #1
    1c96:	54a3      	strb	r3, [r4, r2]
    1c98:	3201      	adds	r2, #1
    1c9a:	54a3      	strb	r3, [r4, r2]
    1c9c:	3201      	adds	r2, #1
    1c9e:	54a3      	strb	r3, [r4, r2]
    1ca0:	3201      	adds	r2, #1
    1ca2:	54a3      	strb	r3, [r4, r2]
    1ca4:	3201      	adds	r2, #1
    1ca6:	54a3      	strb	r3, [r4, r2]
    1ca8:	3201      	adds	r2, #1
    1caa:	54a3      	strb	r3, [r4, r2]
    1cac:	3201      	adds	r2, #1
    1cae:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    1cb0:	3201      	adds	r2, #1
    1cb2:	54a3      	strb	r3, [r4, r2]
    1cb4:	3201      	adds	r2, #1
    1cb6:	54a3      	strb	r3, [r4, r2]
    1cb8:	3201      	adds	r2, #1
    1cba:	54a3      	strb	r3, [r4, r2]
    1cbc:	3201      	adds	r2, #1
    1cbe:	54a3      	strb	r3, [r4, r2]
    1cc0:	3201      	adds	r2, #1
    1cc2:	54a3      	strb	r3, [r4, r2]
    1cc4:	3201      	adds	r2, #1
    1cc6:	54a3      	strb	r3, [r4, r2]
    1cc8:	3201      	adds	r2, #1
    1cca:	54a3      	strb	r3, [r4, r2]
    1ccc:	3201      	adds	r2, #1
    1cce:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    1cd0:	3241      	adds	r2, #65	; 0x41
    1cd2:	54a3      	strb	r3, [r4, r2]
    1cd4:	65a3      	str	r3, [r4, #88]	; 0x58
    1cd6:	67a3      	str	r3, [r4, #120]	; 0x78
    1cd8:	3201      	adds	r2, #1
    1cda:	54a3      	strb	r3, [r4, r2]
    1cdc:	65e3      	str	r3, [r4, #92]	; 0x5c
    1cde:	67e3      	str	r3, [r4, #124]	; 0x7c
    1ce0:	3201      	adds	r2, #1
    1ce2:	54a3      	strb	r3, [r4, r2]
    1ce4:	6623      	str	r3, [r4, #96]	; 0x60
    1ce6:	3a1a      	subs	r2, #26
    1ce8:	50a3      	str	r3, [r4, r2]
    1cea:	321b      	adds	r2, #27
    1cec:	54a3      	strb	r3, [r4, r2]
    1cee:	6663      	str	r3, [r4, #100]	; 0x64
    1cf0:	3a17      	subs	r2, #23
    1cf2:	50a3      	str	r3, [r4, r2]
    1cf4:	3218      	adds	r2, #24
    1cf6:	54a3      	strb	r3, [r4, r2]
    1cf8:	66a3      	str	r3, [r4, #104]	; 0x68
    1cfa:	3a14      	subs	r2, #20
    1cfc:	50a3      	str	r3, [r4, r2]
    1cfe:	3215      	adds	r2, #21
    1d00:	54a3      	strb	r3, [r4, r2]
    1d02:	66e3      	str	r3, [r4, #108]	; 0x6c
    1d04:	3a11      	subs	r2, #17
    1d06:	50a3      	str	r3, [r4, r2]
    1d08:	3212      	adds	r2, #18
    1d0a:	54a3      	strb	r3, [r4, r2]
    1d0c:	6723      	str	r3, [r4, #112]	; 0x70
    1d0e:	3a0e      	subs	r2, #14
    1d10:	50a3      	str	r3, [r4, r2]
    1d12:	320f      	adds	r2, #15
    1d14:	54a3      	strb	r3, [r4, r2]
    1d16:	6763      	str	r3, [r4, #116]	; 0x74
    1d18:	3a0b      	subs	r2, #11
    1d1a:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    1d1c:	2101      	movs	r1, #1
    1d1e:	320c      	adds	r2, #12
    1d20:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    1d22:	3201      	adds	r2, #1
    1d24:	54a3      	strb	r3, [r4, r2]
}
    1d26:	bd10      	pop	{r4, pc}
    1d28:	00001bb1 	.word	0x00001bb1
    1d2c:	00007be4 	.word	0x00007be4

00001d30 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    1d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d32:	46de      	mov	lr, fp
    1d34:	4657      	mov	r7, sl
    1d36:	464e      	mov	r6, r9
    1d38:	4645      	mov	r5, r8
    1d3a:	b5e0      	push	{r5, r6, r7, lr}
    1d3c:	b091      	sub	sp, #68	; 0x44
    1d3e:	9001      	str	r0, [sp, #4]
    1d40:	000c      	movs	r4, r1
    1d42:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    1d44:	0008      	movs	r0, r1
    1d46:	4bc3      	ldr	r3, [pc, #780]	; (2054 <STACK_SIZE+0x54>)
    1d48:	4798      	blx	r3
    1d4a:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1d4c:	0001      	movs	r1, r0
    1d4e:	48c2      	ldr	r0, [pc, #776]	; (2058 <STACK_SIZE+0x58>)
    1d50:	69c2      	ldr	r2, [r0, #28]
    1d52:	009e      	lsls	r6, r3, #2
    1d54:	4fc1      	ldr	r7, [pc, #772]	; (205c <STACK_SIZE+0x5c>)
    1d56:	59f7      	ldr	r7, [r6, r7]
    1d58:	433a      	orrs	r2, r7
    1d5a:	61c2      	str	r2, [r0, #28]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    1d5c:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    1d5e:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    1d60:	0792      	lsls	r2, r2, #30
    1d62:	d506      	bpl.n	1d72 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    1d64:	b011      	add	sp, #68	; 0x44
    1d66:	bc3c      	pop	{r2, r3, r4, r5}
    1d68:	4690      	mov	r8, r2
    1d6a:	4699      	mov	r9, r3
    1d6c:	46a2      	mov	sl, r4
    1d6e:	46ab      	mov	fp, r5
    1d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    1d72:	6822      	ldr	r2, [r4, #0]
    1d74:	2701      	movs	r7, #1
    1d76:	4017      	ands	r7, r2
    1d78:	d1f4      	bne.n	1d64 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    1d7a:	48b9      	ldr	r0, [pc, #740]	; (2060 <STACK_SIZE+0x60>)
    1d7c:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    1d7e:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    1d80:	682e      	ldr	r6, [r5, #0]
    1d82:	42b2      	cmp	r2, r6
    1d84:	d3ee      	bcc.n	1d64 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    1d86:	686e      	ldr	r6, [r5, #4]
    1d88:	42b2      	cmp	r2, r6
    1d8a:	d3eb      	bcc.n	1d64 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    1d8c:	69e8      	ldr	r0, [r5, #28]
    1d8e:	4282      	cmp	r2, r0
    1d90:	d200      	bcs.n	1d94 <tcc_init+0x64>
    1d92:	e1ab      	b.n	20ec <STACK_SIZE+0xec>
    1d94:	6a28      	ldr	r0, [r5, #32]
    1d96:	4282      	cmp	r2, r0
    1d98:	d200      	bcs.n	1d9c <tcc_init+0x6c>
    1d9a:	e1a9      	b.n	20f0 <STACK_SIZE+0xf0>
    1d9c:	6a68      	ldr	r0, [r5, #36]	; 0x24
    1d9e:	4282      	cmp	r2, r0
    1da0:	d200      	bcs.n	1da4 <tcc_init+0x74>
    1da2:	e1a7      	b.n	20f4 <STACK_SIZE+0xf4>
    1da4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    1da6:	4282      	cmp	r2, r0
    1da8:	d200      	bcs.n	1dac <tcc_init+0x7c>
    1daa:	e1a5      	b.n	20f8 <STACK_SIZE+0xf8>
    1dac:	2298      	movs	r2, #152	; 0x98
    1dae:	4694      	mov	ip, r2
    1db0:	44ac      	add	ip, r5
    1db2:	4662      	mov	r2, ip
    1db4:	9208      	str	r2, [sp, #32]
    1db6:	2000      	movs	r0, #0
    1db8:	e003      	b.n	1dc2 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    1dba:	3001      	adds	r0, #1
    1dbc:	3201      	adds	r2, #1
    1dbe:	2808      	cmp	r0, #8
    1dc0:	d008      	beq.n	1dd4 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    1dc2:	7816      	ldrb	r6, [r2, #0]
    1dc4:	2e00      	cmp	r6, #0
    1dc6:	d0f8      	beq.n	1dba <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    1dc8:	4ea6      	ldr	r6, [pc, #664]	; (2064 <STACK_SIZE+0x64>)
    1dca:	5c76      	ldrb	r6, [r6, r1]
    1dcc:	4286      	cmp	r6, r0
    1dce:	dcf4      	bgt.n	1dba <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    1dd0:	2017      	movs	r0, #23
    1dd2:	e7c7      	b.n	1d64 <tcc_init+0x34>
    1dd4:	2200      	movs	r2, #0
    1dd6:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    1dd8:	2080      	movs	r0, #128	; 0x80
    1dda:	0440      	lsls	r0, r0, #17
    1ddc:	4684      	mov	ip, r0
    1dde:	e002      	b.n	1de6 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    1de0:	3201      	adds	r2, #1
    1de2:	2a04      	cmp	r2, #4
    1de4:	d00e      	beq.n	1e04 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    1de6:	18a8      	adds	r0, r5, r2
    1de8:	7c00      	ldrb	r0, [r0, #16]
    1dea:	2801      	cmp	r0, #1
    1dec:	d1f8      	bne.n	1de0 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    1dee:	489e      	ldr	r0, [pc, #632]	; (2068 <STACK_SIZE+0x68>)
    1df0:	5c40      	ldrb	r0, [r0, r1]
    1df2:	4290      	cmp	r0, r2
    1df4:	da00      	bge.n	1df8 <tcc_init+0xc8>
    1df6:	e181      	b.n	20fc <STACK_SIZE+0xfc>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    1df8:	4660      	mov	r0, ip
    1dfa:	4090      	lsls	r0, r2
    1dfc:	9e02      	ldr	r6, [sp, #8]
    1dfe:	4306      	orrs	r6, r0
    1e00:	9602      	str	r6, [sp, #8]
    1e02:	e7ed      	b.n	1de0 <tcc_init+0xb0>
	if (config->run_in_standby) {
    1e04:	329d      	adds	r2, #157	; 0x9d
    1e06:	5caa      	ldrb	r2, [r5, r2]
    1e08:	2a00      	cmp	r2, #0
    1e0a:	d004      	beq.n	1e16 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    1e0c:	2280      	movs	r2, #128	; 0x80
    1e0e:	0112      	lsls	r2, r2, #4
    1e10:	9902      	ldr	r1, [sp, #8]
    1e12:	4311      	orrs	r1, r2
    1e14:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    1e16:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    1e18:	1e51      	subs	r1, r2, #1
    1e1a:	418a      	sbcs	r2, r1
    1e1c:	0092      	lsls	r2, r2, #2
    1e1e:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    1e20:	7a6a      	ldrb	r2, [r5, #9]
    1e22:	2a01      	cmp	r2, #1
    1e24:	d022      	beq.n	1e6c <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    1e26:	4a90      	ldr	r2, [pc, #576]	; (2068 <STACK_SIZE+0x68>)
    1e28:	5cd2      	ldrb	r2, [r2, r3]
    1e2a:	0011      	movs	r1, r2
    1e2c:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    1e2e:	2235      	movs	r2, #53	; 0x35
    1e30:	5caa      	ldrb	r2, [r5, r2]
    1e32:	428a      	cmp	r2, r1
    1e34:	d300      	bcc.n	1e38 <tcc_init+0x108>
    1e36:	e16b      	b.n	2110 <STACK_SIZE+0x110>
		if (cfg->filter_value > 0xF) {
    1e38:	212c      	movs	r1, #44	; 0x2c
    1e3a:	5c69      	ldrb	r1, [r5, r1]
    1e3c:	290f      	cmp	r1, #15
    1e3e:	d900      	bls.n	1e42 <tcc_init+0x112>
    1e40:	e166      	b.n	2110 <STACK_SIZE+0x110>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    1e42:	7b28      	ldrb	r0, [r5, #12]
    1e44:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1e46:	7ae8      	ldrb	r0, [r5, #11]
    1e48:	900b      	str	r0, [sp, #44]	; 0x2c
    1e4a:	202d      	movs	r0, #45	; 0x2d
    1e4c:	4682      	mov	sl, r0
    1e4e:	44aa      	add	sl, r5
    1e50:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    1e52:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    1e54:	ae0e      	add	r6, sp, #56	; 0x38
    1e56:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    1e58:	26c0      	movs	r6, #192	; 0xc0
    1e5a:	0136      	lsls	r6, r6, #4
    1e5c:	46b1      	mov	r9, r6
    1e5e:	4684      	mov	ip, r0
    1e60:	46a0      	mov	r8, r4
    1e62:	0028      	movs	r0, r5
    1e64:	4655      	mov	r5, sl
    1e66:	9309      	str	r3, [sp, #36]	; 0x24
    1e68:	4682      	mov	sl, r0
    1e6a:	e035      	b.n	1ed8 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    1e6c:	9906      	ldr	r1, [sp, #24]
    1e6e:	4311      	orrs	r1, r2
    1e70:	9106      	str	r1, [sp, #24]
    1e72:	e7d8      	b.n	1e26 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    1e74:	0292      	lsls	r2, r2, #10
    1e76:	464f      	mov	r7, r9
    1e78:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1e7a:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    1e7c:	7919      	ldrb	r1, [r3, #4]
    1e7e:	468b      	mov	fp, r1
    1e80:	2103      	movs	r1, #3
    1e82:	465f      	mov	r7, fp
    1e84:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1e86:	430a      	orrs	r2, r1
    1e88:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    1e8a:	795a      	ldrb	r2, [r3, #5]
    1e8c:	0152      	lsls	r2, r2, #5
    1e8e:	2160      	movs	r1, #96	; 0x60
    1e90:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1e92:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    1e94:	7999      	ldrb	r1, [r3, #6]
    1e96:	0209      	lsls	r1, r1, #8
    1e98:	26c0      	movs	r6, #192	; 0xc0
    1e9a:	00b6      	lsls	r6, r6, #2
    1e9c:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1e9e:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    1ea0:	79da      	ldrb	r2, [r3, #7]
    1ea2:	0312      	lsls	r2, r2, #12
    1ea4:	21e0      	movs	r1, #224	; 0xe0
    1ea6:	01c9      	lsls	r1, r1, #7
    1ea8:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1eaa:	4316      	orrs	r6, r2
    1eac:	4334      	orrs	r4, r6
    1eae:	9a03      	ldr	r2, [sp, #12]
    1eb0:	4314      	orrs	r4, r2
    1eb2:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    1eb4:	4662      	mov	r2, ip
    1eb6:	9907      	ldr	r1, [sp, #28]
    1eb8:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1eba:	2a04      	cmp	r2, #4
    1ebc:	d02a      	beq.n	1f14 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    1ebe:	7c9a      	ldrb	r2, [r3, #18]
    1ec0:	9905      	ldr	r1, [sp, #20]
    1ec2:	4291      	cmp	r1, r2
    1ec4:	d800      	bhi.n	1ec8 <tcc_init+0x198>
    1ec6:	e123      	b.n	2110 <STACK_SIZE+0x110>
		if (cfg->filter_value > 0xF) {
    1ec8:	7a59      	ldrb	r1, [r3, #9]
    1eca:	350a      	adds	r5, #10
    1ecc:	2304      	movs	r3, #4
    1ece:	469b      	mov	fp, r3
    1ed0:	44dc      	add	ip, fp
    1ed2:	290f      	cmp	r1, #15
    1ed4:	d900      	bls.n	1ed8 <tcc_init+0x1a8>
    1ed6:	e11b      	b.n	2110 <STACK_SIZE+0x110>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1ed8:	0609      	lsls	r1, r1, #24
    1eda:	23f0      	movs	r3, #240	; 0xf0
    1edc:	051b      	lsls	r3, r3, #20
    1ede:	4019      	ands	r1, r3
    1ee0:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    1ee2:	782e      	ldrb	r6, [r5, #0]
    1ee4:	0436      	lsls	r6, r6, #16
    1ee6:	20ff      	movs	r0, #255	; 0xff
    1ee8:	0400      	lsls	r0, r0, #16
    1eea:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    1eec:	7868      	ldrb	r0, [r5, #1]
    1eee:	2480      	movs	r4, #128	; 0x80
    1ef0:	2800      	cmp	r0, #0
    1ef2:	d100      	bne.n	1ef6 <tcc_init+0x1c6>
    1ef4:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    1ef6:	7898      	ldrb	r0, [r3, #2]
    1ef8:	2708      	movs	r7, #8
    1efa:	9703      	str	r7, [sp, #12]
    1efc:	2800      	cmp	r0, #0
    1efe:	d101      	bne.n	1f04 <tcc_init+0x1d4>
    1f00:	9804      	ldr	r0, [sp, #16]
    1f02:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    1f04:	78d8      	ldrb	r0, [r3, #3]
    1f06:	4683      	mov	fp, r0
    1f08:	2010      	movs	r0, #16
    1f0a:	465f      	mov	r7, fp
    1f0c:	2f00      	cmp	r7, #0
    1f0e:	d1b1      	bne.n	1e74 <tcc_init+0x144>
    1f10:	9804      	ldr	r0, [sp, #16]
    1f12:	e7af      	b.n	1e74 <tcc_init+0x144>
    1f14:	4644      	mov	r4, r8
    1f16:	4655      	mov	r5, sl
    1f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    1f1a:	4a52      	ldr	r2, [pc, #328]	; (2064 <STACK_SIZE+0x64>)
    1f1c:	5cd2      	ldrb	r2, [r2, r3]
    1f1e:	4691      	mov	r9, r2
    1f20:	4651      	mov	r1, sl
    1f22:	3150      	adds	r1, #80	; 0x50
    1f24:	4650      	mov	r0, sl
    1f26:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    1f28:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    1f2a:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    1f2c:	2601      	movs	r6, #1
    1f2e:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1f30:	2602      	movs	r6, #2
    1f32:	36ff      	adds	r6, #255	; 0xff
    1f34:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1f36:	2680      	movs	r6, #128	; 0x80
    1f38:	0276      	lsls	r6, r6, #9
    1f3a:	46b0      	mov	r8, r6
    1f3c:	46a4      	mov	ip, r4
    1f3e:	001c      	movs	r4, r3
    1f40:	464b      	mov	r3, r9
    1f42:	e00f      	b.n	1f64 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    1f44:	7806      	ldrb	r6, [r0, #0]
    1f46:	2e00      	cmp	r6, #0
    1f48:	d007      	beq.n	1f5a <tcc_init+0x22a>
			if (i >= ow_num) {
    1f4a:	4293      	cmp	r3, r2
    1f4c:	d800      	bhi.n	1f50 <tcc_init+0x220>
    1f4e:	e0d9      	b.n	2104 <STACK_SIZE+0x104>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    1f50:	2e02      	cmp	r6, #2
    1f52:	d014      	beq.n	1f7e <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    1f54:	4656      	mov	r6, sl
    1f56:	4096      	lsls	r6, r2
    1f58:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    1f5a:	3201      	adds	r2, #1
    1f5c:	3101      	adds	r1, #1
    1f5e:	3002      	adds	r0, #2
    1f60:	2a08      	cmp	r2, #8
    1f62:	d010      	beq.n	1f86 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    1f64:	780e      	ldrb	r6, [r1, #0]
    1f66:	2e00      	cmp	r6, #0
    1f68:	d0ec      	beq.n	1f44 <tcc_init+0x214>
			if (i >= ow_num) {
    1f6a:	4293      	cmp	r3, r2
    1f6c:	d800      	bhi.n	1f70 <tcc_init+0x240>
    1f6e:	e0c7      	b.n	2100 <STACK_SIZE+0x100>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1f70:	4646      	mov	r6, r8
    1f72:	4096      	lsls	r6, r2
    1f74:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    1f76:	7806      	ldrb	r6, [r0, #0]
    1f78:	2e00      	cmp	r6, #0
    1f7a:	d1e9      	bne.n	1f50 <tcc_init+0x220>
    1f7c:	e7ed      	b.n	1f5a <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1f7e:	465e      	mov	r6, fp
    1f80:	4096      	lsls	r6, r2
    1f82:	4337      	orrs	r7, r6
    1f84:	e7e9      	b.n	1f5a <tcc_init+0x22a>
    1f86:	4699      	mov	r9, r3
    1f88:	0023      	movs	r3, r4
    1f8a:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1f8c:	7e6a      	ldrb	r2, [r5, #25]
    1f8e:	0112      	lsls	r2, r2, #4
    1f90:	2130      	movs	r1, #48	; 0x30
    1f92:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    1f94:	7e28      	ldrb	r0, [r5, #24]
    1f96:	2207      	movs	r2, #7
    1f98:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1f9a:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1f9c:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    1f9e:	2080      	movs	r0, #128	; 0x80
    1fa0:	0240      	lsls	r0, r0, #9
    1fa2:	000e      	movs	r6, r1
    1fa4:	e002      	b.n	1fac <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1fa6:	3201      	adds	r2, #1
    1fa8:	2a04      	cmp	r2, #4
    1faa:	d00b      	beq.n	1fc4 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    1fac:	18a9      	adds	r1, r5, r2
    1fae:	7d09      	ldrb	r1, [r1, #20]
    1fb0:	2900      	cmp	r1, #0
    1fb2:	d0f8      	beq.n	1fa6 <tcc_init+0x276>
			if (n >= cc_num) {
    1fb4:	9905      	ldr	r1, [sp, #20]
    1fb6:	4291      	cmp	r1, r2
    1fb8:	dc00      	bgt.n	1fbc <tcc_init+0x28c>
    1fba:	e0a5      	b.n	2108 <STACK_SIZE+0x108>
			wave |= (TCC_WAVE_POL0 << n);
    1fbc:	0001      	movs	r1, r0
    1fbe:	4091      	lsls	r1, r2
    1fc0:	430e      	orrs	r6, r1
    1fc2:	e7f0      	b.n	1fa6 <tcc_init+0x276>
    1fc4:	46b2      	mov	sl, r6
    1fc6:	9801      	ldr	r0, [sp, #4]
    1fc8:	0002      	movs	r2, r0
    1fca:	3204      	adds	r2, #4
    1fcc:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    1fce:	2100      	movs	r1, #0
    1fd0:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1fd2:	4282      	cmp	r2, r0
    1fd4:	d1fc      	bne.n	1fd0 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    1fd6:	2200      	movs	r2, #0
    1fd8:	9801      	ldr	r0, [sp, #4]
    1fda:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    1fdc:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    1fde:	0099      	lsls	r1, r3, #2
    1fe0:	4a22      	ldr	r2, [pc, #136]	; (206c <STACK_SIZE+0x6c>)
    1fe2:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    1fe4:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1fe6:	22a0      	movs	r2, #160	; 0xa0
    1fe8:	5ca9      	ldrb	r1, [r5, r2]
    1fea:	3a64      	subs	r2, #100	; 0x64
    1fec:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    1fee:	a90d      	add	r1, sp, #52	; 0x34
    1ff0:	7aaa      	ldrb	r2, [r5, #10]
    1ff2:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1ff4:	4a1e      	ldr	r2, [pc, #120]	; (2070 <STACK_SIZE+0x70>)
    1ff6:	5cd6      	ldrb	r6, [r2, r3]
    1ff8:	0030      	movs	r0, r6
    1ffa:	4b1e      	ldr	r3, [pc, #120]	; (2074 <STACK_SIZE+0x74>)
    1ffc:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    1ffe:	0030      	movs	r0, r6
    2000:	4b1d      	ldr	r3, [pc, #116]	; (2078 <STACK_SIZE+0x78>)
    2002:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    2004:	464b      	mov	r3, r9
    2006:	2b00      	cmp	r3, #0
    2008:	dd3c      	ble.n	2084 <STACK_SIZE+0x84>
    200a:	002e      	movs	r6, r5
    200c:	3658      	adds	r6, #88	; 0x58
    200e:	3398      	adds	r3, #152	; 0x98
    2010:	4698      	mov	r8, r3
    2012:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2014:	2301      	movs	r3, #1
    2016:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    2018:	46ab      	mov	fp, r5
    201a:	4645      	mov	r5, r8
    201c:	46a0      	mov	r8, r4
    201e:	9c08      	ldr	r4, [sp, #32]
    2020:	e003      	b.n	202a <STACK_SIZE+0x2a>
    2022:	3401      	adds	r4, #1
    2024:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    2026:	42ac      	cmp	r4, r5
    2028:	d02a      	beq.n	2080 <STACK_SIZE+0x80>
		if (!config->pins.enable_wave_out_pin[i]) {
    202a:	7823      	ldrb	r3, [r4, #0]
    202c:	2b00      	cmp	r3, #0
    202e:	d0f8      	beq.n	2022 <STACK_SIZE+0x22>
    2030:	ab0c      	add	r3, sp, #48	; 0x30
    2032:	464a      	mov	r2, r9
    2034:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2036:	2300      	movs	r3, #0
    2038:	aa0c      	add	r2, sp, #48	; 0x30
    203a:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    203c:	0013      	movs	r3, r2
    203e:	2220      	movs	r2, #32
    2040:	18b2      	adds	r2, r6, r2
    2042:	7812      	ldrb	r2, [r2, #0]
    2044:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2046:	464a      	mov	r2, r9
    2048:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    204a:	7830      	ldrb	r0, [r6, #0]
    204c:	0019      	movs	r1, r3
    204e:	4b0b      	ldr	r3, [pc, #44]	; (207c <STACK_SIZE+0x7c>)
    2050:	4798      	blx	r3
    2052:	e7e6      	b.n	2022 <STACK_SIZE+0x22>
    2054:	00001bb1 	.word	0x00001bb1
    2058:	40000800 	.word	0x40000800
    205c:	00007bd0 	.word	0x00007bd0
    2060:	00007be4 	.word	0x00007be4
    2064:	00007bf0 	.word	0x00007bf0
    2068:	00007bdc 	.word	0x00007bdc
    206c:	200018e8 	.word	0x200018e8
    2070:	00007be0 	.word	0x00007be0
    2074:	00003d71 	.word	0x00003d71
    2078:	00003d01 	.word	0x00003d01
    207c:	00003e6d 	.word	0x00003e6d
    2080:	4644      	mov	r4, r8
    2082:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    2084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2086:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    2088:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    208a:	0212      	lsls	r2, r2, #8
    208c:	4313      	orrs	r3, r2
    208e:	9a02      	ldr	r2, [sp, #8]
    2090:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    2092:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    2094:	2204      	movs	r2, #4
    2096:	68a3      	ldr	r3, [r4, #8]
    2098:	421a      	tst	r2, r3
    209a:	d1fc      	bne.n	2096 <STACK_SIZE+0x96>
	hw->CTRLBCLR.reg = 0xFF;
    209c:	23ff      	movs	r3, #255	; 0xff
    209e:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    20a0:	2204      	movs	r2, #4
    20a2:	68a3      	ldr	r3, [r4, #8]
    20a4:	421a      	tst	r2, r3
    20a6:	d1fc      	bne.n	20a2 <STACK_SIZE+0xa2>
	hw->CTRLBSET.reg = ctrlb;
    20a8:	466b      	mov	r3, sp
    20aa:	7e1b      	ldrb	r3, [r3, #24]
    20ac:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    20ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    20b0:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    20b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    20b4:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    20b6:	61a7      	str	r7, [r4, #24]
	hw->WAVE.reg = waves[0];
    20b8:	4653      	mov	r3, sl
    20ba:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    20bc:	2210      	movs	r2, #16
    20be:	68a3      	ldr	r3, [r4, #8]
    20c0:	421a      	tst	r2, r3
    20c2:	d1fc      	bne.n	20be <STACK_SIZE+0xbe>
	hw->COUNT.reg = config->counter.count;
    20c4:	682b      	ldr	r3, [r5, #0]
    20c6:	6363      	str	r3, [r4, #52]	; 0x34
	hw->PER.reg = (config->counter.period);
    20c8:	686b      	ldr	r3, [r5, #4]
    20ca:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    20cc:	9805      	ldr	r0, [sp, #20]
    20ce:	2800      	cmp	r0, #0
    20d0:	dd1c      	ble.n	210c <STACK_SIZE+0x10c>
    20d2:	351c      	adds	r5, #28
    20d4:	2200      	movs	r2, #0
		hw->CC[i].reg = (config->compare.match[i]);
    20d6:	cd02      	ldmia	r5!, {r1}
    20d8:	0013      	movs	r3, r2
    20da:	3310      	adds	r3, #16
    20dc:	009b      	lsls	r3, r3, #2
    20de:	18e3      	adds	r3, r4, r3
    20e0:	6059      	str	r1, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    20e2:	3201      	adds	r2, #1
    20e4:	4290      	cmp	r0, r2
    20e6:	dcf6      	bgt.n	20d6 <STACK_SIZE+0xd6>
	return STATUS_OK;
    20e8:	2000      	movs	r0, #0
    20ea:	e63b      	b.n	1d64 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    20ec:	2017      	movs	r0, #23
    20ee:	e639      	b.n	1d64 <tcc_init+0x34>
    20f0:	2017      	movs	r0, #23
    20f2:	e637      	b.n	1d64 <tcc_init+0x34>
    20f4:	2017      	movs	r0, #23
    20f6:	e635      	b.n	1d64 <tcc_init+0x34>
    20f8:	2017      	movs	r0, #23
    20fa:	e633      	b.n	1d64 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    20fc:	2017      	movs	r0, #23
    20fe:	e631      	b.n	1d64 <tcc_init+0x34>
			if (i >= ow_num) {
    2100:	2017      	movs	r0, #23
    2102:	e62f      	b.n	1d64 <tcc_init+0x34>
			if (i >= ow_num) {
    2104:	2017      	movs	r0, #23
    2106:	e62d      	b.n	1d64 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    2108:	2017      	movs	r0, #23
    210a:	e62b      	b.n	1d64 <tcc_init+0x34>
	return STATUS_OK;
    210c:	2000      	movs	r0, #0
    210e:	e629      	b.n	1d64 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    2110:	2017      	movs	r0, #23
    2112:	e627      	b.n	1d64 <tcc_init+0x34>

00002114 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2114:	0092      	lsls	r2, r2, #2
    2116:	1883      	adds	r3, r0, r2
    2118:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    211a:	4b03      	ldr	r3, [pc, #12]	; (2128 <tcc_register_callback+0x14>)
    211c:	58d3      	ldr	r3, [r2, r3]
    211e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    2120:	4313      	orrs	r3, r2
    2122:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    2124:	2000      	movs	r0, #0
    2126:	4770      	bx	lr
    2128:	00007bf4 	.word	0x00007bf4

0000212c <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    212c:	b570      	push	{r4, r5, r6, lr}
    212e:	0004      	movs	r4, r0
    2130:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    2132:	6800      	ldr	r0, [r0, #0]
    2134:	4b09      	ldr	r3, [pc, #36]	; (215c <tcc_enable_callback+0x30>)
    2136:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    2138:	4b09      	ldr	r3, [pc, #36]	; (2160 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    213a:	5c1b      	ldrb	r3, [r3, r0]
    213c:	221f      	movs	r2, #31
    213e:	401a      	ands	r2, r3
    2140:	2301      	movs	r3, #1
    2142:	4093      	lsls	r3, r2
    2144:	4a07      	ldr	r2, [pc, #28]	; (2164 <tcc_enable_callback+0x38>)
    2146:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    2148:	00ad      	lsls	r5, r5, #2
    214a:	4b07      	ldr	r3, [pc, #28]	; (2168 <tcc_enable_callback+0x3c>)
    214c:	58ea      	ldr	r2, [r5, r3]
    214e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2150:	4313      	orrs	r3, r2
    2152:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    2154:	6823      	ldr	r3, [r4, #0]
    2156:	629a      	str	r2, [r3, #40]	; 0x28
}
    2158:	bd70      	pop	{r4, r5, r6, pc}
    215a:	46c0      	nop			; (mov r8, r8)
    215c:	00001bb1 	.word	0x00001bb1
    2160:	00007c24 	.word	0x00007c24
    2164:	e000e100 	.word	0xe000e100
    2168:	00007bf4 	.word	0x00007bf4

0000216c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    216c:	b5f0      	push	{r4, r5, r6, r7, lr}
    216e:	46c6      	mov	lr, r8
    2170:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    2172:	0080      	lsls	r0, r0, #2
    2174:	4b0e      	ldr	r3, [pc, #56]	; (21b0 <_tcc_interrupt_handler+0x44>)
    2176:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    2178:	683b      	ldr	r3, [r7, #0]
    217a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    217c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    217e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2180:	4013      	ands	r3, r2
    2182:	401e      	ands	r6, r3
    2184:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    2186:	4b0b      	ldr	r3, [pc, #44]	; (21b4 <_tcc_interrupt_handler+0x48>)
    2188:	4698      	mov	r8, r3
    218a:	e002      	b.n	2192 <_tcc_interrupt_handler+0x26>
    218c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    218e:	2c30      	cmp	r4, #48	; 0x30
    2190:	d00a      	beq.n	21a8 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    2192:	4643      	mov	r3, r8
    2194:	58e5      	ldr	r5, [r4, r3]
    2196:	4235      	tst	r5, r6
    2198:	d0f8      	beq.n	218c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    219a:	193b      	adds	r3, r7, r4
    219c:	685b      	ldr	r3, [r3, #4]
    219e:	0038      	movs	r0, r7
    21a0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    21a2:	683b      	ldr	r3, [r7, #0]
    21a4:	62dd      	str	r5, [r3, #44]	; 0x2c
    21a6:	e7f1      	b.n	218c <_tcc_interrupt_handler+0x20>
		}
	}
}
    21a8:	bc04      	pop	{r2}
    21aa:	4690      	mov	r8, r2
    21ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21ae:	46c0      	nop			; (mov r8, r8)
    21b0:	200018e8 	.word	0x200018e8
    21b4:	00007bf4 	.word	0x00007bf4

000021b8 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    21b8:	b510      	push	{r4, lr}
    21ba:	2000      	movs	r0, #0
    21bc:	4b01      	ldr	r3, [pc, #4]	; (21c4 <TCC0_Handler+0xc>)
    21be:	4798      	blx	r3
    21c0:	bd10      	pop	{r4, pc}
    21c2:	46c0      	nop			; (mov r8, r8)
    21c4:	0000216d 	.word	0x0000216d

000021c8 <TCC1_Handler>:
    21c8:	b510      	push	{r4, lr}
    21ca:	2001      	movs	r0, #1
    21cc:	4b01      	ldr	r3, [pc, #4]	; (21d4 <TCC1_Handler+0xc>)
    21ce:	4798      	blx	r3
    21d0:	bd10      	pop	{r4, pc}
    21d2:	46c0      	nop			; (mov r8, r8)
    21d4:	0000216d 	.word	0x0000216d

000021d8 <TCC2_Handler>:
    21d8:	b510      	push	{r4, lr}
    21da:	2002      	movs	r0, #2
    21dc:	4b01      	ldr	r3, [pc, #4]	; (21e4 <TCC2_Handler+0xc>)
    21de:	4798      	blx	r3
    21e0:	bd10      	pop	{r4, pc}
    21e2:	46c0      	nop			; (mov r8, r8)
    21e4:	0000216d 	.word	0x0000216d

000021e8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    21e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ea:	46de      	mov	lr, fp
    21ec:	4657      	mov	r7, sl
    21ee:	464e      	mov	r6, r9
    21f0:	4645      	mov	r5, r8
    21f2:	b5e0      	push	{r5, r6, r7, lr}
    21f4:	b091      	sub	sp, #68	; 0x44
    21f6:	0005      	movs	r5, r0
    21f8:	000c      	movs	r4, r1
    21fa:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    21fc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    21fe:	0008      	movs	r0, r1
    2200:	4bd2      	ldr	r3, [pc, #840]	; (254c <usart_init+0x364>)
    2202:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
    2204:	2805      	cmp	r0, #5
    2206:	d00d      	beq.n	2224 <usart_init+0x3c>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    2208:	0007      	movs	r7, r0
    220a:	3713      	adds	r7, #19
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    220c:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    220e:	2305      	movs	r3, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2210:	07d2      	lsls	r2, r2, #31
    2212:	d509      	bpl.n	2228 <usart_init+0x40>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2214:	0018      	movs	r0, r3
    2216:	b011      	add	sp, #68	; 0x44
    2218:	bc3c      	pop	{r2, r3, r4, r5}
    221a:	4690      	mov	r8, r2
    221c:	4699      	mov	r9, r3
    221e:	46a2      	mov	sl, r4
    2220:	46ab      	mov	fp, r5
    2222:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    2224:	2719      	movs	r7, #25
    2226:	e7f1      	b.n	220c <usart_init+0x24>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2228:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    222a:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    222c:	0792      	lsls	r2, r2, #30
    222e:	d4f1      	bmi.n	2214 <usart_init+0x2c>
    2230:	4ac7      	ldr	r2, [pc, #796]	; (2550 <usart_init+0x368>)
    2232:	69d1      	ldr	r1, [r2, #28]
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    2234:	3001      	adds	r0, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2236:	3b1b      	subs	r3, #27
    2238:	4083      	lsls	r3, r0
    223a:	430b      	orrs	r3, r1
    223c:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    223e:	a90f      	add	r1, sp, #60	; 0x3c
    2240:	2335      	movs	r3, #53	; 0x35
    2242:	4698      	mov	r8, r3
    2244:	5cf3      	ldrb	r3, [r6, r3]
    2246:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2248:	b2ff      	uxtb	r7, r7
    224a:	0038      	movs	r0, r7
    224c:	4bc1      	ldr	r3, [pc, #772]	; (2554 <usart_init+0x36c>)
    224e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2250:	0038      	movs	r0, r7
    2252:	4bc1      	ldr	r3, [pc, #772]	; (2558 <usart_init+0x370>)
    2254:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2256:	4643      	mov	r3, r8
    2258:	5cf0      	ldrb	r0, [r6, r3]
    225a:	2100      	movs	r1, #0
    225c:	4bbf      	ldr	r3, [pc, #764]	; (255c <usart_init+0x374>)
    225e:	4798      	blx	r3
	module->character_size = config->character_size;
    2260:	7af3      	ldrb	r3, [r6, #11]
    2262:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2264:	232c      	movs	r3, #44	; 0x2c
    2266:	5cf3      	ldrb	r3, [r6, r3]
    2268:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    226a:	232d      	movs	r3, #45	; 0x2d
    226c:	5cf3      	ldrb	r3, [r6, r3]
    226e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2270:	7ef3      	ldrb	r3, [r6, #27]
    2272:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2274:	2324      	movs	r3, #36	; 0x24
    2276:	5cf3      	ldrb	r3, [r6, r3]
    2278:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    227a:	682b      	ldr	r3, [r5, #0]
    227c:	9302      	str	r3, [sp, #8]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    227e:	0018      	movs	r0, r3
    2280:	4bb2      	ldr	r3, [pc, #712]	; (254c <usart_init+0x364>)
    2282:	4798      	blx	r3
	if (sercom_index == 5) {
    2284:	2805      	cmp	r0, #5
    2286:	d01d      	beq.n	22c4 <usart_init+0xdc>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2288:	3013      	adds	r0, #19
	uint16_t baud  = 0;
    228a:	2200      	movs	r2, #0
    228c:	230e      	movs	r3, #14
    228e:	a906      	add	r1, sp, #24
    2290:	468c      	mov	ip, r1
    2292:	4463      	add	r3, ip
    2294:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2296:	8a33      	ldrh	r3, [r6, #16]
    2298:	4698      	mov	r8, r3
    229a:	2380      	movs	r3, #128	; 0x80
    229c:	01db      	lsls	r3, r3, #7
    229e:	4598      	cmp	r8, r3
    22a0:	d100      	bne.n	22a4 <usart_init+0xbc>
    22a2:	e0c3      	b.n	242c <usart_init+0x244>
    22a4:	d910      	bls.n	22c8 <usart_init+0xe0>
    22a6:	23c0      	movs	r3, #192	; 0xc0
    22a8:	01db      	lsls	r3, r3, #7
    22aa:	4598      	cmp	r8, r3
    22ac:	d100      	bne.n	22b0 <usart_init+0xc8>
    22ae:	e0b8      	b.n	2422 <usart_init+0x23a>
    22b0:	2380      	movs	r3, #128	; 0x80
    22b2:	021b      	lsls	r3, r3, #8
    22b4:	4598      	cmp	r8, r3
    22b6:	d000      	beq.n	22ba <usart_init+0xd2>
    22b8:	e166      	b.n	2588 <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    22ba:	2303      	movs	r3, #3
    22bc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    22be:	2300      	movs	r3, #0
    22c0:	9307      	str	r3, [sp, #28]
    22c2:	e00a      	b.n	22da <usart_init+0xf2>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    22c4:	2019      	movs	r0, #25
    22c6:	e7e0      	b.n	228a <usart_init+0xa2>
	switch (config->sample_rate) {
    22c8:	2380      	movs	r3, #128	; 0x80
    22ca:	019b      	lsls	r3, r3, #6
    22cc:	4598      	cmp	r8, r3
    22ce:	d000      	beq.n	22d2 <usart_init+0xea>
    22d0:	e15a      	b.n	2588 <usart_init+0x3a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    22d2:	2310      	movs	r3, #16
    22d4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    22d6:	3b0f      	subs	r3, #15
    22d8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    22da:	6833      	ldr	r3, [r6, #0]
    22dc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    22de:	68f3      	ldr	r3, [r6, #12]
    22e0:	469b      	mov	fp, r3
		config->sample_adjustment |
    22e2:	6973      	ldr	r3, [r6, #20]
    22e4:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    22e6:	7e33      	ldrb	r3, [r6, #24]
    22e8:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    22ea:	232e      	movs	r3, #46	; 0x2e
    22ec:	5cf3      	ldrb	r3, [r6, r3]
    22ee:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    22f0:	6873      	ldr	r3, [r6, #4]
    22f2:	4699      	mov	r9, r3
	switch (transfer_mode)
    22f4:	2b00      	cmp	r3, #0
    22f6:	d100      	bne.n	22fa <usart_init+0x112>
    22f8:	e0c5      	b.n	2486 <usart_init+0x29e>
    22fa:	2380      	movs	r3, #128	; 0x80
    22fc:	055b      	lsls	r3, r3, #21
    22fe:	4599      	cmp	r9, r3
    2300:	d100      	bne.n	2304 <usart_init+0x11c>
    2302:	e0a8      	b.n	2456 <usart_init+0x26e>
	if(config->encoding_format_enable) {
    2304:	7e73      	ldrb	r3, [r6, #25]
    2306:	2b00      	cmp	r3, #0
    2308:	d002      	beq.n	2310 <usart_init+0x128>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    230a:	7eb3      	ldrb	r3, [r6, #26]
    230c:	9a02      	ldr	r2, [sp, #8]
    230e:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    2310:	230e      	movs	r3, #14
    2312:	aa06      	add	r2, sp, #24
    2314:	4694      	mov	ip, r2
    2316:	4463      	add	r3, ip
    2318:	881b      	ldrh	r3, [r3, #0]
    231a:	9a02      	ldr	r2, [sp, #8]
    231c:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    231e:	9a05      	ldr	r2, [sp, #20]
    2320:	465b      	mov	r3, fp
    2322:	431a      	orrs	r2, r3
    2324:	9b03      	ldr	r3, [sp, #12]
    2326:	431a      	orrs	r2, r3
    2328:	464b      	mov	r3, r9
    232a:	431a      	orrs	r2, r3
    232c:	4643      	mov	r3, r8
    232e:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2330:	9b04      	ldr	r3, [sp, #16]
    2332:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2334:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2336:	4653      	mov	r3, sl
    2338:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    233a:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
    233c:	232f      	movs	r3, #47	; 0x2f
    233e:	5cf3      	ldrb	r3, [r6, r3]
    2340:	2b00      	cmp	r3, #0
    2342:	d101      	bne.n	2348 <usart_init+0x160>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2344:	3304      	adds	r3, #4
    2346:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2348:	7e73      	ldrb	r3, [r6, #25]
    234a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    234c:	2124      	movs	r1, #36	; 0x24
    234e:	5c71      	ldrb	r1, [r6, r1]
    2350:	0249      	lsls	r1, r1, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2352:	430b      	orrs	r3, r1
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2354:	2126      	movs	r1, #38	; 0x26
    2356:	5c71      	ldrb	r1, [r6, r1]
    2358:	0209      	lsls	r1, r1, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    235a:	430b      	orrs	r3, r1
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    235c:	212c      	movs	r1, #44	; 0x2c
    235e:	5c71      	ldrb	r1, [r6, r1]
    2360:	0449      	lsls	r1, r1, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2362:	430b      	orrs	r3, r1
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2364:	212d      	movs	r1, #45	; 0x2d
    2366:	5c71      	ldrb	r1, [r6, r1]
    2368:	0409      	lsls	r1, r1, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    236a:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
    236c:	7ab0      	ldrb	r0, [r6, #10]
    236e:	7af1      	ldrb	r1, [r6, #11]
    2370:	4308      	orrs	r0, r1
    2372:	4318      	orrs	r0, r3
	if (config->parity != USART_PARITY_NONE) {
    2374:	8933      	ldrh	r3, [r6, #8]
    2376:	2bff      	cmp	r3, #255	; 0xff
    2378:	d100      	bne.n	237c <usart_init+0x194>
    237a:	e0aa      	b.n	24d2 <usart_init+0x2ea>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    237c:	2180      	movs	r1, #128	; 0x80
    237e:	0449      	lsls	r1, r1, #17
    2380:	430a      	orrs	r2, r1
		ctrlb |= config->parity;
    2382:	4318      	orrs	r0, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    2384:	9902      	ldr	r1, [sp, #8]
    2386:	688b      	ldr	r3, [r1, #8]
    2388:	469c      	mov	ip, r3
						| config->lin_break_length;
    238a:	8c33      	ldrh	r3, [r6, #32]
    238c:	8c71      	ldrh	r1, [r6, #34]	; 0x22
    238e:	430b      	orrs	r3, r1
    2390:	001f      	movs	r7, r3
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    2392:	2107      	movs	r1, #7
    2394:	4663      	mov	r3, ip
    2396:	4019      	ands	r1, r3
						| config->lin_break_length;
    2398:	003b      	movs	r3, r7
    239a:	430b      	orrs	r3, r1
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    239c:	9902      	ldr	r1, [sp, #8]
    239e:	608b      	str	r3, [r1, #8]
	if (config->lin_node != LIN_INVALID_MODE) {
    23a0:	69f3      	ldr	r3, [r6, #28]
    23a2:	2b00      	cmp	r3, #0
    23a4:	d002      	beq.n	23ac <usart_init+0x1c4>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
    23a6:	496e      	ldr	r1, [pc, #440]	; (2560 <usart_init+0x378>)
    23a8:	400a      	ands	r2, r1
		ctrla |= config->lin_node;
    23aa:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    23ac:	2334      	movs	r3, #52	; 0x34
    23ae:	5cf3      	ldrb	r3, [r6, r3]
    23b0:	2b00      	cmp	r3, #0
    23b2:	d103      	bne.n	23bc <usart_init+0x1d4>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    23b4:	4b6b      	ldr	r3, [pc, #428]	; (2564 <usart_init+0x37c>)
    23b6:	789b      	ldrb	r3, [r3, #2]
    23b8:	079b      	lsls	r3, r3, #30
    23ba:	d501      	bpl.n	23c0 <usart_init+0x1d8>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    23bc:	2380      	movs	r3, #128	; 0x80
    23be:	431a      	orrs	r2, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    23c0:	6829      	ldr	r1, [r5, #0]
    23c2:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    23c4:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    23c6:	2b00      	cmp	r3, #0
    23c8:	d1fc      	bne.n	23c4 <usart_init+0x1dc>
	usart_hw->CTRLB.reg = ctrlb;
    23ca:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    23cc:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    23ce:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    23d0:	2b00      	cmp	r3, #0
    23d2:	d1fc      	bne.n	23ce <usart_init+0x1e6>
	usart_hw->CTRLA.reg = ctrla;
    23d4:	603a      	str	r2, [r7, #0]
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
    23d6:	683b      	ldr	r3, [r7, #0]
    23d8:	22f0      	movs	r2, #240	; 0xf0
    23da:	0512      	lsls	r2, r2, #20
    23dc:	4013      	ands	r3, r2
    23de:	22e0      	movs	r2, #224	; 0xe0
    23e0:	04d2      	lsls	r2, r2, #19
    23e2:	4293      	cmp	r3, r2
    23e4:	d00a      	beq.n	23fc <usart_init+0x214>
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
    23e6:	68bb      	ldr	r3, [r7, #8]
    23e8:	2207      	movs	r2, #7
    23ea:	4393      	bics	r3, r2
    23ec:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
    23ee:	68ba      	ldr	r2, [r7, #8]
    23f0:	2325      	movs	r3, #37	; 0x25
    23f2:	5cf1      	ldrb	r1, [r6, r3]
    23f4:	3b1e      	subs	r3, #30
    23f6:	400b      	ands	r3, r1
    23f8:	4313      	orrs	r3, r2
    23fa:	60bb      	str	r3, [r7, #8]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    23fc:	ab0e      	add	r3, sp, #56	; 0x38
    23fe:	2280      	movs	r2, #128	; 0x80
    2400:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2402:	2200      	movs	r2, #0
    2404:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2406:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2408:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    240a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    240c:	930a      	str	r3, [sp, #40]	; 0x28
    240e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2410:	930b      	str	r3, [sp, #44]	; 0x2c
    2412:	6c33      	ldr	r3, [r6, #64]	; 0x40
    2414:	930c      	str	r3, [sp, #48]	; 0x30
    2416:	6c73      	ldr	r3, [r6, #68]	; 0x44
    2418:	9302      	str	r3, [sp, #8]
    241a:	930d      	str	r3, [sp, #52]	; 0x34
    241c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    241e:	ae0a      	add	r6, sp, #40	; 0x28
    2420:	e066      	b.n	24f0 <usart_init+0x308>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2422:	2308      	movs	r3, #8
    2424:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2426:	3b07      	subs	r3, #7
    2428:	9307      	str	r3, [sp, #28]
    242a:	e756      	b.n	22da <usart_init+0xf2>
	ctrla = (uint32_t)config->data_order |
    242c:	6833      	ldr	r3, [r6, #0]
    242e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2430:	68f3      	ldr	r3, [r6, #12]
    2432:	469b      	mov	fp, r3
		config->sample_adjustment |
    2434:	6973      	ldr	r3, [r6, #20]
    2436:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2438:	7e33      	ldrb	r3, [r6, #24]
    243a:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    243c:	232e      	movs	r3, #46	; 0x2e
    243e:	5cf3      	ldrb	r3, [r6, r3]
    2440:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2442:	6873      	ldr	r3, [r6, #4]
    2444:	4699      	mov	r9, r3
	switch (transfer_mode)
    2446:	2b00      	cmp	r3, #0
    2448:	d019      	beq.n	247e <usart_init+0x296>
    244a:	2380      	movs	r3, #128	; 0x80
    244c:	055b      	lsls	r3, r3, #21
    244e:	4599      	cmp	r9, r3
    2450:	d001      	beq.n	2456 <usart_init+0x26e>
	enum status_code status_code = STATUS_OK;
    2452:	2300      	movs	r3, #0
    2454:	e027      	b.n	24a6 <usart_init+0x2be>
			if (!config->use_external_clock) {
    2456:	232f      	movs	r3, #47	; 0x2f
    2458:	5cf3      	ldrb	r3, [r6, r3]
    245a:	2b00      	cmp	r3, #0
    245c:	d000      	beq.n	2460 <usart_init+0x278>
    245e:	e751      	b.n	2304 <usart_init+0x11c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2460:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2462:	001f      	movs	r7, r3
    2464:	b2c0      	uxtb	r0, r0
    2466:	4b40      	ldr	r3, [pc, #256]	; (2568 <usart_init+0x380>)
    2468:	4798      	blx	r3
    246a:	0001      	movs	r1, r0
    246c:	220e      	movs	r2, #14
    246e:	ab06      	add	r3, sp, #24
    2470:	469c      	mov	ip, r3
    2472:	4462      	add	r2, ip
    2474:	0038      	movs	r0, r7
    2476:	4b3d      	ldr	r3, [pc, #244]	; (256c <usart_init+0x384>)
    2478:	4798      	blx	r3
    247a:	0003      	movs	r3, r0
    247c:	e013      	b.n	24a6 <usart_init+0x2be>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    247e:	2308      	movs	r3, #8
    2480:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2482:	2300      	movs	r3, #0
    2484:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2486:	232f      	movs	r3, #47	; 0x2f
    2488:	5cf3      	ldrb	r3, [r6, r3]
    248a:	2b00      	cmp	r3, #0
    248c:	d00f      	beq.n	24ae <usart_init+0x2c6>
				status_code =
    248e:	9b06      	ldr	r3, [sp, #24]
    2490:	9300      	str	r3, [sp, #0]
    2492:	9b07      	ldr	r3, [sp, #28]
    2494:	220e      	movs	r2, #14
    2496:	a906      	add	r1, sp, #24
    2498:	468c      	mov	ip, r1
    249a:	4462      	add	r2, ip
    249c:	6b31      	ldr	r1, [r6, #48]	; 0x30
    249e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    24a0:	4f33      	ldr	r7, [pc, #204]	; (2570 <usart_init+0x388>)
    24a2:	47b8      	blx	r7
    24a4:	0003      	movs	r3, r0
	if (status_code != STATUS_OK) {
    24a6:	2b00      	cmp	r3, #0
    24a8:	d000      	beq.n	24ac <usart_init+0x2c4>
    24aa:	e6b3      	b.n	2214 <usart_init+0x2c>
    24ac:	e72a      	b.n	2304 <usart_init+0x11c>
						_sercom_get_async_baud_val(config->baudrate,
    24ae:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    24b0:	001f      	movs	r7, r3
    24b2:	b2c0      	uxtb	r0, r0
    24b4:	4b2c      	ldr	r3, [pc, #176]	; (2568 <usart_init+0x380>)
    24b6:	4798      	blx	r3
    24b8:	0001      	movs	r1, r0
				status_code =
    24ba:	9b06      	ldr	r3, [sp, #24]
    24bc:	9300      	str	r3, [sp, #0]
    24be:	9b07      	ldr	r3, [sp, #28]
    24c0:	220e      	movs	r2, #14
    24c2:	a806      	add	r0, sp, #24
    24c4:	4684      	mov	ip, r0
    24c6:	4462      	add	r2, ip
    24c8:	0038      	movs	r0, r7
    24ca:	4f29      	ldr	r7, [pc, #164]	; (2570 <usart_init+0x388>)
    24cc:	47b8      	blx	r7
    24ce:	0003      	movs	r3, r0
    24d0:	e7e9      	b.n	24a6 <usart_init+0x2be>
		if(config->lin_slave_enable) {
    24d2:	7ef3      	ldrb	r3, [r6, #27]
    24d4:	2b00      	cmp	r3, #0
    24d6:	d100      	bne.n	24da <usart_init+0x2f2>
    24d8:	e754      	b.n	2384 <usart_init+0x19c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    24da:	2380      	movs	r3, #128	; 0x80
    24dc:	04db      	lsls	r3, r3, #19
    24de:	431a      	orrs	r2, r3
    24e0:	e750      	b.n	2384 <usart_init+0x19c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    24e2:	0020      	movs	r0, r4
    24e4:	4b23      	ldr	r3, [pc, #140]	; (2574 <usart_init+0x38c>)
    24e6:	4798      	blx	r3
    24e8:	e007      	b.n	24fa <usart_init+0x312>
    24ea:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    24ec:	2f04      	cmp	r7, #4
    24ee:	d00d      	beq.n	250c <usart_init+0x324>
    24f0:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    24f2:	00bb      	lsls	r3, r7, #2
    24f4:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    24f6:	2800      	cmp	r0, #0
    24f8:	d0f3      	beq.n	24e2 <usart_init+0x2fa>
		if (current_pinmux != PINMUX_UNUSED) {
    24fa:	1c43      	adds	r3, r0, #1
    24fc:	d0f5      	beq.n	24ea <usart_init+0x302>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    24fe:	a90e      	add	r1, sp, #56	; 0x38
    2500:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2502:	0c00      	lsrs	r0, r0, #16
    2504:	b2c0      	uxtb	r0, r0
    2506:	4b1c      	ldr	r3, [pc, #112]	; (2578 <usart_init+0x390>)
    2508:	4798      	blx	r3
    250a:	e7ee      	b.n	24ea <usart_init+0x302>
		module->callback[i]            = NULL;
    250c:	2300      	movs	r3, #0
    250e:	60eb      	str	r3, [r5, #12]
    2510:	612b      	str	r3, [r5, #16]
    2512:	616b      	str	r3, [r5, #20]
    2514:	61ab      	str	r3, [r5, #24]
    2516:	61eb      	str	r3, [r5, #28]
    2518:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    251a:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    251c:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    251e:	2200      	movs	r2, #0
    2520:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2522:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2524:	3330      	adds	r3, #48	; 0x30
    2526:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2528:	3301      	adds	r3, #1
    252a:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    252c:	3301      	adds	r3, #1
    252e:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2530:	3301      	adds	r3, #1
    2532:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2534:	6828      	ldr	r0, [r5, #0]
    2536:	4b05      	ldr	r3, [pc, #20]	; (254c <usart_init+0x364>)
    2538:	4798      	blx	r3
    253a:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    253c:	490f      	ldr	r1, [pc, #60]	; (257c <usart_init+0x394>)
    253e:	4b10      	ldr	r3, [pc, #64]	; (2580 <usart_init+0x398>)
    2540:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2542:	00a4      	lsls	r4, r4, #2
    2544:	4b0f      	ldr	r3, [pc, #60]	; (2584 <usart_init+0x39c>)
    2546:	50e5      	str	r5, [r4, r3]
	return status_code;
    2548:	2300      	movs	r3, #0
    254a:	e663      	b.n	2214 <usart_init+0x2c>
    254c:	00001b79 	.word	0x00001b79
    2550:	40000800 	.word	0x40000800
    2554:	00003d71 	.word	0x00003d71
    2558:	00003d01 	.word	0x00003d01
    255c:	000019b1 	.word	0x000019b1
    2560:	f0ffffff 	.word	0xf0ffffff
    2564:	41002000 	.word	0x41002000
    2568:	00003d95 	.word	0x00003d95
    256c:	000018f3 	.word	0x000018f3
    2570:	0000191d 	.word	0x0000191d
    2574:	000019fd 	.word	0x000019fd
    2578:	00003e6d 	.word	0x00003e6d
    257c:	00002685 	.word	0x00002685
    2580:	00002825 	.word	0x00002825
    2584:	200018f4 	.word	0x200018f4
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2588:	2310      	movs	r3, #16
    258a:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    258c:	2300      	movs	r3, #0
    258e:	9307      	str	r3, [sp, #28]
    2590:	e6a3      	b.n	22da <usart_init+0xf2>
    2592:	46c0      	nop			; (mov r8, r8)

00002594 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2596:	0006      	movs	r6, r0
    2598:	000c      	movs	r4, r1
    259a:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    259c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    259e:	4b0a      	ldr	r3, [pc, #40]	; (25c8 <_usart_write_buffer+0x34>)
    25a0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    25a2:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    25a4:	b29b      	uxth	r3, r3
    25a6:	2b00      	cmp	r3, #0
    25a8:	d003      	beq.n	25b2 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    25aa:	4b08      	ldr	r3, [pc, #32]	; (25cc <_usart_write_buffer+0x38>)
    25ac:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    25ae:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    25b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    25b2:	85f5      	strh	r5, [r6, #46]	; 0x2e
    25b4:	4b05      	ldr	r3, [pc, #20]	; (25cc <_usart_write_buffer+0x38>)
    25b6:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    25b8:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    25ba:	2205      	movs	r2, #5
    25bc:	2333      	movs	r3, #51	; 0x33
    25be:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    25c0:	3b32      	subs	r3, #50	; 0x32
    25c2:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    25c4:	2000      	movs	r0, #0
    25c6:	e7f3      	b.n	25b0 <_usart_write_buffer+0x1c>
    25c8:	000036a1 	.word	0x000036a1
    25cc:	000036e1 	.word	0x000036e1

000025d0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    25d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25d2:	0004      	movs	r4, r0
    25d4:	000d      	movs	r5, r1
    25d6:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    25d8:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    25da:	4b0f      	ldr	r3, [pc, #60]	; (2618 <_usart_read_buffer+0x48>)
    25dc:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    25de:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    25e0:	b29b      	uxth	r3, r3
    25e2:	2b00      	cmp	r3, #0
    25e4:	d003      	beq.n	25ee <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    25e6:	4b0d      	ldr	r3, [pc, #52]	; (261c <_usart_read_buffer+0x4c>)
    25e8:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    25ea:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    25ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    25ee:	85a6      	strh	r6, [r4, #44]	; 0x2c
    25f0:	4b0a      	ldr	r3, [pc, #40]	; (261c <_usart_read_buffer+0x4c>)
    25f2:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    25f4:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    25f6:	2205      	movs	r2, #5
    25f8:	2332      	movs	r3, #50	; 0x32
    25fa:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    25fc:	3b2e      	subs	r3, #46	; 0x2e
    25fe:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2600:	7a23      	ldrb	r3, [r4, #8]
    2602:	2b00      	cmp	r3, #0
    2604:	d001      	beq.n	260a <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2606:	2320      	movs	r3, #32
    2608:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    260a:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    260c:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    260e:	2b00      	cmp	r3, #0
    2610:	d0ec      	beq.n	25ec <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2612:	2308      	movs	r3, #8
    2614:	75bb      	strb	r3, [r7, #22]
    2616:	e7e9      	b.n	25ec <_usart_read_buffer+0x1c>
    2618:	000036a1 	.word	0x000036a1
    261c:	000036e1 	.word	0x000036e1

00002620 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2620:	1c93      	adds	r3, r2, #2
    2622:	009b      	lsls	r3, r3, #2
    2624:	18c3      	adds	r3, r0, r3
    2626:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2628:	2130      	movs	r1, #48	; 0x30
    262a:	2301      	movs	r3, #1
    262c:	4093      	lsls	r3, r2
    262e:	001a      	movs	r2, r3
    2630:	5c43      	ldrb	r3, [r0, r1]
    2632:	4313      	orrs	r3, r2
    2634:	5443      	strb	r3, [r0, r1]
}
    2636:	4770      	bx	lr

00002638 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    2638:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    263a:	2201      	movs	r2, #1
    263c:	4b01      	ldr	r3, [pc, #4]	; (2644 <usart_read_job+0xc>)
    263e:	4798      	blx	r3
}
    2640:	bd10      	pop	{r4, pc}
    2642:	46c0      	nop			; (mov r8, r8)
    2644:	000025d1 	.word	0x000025d1

00002648 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2648:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    264a:	2317      	movs	r3, #23
	if (length == 0) {
    264c:	2a00      	cmp	r2, #0
    264e:	d101      	bne.n	2654 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    2650:	0018      	movs	r0, r3
    2652:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    2654:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    2656:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    2658:	2c00      	cmp	r4, #0
    265a:	d0f9      	beq.n	2650 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    265c:	4b01      	ldr	r3, [pc, #4]	; (2664 <usart_write_buffer_job+0x1c>)
    265e:	4798      	blx	r3
    2660:	0003      	movs	r3, r0
    2662:	e7f5      	b.n	2650 <usart_write_buffer_job+0x8>
    2664:	00002595 	.word	0x00002595

00002668 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    2668:	2900      	cmp	r1, #0
    266a:	d003      	beq.n	2674 <usart_get_job_status+0xc>
    266c:	2901      	cmp	r1, #1
    266e:	d005      	beq.n	267c <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    2670:	2017      	movs	r0, #23
    2672:	e002      	b.n	267a <usart_get_job_status+0x12>
			status_code = module->rx_status;
    2674:	2332      	movs	r3, #50	; 0x32
    2676:	5cc0      	ldrb	r0, [r0, r3]
    2678:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    267a:	4770      	bx	lr
			status_code = module->tx_status;
    267c:	2333      	movs	r3, #51	; 0x33
    267e:	5cc0      	ldrb	r0, [r0, r3]
    2680:	b2c0      	uxtb	r0, r0
			break;
    2682:	e7fa      	b.n	267a <usart_get_job_status+0x12>

00002684 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2686:	0080      	lsls	r0, r0, #2
    2688:	4b64      	ldr	r3, [pc, #400]	; (281c <_usart_interrupt_handler+0x198>)
    268a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    268c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    268e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2690:	2b00      	cmp	r3, #0
    2692:	d1fc      	bne.n	268e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2694:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2696:	7da6      	ldrb	r6, [r4, #22]
    2698:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    269a:	2330      	movs	r3, #48	; 0x30
    269c:	5ceb      	ldrb	r3, [r5, r3]
    269e:	2231      	movs	r2, #49	; 0x31
    26a0:	5caf      	ldrb	r7, [r5, r2]
    26a2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    26a4:	07f3      	lsls	r3, r6, #31
    26a6:	d522      	bpl.n	26ee <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    26a8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    26aa:	b29b      	uxth	r3, r3
    26ac:	2b00      	cmp	r3, #0
    26ae:	d01c      	beq.n	26ea <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    26b0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    26b2:	7813      	ldrb	r3, [r2, #0]
    26b4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    26b6:	1c51      	adds	r1, r2, #1
    26b8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    26ba:	7969      	ldrb	r1, [r5, #5]
    26bc:	2901      	cmp	r1, #1
    26be:	d00e      	beq.n	26de <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    26c0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    26c2:	05db      	lsls	r3, r3, #23
    26c4:	0ddb      	lsrs	r3, r3, #23
    26c6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    26c8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    26ca:	3b01      	subs	r3, #1
    26cc:	b29b      	uxth	r3, r3
    26ce:	85eb      	strh	r3, [r5, #46]	; 0x2e
    26d0:	2b00      	cmp	r3, #0
    26d2:	d10c      	bne.n	26ee <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    26d4:	3301      	adds	r3, #1
    26d6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    26d8:	3301      	adds	r3, #1
    26da:	75a3      	strb	r3, [r4, #22]
    26dc:	e007      	b.n	26ee <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    26de:	7851      	ldrb	r1, [r2, #1]
    26e0:	0209      	lsls	r1, r1, #8
    26e2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    26e4:	3202      	adds	r2, #2
    26e6:	62aa      	str	r2, [r5, #40]	; 0x28
    26e8:	e7eb      	b.n	26c2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    26ea:	2301      	movs	r3, #1
    26ec:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    26ee:	07b3      	lsls	r3, r6, #30
    26f0:	d506      	bpl.n	2700 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    26f2:	2302      	movs	r3, #2
    26f4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    26f6:	2200      	movs	r2, #0
    26f8:	3331      	adds	r3, #49	; 0x31
    26fa:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    26fc:	07fb      	lsls	r3, r7, #31
    26fe:	d41e      	bmi.n	273e <_usart_interrupt_handler+0xba>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2700:	0773      	lsls	r3, r6, #29
    2702:	d568      	bpl.n	27d6 <_usart_interrupt_handler+0x152>

		if (module->remaining_rx_buffer_length) {
    2704:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2706:	b29b      	uxth	r3, r3
    2708:	2b00      	cmp	r3, #0
    270a:	d062      	beq.n	27d2 <_usart_interrupt_handler+0x14e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    270c:	8b63      	ldrh	r3, [r4, #26]
    270e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2710:	071a      	lsls	r2, r3, #28
    2712:	d418      	bmi.n	2746 <_usart_interrupt_handler+0xc2>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2714:	227f      	movs	r2, #127	; 0x7f
    2716:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    2718:	065a      	lsls	r2, r3, #25
    271a:	d501      	bpl.n	2720 <_usart_interrupt_handler+0x9c>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    271c:	2240      	movs	r2, #64	; 0x40
    271e:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2720:	2b00      	cmp	r3, #0
    2722:	d033      	beq.n	278c <_usart_interrupt_handler+0x108>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2724:	079a      	lsls	r2, r3, #30
    2726:	d511      	bpl.n	274c <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2728:	221a      	movs	r2, #26
    272a:	2332      	movs	r3, #50	; 0x32
    272c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    272e:	3b30      	subs	r3, #48	; 0x30
    2730:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2732:	077b      	lsls	r3, r7, #29
    2734:	d54f      	bpl.n	27d6 <_usart_interrupt_handler+0x152>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2736:	0028      	movs	r0, r5
    2738:	696b      	ldr	r3, [r5, #20]
    273a:	4798      	blx	r3
    273c:	e04b      	b.n	27d6 <_usart_interrupt_handler+0x152>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    273e:	0028      	movs	r0, r5
    2740:	68eb      	ldr	r3, [r5, #12]
    2742:	4798      	blx	r3
    2744:	e7dc      	b.n	2700 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2746:	2277      	movs	r2, #119	; 0x77
    2748:	4013      	ands	r3, r2
    274a:	e7e5      	b.n	2718 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    274c:	075a      	lsls	r2, r3, #29
    274e:	d505      	bpl.n	275c <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2750:	221e      	movs	r2, #30
    2752:	2332      	movs	r3, #50	; 0x32
    2754:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2756:	3b2e      	subs	r3, #46	; 0x2e
    2758:	8363      	strh	r3, [r4, #26]
    275a:	e7ea      	b.n	2732 <_usart_interrupt_handler+0xae>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    275c:	07da      	lsls	r2, r3, #31
    275e:	d505      	bpl.n	276c <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2760:	2213      	movs	r2, #19
    2762:	2332      	movs	r3, #50	; 0x32
    2764:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2766:	3b31      	subs	r3, #49	; 0x31
    2768:	8363      	strh	r3, [r4, #26]
    276a:	e7e2      	b.n	2732 <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    276c:	06da      	lsls	r2, r3, #27
    276e:	d505      	bpl.n	277c <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2770:	2242      	movs	r2, #66	; 0x42
    2772:	2332      	movs	r3, #50	; 0x32
    2774:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2776:	3b22      	subs	r3, #34	; 0x22
    2778:	8363      	strh	r3, [r4, #26]
    277a:	e7da      	b.n	2732 <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    277c:	069b      	lsls	r3, r3, #26
    277e:	d5d8      	bpl.n	2732 <_usart_interrupt_handler+0xae>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2780:	2241      	movs	r2, #65	; 0x41
    2782:	2332      	movs	r3, #50	; 0x32
    2784:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2786:	3b12      	subs	r3, #18
    2788:	8363      	strh	r3, [r4, #26]
    278a:	e7d2      	b.n	2732 <_usart_interrupt_handler+0xae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    278c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    278e:	05db      	lsls	r3, r3, #23
    2790:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2792:	b2da      	uxtb	r2, r3
    2794:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2796:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2798:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    279a:	1c51      	adds	r1, r2, #1
    279c:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    279e:	7969      	ldrb	r1, [r5, #5]
    27a0:	2901      	cmp	r1, #1
    27a2:	d010      	beq.n	27c6 <_usart_interrupt_handler+0x142>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    27a4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    27a6:	3b01      	subs	r3, #1
    27a8:	b29b      	uxth	r3, r3
    27aa:	85ab      	strh	r3, [r5, #44]	; 0x2c
    27ac:	2b00      	cmp	r3, #0
    27ae:	d112      	bne.n	27d6 <_usart_interrupt_handler+0x152>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    27b0:	3304      	adds	r3, #4
    27b2:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    27b4:	2200      	movs	r2, #0
    27b6:	332e      	adds	r3, #46	; 0x2e
    27b8:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    27ba:	07bb      	lsls	r3, r7, #30
    27bc:	d50b      	bpl.n	27d6 <_usart_interrupt_handler+0x152>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    27be:	0028      	movs	r0, r5
    27c0:	692b      	ldr	r3, [r5, #16]
    27c2:	4798      	blx	r3
    27c4:	e007      	b.n	27d6 <_usart_interrupt_handler+0x152>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    27c6:	0a1b      	lsrs	r3, r3, #8
    27c8:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    27ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    27cc:	3301      	adds	r3, #1
    27ce:	626b      	str	r3, [r5, #36]	; 0x24
    27d0:	e7e8      	b.n	27a4 <_usart_interrupt_handler+0x120>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    27d2:	2304      	movs	r3, #4
    27d4:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    27d6:	06f3      	lsls	r3, r6, #27
    27d8:	d504      	bpl.n	27e4 <_usart_interrupt_handler+0x160>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    27da:	2310      	movs	r3, #16
    27dc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    27de:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    27e0:	06fb      	lsls	r3, r7, #27
    27e2:	d40e      	bmi.n	2802 <_usart_interrupt_handler+0x17e>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    27e4:	06b3      	lsls	r3, r6, #26
    27e6:	d504      	bpl.n	27f2 <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    27e8:	2320      	movs	r3, #32
    27ea:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    27ec:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    27ee:	073b      	lsls	r3, r7, #28
    27f0:	d40b      	bmi.n	280a <_usart_interrupt_handler+0x186>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    27f2:	0733      	lsls	r3, r6, #28
    27f4:	d504      	bpl.n	2800 <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    27f6:	2308      	movs	r3, #8
    27f8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    27fa:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    27fc:	06bb      	lsls	r3, r7, #26
    27fe:	d408      	bmi.n	2812 <_usart_interrupt_handler+0x18e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2802:	0028      	movs	r0, r5
    2804:	69eb      	ldr	r3, [r5, #28]
    2806:	4798      	blx	r3
    2808:	e7ec      	b.n	27e4 <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    280a:	0028      	movs	r0, r5
    280c:	69ab      	ldr	r3, [r5, #24]
    280e:	4798      	blx	r3
    2810:	e7ef      	b.n	27f2 <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2812:	6a2b      	ldr	r3, [r5, #32]
    2814:	0028      	movs	r0, r5
    2816:	4798      	blx	r3
}
    2818:	e7f2      	b.n	2800 <_usart_interrupt_handler+0x17c>
    281a:	46c0      	nop			; (mov r8, r8)
    281c:	200018f4 	.word	0x200018f4

00002820 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2820:	4770      	bx	lr
	...

00002824 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2824:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2826:	4b0a      	ldr	r3, [pc, #40]	; (2850 <_sercom_set_handler+0x2c>)
    2828:	781b      	ldrb	r3, [r3, #0]
    282a:	2b00      	cmp	r3, #0
    282c:	d10c      	bne.n	2848 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    282e:	4f09      	ldr	r7, [pc, #36]	; (2854 <_sercom_set_handler+0x30>)
    2830:	4e09      	ldr	r6, [pc, #36]	; (2858 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2832:	4d0a      	ldr	r5, [pc, #40]	; (285c <_sercom_set_handler+0x38>)
    2834:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2836:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2838:	195a      	adds	r2, r3, r5
    283a:	6014      	str	r4, [r2, #0]
    283c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    283e:	2b18      	cmp	r3, #24
    2840:	d1f9      	bne.n	2836 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    2842:	2201      	movs	r2, #1
    2844:	4b02      	ldr	r3, [pc, #8]	; (2850 <_sercom_set_handler+0x2c>)
    2846:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2848:	0080      	lsls	r0, r0, #2
    284a:	4b02      	ldr	r3, [pc, #8]	; (2854 <_sercom_set_handler+0x30>)
    284c:	50c1      	str	r1, [r0, r3]
}
    284e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2850:	200000ae 	.word	0x200000ae
    2854:	200000b0 	.word	0x200000b0
    2858:	00002821 	.word	0x00002821
    285c:	200018f4 	.word	0x200018f4

00002860 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2860:	b500      	push	{lr}
    2862:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2864:	2309      	movs	r3, #9
    2866:	466a      	mov	r2, sp
    2868:	7013      	strb	r3, [r2, #0]
    286a:	3301      	adds	r3, #1
    286c:	7053      	strb	r3, [r2, #1]
    286e:	3301      	adds	r3, #1
    2870:	7093      	strb	r3, [r2, #2]
    2872:	3301      	adds	r3, #1
    2874:	70d3      	strb	r3, [r2, #3]
    2876:	3301      	adds	r3, #1
    2878:	7113      	strb	r3, [r2, #4]
    287a:	3301      	adds	r3, #1
    287c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    287e:	4b03      	ldr	r3, [pc, #12]	; (288c <_sercom_get_interrupt_vector+0x2c>)
    2880:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2882:	466b      	mov	r3, sp
    2884:	5618      	ldrsb	r0, [r3, r0]
}
    2886:	b003      	add	sp, #12
    2888:	bd00      	pop	{pc}
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	00001b79 	.word	0x00001b79

00002890 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2890:	b510      	push	{r4, lr}
    2892:	4b02      	ldr	r3, [pc, #8]	; (289c <SERCOM0_Handler+0xc>)
    2894:	681b      	ldr	r3, [r3, #0]
    2896:	2000      	movs	r0, #0
    2898:	4798      	blx	r3
    289a:	bd10      	pop	{r4, pc}
    289c:	200000b0 	.word	0x200000b0

000028a0 <SERCOM1_Handler>:
    28a0:	b510      	push	{r4, lr}
    28a2:	4b02      	ldr	r3, [pc, #8]	; (28ac <SERCOM1_Handler+0xc>)
    28a4:	685b      	ldr	r3, [r3, #4]
    28a6:	2001      	movs	r0, #1
    28a8:	4798      	blx	r3
    28aa:	bd10      	pop	{r4, pc}
    28ac:	200000b0 	.word	0x200000b0

000028b0 <SERCOM2_Handler>:
    28b0:	b510      	push	{r4, lr}
    28b2:	4b02      	ldr	r3, [pc, #8]	; (28bc <SERCOM2_Handler+0xc>)
    28b4:	689b      	ldr	r3, [r3, #8]
    28b6:	2002      	movs	r0, #2
    28b8:	4798      	blx	r3
    28ba:	bd10      	pop	{r4, pc}
    28bc:	200000b0 	.word	0x200000b0

000028c0 <SERCOM3_Handler>:
    28c0:	b510      	push	{r4, lr}
    28c2:	4b02      	ldr	r3, [pc, #8]	; (28cc <SERCOM3_Handler+0xc>)
    28c4:	68db      	ldr	r3, [r3, #12]
    28c6:	2003      	movs	r0, #3
    28c8:	4798      	blx	r3
    28ca:	bd10      	pop	{r4, pc}
    28cc:	200000b0 	.word	0x200000b0

000028d0 <SERCOM4_Handler>:
    28d0:	b510      	push	{r4, lr}
    28d2:	4b02      	ldr	r3, [pc, #8]	; (28dc <SERCOM4_Handler+0xc>)
    28d4:	691b      	ldr	r3, [r3, #16]
    28d6:	2004      	movs	r0, #4
    28d8:	4798      	blx	r3
    28da:	bd10      	pop	{r4, pc}
    28dc:	200000b0 	.word	0x200000b0

000028e0 <SERCOM5_Handler>:
    28e0:	b510      	push	{r4, lr}
    28e2:	4b02      	ldr	r3, [pc, #8]	; (28ec <SERCOM5_Handler+0xc>)
    28e4:	695b      	ldr	r3, [r3, #20]
    28e6:	2005      	movs	r0, #5
    28e8:	4798      	blx	r3
    28ea:	bd10      	pop	{r4, pc}
    28ec:	200000b0 	.word	0x200000b0

000028f0 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
    28f0:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
    28f2:	0080      	lsls	r0, r0, #2
    28f4:	4b1f      	ldr	r3, [pc, #124]	; (2974 <_ac_interrupt_handler+0x84>)
    28f6:	58c4      	ldr	r4, [r0, r3]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
    28f8:	6823      	ldr	r3, [r4, #0]
    28fa:	799d      	ldrb	r5, [r3, #6]
	interrupt_and_callback_status_mask =
    28fc:	7f22      	ldrb	r2, [r4, #28]
    28fe:	7f63      	ldrb	r3, [r4, #29]
    2900:	4013      	ands	r3, r2
    2902:	401d      	ands	r5, r3
			(module->register_callback_mask & module->enable_callback_mask);

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
    2904:	07eb      	lsls	r3, r5, #31
    2906:	d40a      	bmi.n	291e <_ac_interrupt_handler+0x2e>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
    2908:	07ab      	lsls	r3, r5, #30
    290a:	d40f      	bmi.n	292c <_ac_interrupt_handler+0x3c>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
    290c:	06eb      	lsls	r3, r5, #27
    290e:	d414      	bmi.n	293a <_ac_interrupt_handler+0x4a>
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
	}

#if (AC_NUM_CMP > 2)
		/* Check if comparator channel 2 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP2) {
    2910:	076b      	lsls	r3, r5, #29
    2912:	d419      	bmi.n	2948 <_ac_interrupt_handler+0x58>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP2;
	}

	/* Check if comparator channel 3 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP3) {
    2914:	072b      	lsls	r3, r5, #28
    2916:	d41e      	bmi.n	2956 <_ac_interrupt_handler+0x66>
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP3;
	}

#  if !(SAMC20)
		/* Check if window 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN1) {
    2918:	06ab      	lsls	r3, r5, #26
    291a:	d423      	bmi.n	2964 <_ac_interrupt_handler+0x74>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
    291c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
    291e:	0020      	movs	r0, r4
    2920:	6863      	ldr	r3, [r4, #4]
    2922:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
    2924:	2301      	movs	r3, #1
    2926:	6822      	ldr	r2, [r4, #0]
    2928:	7193      	strb	r3, [r2, #6]
    292a:	e7ed      	b.n	2908 <_ac_interrupt_handler+0x18>
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
    292c:	0020      	movs	r0, r4
    292e:	68a3      	ldr	r3, [r4, #8]
    2930:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
    2932:	2302      	movs	r3, #2
    2934:	6822      	ldr	r2, [r4, #0]
    2936:	7193      	strb	r3, [r2, #6]
    2938:	e7e8      	b.n	290c <_ac_interrupt_handler+0x1c>
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
    293a:	0020      	movs	r0, r4
    293c:	6963      	ldr	r3, [r4, #20]
    293e:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
    2940:	2310      	movs	r3, #16
    2942:	6822      	ldr	r2, [r4, #0]
    2944:	7193      	strb	r3, [r2, #6]
    2946:	e7e3      	b.n	2910 <_ac_interrupt_handler+0x20>
		(module->callback[AC_CALLBACK_COMPARATOR_2])(module);
    2948:	0020      	movs	r0, r4
    294a:	68e3      	ldr	r3, [r4, #12]
    294c:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP2;
    294e:	2304      	movs	r3, #4
    2950:	6822      	ldr	r2, [r4, #0]
    2952:	7193      	strb	r3, [r2, #6]
    2954:	e7de      	b.n	2914 <_ac_interrupt_handler+0x24>
		(module->callback[AC_CALLBACK_COMPARATOR_3])(module);
    2956:	0020      	movs	r0, r4
    2958:	6923      	ldr	r3, [r4, #16]
    295a:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP3;
    295c:	2308      	movs	r3, #8
    295e:	6822      	ldr	r2, [r4, #0]
    2960:	7193      	strb	r3, [r2, #6]
    2962:	e7d9      	b.n	2918 <_ac_interrupt_handler+0x28>
		(module->callback[AC_CALLBACK_WINDOW_1])(module);
    2964:	0020      	movs	r0, r4
    2966:	69a3      	ldr	r3, [r4, #24]
    2968:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
    296a:	6823      	ldr	r3, [r4, #0]
    296c:	2220      	movs	r2, #32
    296e:	719a      	strb	r2, [r3, #6]
}
    2970:	e7d4      	b.n	291c <_ac_interrupt_handler+0x2c>
    2972:	46c0      	nop			; (mov r8, r8)
    2974:	2000190c 	.word	0x2000190c

00002978 <AC_Handler>:
{
    2978:	b510      	push	{r4, lr}
	_ac_interrupt_handler(0);
    297a:	2000      	movs	r0, #0
    297c:	4b01      	ldr	r3, [pc, #4]	; (2984 <AC_Handler+0xc>)
    297e:	4798      	blx	r3
}
    2980:	bd10      	pop	{r4, pc}
    2982:	46c0      	nop			; (mov r8, r8)
    2984:	000028f1 	.word	0x000028f1

00002988 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2988:	b500      	push	{lr}
    298a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    298c:	ab01      	add	r3, sp, #4
    298e:	2280      	movs	r2, #128	; 0x80
    2990:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2992:	780a      	ldrb	r2, [r1, #0]
    2994:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2996:	784a      	ldrb	r2, [r1, #1]
    2998:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    299a:	788a      	ldrb	r2, [r1, #2]
    299c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    299e:	0019      	movs	r1, r3
    29a0:	4b01      	ldr	r3, [pc, #4]	; (29a8 <port_pin_set_config+0x20>)
    29a2:	4798      	blx	r3
}
    29a4:	b003      	add	sp, #12
    29a6:	bd00      	pop	{pc}
    29a8:	00003e6d 	.word	0x00003e6d

000029ac <adc0_window_callback>:
    adc0_change_channel(adc_ch);
    adc_read_buffer_job(&adc0_instance, result+adc_ch, 1);

}
void adc0_window_callback(void)
{
    29ac:	b510      	push	{r4, lr}
    switch(adc_ch-2) {
    29ae:	4b11      	ldr	r3, [pc, #68]	; (29f4 <adc0_window_callback+0x48>)
    29b0:	781b      	ldrb	r3, [r3, #0]
    29b2:	3b02      	subs	r3, #2
    29b4:	2b04      	cmp	r3, #4
    29b6:	d807      	bhi.n	29c8 <adc0_window_callback+0x1c>
    29b8:	009b      	lsls	r3, r3, #2
    29ba:	4a0f      	ldr	r2, [pc, #60]	; (29f8 <adc0_window_callback+0x4c>)
    29bc:	58d3      	ldr	r3, [r2, r3]
    29be:	469f      	mov	pc, r3
        case 0:
            adsr_trigger(adsr0);
    29c0:	4b0e      	ldr	r3, [pc, #56]	; (29fc <adc0_window_callback+0x50>)
    29c2:	6818      	ldr	r0, [r3, #0]
    29c4:	4b0e      	ldr	r3, [pc, #56]	; (2a00 <adc0_window_callback+0x54>)
    29c6:	4798      	blx	r3
        case 4:
            adsr_trigger(adsr4);
            break;
            //sprozi ADSRje
    }
}
    29c8:	bd10      	pop	{r4, pc}
            adsr_trigger(adsr1);
    29ca:	4b0e      	ldr	r3, [pc, #56]	; (2a04 <adc0_window_callback+0x58>)
    29cc:	6818      	ldr	r0, [r3, #0]
    29ce:	4b0c      	ldr	r3, [pc, #48]	; (2a00 <adc0_window_callback+0x54>)
    29d0:	4798      	blx	r3
            break;
    29d2:	e7f9      	b.n	29c8 <adc0_window_callback+0x1c>
            adsr_trigger(adsr2);
    29d4:	4b0c      	ldr	r3, [pc, #48]	; (2a08 <adc0_window_callback+0x5c>)
    29d6:	6818      	ldr	r0, [r3, #0]
    29d8:	4b09      	ldr	r3, [pc, #36]	; (2a00 <adc0_window_callback+0x54>)
    29da:	4798      	blx	r3
            break;
    29dc:	e7f4      	b.n	29c8 <adc0_window_callback+0x1c>
            adsr_trigger(adsr3);
    29de:	4b0b      	ldr	r3, [pc, #44]	; (2a0c <adc0_window_callback+0x60>)
    29e0:	6818      	ldr	r0, [r3, #0]
    29e2:	4b07      	ldr	r3, [pc, #28]	; (2a00 <adc0_window_callback+0x54>)
    29e4:	4798      	blx	r3
            break;
    29e6:	e7ef      	b.n	29c8 <adc0_window_callback+0x1c>
            adsr_trigger(adsr4);
    29e8:	4b09      	ldr	r3, [pc, #36]	; (2a10 <adc0_window_callback+0x64>)
    29ea:	6818      	ldr	r0, [r3, #0]
    29ec:	4b04      	ldr	r3, [pc, #16]	; (2a00 <adc0_window_callback+0x54>)
    29ee:	4798      	blx	r3
}
    29f0:	e7ea      	b.n	29c8 <adc0_window_callback+0x1c>
    29f2:	46c0      	nop			; (mov r8, r8)
    29f4:	200000c8 	.word	0x200000c8
    29f8:	00007c28 	.word	0x00007c28
    29fc:	20001914 	.word	0x20001914
    2a00:	000006a5 	.word	0x000006a5
    2a04:	20001918 	.word	0x20001918
    2a08:	20001910 	.word	0x20001910
    2a0c:	2000191c 	.word	0x2000191c
    2a10:	2000194c 	.word	0x2000194c

00002a14 <configure_adc0_callbacks>:
{
    2a14:	b570      	push	{r4, r5, r6, lr}
    adc_register_callback(&adc0_instance, adc0_window_callback, ADC_CALLBACK_WINDOW);
    2a16:	4c0b      	ldr	r4, [pc, #44]	; (2a44 <configure_adc0_callbacks+0x30>)
    2a18:	2201      	movs	r2, #1
    2a1a:	490b      	ldr	r1, [pc, #44]	; (2a48 <configure_adc0_callbacks+0x34>)
    2a1c:	0020      	movs	r0, r4
    2a1e:	4d0b      	ldr	r5, [pc, #44]	; (2a4c <configure_adc0_callbacks+0x38>)
    2a20:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    2a22:	7ee3      	ldrb	r3, [r4, #27]
    2a24:	2202      	movs	r2, #2
    2a26:	4313      	orrs	r3, r2
    2a28:	76e3      	strb	r3, [r4, #27]
	adc_module->INTENSET.reg = interrupt;
    2a2a:	2304      	movs	r3, #4
    2a2c:	6822      	ldr	r2, [r4, #0]
    2a2e:	7153      	strb	r3, [r2, #5]
    adc_register_callback(&adc0_instance, adc0_read_callback, ADC_CALLBACK_READ_BUFFER);
    2a30:	2200      	movs	r2, #0
    2a32:	4907      	ldr	r1, [pc, #28]	; (2a50 <configure_adc0_callbacks+0x3c>)
    2a34:	0020      	movs	r0, r4
    2a36:	47a8      	blx	r5
    2a38:	7ee3      	ldrb	r3, [r4, #27]
    2a3a:	2201      	movs	r2, #1
    2a3c:	4313      	orrs	r3, r2
    2a3e:	76e3      	strb	r3, [r4, #27]
}
    2a40:	bd70      	pop	{r4, r5, r6, pc}
    2a42:	46c0      	nop			; (mov r8, r8)
    2a44:	20001920 	.word	0x20001920
    2a48:	000029ad 	.word	0x000029ad
    2a4c:	00001275 	.word	0x00001275
    2a50:	00002b95 	.word	0x00002b95

00002a54 <configure_adc0>:
{
    2a54:	b530      	push	{r4, r5, lr}
    2a56:	b08d      	sub	sp, #52	; 0x34
    adsr0=a0;
    2a58:	4c28      	ldr	r4, [pc, #160]	; (2afc <configure_adc0+0xa8>)
    2a5a:	6020      	str	r0, [r4, #0]
    adsr1=a1;
    2a5c:	4828      	ldr	r0, [pc, #160]	; (2b00 <configure_adc0+0xac>)
    2a5e:	6001      	str	r1, [r0, #0]
    adsr2=a2;
    2a60:	4928      	ldr	r1, [pc, #160]	; (2b04 <configure_adc0+0xb0>)
    2a62:	600a      	str	r2, [r1, #0]
    adsr3=a3;
    2a64:	4a28      	ldr	r2, [pc, #160]	; (2b08 <configure_adc0+0xb4>)
    2a66:	6013      	str	r3, [r2, #0]
    adsr4=a4;
    2a68:	4b28      	ldr	r3, [pc, #160]	; (2b0c <configure_adc0+0xb8>)
    2a6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2a6c:	601a      	str	r2, [r3, #0]
    adc_get_config_defaults(&config_adc);
    2a6e:	ac01      	add	r4, sp, #4
    2a70:	0020      	movs	r0, r4
    2a72:	4b27      	ldr	r3, [pc, #156]	; (2b10 <configure_adc0+0xbc>)
    2a74:	4798      	blx	r3
    config_adc.clock_source                  = GCLK_GENERATOR_7;
    2a76:	2207      	movs	r2, #7
    2a78:	7022      	strb	r2, [r4, #0]
    config_adc.reference                     = ADC_REFERENCE_INTVCC2;
    2a7a:	2305      	movs	r3, #5
    2a7c:	7063      	strb	r3, [r4, #1]
    config_adc.clock_prescaler               = ADC_CLOCK_PRESCALER_DIV8;
    2a7e:	3b03      	subs	r3, #3
    2a80:	70a3      	strb	r3, [r4, #2]
    config_adc.resolution                    = ADC_RESOLUTION_10BIT;
    2a82:	331e      	adds	r3, #30
    2a84:	70e3      	strb	r3, [r4, #3]
    config_adc.window.window_mode            = ADC_WINDOW_MODE_ABOVE_LOWER;
    2a86:	33e0      	adds	r3, #224	; 0xe0
    2a88:	8323      	strh	r3, [r4, #24]
    config_adc.window.window_upper_value     = 0;
    2a8a:	2300      	movs	r3, #0
    2a8c:	6223      	str	r3, [r4, #32]
    config_adc.window.window_lower_value     = 2800;
    2a8e:	21af      	movs	r1, #175	; 0xaf
    2a90:	0109      	lsls	r1, r1, #4
    2a92:	61e1      	str	r1, [r4, #28]
    config_adc.positive_input                = ADC_POSITIVE_INPUT_PIN7;
    2a94:	7122      	strb	r2, [r4, #4]
    config_adc.negative_input                = ADC_NEGATIVE_INPUT_GND;
    2a96:	22c0      	movs	r2, #192	; 0xc0
    2a98:	0152      	lsls	r2, r2, #5
    2a9a:	80e2      	strh	r2, [r4, #6]
    config_adc.left_adjust                   = false;
    2a9c:	72a3      	strb	r3, [r4, #10]
    config_adc.freerunning                   = true;
    2a9e:	2201      	movs	r2, #1
    2aa0:	7322      	strb	r2, [r4, #12]
    config_adc.positive_input_sequence_mask_enable = 0;
    2aa2:	6123      	str	r3, [r4, #16]
    adc_init(&adc0_instance, ADC0, &config_adc);
    2aa4:	4d1b      	ldr	r5, [pc, #108]	; (2b14 <configure_adc0+0xc0>)
    2aa6:	0022      	movs	r2, r4
    2aa8:	491b      	ldr	r1, [pc, #108]	; (2b18 <configure_adc0+0xc4>)
    2aaa:	0028      	movs	r0, r5
    2aac:	4b1b      	ldr	r3, [pc, #108]	; (2b1c <configure_adc0+0xc8>)
    2aae:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2ab0:	682c      	ldr	r4, [r5, #0]
    2ab2:	8c23      	ldrh	r3, [r4, #32]
    2ab4:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2ab6:	2b00      	cmp	r3, #0
    2ab8:	d1fb      	bne.n	2ab2 <configure_adc0+0x5e>
			_adc_get_inst_index(adc_module)));
    2aba:	0020      	movs	r0, r4
    2abc:	4b18      	ldr	r3, [pc, #96]	; (2b20 <configure_adc0+0xcc>)
    2abe:	4798      	blx	r3
	return (enum system_interrupt_vector)adc_interrupt_vectors[inst_num];
    2ac0:	4b18      	ldr	r3, [pc, #96]	; (2b24 <configure_adc0+0xd0>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2ac2:	5c1b      	ldrb	r3, [r3, r0]
    2ac4:	221f      	movs	r2, #31
    2ac6:	401a      	ands	r2, r3
    2ac8:	2301      	movs	r3, #1
    2aca:	4093      	lsls	r3, r2
    2acc:	4a16      	ldr	r2, [pc, #88]	; (2b28 <configure_adc0+0xd4>)
    2ace:	6013      	str	r3, [r2, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2ad0:	2307      	movs	r3, #7
    2ad2:	7123      	strb	r3, [r4, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2ad4:	71a3      	strb	r3, [r4, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2ad6:	7823      	ldrb	r3, [r4, #0]
    2ad8:	2202      	movs	r2, #2
    2ada:	4313      	orrs	r3, r2
    2adc:	7023      	strb	r3, [r4, #0]
	Adc *const adc_module = module_inst->hw;
    2ade:	4b0d      	ldr	r3, [pc, #52]	; (2b14 <configure_adc0+0xc0>)
    2ae0:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    2ae2:	8c13      	ldrh	r3, [r2, #32]
    2ae4:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2ae6:	2b00      	cmp	r3, #0
    2ae8:	d1fb      	bne.n	2ae2 <configure_adc0+0x8e>
    configure_adc0_callbacks();
    2aea:	4b10      	ldr	r3, [pc, #64]	; (2b2c <configure_adc0+0xd8>)
    2aec:	4798      	blx	r3
    adc_read_buffer_job(&adc0_instance, &result, 1);
    2aee:	2201      	movs	r2, #1
    2af0:	490f      	ldr	r1, [pc, #60]	; (2b30 <configure_adc0+0xdc>)
    2af2:	4808      	ldr	r0, [pc, #32]	; (2b14 <configure_adc0+0xc0>)
    2af4:	4b0f      	ldr	r3, [pc, #60]	; (2b34 <configure_adc0+0xe0>)
    2af6:	4798      	blx	r3
}
    2af8:	b00d      	add	sp, #52	; 0x34
    2afa:	bd30      	pop	{r4, r5, pc}
    2afc:	20001914 	.word	0x20001914
    2b00:	20001918 	.word	0x20001918
    2b04:	20001910 	.word	0x20001910
    2b08:	2000191c 	.word	0x2000191c
    2b0c:	2000194c 	.word	0x2000194c
    2b10:	00000c11 	.word	0x00000c11
    2b14:	20001920 	.word	0x20001920
    2b18:	42004400 	.word	0x42004400
    2b1c:	00000c99 	.word	0x00000c99
    2b20:	00000bed 	.word	0x00000bed
    2b24:	00007c3c 	.word	0x00007c3c
    2b28:	e000e100 	.word	0xe000e100
    2b2c:	00002a15 	.word	0x00002a15
    2b30:	20001940 	.word	0x20001940
    2b34:	00001289 	.word	0x00001289

00002b38 <adc0_set_compare_value>:
void adc0_set_compare_value(uint8_t value)
{
    2b38:	b510      	push	{r4, lr}
    adc_set_window_mode(&adc0_instance, ADC_WINDOW_MODE_ABOVE_LOWER, 90, 255);
    2b3a:	23ff      	movs	r3, #255	; 0xff
    2b3c:	225a      	movs	r2, #90	; 0x5a
    2b3e:	2180      	movs	r1, #128	; 0x80
    2b40:	0049      	lsls	r1, r1, #1
    2b42:	4802      	ldr	r0, [pc, #8]	; (2b4c <adc0_set_compare_value+0x14>)
    2b44:	4c02      	ldr	r4, [pc, #8]	; (2b50 <adc0_set_compare_value+0x18>)
    2b46:	47a0      	blx	r4
}
    2b48:	bd10      	pop	{r4, pc}
    2b4a:	46c0      	nop			; (mov r8, r8)
    2b4c:	20001920 	.word	0x20001920
    2b50:	00000c55 	.word	0x00000c55

00002b54 <adc0_change_channel>:
void adc0_change_channel(uint8_t channel)
{
    2b54:	b082      	sub	sp, #8
    const enum adc_positive_input adc_pin[5] = {ADC_POSITIVE_INPUT_PIN7,
    2b56:	2307      	movs	r3, #7
    2b58:	466a      	mov	r2, sp
    2b5a:	7013      	strb	r3, [r2, #0]
    2b5c:	3b01      	subs	r3, #1
    2b5e:	7053      	strb	r3, [r2, #1]
    2b60:	3b01      	subs	r3, #1
    2b62:	7093      	strb	r3, [r2, #2]
    2b64:	3b01      	subs	r3, #1
    2b66:	70d3      	strb	r3, [r2, #3]
    2b68:	3b03      	subs	r3, #3
    2b6a:	7113      	strb	r3, [r2, #4]
                                                ADC_POSITIVE_INPUT_PIN6,
                                                ADC_POSITIVE_INPUT_PIN5,
                                                ADC_POSITIVE_INPUT_PIN4,
                                                ADC_POSITIVE_INPUT_PIN1,
                                               };
    adc_set_positive_input(&adc0_instance, adc_pin[channel]);
    2b6c:	5c11      	ldrb	r1, [r2, r0]
	Adc *const adc_module = module_inst->hw;
    2b6e:	4b08      	ldr	r3, [pc, #32]	; (2b90 <adc0_change_channel+0x3c>)
    2b70:	681a      	ldr	r2, [r3, #0]
    2b72:	8c13      	ldrh	r3, [r2, #32]
    2b74:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2b76:	2b00      	cmp	r3, #0
    2b78:	d1fb      	bne.n	2b72 <adc0_change_channel+0x1e>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    2b7a:	8913      	ldrh	r3, [r2, #8]
    2b7c:	201f      	movs	r0, #31
    2b7e:	4383      	bics	r3, r0
    2b80:	430b      	orrs	r3, r1
	adc_module->INPUTCTRL.reg =
    2b82:	8113      	strh	r3, [r2, #8]
    2b84:	8c13      	ldrh	r3, [r2, #32]
    2b86:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2b88:	2b00      	cmp	r3, #0
    2b8a:	d1fb      	bne.n	2b84 <adc0_change_channel+0x30>
}
    2b8c:	b002      	add	sp, #8
    2b8e:	4770      	bx	lr
    2b90:	20001920 	.word	0x20001920

00002b94 <adc0_read_callback>:
{
    2b94:	b510      	push	{r4, lr}
    adc0_read_done_flag = 1;
    2b96:	2201      	movs	r2, #1
    2b98:	4b0d      	ldr	r3, [pc, #52]	; (2bd0 <adc0_read_callback+0x3c>)
    2b9a:	701a      	strb	r2, [r3, #0]
    if(++adc_ch==5)adc_ch=0;
    2b9c:	4b0d      	ldr	r3, [pc, #52]	; (2bd4 <adc0_read_callback+0x40>)
    2b9e:	781b      	ldrb	r3, [r3, #0]
    2ba0:	3301      	adds	r3, #1
    2ba2:	b2db      	uxtb	r3, r3
    2ba4:	2b05      	cmp	r3, #5
    2ba6:	d00e      	beq.n	2bc6 <adc0_read_callback+0x32>
    2ba8:	4a0a      	ldr	r2, [pc, #40]	; (2bd4 <adc0_read_callback+0x40>)
    2baa:	7013      	strb	r3, [r2, #0]
    adc0_change_channel(adc_ch);
    2bac:	4c09      	ldr	r4, [pc, #36]	; (2bd4 <adc0_read_callback+0x40>)
    2bae:	7820      	ldrb	r0, [r4, #0]
    2bb0:	4b09      	ldr	r3, [pc, #36]	; (2bd8 <adc0_read_callback+0x44>)
    2bb2:	4798      	blx	r3
    adc_read_buffer_job(&adc0_instance, result+adc_ch, 1);
    2bb4:	7821      	ldrb	r1, [r4, #0]
    2bb6:	0049      	lsls	r1, r1, #1
    2bb8:	4b08      	ldr	r3, [pc, #32]	; (2bdc <adc0_read_callback+0x48>)
    2bba:	18c9      	adds	r1, r1, r3
    2bbc:	2201      	movs	r2, #1
    2bbe:	4808      	ldr	r0, [pc, #32]	; (2be0 <adc0_read_callback+0x4c>)
    2bc0:	4b08      	ldr	r3, [pc, #32]	; (2be4 <adc0_read_callback+0x50>)
    2bc2:	4798      	blx	r3
}
    2bc4:	bd10      	pop	{r4, pc}
    if(++adc_ch==5)adc_ch=0;
    2bc6:	2200      	movs	r2, #0
    2bc8:	4b02      	ldr	r3, [pc, #8]	; (2bd4 <adc0_read_callback+0x40>)
    2bca:	701a      	strb	r2, [r3, #0]
    2bcc:	e7ee      	b.n	2bac <adc0_read_callback+0x18>
    2bce:	46c0      	nop			; (mov r8, r8)
    2bd0:	20001950 	.word	0x20001950
    2bd4:	200000c8 	.word	0x200000c8
    2bd8:	00002b55 	.word	0x00002b55
    2bdc:	20001940 	.word	0x20001940
    2be0:	20001920 	.word	0x20001920
    2be4:	00001289 	.word	0x00001289

00002be8 <menu_add_item>:
#include "my_menu.h"
//#include "functions.h"


void menu_add_item(MENU *m, menu_item item)
{
    2be8:	b084      	sub	sp, #16
    2bea:	b570      	push	{r4, r5, r6, lr}
    2bec:	9105      	str	r1, [sp, #20]
    2bee:	9206      	str	r2, [sp, #24]
    2bf0:	9307      	str	r3, [sp, #28]
    if(m->num_of_items == MENU_MAX_ITEMS)
    2bf2:	2399      	movs	r3, #153	; 0x99
    2bf4:	009b      	lsls	r3, r3, #2
    2bf6:	5cc1      	ldrb	r1, [r0, r3]
    2bf8:	2911      	cmp	r1, #17
    2bfa:	d013      	beq.n	2c24 <menu_add_item+0x3c>
        return;
    m->items[m->num_of_items] = item;
    2bfc:	00cb      	lsls	r3, r1, #3
    2bfe:	185b      	adds	r3, r3, r1
    2c00:	009b      	lsls	r3, r3, #2
    2c02:	aa05      	add	r2, sp, #20
    2c04:	18c3      	adds	r3, r0, r3
    2c06:	ca70      	ldmia	r2!, {r4, r5, r6}
    2c08:	c370      	stmia	r3!, {r4, r5, r6}
    2c0a:	ca70      	ldmia	r2!, {r4, r5, r6}
    2c0c:	c370      	stmia	r3!, {r4, r5, r6}
    2c0e:	ca70      	ldmia	r2!, {r4, r5, r6}
    2c10:	c370      	stmia	r3!, {r4, r5, r6}
    m->num_of_items++;
    2c12:	3101      	adds	r1, #1
    2c14:	2399      	movs	r3, #153	; 0x99
    2c16:	009b      	lsls	r3, r3, #2
    2c18:	54c1      	strb	r1, [r0, r3]
    m->curr_pos = 0;
    2c1a:	2300      	movs	r3, #0
    2c1c:	4a03      	ldr	r2, [pc, #12]	; (2c2c <menu_add_item+0x44>)
    2c1e:	5483      	strb	r3, [r0, r2]
    m->curr_window_pos = 0;
    2c20:	4a03      	ldr	r2, [pc, #12]	; (2c30 <menu_add_item+0x48>)
    2c22:	5483      	strb	r3, [r0, r2]
}
    2c24:	bc70      	pop	{r4, r5, r6}
    2c26:	bc08      	pop	{r3}
    2c28:	b004      	add	sp, #16
    2c2a:	4718      	bx	r3
    2c2c:	00000265 	.word	0x00000265
    2c30:	00000266 	.word	0x00000266

00002c34 <increment_menu_position>:

void increment_menu_position(MENU *m)
{
    if(m->curr_pos < m->num_of_items - 1)
    2c34:	4b0a      	ldr	r3, [pc, #40]	; (2c60 <increment_menu_position+0x2c>)
    2c36:	5cc2      	ldrb	r2, [r0, r3]
    2c38:	3b01      	subs	r3, #1
    2c3a:	5cc3      	ldrb	r3, [r0, r3]
    2c3c:	3b01      	subs	r3, #1
    2c3e:	429a      	cmp	r2, r3
    2c40:	da02      	bge.n	2c48 <increment_menu_position+0x14>
        m->curr_pos++;
    2c42:	3201      	adds	r2, #1
    2c44:	4b06      	ldr	r3, [pc, #24]	; (2c60 <increment_menu_position+0x2c>)
    2c46:	54c2      	strb	r2, [r0, r3]
    if((m->curr_pos - m->curr_window_pos) == 4)
    2c48:	4b06      	ldr	r3, [pc, #24]	; (2c64 <increment_menu_position+0x30>)
    2c4a:	5cc2      	ldrb	r2, [r0, r3]
    2c4c:	4b04      	ldr	r3, [pc, #16]	; (2c60 <increment_menu_position+0x2c>)
    2c4e:	5cc3      	ldrb	r3, [r0, r3]
    2c50:	1a9b      	subs	r3, r3, r2
    2c52:	2b04      	cmp	r3, #4
    2c54:	d000      	beq.n	2c58 <increment_menu_position+0x24>
        m->curr_window_pos++;
}
    2c56:	4770      	bx	lr
        m->curr_window_pos++;
    2c58:	3201      	adds	r2, #1
    2c5a:	4b02      	ldr	r3, [pc, #8]	; (2c64 <increment_menu_position+0x30>)
    2c5c:	54c2      	strb	r2, [r0, r3]
}
    2c5e:	e7fa      	b.n	2c56 <increment_menu_position+0x22>
    2c60:	00000265 	.word	0x00000265
    2c64:	00000266 	.word	0x00000266

00002c68 <decrement_menu_position>:

void decrement_menu_position(MENU *m)
{
    if(m->curr_pos > 0)
    2c68:	4b08      	ldr	r3, [pc, #32]	; (2c8c <decrement_menu_position+0x24>)
    2c6a:	5cc3      	ldrb	r3, [r0, r3]
    2c6c:	2b00      	cmp	r3, #0
    2c6e:	d002      	beq.n	2c76 <decrement_menu_position+0xe>
        m->curr_pos--;
    2c70:	3b01      	subs	r3, #1
    2c72:	4a06      	ldr	r2, [pc, #24]	; (2c8c <decrement_menu_position+0x24>)
    2c74:	5483      	strb	r3, [r0, r2]
    if(m->curr_pos < m->curr_window_pos)
    2c76:	4b06      	ldr	r3, [pc, #24]	; (2c90 <decrement_menu_position+0x28>)
    2c78:	5cc3      	ldrb	r3, [r0, r3]
    2c7a:	4a04      	ldr	r2, [pc, #16]	; (2c8c <decrement_menu_position+0x24>)
    2c7c:	5c82      	ldrb	r2, [r0, r2]
    2c7e:	429a      	cmp	r2, r3
    2c80:	d202      	bcs.n	2c88 <decrement_menu_position+0x20>
        m->curr_window_pos--;
    2c82:	3b01      	subs	r3, #1
    2c84:	4a02      	ldr	r2, [pc, #8]	; (2c90 <decrement_menu_position+0x28>)
    2c86:	5483      	strb	r3, [r0, r2]
}
    2c88:	4770      	bx	lr
    2c8a:	46c0      	nop			; (mov r8, r8)
    2c8c:	00000265 	.word	0x00000265
    2c90:	00000266 	.word	0x00000266

00002c94 <get_p_to_item>:
    return m->curr_pos;
}

menu_item *get_p_to_item(MENU *m)
{
    return &(m->items[m->curr_pos]);
    2c94:	4b03      	ldr	r3, [pc, #12]	; (2ca4 <get_p_to_item+0x10>)
    2c96:	5cc2      	ldrb	r2, [r0, r3]
    2c98:	00d3      	lsls	r3, r2, #3
    2c9a:	189b      	adds	r3, r3, r2
    2c9c:	009b      	lsls	r3, r3, #2
    2c9e:	18c0      	adds	r0, r0, r3
}
    2ca0:	4770      	bx	lr
    2ca2:	46c0      	nop			; (mov r8, r8)
    2ca4:	00000265 	.word	0x00000265

00002ca8 <ftoe>:

void ftoe(char *s, float val)
{
    2ca8:	b570      	push	{r4, r5, r6, lr}
    2caa:	0006      	movs	r6, r0
    2cac:	1c0d      	adds	r5, r1, #0
    uint32_t whole = (int) val;
    2cae:	1c08      	adds	r0, r1, #0
    2cb0:	4b0a      	ldr	r3, [pc, #40]	; (2cdc <ftoe+0x34>)
    2cb2:	4798      	blx	r3
    2cb4:	0004      	movs	r4, r0
    float fract = val-whole;
    2cb6:	4b0a      	ldr	r3, [pc, #40]	; (2ce0 <ftoe+0x38>)
    2cb8:	4798      	blx	r3
    2cba:	1c01      	adds	r1, r0, #0
    2cbc:	1c28      	adds	r0, r5, #0
    2cbe:	4b09      	ldr	r3, [pc, #36]	; (2ce4 <ftoe+0x3c>)
    2cc0:	4798      	blx	r3
    uint32_t whole_fract= fract*1000;
    2cc2:	4909      	ldr	r1, [pc, #36]	; (2ce8 <ftoe+0x40>)
    2cc4:	4b09      	ldr	r3, [pc, #36]	; (2cec <ftoe+0x44>)
    2cc6:	4798      	blx	r3
    2cc8:	4b09      	ldr	r3, [pc, #36]	; (2cf0 <ftoe+0x48>)
    2cca:	4798      	blx	r3
    2ccc:	0003      	movs	r3, r0
    //ne dela v primeru 4.05
    sprintf(s, "%3lu.%03lu", whole,whole_fract);
    2cce:	0022      	movs	r2, r4
    2cd0:	4908      	ldr	r1, [pc, #32]	; (2cf4 <ftoe+0x4c>)
    2cd2:	0030      	movs	r0, r6
    2cd4:	4c08      	ldr	r4, [pc, #32]	; (2cf8 <ftoe+0x50>)
    2cd6:	47a0      	blx	r4
}
    2cd8:	bd70      	pop	{r4, r5, r6, pc}
    2cda:	46c0      	nop			; (mov r8, r8)
    2cdc:	00005599 	.word	0x00005599
    2ce0:	00005679 	.word	0x00005679
    2ce4:	00005261 	.word	0x00005261
    2ce8:	447a0000 	.word	0x447a0000
    2cec:	00005021 	.word	0x00005021
    2cf0:	00004d21 	.word	0x00004d21
    2cf4:	00007c54 	.word	0x00007c54
    2cf8:	00007319 	.word	0x00007319

00002cfc <menu_get_item_string>:

void menu_get_item_string(MENU *m, char *str, uint8_t n)
{
    2cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cfe:	b089      	sub	sp, #36	; 0x24
    2d00:	0007      	movs	r7, r0
    2d02:	000d      	movs	r5, r1
    2d04:	0016      	movs	r6, r2
    if(n >= m->num_of_items)
    2d06:	2399      	movs	r3, #153	; 0x99
    2d08:	009b      	lsls	r3, r3, #2
    2d0a:	5cc3      	ldrb	r3, [r0, r3]
    2d0c:	4293      	cmp	r3, r2
    2d0e:	d925      	bls.n	2d5c <menu_get_item_string+0x60>
        return;
    menu_item *tmp = m->items + n;
    2d10:	00d4      	lsls	r4, r2, #3
    2d12:	18a4      	adds	r4, r4, r2
    2d14:	00a4      	lsls	r4, r4, #2
    2d16:	1904      	adds	r4, r0, r4
    switch(tmp->type) {
    2d18:	7823      	ldrb	r3, [r4, #0]
    2d1a:	2b04      	cmp	r3, #4
    2d1c:	d83e      	bhi.n	2d9c <menu_get_item_string+0xa0>
    2d1e:	009b      	lsls	r3, r3, #2
    2d20:	4a28      	ldr	r2, [pc, #160]	; (2dc4 <menu_get_item_string+0xc8>)
    2d22:	58d3      	ldr	r3, [r2, r3]
    2d24:	469f      	mov	pc, r3
        case UINT8:
            sprintf(tmp->val_str, "%6d", *(uint8_t *)tmp->variable);
    2d26:	6923      	ldr	r3, [r4, #16]
    2d28:	781a      	ldrb	r2, [r3, #0]
    2d2a:	0020      	movs	r0, r4
    2d2c:	3014      	adds	r0, #20
    2d2e:	4926      	ldr	r1, [pc, #152]	; (2dc8 <menu_get_item_string+0xcc>)
    2d30:	4b26      	ldr	r3, [pc, #152]	; (2dcc <menu_get_item_string+0xd0>)
    2d32:	4798      	blx	r3
            break;
        default:
            strcpy(tmp->val_str, "ERROR99");
            break;
    }
    *(tmp->val_str + 7) = 0;
    2d34:	2300      	movs	r3, #0
    2d36:	76e3      	strb	r3, [r4, #27]
    char test[21];
    if(n == m->curr_pos) {
    2d38:	4b25      	ldr	r3, [pc, #148]	; (2dd0 <menu_get_item_string+0xd4>)
    2d3a:	5cfb      	ldrb	r3, [r7, r3]
    2d3c:	42b3      	cmp	r3, r6
    2d3e:	d034      	beq.n	2daa <menu_get_item_string+0xae>
        sprintf(test, "%c%-9s%6s%4s", '~', tmp->name, tmp->val_str, tmp->units);
    }
    else
        sprintf(test, "%-9s%7s%4s", tmp->name, tmp->val_str, tmp->units);
    2d40:	0023      	movs	r3, r4
    2d42:	3314      	adds	r3, #20
    2d44:	1c62      	adds	r2, r4, #1
    2d46:	340b      	adds	r4, #11
    2d48:	9400      	str	r4, [sp, #0]
    2d4a:	4922      	ldr	r1, [pc, #136]	; (2dd4 <menu_get_item_string+0xd8>)
    2d4c:	a802      	add	r0, sp, #8
    2d4e:	4c1f      	ldr	r4, [pc, #124]	; (2dcc <menu_get_item_string+0xd0>)
    2d50:	47a0      	blx	r4
    memcpy(str, test, 20);
    2d52:	2214      	movs	r2, #20
    2d54:	a902      	add	r1, sp, #8
    2d56:	0028      	movs	r0, r5
    2d58:	4b1f      	ldr	r3, [pc, #124]	; (2dd8 <menu_get_item_string+0xdc>)
    2d5a:	4798      	blx	r3

}
    2d5c:	b009      	add	sp, #36	; 0x24
    2d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            sprintf(tmp->val_str, "%6d", *(uint16_t *)tmp->variable);
    2d60:	6923      	ldr	r3, [r4, #16]
    2d62:	881a      	ldrh	r2, [r3, #0]
    2d64:	0020      	movs	r0, r4
    2d66:	3014      	adds	r0, #20
    2d68:	4917      	ldr	r1, [pc, #92]	; (2dc8 <menu_get_item_string+0xcc>)
    2d6a:	4b18      	ldr	r3, [pc, #96]	; (2dcc <menu_get_item_string+0xd0>)
    2d6c:	4798      	blx	r3
            break;
    2d6e:	e7e1      	b.n	2d34 <menu_get_item_string+0x38>
            sprintf(tmp->val_str, "%6lu", *(uint32_t *)tmp->variable);
    2d70:	6923      	ldr	r3, [r4, #16]
    2d72:	681a      	ldr	r2, [r3, #0]
    2d74:	0020      	movs	r0, r4
    2d76:	3014      	adds	r0, #20
    2d78:	4918      	ldr	r1, [pc, #96]	; (2ddc <menu_get_item_string+0xe0>)
    2d7a:	4b14      	ldr	r3, [pc, #80]	; (2dcc <menu_get_item_string+0xd0>)
    2d7c:	4798      	blx	r3
            break;
    2d7e:	e7d9      	b.n	2d34 <menu_get_item_string+0x38>
            sprintf(tmp->val_str, "       ");
    2d80:	0020      	movs	r0, r4
    2d82:	3014      	adds	r0, #20
    2d84:	2208      	movs	r2, #8
    2d86:	4916      	ldr	r1, [pc, #88]	; (2de0 <menu_get_item_string+0xe4>)
    2d88:	4b13      	ldr	r3, [pc, #76]	; (2dd8 <menu_get_item_string+0xdc>)
    2d8a:	4798      	blx	r3
            break;
    2d8c:	e7d2      	b.n	2d34 <menu_get_item_string+0x38>
            ftoe(tmp->val_str, *(float *)tmp->variable);
    2d8e:	6923      	ldr	r3, [r4, #16]
    2d90:	6819      	ldr	r1, [r3, #0]
    2d92:	0020      	movs	r0, r4
    2d94:	3014      	adds	r0, #20
    2d96:	4b13      	ldr	r3, [pc, #76]	; (2de4 <menu_get_item_string+0xe8>)
    2d98:	4798      	blx	r3
            break;
    2d9a:	e7cb      	b.n	2d34 <menu_get_item_string+0x38>
            strcpy(tmp->val_str, "ERROR99");
    2d9c:	0020      	movs	r0, r4
    2d9e:	3014      	adds	r0, #20
    2da0:	2208      	movs	r2, #8
    2da2:	4911      	ldr	r1, [pc, #68]	; (2de8 <menu_get_item_string+0xec>)
    2da4:	4b0c      	ldr	r3, [pc, #48]	; (2dd8 <menu_get_item_string+0xdc>)
    2da6:	4798      	blx	r3
            break;
    2da8:	e7c4      	b.n	2d34 <menu_get_item_string+0x38>
        sprintf(test, "%c%-9s%6s%4s", '~', tmp->name, tmp->val_str, tmp->units);
    2daa:	1c63      	adds	r3, r4, #1
    2dac:	0022      	movs	r2, r4
    2dae:	320b      	adds	r2, #11
    2db0:	9201      	str	r2, [sp, #4]
    2db2:	3414      	adds	r4, #20
    2db4:	9400      	str	r4, [sp, #0]
    2db6:	227e      	movs	r2, #126	; 0x7e
    2db8:	490c      	ldr	r1, [pc, #48]	; (2dec <menu_get_item_string+0xf0>)
    2dba:	a802      	add	r0, sp, #8
    2dbc:	4c03      	ldr	r4, [pc, #12]	; (2dcc <menu_get_item_string+0xd0>)
    2dbe:	47a0      	blx	r4
    2dc0:	e7c7      	b.n	2d52 <menu_get_item_string+0x56>
    2dc2:	46c0      	nop			; (mov r8, r8)
    2dc4:	00007c40 	.word	0x00007c40
    2dc8:	00007c74 	.word	0x00007c74
    2dcc:	00007319 	.word	0x00007319
    2dd0:	00000265 	.word	0x00000265
    2dd4:	00007ca0 	.word	0x00007ca0
    2dd8:	00007191 	.word	0x00007191
    2ddc:	00007c78 	.word	0x00007c78
    2de0:	00007c80 	.word	0x00007c80
    2de4:	00002ca9 	.word	0x00002ca9
    2de8:	00007c88 	.word	0x00007c88
    2dec:	00007c90 	.word	0x00007c90

00002df0 <menu_whole_solo_string>:

void menu_whole_solo_string(MENU *m, char *s)
{
    2df0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2df2:	46de      	mov	lr, fp
    2df4:	4657      	mov	r7, sl
    2df6:	464e      	mov	r6, r9
    2df8:	4645      	mov	r5, r8
    2dfa:	b5e0      	push	{r5, r6, r7, lr}
    2dfc:	b08b      	sub	sp, #44	; 0x2c
    2dfe:	0007      	movs	r7, r0
    2e00:	000e      	movs	r6, r1
    return &(m->items[m->curr_pos]);
    2e02:	4b2f      	ldr	r3, [pc, #188]	; (2ec0 <menu_whole_solo_string+0xd0>)
    2e04:	5cc3      	ldrb	r3, [r0, r3]
    2e06:	4698      	mov	r8, r3
    char tmp_string[21];
    menu_item *p_to_item = get_p_to_item(m);
    menu_get_item_string(m, tmp_string, m->curr_pos);
    2e08:	001a      	movs	r2, r3
    2e0a:	a904      	add	r1, sp, #16
    2e0c:	4b2d      	ldr	r3, [pc, #180]	; (2ec4 <menu_whole_solo_string+0xd4>)
    2e0e:	4798      	blx	r3
    2e10:	4643      	mov	r3, r8
    2e12:	00dd      	lsls	r5, r3, #3
    2e14:	4445      	add	r5, r8
    2e16:	00ad      	lsls	r5, r5, #2

    uint8_t string_length = strlen(p_to_item->name);
    2e18:	1c6b      	adds	r3, r5, #1
    2e1a:	18fb      	adds	r3, r7, r3
    2e1c:	9301      	str	r3, [sp, #4]
    2e1e:	0018      	movs	r0, r3
    2e20:	4c29      	ldr	r4, [pc, #164]	; (2ec8 <menu_whole_solo_string+0xd8>)
    2e22:	47a0      	blx	r4
    2e24:	4683      	mov	fp, r0
    uint8_t value_length = strlen(p_to_item->val_str);
    2e26:	002b      	movs	r3, r5
    2e28:	3314      	adds	r3, #20
    2e2a:	18fb      	adds	r3, r7, r3
    2e2c:	9302      	str	r3, [sp, #8]
    2e2e:	0018      	movs	r0, r3
    2e30:	47a0      	blx	r4
    2e32:	9003      	str	r0, [sp, #12]
    2e34:	ab04      	add	r3, sp, #16
    2e36:	a909      	add	r1, sp, #36	; 0x24

    p_to_item->name[sizeof(p_to_item->name) - 1] = 0;
    for(uint8_t i = 0; i < 20; i++)
        tmp_string[i] = ' ';
    2e38:	2220      	movs	r2, #32
    2e3a:	701a      	strb	r2, [r3, #0]
    2e3c:	3301      	adds	r3, #1
    for(uint8_t i = 0; i < 20; i++)
    2e3e:	428b      	cmp	r3, r1
    2e40:	d1fb      	bne.n	2e3a <menu_whole_solo_string+0x4a>
    tmp_string[20] = 0;
    2e42:	2300      	movs	r3, #0
    2e44:	aa04      	add	r2, sp, #16
    2e46:	7513      	strb	r3, [r2, #20]
    2e48:	0034      	movs	r4, r6
    2e4a:	3354      	adds	r3, #84	; 0x54
    2e4c:	469a      	mov	sl, r3
    2e4e:	44b2      	add	sl, r6
    for(uint8_t i = 0; i < 4; i++)
        memcpy(s + 21 * i, tmp_string, 20);
    2e50:	4b1e      	ldr	r3, [pc, #120]	; (2ecc <menu_whole_solo_string+0xdc>)
    2e52:	4699      	mov	r9, r3
    2e54:	002b      	movs	r3, r5
    2e56:	4655      	mov	r5, sl
    2e58:	469a      	mov	sl, r3
    2e5a:	2214      	movs	r2, #20
    2e5c:	a904      	add	r1, sp, #16
    2e5e:	0020      	movs	r0, r4
    2e60:	47c8      	blx	r9
    2e62:	3415      	adds	r4, #21
    for(uint8_t i = 0; i < 4; i++)
    2e64:	42ac      	cmp	r4, r5
    2e66:	d1f8      	bne.n	2e5a <menu_whole_solo_string+0x6a>
    2e68:	4655      	mov	r5, sl

    p_to_item->name[sizeof(p_to_item->name) - 1] = 0;
    2e6a:	4643      	mov	r3, r8
    2e6c:	00db      	lsls	r3, r3, #3
    2e6e:	4642      	mov	r2, r8
    2e70:	1899      	adds	r1, r3, r2
    2e72:	0089      	lsls	r1, r1, #2
    2e74:	1879      	adds	r1, r7, r1
    2e76:	2200      	movs	r2, #0
    2e78:	728a      	strb	r2, [r1, #10]
    p_to_item->val_str[sizeof(p_to_item->val_str) - 1] = 0;
    2e7a:	76ca      	strb	r2, [r1, #27]

    memcpy(s + 21, p_to_item->name, string_length);
    2e7c:	0030      	movs	r0, r6
    2e7e:	3015      	adds	r0, #21
    2e80:	24ff      	movs	r4, #255	; 0xff
    2e82:	465a      	mov	r2, fp
    2e84:	4022      	ands	r2, r4
    2e86:	9901      	ldr	r1, [sp, #4]
    2e88:	4b10      	ldr	r3, [pc, #64]	; (2ecc <menu_whole_solo_string+0xdc>)
    2e8a:	4698      	mov	r8, r3
    2e8c:	4798      	blx	r3
    2e8e:	9b03      	ldr	r3, [sp, #12]
    2e90:	401c      	ands	r4, r3
    memcpy(s + 42, p_to_item->val_str, value_length);
    2e92:	0030      	movs	r0, r6
    2e94:	302a      	adds	r0, #42	; 0x2a
    2e96:	0022      	movs	r2, r4
    2e98:	9902      	ldr	r1, [sp, #8]
    2e9a:	47c0      	blx	r8
    memcpy(s + 42 + value_length + 1, p_to_item->units, strlen(p_to_item->units));
    2e9c:	350b      	adds	r5, #11
    2e9e:	197f      	adds	r7, r7, r5
    2ea0:	0038      	movs	r0, r7
    2ea2:	4b09      	ldr	r3, [pc, #36]	; (2ec8 <menu_whole_solo_string+0xd8>)
    2ea4:	4798      	blx	r3
    2ea6:	0002      	movs	r2, r0
    2ea8:	342b      	adds	r4, #43	; 0x2b
    2eaa:	1930      	adds	r0, r6, r4
    2eac:	0039      	movs	r1, r7
    2eae:	47c0      	blx	r8
}
    2eb0:	b00b      	add	sp, #44	; 0x2c
    2eb2:	bc3c      	pop	{r2, r3, r4, r5}
    2eb4:	4690      	mov	r8, r2
    2eb6:	4699      	mov	r9, r3
    2eb8:	46a2      	mov	sl, r4
    2eba:	46ab      	mov	fp, r5
    2ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ebe:	46c0      	nop			; (mov r8, r8)
    2ec0:	00000265 	.word	0x00000265
    2ec4:	00002cfd 	.word	0x00002cfd
    2ec8:	0000736d 	.word	0x0000736d
    2ecc:	00007191 	.word	0x00007191

00002ed0 <menu_whole_string>:

void menu_whole_string(MENU *m, char *s, STATE state)
{
    2ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ed2:	46d6      	mov	lr, sl
    2ed4:	464f      	mov	r7, r9
    2ed6:	4646      	mov	r6, r8
    2ed8:	b5c0      	push	{r6, r7, lr}
    2eda:	0006      	movs	r6, r0
    2edc:	000f      	movs	r7, r1
    if(state == EDIT) {
    2ede:	2a01      	cmp	r2, #1
    2ee0:	d03e      	beq.n	2f60 <menu_whole_string+0x90>
        menu_whole_solo_string(m, s);
    }
    else {
        uint8_t j = 0;
        for(uint8_t i = (m->curr_window_pos); i < (4 + m->curr_window_pos) && i < m->num_of_items; i++) {
    2ee2:	4b23      	ldr	r3, [pc, #140]	; (2f70 <menu_whole_string+0xa0>)
    2ee4:	5cc5      	ldrb	r5, [r0, r3]
    2ee6:	1d2b      	adds	r3, r5, #4
    2ee8:	429d      	cmp	r5, r3
    2eea:	da3c      	bge.n	2f66 <menu_whole_string+0x96>
    2eec:	2399      	movs	r3, #153	; 0x99
    2eee:	009b      	lsls	r3, r3, #2
    2ef0:	5cc3      	ldrb	r3, [r0, r3]
    2ef2:	42ab      	cmp	r3, r5
    2ef4:	d939      	bls.n	2f6a <menu_whole_string+0x9a>
    2ef6:	2300      	movs	r3, #0
            menu_get_item_string(m, s + 21 * (j++), i);
    2ef8:	4a1e      	ldr	r2, [pc, #120]	; (2f74 <menu_whole_string+0xa4>)
    2efa:	4691      	mov	r9, r2
        for(uint8_t i = (m->curr_window_pos); i < (4 + m->curr_window_pos) && i < m->num_of_items; i++) {
    2efc:	4a1c      	ldr	r2, [pc, #112]	; (2f70 <menu_whole_string+0xa0>)
    2efe:	4690      	mov	r8, r2
    2f00:	3a02      	subs	r2, #2
    2f02:	4692      	mov	sl, r2
            menu_get_item_string(m, s + 21 * (j++), i);
    2f04:	1c5c      	adds	r4, r3, #1
    2f06:	b2e4      	uxtb	r4, r4
    2f08:	0059      	lsls	r1, r3, #1
    2f0a:	18cb      	adds	r3, r1, r3
    2f0c:	00d9      	lsls	r1, r3, #3
    2f0e:	1ac9      	subs	r1, r1, r3
    2f10:	1879      	adds	r1, r7, r1
    2f12:	002a      	movs	r2, r5
    2f14:	0030      	movs	r0, r6
    2f16:	47c8      	blx	r9
        for(uint8_t i = (m->curr_window_pos); i < (4 + m->curr_window_pos) && i < m->num_of_items; i++) {
    2f18:	3501      	adds	r5, #1
    2f1a:	b2ed      	uxtb	r5, r5
    2f1c:	4643      	mov	r3, r8
    2f1e:	5cf3      	ldrb	r3, [r6, r3]
    2f20:	3304      	adds	r3, #4
    2f22:	429d      	cmp	r5, r3
    2f24:	da04      	bge.n	2f30 <menu_whole_string+0x60>
            menu_get_item_string(m, s + 21 * (j++), i);
    2f26:	0023      	movs	r3, r4
        for(uint8_t i = (m->curr_window_pos); i < (4 + m->curr_window_pos) && i < m->num_of_items; i++) {
    2f28:	4652      	mov	r2, sl
    2f2a:	5cb2      	ldrb	r2, [r6, r2]
    2f2c:	42aa      	cmp	r2, r5
    2f2e:	d8e9      	bhi.n	2f04 <menu_whole_string+0x34>
        }
        for(; j < 4; j++)
    2f30:	2c03      	cmp	r4, #3
    2f32:	d810      	bhi.n	2f56 <menu_whole_string+0x86>
            for(uint8_t i = 0; i < 20; i++)
                *(s + 21 * j) = ' ';
    2f34:	2114      	movs	r1, #20
    2f36:	2020      	movs	r0, #32
    2f38:	0062      	lsls	r2, r4, #1
    2f3a:	1912      	adds	r2, r2, r4
    2f3c:	00d3      	lsls	r3, r2, #3
    2f3e:	1a9a      	subs	r2, r3, r2
    2f40:	18ba      	adds	r2, r7, r2
    2f42:	000b      	movs	r3, r1
    2f44:	3b01      	subs	r3, #1
    2f46:	b2db      	uxtb	r3, r3
            for(uint8_t i = 0; i < 20; i++)
    2f48:	2b00      	cmp	r3, #0
    2f4a:	d1fb      	bne.n	2f44 <menu_whole_string+0x74>
    2f4c:	7010      	strb	r0, [r2, #0]
        for(; j < 4; j++)
    2f4e:	3401      	adds	r4, #1
    2f50:	b2e4      	uxtb	r4, r4
    2f52:	2c03      	cmp	r4, #3
    2f54:	d9f0      	bls.n	2f38 <menu_whole_string+0x68>
    }

}
    2f56:	bc1c      	pop	{r2, r3, r4}
    2f58:	4690      	mov	r8, r2
    2f5a:	4699      	mov	r9, r3
    2f5c:	46a2      	mov	sl, r4
    2f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        menu_whole_solo_string(m, s);
    2f60:	4b05      	ldr	r3, [pc, #20]	; (2f78 <menu_whole_string+0xa8>)
    2f62:	4798      	blx	r3
    2f64:	e7f7      	b.n	2f56 <menu_whole_string+0x86>
        for(uint8_t i = (m->curr_window_pos); i < (4 + m->curr_window_pos) && i < m->num_of_items; i++) {
    2f66:	2400      	movs	r4, #0
    2f68:	e7e4      	b.n	2f34 <menu_whole_string+0x64>
    2f6a:	2400      	movs	r4, #0
    2f6c:	e7e2      	b.n	2f34 <menu_whole_string+0x64>
    2f6e:	46c0      	nop			; (mov r8, r8)
    2f70:	00000266 	.word	0x00000266
    2f74:	00002cfd 	.word	0x00002cfd
    2f78:	00002df1 	.word	0x00002df1

00002f7c <menu_create_item>:

void menu_create_item(menu_item *item, const char *name, enum VAR_TYPE typ, const char *units, void *p_variable, float min_val, float max_val)
{
    2f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f7e:	46c6      	mov	lr, r8
    2f80:	b500      	push	{lr}
    2f82:	b082      	sub	sp, #8
    2f84:	0004      	movs	r4, r0
    2f86:	000f      	movs	r7, r1
    2f88:	4690      	mov	r8, r2
    2f8a:	9301      	str	r3, [sp, #4]
    strcpy(item->name, "         ");
    2f8c:	1c45      	adds	r5, r0, #1
    2f8e:	220a      	movs	r2, #10
    2f90:	4910      	ldr	r1, [pc, #64]	; (2fd4 <menu_create_item+0x58>)
    2f92:	0028      	movs	r0, r5
    2f94:	4e10      	ldr	r6, [pc, #64]	; (2fd8 <menu_create_item+0x5c>)
    2f96:	47b0      	blx	r6
    strcpy(item->name, name);
    2f98:	0039      	movs	r1, r7
    2f9a:	0028      	movs	r0, r5
    2f9c:	4f0f      	ldr	r7, [pc, #60]	; (2fdc <menu_create_item+0x60>)
    2f9e:	47b8      	blx	r7
    strcpy(item->units, "    ");
    2fa0:	350a      	adds	r5, #10
    2fa2:	2205      	movs	r2, #5
    2fa4:	490e      	ldr	r1, [pc, #56]	; (2fe0 <menu_create_item+0x64>)
    2fa6:	0028      	movs	r0, r5
    2fa8:	47b0      	blx	r6
    strcpy(item->units, units);
    2faa:	9901      	ldr	r1, [sp, #4]
    2fac:	0028      	movs	r0, r5
    2fae:	47b8      	blx	r7
    strcpy(item->val_str,"       ");
    2fb0:	0020      	movs	r0, r4
    2fb2:	3014      	adds	r0, #20
    2fb4:	2208      	movs	r2, #8
    2fb6:	490b      	ldr	r1, [pc, #44]	; (2fe4 <menu_create_item+0x68>)
    2fb8:	47b0      	blx	r6
    item->type = typ;
    2fba:	4643      	mov	r3, r8
    2fbc:	7023      	strb	r3, [r4, #0]
    item->variable = p_variable;
    2fbe:	9b08      	ldr	r3, [sp, #32]
    2fc0:	6123      	str	r3, [r4, #16]
    item->val_max = max_val;
    2fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2fc4:	6223      	str	r3, [r4, #32]
    item->val_min = min_val;
    2fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2fc8:	61e3      	str	r3, [r4, #28]
}
    2fca:	b002      	add	sp, #8
    2fcc:	bc04      	pop	{r2}
    2fce:	4690      	mov	r8, r2
    2fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fd2:	46c0      	nop			; (mov r8, r8)
    2fd4:	00007c60 	.word	0x00007c60
    2fd8:	00007191 	.word	0x00007191
    2fdc:	0000735d 	.word	0x0000735d
    2fe0:	00007c6c 	.word	0x00007c6c
    2fe4:	00007c80 	.word	0x00007c80

00002fe8 <menu_increment_item>:

void menu_increment_item(MENU *m)
{
    2fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fea:	46c6      	mov	lr, r8
    2fec:	b500      	push	{lr}
    2fee:	0005      	movs	r5, r0
    switch(m->items[m->curr_pos].type) {
    2ff0:	4b34      	ldr	r3, [pc, #208]	; (30c4 <menu_increment_item+0xdc>)
    2ff2:	5cc4      	ldrb	r4, [r0, r3]
    2ff4:	00e3      	lsls	r3, r4, #3
    2ff6:	191b      	adds	r3, r3, r4
    2ff8:	009b      	lsls	r3, r3, #2
    2ffa:	5c1b      	ldrb	r3, [r3, r0]
    2ffc:	2b01      	cmp	r3, #1
    2ffe:	d01e      	beq.n	303e <menu_increment_item+0x56>
    3000:	2b00      	cmp	r3, #0
    3002:	d006      	beq.n	3012 <menu_increment_item+0x2a>
    3004:	2b02      	cmp	r3, #2
    3006:	d030      	beq.n	306a <menu_increment_item+0x82>
    3008:	2b03      	cmp	r3, #3
    300a:	d044      	beq.n	3096 <menu_increment_item+0xae>
                (*(float *)m->items[m->curr_pos].variable) += 0.1;
            break;
        default:
            break;
    }
}
    300c:	bc04      	pop	{r2}
    300e:	4690      	mov	r8, r2
    3010:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if((*(uint8_t *)m->items[m->curr_pos].variable) < (m->items[m->curr_pos].val_max))
    3012:	00e6      	lsls	r6, r4, #3
    3014:	1933      	adds	r3, r6, r4
    3016:	009b      	lsls	r3, r3, #2
    3018:	18c3      	adds	r3, r0, r3
    301a:	691b      	ldr	r3, [r3, #16]
    301c:	4698      	mov	r8, r3
    301e:	781f      	ldrb	r7, [r3, #0]
    3020:	0038      	movs	r0, r7
    3022:	4b29      	ldr	r3, [pc, #164]	; (30c8 <menu_increment_item+0xe0>)
    3024:	4798      	blx	r3
    3026:	1936      	adds	r6, r6, r4
    3028:	00b6      	lsls	r6, r6, #2
    302a:	19ad      	adds	r5, r5, r6
    302c:	6a29      	ldr	r1, [r5, #32]
    302e:	4b27      	ldr	r3, [pc, #156]	; (30cc <menu_increment_item+0xe4>)
    3030:	4798      	blx	r3
    3032:	2800      	cmp	r0, #0
    3034:	d0ea      	beq.n	300c <menu_increment_item+0x24>
                (*(uint8_t *)m->items[m->curr_pos].variable)++;
    3036:	3701      	adds	r7, #1
    3038:	4643      	mov	r3, r8
    303a:	701f      	strb	r7, [r3, #0]
    303c:	e7e6      	b.n	300c <menu_increment_item+0x24>
            if((*(uint16_t *)m->items[m->curr_pos].variable) < (m->items[m->curr_pos].val_max))
    303e:	00e6      	lsls	r6, r4, #3
    3040:	1933      	adds	r3, r6, r4
    3042:	009b      	lsls	r3, r3, #2
    3044:	18c3      	adds	r3, r0, r3
    3046:	691b      	ldr	r3, [r3, #16]
    3048:	4698      	mov	r8, r3
    304a:	881f      	ldrh	r7, [r3, #0]
    304c:	0038      	movs	r0, r7
    304e:	4b1e      	ldr	r3, [pc, #120]	; (30c8 <menu_increment_item+0xe0>)
    3050:	4798      	blx	r3
    3052:	1936      	adds	r6, r6, r4
    3054:	00b6      	lsls	r6, r6, #2
    3056:	19ad      	adds	r5, r5, r6
    3058:	6a29      	ldr	r1, [r5, #32]
    305a:	4b1c      	ldr	r3, [pc, #112]	; (30cc <menu_increment_item+0xe4>)
    305c:	4798      	blx	r3
    305e:	2800      	cmp	r0, #0
    3060:	d0d4      	beq.n	300c <menu_increment_item+0x24>
                (*(uint16_t *)m->items[m->curr_pos].variable)++;
    3062:	3701      	adds	r7, #1
    3064:	4643      	mov	r3, r8
    3066:	801f      	strh	r7, [r3, #0]
    3068:	e7d0      	b.n	300c <menu_increment_item+0x24>
            if((*(uint32_t *)m->items[m->curr_pos].variable) < (m->items[m->curr_pos].val_max))
    306a:	00e6      	lsls	r6, r4, #3
    306c:	1933      	adds	r3, r6, r4
    306e:	009b      	lsls	r3, r3, #2
    3070:	18c3      	adds	r3, r0, r3
    3072:	691b      	ldr	r3, [r3, #16]
    3074:	4698      	mov	r8, r3
    3076:	681f      	ldr	r7, [r3, #0]
    3078:	0038      	movs	r0, r7
    307a:	4b15      	ldr	r3, [pc, #84]	; (30d0 <menu_increment_item+0xe8>)
    307c:	4798      	blx	r3
    307e:	1936      	adds	r6, r6, r4
    3080:	00b6      	lsls	r6, r6, #2
    3082:	19ad      	adds	r5, r5, r6
    3084:	6a29      	ldr	r1, [r5, #32]
    3086:	4b11      	ldr	r3, [pc, #68]	; (30cc <menu_increment_item+0xe4>)
    3088:	4798      	blx	r3
    308a:	2800      	cmp	r0, #0
    308c:	d0be      	beq.n	300c <menu_increment_item+0x24>
                (*(uint32_t *)m->items[m->curr_pos].variable)+=10;
    308e:	370a      	adds	r7, #10
    3090:	4643      	mov	r3, r8
    3092:	601f      	str	r7, [r3, #0]
    3094:	e7ba      	b.n	300c <menu_increment_item+0x24>
            if((*(float *)m->items[m->curr_pos].variable) < (m->items[m->curr_pos].val_max))
    3096:	00e3      	lsls	r3, r4, #3
    3098:	191a      	adds	r2, r3, r4
    309a:	0092      	lsls	r2, r2, #2
    309c:	1882      	adds	r2, r0, r2
    309e:	6917      	ldr	r7, [r2, #16]
    30a0:	683e      	ldr	r6, [r7, #0]
    30a2:	6a11      	ldr	r1, [r2, #32]
    30a4:	1c30      	adds	r0, r6, #0
    30a6:	4b09      	ldr	r3, [pc, #36]	; (30cc <menu_increment_item+0xe4>)
    30a8:	4798      	blx	r3
    30aa:	2800      	cmp	r0, #0
    30ac:	d0ae      	beq.n	300c <menu_increment_item+0x24>
                (*(float *)m->items[m->curr_pos].variable) += 0.1;
    30ae:	1c30      	adds	r0, r6, #0
    30b0:	4b08      	ldr	r3, [pc, #32]	; (30d4 <menu_increment_item+0xec>)
    30b2:	4798      	blx	r3
    30b4:	4a08      	ldr	r2, [pc, #32]	; (30d8 <menu_increment_item+0xf0>)
    30b6:	4b09      	ldr	r3, [pc, #36]	; (30dc <menu_increment_item+0xf4>)
    30b8:	4c09      	ldr	r4, [pc, #36]	; (30e0 <menu_increment_item+0xf8>)
    30ba:	47a0      	blx	r4
    30bc:	4b09      	ldr	r3, [pc, #36]	; (30e4 <menu_increment_item+0xfc>)
    30be:	4798      	blx	r3
    30c0:	6038      	str	r0, [r7, #0]
}
    30c2:	e7a3      	b.n	300c <menu_increment_item+0x24>
    30c4:	00000265 	.word	0x00000265
    30c8:	000055d9 	.word	0x000055d9
    30cc:	00004c3d 	.word	0x00004c3d
    30d0:	00005679 	.word	0x00005679
    30d4:	00006f29 	.word	0x00006f29
    30d8:	9999999a 	.word	0x9999999a
    30dc:	3fb99999 	.word	0x3fb99999
    30e0:	00005705 	.word	0x00005705
    30e4:	00006fcd 	.word	0x00006fcd

000030e8 <menu_decrement_item>:
void menu_decrement_item(MENU *m)
{
    30e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    30ea:	46c6      	mov	lr, r8
    30ec:	b500      	push	{lr}
    30ee:	0004      	movs	r4, r0
    switch(m->items[m->curr_pos].type) {
    30f0:	4b3c      	ldr	r3, [pc, #240]	; (31e4 <menu_decrement_item+0xfc>)
    30f2:	5cc5      	ldrb	r5, [r0, r3]
    30f4:	00eb      	lsls	r3, r5, #3
    30f6:	195b      	adds	r3, r3, r5
    30f8:	009b      	lsls	r3, r3, #2
    30fa:	5c1b      	ldrb	r3, [r3, r0]
    30fc:	2b01      	cmp	r3, #1
    30fe:	d01e      	beq.n	313e <menu_decrement_item+0x56>
    3100:	2b00      	cmp	r3, #0
    3102:	d006      	beq.n	3112 <menu_decrement_item+0x2a>
    3104:	2b02      	cmp	r3, #2
    3106:	d030      	beq.n	316a <menu_decrement_item+0x82>
    3108:	2b03      	cmp	r3, #3
    310a:	d044      	beq.n	3196 <menu_decrement_item+0xae>
                *(float *)m->items[m->curr_pos].variable=0;
            break;
        default:
            break;
    }
}
    310c:	bc04      	pop	{r2}
    310e:	4690      	mov	r8, r2
    3110:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if((*(uint8_t *)m->items[m->curr_pos].variable) > (m->items[m->curr_pos].val_min))
    3112:	00ee      	lsls	r6, r5, #3
    3114:	1973      	adds	r3, r6, r5
    3116:	009b      	lsls	r3, r3, #2
    3118:	18c3      	adds	r3, r0, r3
    311a:	691b      	ldr	r3, [r3, #16]
    311c:	4698      	mov	r8, r3
    311e:	781f      	ldrb	r7, [r3, #0]
    3120:	0038      	movs	r0, r7
    3122:	4b31      	ldr	r3, [pc, #196]	; (31e8 <menu_decrement_item+0x100>)
    3124:	4798      	blx	r3
    3126:	1976      	adds	r6, r6, r5
    3128:	00b6      	lsls	r6, r6, #2
    312a:	19a4      	adds	r4, r4, r6
    312c:	69e1      	ldr	r1, [r4, #28]
    312e:	4b2f      	ldr	r3, [pc, #188]	; (31ec <menu_decrement_item+0x104>)
    3130:	4798      	blx	r3
    3132:	2800      	cmp	r0, #0
    3134:	d0ea      	beq.n	310c <menu_decrement_item+0x24>
                (*(uint8_t *)m->items[m->curr_pos].variable)--;
    3136:	3f01      	subs	r7, #1
    3138:	4643      	mov	r3, r8
    313a:	701f      	strb	r7, [r3, #0]
    313c:	e7e6      	b.n	310c <menu_decrement_item+0x24>
            if((*(uint16_t *)m->items[m->curr_pos].variable) > (m->items[m->curr_pos].val_min))
    313e:	00ee      	lsls	r6, r5, #3
    3140:	1973      	adds	r3, r6, r5
    3142:	009b      	lsls	r3, r3, #2
    3144:	18c3      	adds	r3, r0, r3
    3146:	691b      	ldr	r3, [r3, #16]
    3148:	4698      	mov	r8, r3
    314a:	881f      	ldrh	r7, [r3, #0]
    314c:	0038      	movs	r0, r7
    314e:	4b26      	ldr	r3, [pc, #152]	; (31e8 <menu_decrement_item+0x100>)
    3150:	4798      	blx	r3
    3152:	1976      	adds	r6, r6, r5
    3154:	00b6      	lsls	r6, r6, #2
    3156:	19a4      	adds	r4, r4, r6
    3158:	69e1      	ldr	r1, [r4, #28]
    315a:	4b24      	ldr	r3, [pc, #144]	; (31ec <menu_decrement_item+0x104>)
    315c:	4798      	blx	r3
    315e:	2800      	cmp	r0, #0
    3160:	d0d4      	beq.n	310c <menu_decrement_item+0x24>
                (*(uint16_t *)m->items[m->curr_pos].variable)--;
    3162:	3f01      	subs	r7, #1
    3164:	4643      	mov	r3, r8
    3166:	801f      	strh	r7, [r3, #0]
    3168:	e7d0      	b.n	310c <menu_decrement_item+0x24>
            if((*(uint32_t *)m->items[m->curr_pos].variable) > (m->items[m->curr_pos].val_min))
    316a:	00ee      	lsls	r6, r5, #3
    316c:	1973      	adds	r3, r6, r5
    316e:	009b      	lsls	r3, r3, #2
    3170:	18c3      	adds	r3, r0, r3
    3172:	691b      	ldr	r3, [r3, #16]
    3174:	4698      	mov	r8, r3
    3176:	681f      	ldr	r7, [r3, #0]
    3178:	0038      	movs	r0, r7
    317a:	4b1d      	ldr	r3, [pc, #116]	; (31f0 <menu_decrement_item+0x108>)
    317c:	4798      	blx	r3
    317e:	1976      	adds	r6, r6, r5
    3180:	00b6      	lsls	r6, r6, #2
    3182:	19a4      	adds	r4, r4, r6
    3184:	69e1      	ldr	r1, [r4, #28]
    3186:	4b19      	ldr	r3, [pc, #100]	; (31ec <menu_decrement_item+0x104>)
    3188:	4798      	blx	r3
    318a:	2800      	cmp	r0, #0
    318c:	d0be      	beq.n	310c <menu_decrement_item+0x24>
                (*(uint32_t *)m->items[m->curr_pos].variable)-=10;
    318e:	3f0a      	subs	r7, #10
    3190:	4643      	mov	r3, r8
    3192:	601f      	str	r7, [r3, #0]
    3194:	e7ba      	b.n	310c <menu_decrement_item+0x24>
            if((*(float *)m->items[m->curr_pos].variable) > (m->items[m->curr_pos].val_min))
    3196:	00eb      	lsls	r3, r5, #3
    3198:	195a      	adds	r2, r3, r5
    319a:	0092      	lsls	r2, r2, #2
    319c:	1882      	adds	r2, r0, r2
    319e:	6917      	ldr	r7, [r2, #16]
    31a0:	683e      	ldr	r6, [r7, #0]
    31a2:	69d1      	ldr	r1, [r2, #28]
    31a4:	1c30      	adds	r0, r6, #0
    31a6:	4b11      	ldr	r3, [pc, #68]	; (31ec <menu_decrement_item+0x104>)
    31a8:	4798      	blx	r3
    31aa:	2800      	cmp	r0, #0
    31ac:	d009      	beq.n	31c2 <menu_decrement_item+0xda>
                (*(float *)m->items[m->curr_pos].variable) -= 0.1;
    31ae:	1c30      	adds	r0, r6, #0
    31b0:	4b10      	ldr	r3, [pc, #64]	; (31f4 <menu_decrement_item+0x10c>)
    31b2:	4798      	blx	r3
    31b4:	4a10      	ldr	r2, [pc, #64]	; (31f8 <menu_decrement_item+0x110>)
    31b6:	4b11      	ldr	r3, [pc, #68]	; (31fc <menu_decrement_item+0x114>)
    31b8:	4d11      	ldr	r5, [pc, #68]	; (3200 <menu_decrement_item+0x118>)
    31ba:	47a8      	blx	r5
    31bc:	4b11      	ldr	r3, [pc, #68]	; (3204 <menu_decrement_item+0x11c>)
    31be:	4798      	blx	r3
    31c0:	6038      	str	r0, [r7, #0]
            if(*(float *)m->items[m->curr_pos].variable < 0)
    31c2:	4b08      	ldr	r3, [pc, #32]	; (31e4 <menu_decrement_item+0xfc>)
    31c4:	5ce2      	ldrb	r2, [r4, r3]
    31c6:	00d3      	lsls	r3, r2, #3
    31c8:	189b      	adds	r3, r3, r2
    31ca:	009b      	lsls	r3, r3, #2
    31cc:	18e4      	adds	r4, r4, r3
    31ce:	6924      	ldr	r4, [r4, #16]
    31d0:	2100      	movs	r1, #0
    31d2:	6820      	ldr	r0, [r4, #0]
    31d4:	4b0c      	ldr	r3, [pc, #48]	; (3208 <menu_decrement_item+0x120>)
    31d6:	4798      	blx	r3
    31d8:	2800      	cmp	r0, #0
    31da:	d097      	beq.n	310c <menu_decrement_item+0x24>
                *(float *)m->items[m->curr_pos].variable=0;
    31dc:	2300      	movs	r3, #0
    31de:	6023      	str	r3, [r4, #0]
}
    31e0:	e794      	b.n	310c <menu_decrement_item+0x24>
    31e2:	46c0      	nop			; (mov r8, r8)
    31e4:	00000265 	.word	0x00000265
    31e8:	000055d9 	.word	0x000055d9
    31ec:	00004c65 	.word	0x00004c65
    31f0:	00005679 	.word	0x00005679
    31f4:	00006f29 	.word	0x00006f29
    31f8:	9999999a 	.word	0x9999999a
    31fc:	3fb99999 	.word	0x3fb99999
    3200:	0000688d 	.word	0x0000688d
    3204:	00006fcd 	.word	0x00006fcd
    3208:	00004c3d 	.word	0x00004c3d

0000320c <menu_swap>:
void menu_swap(MENU **dest, MENU *src)
{
    *dest = src;
    320c:	6001      	str	r1, [r0, #0]
    320e:	4770      	bx	lr

00003210 <USB_transmit_enable>:
    USB_flags &= ~(1 << USB_RXR);
}

void USB_transmit_enable(void)
{
    USB_flags |= (1 << USB_TXR);
    3210:	4a02      	ldr	r2, [pc, #8]	; (321c <USB_transmit_enable+0xc>)
    3212:	7813      	ldrb	r3, [r2, #0]
    3214:	2104      	movs	r1, #4
    3216:	430b      	orrs	r3, r1
    3218:	7013      	strb	r3, [r2, #0]
}
    321a:	4770      	bx	lr
    321c:	20001b90 	.word	0x20001b90

00003220 <USB_transmit_callback>:
{
    3220:	b510      	push	{r4, lr}
    USB_transmit_enable();
    3222:	4b01      	ldr	r3, [pc, #4]	; (3228 <USB_transmit_callback+0x8>)
    3224:	4798      	blx	r3
}
    3226:	bd10      	pop	{r4, pc}
    3228:	00003211 	.word	0x00003211

0000322c <USB_transmit_disable>:

void USB_transmit_disable(void)
{
    USB_flags &= ~(1 << USB_TXR);
    322c:	4a02      	ldr	r2, [pc, #8]	; (3238 <USB_transmit_disable+0xc>)
    322e:	7813      	ldrb	r3, [r2, #0]
    3230:	2104      	movs	r1, #4
    3232:	438b      	bics	r3, r1
    3234:	7013      	strb	r3, [r2, #0]
}
    3236:	4770      	bx	lr
    3238:	20001b90 	.word	0x20001b90

0000323c <USB_SendMessage>:
{
    323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    323e:	0004      	movs	r4, r0
    3240:	000d      	movs	r5, r1
uint8_t USB_transmit_ready(void)
{
    return USB_flags & (1 << USB_TXR);
    3242:	490b      	ldr	r1, [pc, #44]	; (3270 <USB_SendMessage+0x34>)
    3244:	2204      	movs	r2, #4
    3246:	780b      	ldrb	r3, [r1, #0]
    while(!USB_transmit_ready());
    3248:	4213      	tst	r3, r2
    324a:	d0fc      	beq.n	3246 <USB_SendMessage+0xa>
    USB_transmit_disable();
    324c:	4b09      	ldr	r3, [pc, #36]	; (3274 <USB_SendMessage+0x38>)
    324e:	4798      	blx	r3
    while(usart_write_buffer_job(&USB_instance, p_string, length) != STATUS_OK);
    3250:	4e09      	ldr	r6, [pc, #36]	; (3278 <USB_SendMessage+0x3c>)
    3252:	4f0a      	ldr	r7, [pc, #40]	; (327c <USB_SendMessage+0x40>)
    3254:	002a      	movs	r2, r5
    3256:	0021      	movs	r1, r4
    3258:	0030      	movs	r0, r6
    325a:	47b8      	blx	r7
    325c:	2800      	cmp	r0, #0
    325e:	d1f9      	bne.n	3254 <USB_SendMessage+0x18>
    while(usart_get_job_status(&USB_instance, USART_TRANSCEIVER_TX) != STATUS_OK);
    3260:	4d05      	ldr	r5, [pc, #20]	; (3278 <USB_SendMessage+0x3c>)
    3262:	4c07      	ldr	r4, [pc, #28]	; (3280 <USB_SendMessage+0x44>)
    3264:	2101      	movs	r1, #1
    3266:	0028      	movs	r0, r5
    3268:	47a0      	blx	r4
    326a:	2800      	cmp	r0, #0
    326c:	d1fa      	bne.n	3264 <USB_SendMessage+0x28>
}
    326e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3270:	20001b90 	.word	0x20001b90
    3274:	0000322d 	.word	0x0000322d
    3278:	20001b5c 	.word	0x20001b5c
    327c:	00002649 	.word	0x00002649
    3280:	00002669 	.word	0x00002669

00003284 <configure_USB_callbacks>:
{
    return USB_RxBuf;
}

void configure_USB_callbacks(void)
{
    3284:	b510      	push	{r4, lr}
    usart_register_callback(&USB_instance, USB_transmit_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    3286:	4c08      	ldr	r4, [pc, #32]	; (32a8 <configure_USB_callbacks+0x24>)
    3288:	2200      	movs	r2, #0
    328a:	4908      	ldr	r1, [pc, #32]	; (32ac <configure_USB_callbacks+0x28>)
    328c:	0020      	movs	r0, r4
    328e:	4b08      	ldr	r3, [pc, #32]	; (32b0 <configure_USB_callbacks+0x2c>)
    3290:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    3292:	2231      	movs	r2, #49	; 0x31
    3294:	5ca3      	ldrb	r3, [r4, r2]
    3296:	2101      	movs	r1, #1
    3298:	430b      	orrs	r3, r1
    329a:	54a3      	strb	r3, [r4, r2]
    //usart_register_callback(&USB_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);

    usart_enable_callback(&USB_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    //usart_enable_callback(&USB_instance, USART_CALLBACK_BUFFER_RECEIVED);
    usart_read_job(&USB_instance, &c);
    329c:	4905      	ldr	r1, [pc, #20]	; (32b4 <configure_USB_callbacks+0x30>)
    329e:	0020      	movs	r0, r4
    32a0:	4b05      	ldr	r3, [pc, #20]	; (32b8 <configure_USB_callbacks+0x34>)
    32a2:	4798      	blx	r3
}
    32a4:	bd10      	pop	{r4, pc}
    32a6:	46c0      	nop			; (mov r8, r8)
    32a8:	20001b5c 	.word	0x20001b5c
    32ac:	00003221 	.word	0x00003221
    32b0:	00002621 	.word	0x00002621
    32b4:	200018ae 	.word	0x200018ae
    32b8:	00002639 	.word	0x00002639

000032bc <configure_USB>:
{
    32bc:	b530      	push	{r4, r5, lr}
    32be:	b093      	sub	sp, #76	; 0x4c
	config->data_order       = USART_DATAORDER_LSB;
    32c0:	2380      	movs	r3, #128	; 0x80
    32c2:	05db      	lsls	r3, r3, #23
    32c4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    32c6:	2300      	movs	r3, #0
    32c8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    32ca:	22ff      	movs	r2, #255	; 0xff
    32cc:	4669      	mov	r1, sp
    32ce:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    32d0:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    32d2:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    32d4:	2101      	movs	r1, #1
    32d6:	222c      	movs	r2, #44	; 0x2c
    32d8:	4668      	mov	r0, sp
    32da:	5481      	strb	r1, [r0, r2]
	config->transmitter_enable = true;
    32dc:	3201      	adds	r2, #1
    32de:	5481      	strb	r1, [r0, r2]
	config->clock_polarity_inverted = false;
    32e0:	3201      	adds	r2, #1
    32e2:	5483      	strb	r3, [r0, r2]
	config->use_external_clock = false;
    32e4:	3201      	adds	r2, #1
    32e6:	5483      	strb	r3, [r0, r2]
	config->ext_clock_freq   = 0;
    32e8:	930c      	str	r3, [sp, #48]	; 0x30
	config->run_in_standby   = false;
    32ea:	3205      	adds	r2, #5
    32ec:	5483      	strb	r3, [r0, r2]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    32ee:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    32f0:	2200      	movs	r2, #0
    32f2:	8203      	strh	r3, [r0, #16]
	config->lin_slave_enable      = false;
    32f4:	76c2      	strb	r2, [r0, #27]
	config->lin_node = LIN_INVALID_MODE;
    32f6:	9307      	str	r3, [sp, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    32f8:	8403      	strh	r3, [r0, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    32fa:	8443      	strh	r3, [r0, #34]	; 0x22
	config->immediate_buffer_overflow_notification  = false;
    32fc:	7602      	strb	r2, [r0, #24]
	config->encoding_format_enable                  = false;
    32fe:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    3300:	2313      	movs	r3, #19
    3302:	7683      	strb	r3, [r0, #26]
	config->collision_detection_enable              = false;
    3304:	3313      	adds	r3, #19
    3306:	54c2      	strb	r2, [r0, r3]
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    3308:	3b01      	subs	r3, #1
    330a:	54c2      	strb	r2, [r0, r3]
    config_usart.baudrate    =					250000;
    330c:	4b2f      	ldr	r3, [pc, #188]	; (33cc <configure_USB+0x110>)
    330e:	930a      	str	r3, [sp, #40]	; 0x28
    config_usart.mux_setting =					USART_RX_1_TX_0_XCK_1;
    3310:	2380      	movs	r3, #128	; 0x80
    3312:	035b      	lsls	r3, r3, #13
    3314:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 =					PINMUX_PA16C_SERCOM1_PAD0;
    3316:	4b2e      	ldr	r3, [pc, #184]	; (33d0 <configure_USB+0x114>)
    3318:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad1 =					PINMUX_PA17C_SERCOM1_PAD1;
    331a:	4b2e      	ldr	r3, [pc, #184]	; (33d4 <configure_USB+0x118>)
    331c:	930f      	str	r3, [sp, #60]	; 0x3c
    config_usart.pinmux_pad2 =					PINMUX_UNUSED;
    331e:	2301      	movs	r3, #1
    3320:	425b      	negs	r3, r3
    3322:	9310      	str	r3, [sp, #64]	; 0x40
    config_usart.pinmux_pad3 =					PINMUX_UNUSED;
    3324:	9311      	str	r3, [sp, #68]	; 0x44
    config_usart.generator_source =				GCLK_GENERATOR_3;
    3326:	2203      	movs	r2, #3
    3328:	3336      	adds	r3, #54	; 0x36
    332a:	54c2      	strb	r2, [r0, r3]
    config_usart.start_frame_detection_enable = true;
    332c:	3b11      	subs	r3, #17
    332e:	54c1      	strb	r1, [r0, r3]
    while (usart_init(&USB_instance, USB_MODULE, &config_usart) != STATUS_OK);
    3330:	4d29      	ldr	r5, [pc, #164]	; (33d8 <configure_USB+0x11c>)
    3332:	4c2a      	ldr	r4, [pc, #168]	; (33dc <configure_USB+0x120>)
    3334:	466a      	mov	r2, sp
    3336:	492a      	ldr	r1, [pc, #168]	; (33e0 <configure_USB+0x124>)
    3338:	0028      	movs	r0, r5
    333a:	47a0      	blx	r4
    333c:	2800      	cmp	r0, #0
    333e:	d1f9      	bne.n	3334 <configure_USB+0x78>
	SercomUsart *const usart_hw = &(module->hw->USART);
    3340:	4d25      	ldr	r5, [pc, #148]	; (33d8 <configure_USB+0x11c>)
    3342:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3344:	0020      	movs	r0, r4
    3346:	4b27      	ldr	r3, [pc, #156]	; (33e4 <configure_USB+0x128>)
    3348:	4798      	blx	r3
    334a:	231f      	movs	r3, #31
    334c:	4018      	ands	r0, r3
    334e:	3b1e      	subs	r3, #30
    3350:	4083      	lsls	r3, r0
    3352:	4a25      	ldr	r2, [pc, #148]	; (33e8 <configure_USB+0x12c>)
    3354:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3356:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3358:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    335a:	2b00      	cmp	r3, #0
    335c:	d1fc      	bne.n	3358 <configure_USB+0x9c>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    335e:	6823      	ldr	r3, [r4, #0]
    3360:	2202      	movs	r2, #2
    3362:	4313      	orrs	r3, r2
    3364:	6023      	str	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3366:	4b1c      	ldr	r3, [pc, #112]	; (33d8 <configure_USB+0x11c>)
    3368:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    336a:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    336c:	2a00      	cmp	r2, #0
    336e:	d1fc      	bne.n	336a <configure_USB+0xae>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    3370:	6859      	ldr	r1, [r3, #4]
    3372:	2280      	movs	r2, #128	; 0x80
    3374:	0252      	lsls	r2, r2, #9
    3376:	430a      	orrs	r2, r1
    3378:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    337a:	2101      	movs	r1, #1
    337c:	4a16      	ldr	r2, [pc, #88]	; (33d8 <configure_USB+0x11c>)
    337e:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3380:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3382:	2a00      	cmp	r2, #0
    3384:	d1fc      	bne.n	3380 <configure_USB+0xc4>
	return (usart_hw->SYNCBUSY.reg);
    3386:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3388:	2a00      	cmp	r2, #0
    338a:	d1fc      	bne.n	3386 <configure_USB+0xca>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    338c:	6859      	ldr	r1, [r3, #4]
    338e:	2280      	movs	r2, #128	; 0x80
    3390:	0292      	lsls	r2, r2, #10
    3392:	430a      	orrs	r2, r1
    3394:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    3396:	2101      	movs	r1, #1
    3398:	4a0f      	ldr	r2, [pc, #60]	; (33d8 <configure_USB+0x11c>)
    339a:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    339c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    339e:	2a00      	cmp	r2, #0
    33a0:	d1fc      	bne.n	339c <configure_USB+0xe0>
    delay_ms(1);
    33a2:	2000      	movs	r0, #0
    33a4:	4b11      	ldr	r3, [pc, #68]	; (33ec <configure_USB+0x130>)
    33a6:	4798      	blx	r3
    33a8:	0002      	movs	r2, r0
    33aa:	2300      	movs	r3, #0
    33ac:	4810      	ldr	r0, [pc, #64]	; (33f0 <configure_USB+0x134>)
    33ae:	2100      	movs	r1, #0
    33b0:	1880      	adds	r0, r0, r2
    33b2:	4159      	adcs	r1, r3
    33b4:	4a0f      	ldr	r2, [pc, #60]	; (33f4 <configure_USB+0x138>)
    33b6:	2300      	movs	r3, #0
    33b8:	4c0f      	ldr	r4, [pc, #60]	; (33f8 <configure_USB+0x13c>)
    33ba:	47a0      	blx	r4
    33bc:	4b0f      	ldr	r3, [pc, #60]	; (33fc <configure_USB+0x140>)
    33be:	4798      	blx	r3
    configure_USB_callbacks();
    33c0:	4b0f      	ldr	r3, [pc, #60]	; (3400 <configure_USB+0x144>)
    33c2:	4798      	blx	r3
    USB_transmit_enable();
    33c4:	4b0f      	ldr	r3, [pc, #60]	; (3404 <configure_USB+0x148>)
    33c6:	4798      	blx	r3
}
    33c8:	b013      	add	sp, #76	; 0x4c
    33ca:	bd30      	pop	{r4, r5, pc}
    33cc:	0003d090 	.word	0x0003d090
    33d0:	00100002 	.word	0x00100002
    33d4:	00110002 	.word	0x00110002
    33d8:	20001b5c 	.word	0x20001b5c
    33dc:	000021e9 	.word	0x000021e9
    33e0:	42000800 	.word	0x42000800
    33e4:	00002861 	.word	0x00002861
    33e8:	e000e100 	.word	0xe000e100
    33ec:	00003c95 	.word	0x00003c95
    33f0:	00001b57 	.word	0x00001b57
    33f4:	00001b58 	.word	0x00001b58
    33f8:	00004c8d 	.word	0x00004c8d
    33fc:	20000001 	.word	0x20000001
    3400:	00003285 	.word	0x00003285
    3404:	00003211 	.word	0x00003211

00003408 <millis>:
volatile uint32_t last_tick_time = 0;
ENCODER encoder;
ENCODER_POS encoder_pos;
uint32_t millis(void)
{
    return proc_millis;
    3408:	4b01      	ldr	r3, [pc, #4]	; (3410 <millis+0x8>)
    340a:	6818      	ldr	r0, [r3, #0]
}
    340c:	4770      	bx	lr
    340e:	46c0      	nop			; (mov r8, r8)
    3410:	200000d4 	.word	0x200000d4

00003414 <get_encoder_status>:

ENCODER get_encoder_status(void)
{
    return encoder;
    3414:	4b01      	ldr	r3, [pc, #4]	; (341c <get_encoder_status+0x8>)
    3416:	7818      	ldrb	r0, [r3, #0]
    encoder_pos = POS_NONE;
    encoder = IDLE;
}
    3418:	4770      	bx	lr
    341a:	46c0      	nop			; (mov r8, r8)
    341c:	20001da0 	.word	0x20001da0

00003420 <process_encoder>:
	return (port_base->IN.reg & pin_mask);
    3420:	4b26      	ldr	r3, [pc, #152]	; (34bc <process_encoder+0x9c>)
    3422:	6a1a      	ldr	r2, [r3, #32]
    3424:	6a19      	ldr	r1, [r3, #32]

void process_encoder(void)
{
    uint8_t status = 0;
    status |= (!port_pin_get_input_level(PIN_ENC_B)) << 0;
    status |= (!port_pin_get_input_level(PIN_ENC_A)) << 1;
    3426:	0dc9      	lsrs	r1, r1, #23
    3428:	2001      	movs	r0, #1
    342a:	0003      	movs	r3, r0
    342c:	438b      	bics	r3, r1
    342e:	005b      	lsls	r3, r3, #1
    status |= (!port_pin_get_input_level(PIN_ENC_B)) << 0;
    3430:	0d92      	lsrs	r2, r2, #22
    3432:	4042      	eors	r2, r0
    3434:	2101      	movs	r1, #1
    3436:	400a      	ands	r2, r1
    status |= (!port_pin_get_input_level(PIN_ENC_A)) << 1;
    3438:	4313      	orrs	r3, r2

    switch(status) {
    343a:	2b01      	cmp	r3, #1
    343c:	d009      	beq.n	3452 <process_encoder+0x32>
    343e:	2b02      	cmp	r3, #2
    3440:	d021      	beq.n	3486 <process_encoder+0x66>
    3442:	2b00      	cmp	r3, #0
    3444:	d000      	beq.n	3448 <process_encoder+0x28>
            break;
        default:
            break;
    }

}
    3446:	4770      	bx	lr
            encoder_pos = POS_NONE;
    3448:	4a1d      	ldr	r2, [pc, #116]	; (34c0 <process_encoder+0xa0>)
    344a:	7013      	strb	r3, [r2, #0]
            encoder = IDLE;
    344c:	4a1d      	ldr	r2, [pc, #116]	; (34c4 <process_encoder+0xa4>)
    344e:	7013      	strb	r3, [r2, #0]
            break;
    3450:	e7f9      	b.n	3446 <process_encoder+0x26>
            if(encoder_pos == POS_NONE) {
    3452:	4b1b      	ldr	r3, [pc, #108]	; (34c0 <process_encoder+0xa0>)
    3454:	781b      	ldrb	r3, [r3, #0]
    3456:	2b00      	cmp	r3, #0
    3458:	d008      	beq.n	346c <process_encoder+0x4c>
            if(encoder_pos == POS_B) {
    345a:	2b02      	cmp	r3, #2
    345c:	d1f3      	bne.n	3446 <process_encoder+0x26>
                encoder_pos = POS_NONE;
    345e:	2200      	movs	r2, #0
    3460:	4b17      	ldr	r3, [pc, #92]	; (34c0 <process_encoder+0xa0>)
    3462:	701a      	strb	r2, [r3, #0]
                encoder = FORWARD;
    3464:	3201      	adds	r2, #1
    3466:	4b17      	ldr	r3, [pc, #92]	; (34c4 <process_encoder+0xa4>)
    3468:	701a      	strb	r2, [r3, #0]
    346a:	e7ec      	b.n	3446 <process_encoder+0x26>
                encoder_pos = POS_A;
    346c:	2201      	movs	r2, #1
    346e:	4b14      	ldr	r3, [pc, #80]	; (34c0 <process_encoder+0xa0>)
    3470:	701a      	strb	r2, [r3, #0]
    return proc_millis;
    3472:	4915      	ldr	r1, [pc, #84]	; (34c8 <process_encoder+0xa8>)
    3474:	680b      	ldr	r3, [r1, #0]
                encoder_timer = millis()-last_tick_time;
    3476:	4a15      	ldr	r2, [pc, #84]	; (34cc <process_encoder+0xac>)
    3478:	6810      	ldr	r0, [r2, #0]
    347a:	1a1b      	subs	r3, r3, r0
    347c:	4814      	ldr	r0, [pc, #80]	; (34d0 <process_encoder+0xb0>)
    347e:	6003      	str	r3, [r0, #0]
    return proc_millis;
    3480:	680b      	ldr	r3, [r1, #0]
                last_tick_time=millis();
    3482:	6013      	str	r3, [r2, #0]
    3484:	e7df      	b.n	3446 <process_encoder+0x26>
            if(encoder_pos == POS_NONE) {
    3486:	4b0e      	ldr	r3, [pc, #56]	; (34c0 <process_encoder+0xa0>)
    3488:	781b      	ldrb	r3, [r3, #0]
    348a:	2b00      	cmp	r3, #0
    348c:	d008      	beq.n	34a0 <process_encoder+0x80>
            if(encoder_pos == POS_A) {
    348e:	2b01      	cmp	r3, #1
    3490:	d1d9      	bne.n	3446 <process_encoder+0x26>
                encoder_pos = POS_NONE;
    3492:	2200      	movs	r2, #0
    3494:	4b0a      	ldr	r3, [pc, #40]	; (34c0 <process_encoder+0xa0>)
    3496:	701a      	strb	r2, [r3, #0]
                encoder = BACKWARD;
    3498:	3202      	adds	r2, #2
    349a:	4b0a      	ldr	r3, [pc, #40]	; (34c4 <process_encoder+0xa4>)
    349c:	701a      	strb	r2, [r3, #0]
}
    349e:	e7d2      	b.n	3446 <process_encoder+0x26>
                encoder_pos = POS_B;
    34a0:	2202      	movs	r2, #2
    34a2:	4b07      	ldr	r3, [pc, #28]	; (34c0 <process_encoder+0xa0>)
    34a4:	701a      	strb	r2, [r3, #0]
    return proc_millis;
    34a6:	4908      	ldr	r1, [pc, #32]	; (34c8 <process_encoder+0xa8>)
    34a8:	680b      	ldr	r3, [r1, #0]
                encoder_timer = millis()-last_tick_time;
    34aa:	4a08      	ldr	r2, [pc, #32]	; (34cc <process_encoder+0xac>)
    34ac:	6810      	ldr	r0, [r2, #0]
    34ae:	1a1b      	subs	r3, r3, r0
    34b0:	4807      	ldr	r0, [pc, #28]	; (34d0 <process_encoder+0xb0>)
    34b2:	6003      	str	r3, [r0, #0]
    return proc_millis;
    34b4:	680b      	ldr	r3, [r1, #0]
                last_tick_time=millis();
    34b6:	6013      	str	r3, [r2, #0]
    34b8:	e7c5      	b.n	3446 <process_encoder+0x26>
    34ba:	46c0      	nop			; (mov r8, r8)
    34bc:	41000080 	.word	0x41000080
    34c0:	20001dc4 	.word	0x20001dc4
    34c4:	20001da0 	.word	0x20001da0
    34c8:	200000d4 	.word	0x200000d4
    34cc:	200000d0 	.word	0x200000d0
    34d0:	200000cc 	.word	0x200000cc

000034d4 <timer0_compare_callback>:
    a3 = adsr3;
    a4 = adsr4;
}

void timer0_compare_callback(struct tcc_module *const module_inst)
{
    34d4:	b510      	push	{r4, lr}
    adsr_process(a0);
    34d6:	4b0b      	ldr	r3, [pc, #44]	; (3504 <timer0_compare_callback+0x30>)
    34d8:	6818      	ldr	r0, [r3, #0]
    34da:	4c0b      	ldr	r4, [pc, #44]	; (3508 <timer0_compare_callback+0x34>)
    34dc:	47a0      	blx	r4
    adsr_process(a1);
    34de:	4b0b      	ldr	r3, [pc, #44]	; (350c <timer0_compare_callback+0x38>)
    34e0:	6818      	ldr	r0, [r3, #0]
    34e2:	47a0      	blx	r4
    adsr_process(a2);
    34e4:	4b0a      	ldr	r3, [pc, #40]	; (3510 <timer0_compare_callback+0x3c>)
    34e6:	6818      	ldr	r0, [r3, #0]
    34e8:	47a0      	blx	r4
    adsr_process(a3);
    34ea:	4b0a      	ldr	r3, [pc, #40]	; (3514 <timer0_compare_callback+0x40>)
    34ec:	6818      	ldr	r0, [r3, #0]
    34ee:	47a0      	blx	r4
    adsr_process(a4);
    34f0:	4b09      	ldr	r3, [pc, #36]	; (3518 <timer0_compare_callback+0x44>)
    34f2:	6818      	ldr	r0, [r3, #0]
    34f4:	47a0      	blx	r4
    proc_millis++;
    34f6:	4a09      	ldr	r2, [pc, #36]	; (351c <timer0_compare_callback+0x48>)
    34f8:	6813      	ldr	r3, [r2, #0]
    34fa:	3301      	adds	r3, #1
    34fc:	6013      	str	r3, [r2, #0]
    process_encoder();
    34fe:	4b08      	ldr	r3, [pc, #32]	; (3520 <timer0_compare_callback+0x4c>)
    3500:	4798      	blx	r3
}
    3502:	bd10      	pop	{r4, pc}
    3504:	20001e0c 	.word	0x20001e0c
    3508:	0000057d 	.word	0x0000057d
    350c:	20001d9c 	.word	0x20001d9c
    3510:	20001dc8 	.word	0x20001dc8
    3514:	20001da4 	.word	0x20001da4
    3518:	20001e10 	.word	0x20001e10
    351c:	200000d4 	.word	0x200000d4
    3520:	00003421 	.word	0x00003421

00003524 <configure_tcc0>:
{
    3524:	b570      	push	{r4, r5, r6, lr}
    3526:	b0aa      	sub	sp, #168	; 0xa8
    tcc_get_config_defaults(&config_tcc, TCC0);
    3528:	4e0e      	ldr	r6, [pc, #56]	; (3564 <configure_tcc0+0x40>)
    352a:	ac01      	add	r4, sp, #4
    352c:	0031      	movs	r1, r6
    352e:	0020      	movs	r0, r4
    3530:	4b0d      	ldr	r3, [pc, #52]	; (3568 <configure_tcc0+0x44>)
    3532:	4798      	blx	r3
    config_tcc.counter.clock_source = GCLK_GENERATOR_6;
    3534:	2306      	movs	r3, #6
    3536:	72a3      	strb	r3, [r4, #10]
    config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV16;
    3538:	3b02      	subs	r3, #2
    353a:	72e3      	strb	r3, [r4, #11]
    config_tcc.counter.period = 250;
    353c:	33f6      	adds	r3, #246	; 0xf6
    353e:	6063      	str	r3, [r4, #4]
    tcc_init(&tcc0_instance, TCC0, &config_tcc);
    3540:	4d0a      	ldr	r5, [pc, #40]	; (356c <configure_tcc0+0x48>)
    3542:	0022      	movs	r2, r4
    3544:	0031      	movs	r1, r6
    3546:	0028      	movs	r0, r5
    3548:	4b09      	ldr	r3, [pc, #36]	; (3570 <configure_tcc0+0x4c>)
    354a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    354c:	682a      	ldr	r2, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    354e:	2102      	movs	r1, #2
    3550:	6893      	ldr	r3, [r2, #8]
    3552:	4219      	tst	r1, r3
    3554:	d1fc      	bne.n	3550 <configure_tcc0+0x2c>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    3556:	6813      	ldr	r3, [r2, #0]
    3558:	2102      	movs	r1, #2
    355a:	430b      	orrs	r3, r1
    355c:	6013      	str	r3, [r2, #0]
}
    355e:	b02a      	add	sp, #168	; 0xa8
    3560:	bd70      	pop	{r4, r5, r6, pc}
    3562:	46c0      	nop			; (mov r8, r8)
    3564:	42002400 	.word	0x42002400
    3568:	00001be5 	.word	0x00001be5
    356c:	20001dcc 	.word	0x20001dcc
    3570:	00001d31 	.word	0x00001d31

00003574 <configure_tcc0_callbacks>:
{
    3574:	b5f0      	push	{r4, r5, r6, r7, lr}
    3576:	46c6      	mov	lr, r8
    3578:	b500      	push	{lr}
    357a:	4680      	mov	r8, r0
    357c:	000f      	movs	r7, r1
    357e:	0016      	movs	r6, r2
    3580:	001d      	movs	r5, r3
    tcc_register_callback(&tcc0_instance, timer0_compare_callback, TCC_CALLBACK_OVERFLOW);
    3582:	4c0c      	ldr	r4, [pc, #48]	; (35b4 <configure_tcc0_callbacks+0x40>)
    3584:	2200      	movs	r2, #0
    3586:	490c      	ldr	r1, [pc, #48]	; (35b8 <configure_tcc0_callbacks+0x44>)
    3588:	0020      	movs	r0, r4
    358a:	4b0c      	ldr	r3, [pc, #48]	; (35bc <configure_tcc0_callbacks+0x48>)
    358c:	4798      	blx	r3
    tcc_enable_callback(&tcc0_instance, TCC_CALLBACK_OVERFLOW);
    358e:	2100      	movs	r1, #0
    3590:	0020      	movs	r0, r4
    3592:	4b0b      	ldr	r3, [pc, #44]	; (35c0 <configure_tcc0_callbacks+0x4c>)
    3594:	4798      	blx	r3
    a0 = adsr0;
    3596:	4b0b      	ldr	r3, [pc, #44]	; (35c4 <configure_tcc0_callbacks+0x50>)
    3598:	4642      	mov	r2, r8
    359a:	601a      	str	r2, [r3, #0]
    a1 = adsr1;
    359c:	4b0a      	ldr	r3, [pc, #40]	; (35c8 <configure_tcc0_callbacks+0x54>)
    359e:	601f      	str	r7, [r3, #0]
    a2 = adsr2;
    35a0:	4b0a      	ldr	r3, [pc, #40]	; (35cc <configure_tcc0_callbacks+0x58>)
    35a2:	601e      	str	r6, [r3, #0]
    a3 = adsr3;
    35a4:	4b0a      	ldr	r3, [pc, #40]	; (35d0 <configure_tcc0_callbacks+0x5c>)
    35a6:	601d      	str	r5, [r3, #0]
    a4 = adsr4;
    35a8:	4b0a      	ldr	r3, [pc, #40]	; (35d4 <configure_tcc0_callbacks+0x60>)
    35aa:	9a06      	ldr	r2, [sp, #24]
    35ac:	601a      	str	r2, [r3, #0]
}
    35ae:	bc04      	pop	{r2}
    35b0:	4690      	mov	r8, r2
    35b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35b4:	20001dcc 	.word	0x20001dcc
    35b8:	000034d5 	.word	0x000034d5
    35bc:	00002115 	.word	0x00002115
    35c0:	0000212d 	.word	0x0000212d
    35c4:	20001e0c 	.word	0x20001e0c
    35c8:	20001d9c 	.word	0x20001d9c
    35cc:	20001dc8 	.word	0x20001dc8
    35d0:	20001da4 	.word	0x20001da4
    35d4:	20001e10 	.word	0x20001e10

000035d8 <get_encoder_speed>:
uint8_t get_encoder_speed(void)
{
    if(encoder_timer>30)return 1;
    35d8:	4b08      	ldr	r3, [pc, #32]	; (35fc <get_encoder_speed+0x24>)
    35da:	681b      	ldr	r3, [r3, #0]
    35dc:	2001      	movs	r0, #1
    35de:	2b1e      	cmp	r3, #30
    35e0:	d804      	bhi.n	35ec <get_encoder_speed+0x14>
    if(encoder_timer>20)return 2;
    35e2:	4b06      	ldr	r3, [pc, #24]	; (35fc <get_encoder_speed+0x24>)
    35e4:	681b      	ldr	r3, [r3, #0]
    35e6:	3001      	adds	r0, #1
    35e8:	2b14      	cmp	r3, #20
    35ea:	d900      	bls.n	35ee <get_encoder_speed+0x16>
    if(encoder_timer>10)return 5;
    return 10;
}
    35ec:	4770      	bx	lr
    if(encoder_timer>10)return 5;
    35ee:	4b03      	ldr	r3, [pc, #12]	; (35fc <get_encoder_speed+0x24>)
    35f0:	681b      	ldr	r3, [r3, #0]
    35f2:	3003      	adds	r0, #3
    35f4:	2b0a      	cmp	r3, #10
    35f6:	d8f9      	bhi.n	35ec <get_encoder_speed+0x14>
    return 10;
    35f8:	3005      	adds	r0, #5
    35fa:	e7f7      	b.n	35ec <get_encoder_speed+0x14>
    35fc:	200000cc 	.word	0x200000cc

00003600 <configure_tc0>:

void configure_tc0(void)
{
    3600:	b510      	push	{r4, lr}
    3602:	b08e      	sub	sp, #56	; 0x38
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    3604:	2200      	movs	r2, #0
    3606:	2100      	movs	r1, #0
    3608:	466b      	mov	r3, sp
    360a:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    360c:	2300      	movs	r3, #0
    360e:	4668      	mov	r0, sp
    3610:	71c1      	strb	r1, [r0, #7]
	config->run_in_standby             = false;
    3612:	7043      	strb	r3, [r0, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->on_demand                  = false;
    3614:	7083      	strb	r3, [r0, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    3616:	7203      	strb	r3, [r0, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3618:	7243      	strb	r3, [r0, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    361a:	7283      	strb	r3, [r0, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    361c:	72c3      	strb	r3, [r0, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    361e:	7303      	strb	r3, [r0, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    3620:	7383      	strb	r3, [r0, #14]
	config->oneshot                    = false;
    3622:	7343      	strb	r3, [r0, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    3624:	7403      	strb	r3, [r0, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    3626:	9205      	str	r2, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    3628:	9206      	str	r2, [sp, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

	config->counter_16_bit.value                   = 0x0000;
    362a:	8502      	strh	r2, [r0, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    362c:	8542      	strh	r2, [r0, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    362e:	8582      	strh	r2, [r0, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    3630:	2334      	movs	r3, #52	; 0x34
    3632:	54c1      	strb	r1, [r0, r3]
    struct tc_config config_tc;
    tc_get_config_defaults(&config_tc);

    config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
    3634:	3b30      	subs	r3, #48	; 0x30
    3636:	70c3      	strb	r3, [r0, #3]
    config_tc.clock_source = GCLK_GENERATOR_7;
    3638:	2207      	movs	r2, #7
    363a:	7002      	strb	r2, [r0, #0]
    config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1;
    config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    363c:	3a05      	subs	r2, #5
    363e:	7182      	strb	r2, [r0, #6]
    config_tc.counter_8_bit.compare_capture_channel[1] = 0;
    config_tc.pwm_channel[1].enabled = true;
    3640:	3a01      	subs	r2, #1
    3642:	7702      	strb	r2, [r0, #28]
    config_tc.pwm_channel[1].pin_out = PIN_PB11E_TC1_WO1; //BUZZER_PIN;
    3644:	322a      	adds	r2, #42	; 0x2a
    3646:	9208      	str	r2, [sp, #32]
    config_tc.pwm_channel[1].pin_mux = MUX_PB11E_TC1_WO1; //BUZZER_MUX;
    3648:	9309      	str	r3, [sp, #36]	; 0x24

    tc_init(&tc1_instance, TC1, &config_tc);
    364a:	4c0a      	ldr	r4, [pc, #40]	; (3674 <configure_tc0+0x74>)
    364c:	466a      	mov	r2, sp
    364e:	490a      	ldr	r1, [pc, #40]	; (3678 <configure_tc0+0x78>)
    3650:	0020      	movs	r0, r4
    3652:	4b0a      	ldr	r3, [pc, #40]	; (367c <configure_tc0+0x7c>)
    3654:	4798      	blx	r3
    tc_set_top_value(&tc1_instance, 64);
    3656:	2140      	movs	r1, #64	; 0x40
    3658:	0020      	movs	r0, r4
    365a:	4b09      	ldr	r3, [pc, #36]	; (3680 <configure_tc0+0x80>)
    365c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    365e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3660:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    3662:	2b00      	cmp	r3, #0
    3664:	d1fc      	bne.n	3660 <configure_tc0+0x60>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3666:	6813      	ldr	r3, [r2, #0]
    3668:	2102      	movs	r1, #2
    366a:	430b      	orrs	r3, r1
    366c:	6013      	str	r3, [r2, #0]
    tc_enable(&tc1_instance);
}
    366e:	b00e      	add	sp, #56	; 0x38
    3670:	bd10      	pop	{r4, pc}
    3672:	46c0      	nop			; (mov r8, r8)
    3674:	20001da8 	.word	0x20001da8
    3678:	42003400 	.word	0x42003400
    367c:	000007c1 	.word	0x000007c1
    3680:	00000b15 	.word	0x00000b15

00003684 <set_brightness>:

void set_brightness(uint8_t brightness)
{
    3684:	b510      	push	{r4, lr}
    brightness*=4;
    3686:	0080      	lsls	r0, r0, #2
    tc_set_compare_value(&tc1_instance, TC_COMPARE_CAPTURE_CHANNEL_1, brightness);
    3688:	b2c2      	uxtb	r2, r0
    368a:	2101      	movs	r1, #1
    368c:	4801      	ldr	r0, [pc, #4]	; (3694 <set_brightness+0x10>)
    368e:	4b02      	ldr	r3, [pc, #8]	; (3698 <set_brightness+0x14>)
    3690:	4798      	blx	r3
    3692:	bd10      	pop	{r4, pc}
    3694:	20001da8 	.word	0x20001da8
    3698:	00000a8d 	.word	0x00000a8d

0000369c <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    369c:	4770      	bx	lr
	...

000036a0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    36a0:	4b0c      	ldr	r3, [pc, #48]	; (36d4 <cpu_irq_enter_critical+0x34>)
    36a2:	681b      	ldr	r3, [r3, #0]
    36a4:	2b00      	cmp	r3, #0
    36a6:	d106      	bne.n	36b6 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    36a8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    36ac:	2b00      	cmp	r3, #0
    36ae:	d007      	beq.n	36c0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    36b0:	2200      	movs	r2, #0
    36b2:	4b09      	ldr	r3, [pc, #36]	; (36d8 <cpu_irq_enter_critical+0x38>)
    36b4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    36b6:	4a07      	ldr	r2, [pc, #28]	; (36d4 <cpu_irq_enter_critical+0x34>)
    36b8:	6813      	ldr	r3, [r2, #0]
    36ba:	3301      	adds	r3, #1
    36bc:	6013      	str	r3, [r2, #0]
}
    36be:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    36c0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    36c2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    36c6:	2200      	movs	r2, #0
    36c8:	4b04      	ldr	r3, [pc, #16]	; (36dc <cpu_irq_enter_critical+0x3c>)
    36ca:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    36cc:	3201      	adds	r2, #1
    36ce:	4b02      	ldr	r3, [pc, #8]	; (36d8 <cpu_irq_enter_critical+0x38>)
    36d0:	701a      	strb	r2, [r3, #0]
    36d2:	e7f0      	b.n	36b6 <cpu_irq_enter_critical+0x16>
    36d4:	200000d8 	.word	0x200000d8
    36d8:	200000dc 	.word	0x200000dc
    36dc:	20000014 	.word	0x20000014

000036e0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    36e0:	4b08      	ldr	r3, [pc, #32]	; (3704 <cpu_irq_leave_critical+0x24>)
    36e2:	681a      	ldr	r2, [r3, #0]
    36e4:	3a01      	subs	r2, #1
    36e6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    36e8:	681b      	ldr	r3, [r3, #0]
    36ea:	2b00      	cmp	r3, #0
    36ec:	d109      	bne.n	3702 <cpu_irq_leave_critical+0x22>
    36ee:	4b06      	ldr	r3, [pc, #24]	; (3708 <cpu_irq_leave_critical+0x28>)
    36f0:	781b      	ldrb	r3, [r3, #0]
    36f2:	2b00      	cmp	r3, #0
    36f4:	d005      	beq.n	3702 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    36f6:	2201      	movs	r2, #1
    36f8:	4b04      	ldr	r3, [pc, #16]	; (370c <cpu_irq_leave_critical+0x2c>)
    36fa:	701a      	strb	r2, [r3, #0]
    36fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3700:	b662      	cpsie	i
	}
}
    3702:	4770      	bx	lr
    3704:	200000d8 	.word	0x200000d8
    3708:	200000dc 	.word	0x200000dc
    370c:	20000014 	.word	0x20000014

00003710 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3710:	b510      	push	{r4, lr}
	switch (clock_source) {
    3712:	2807      	cmp	r0, #7
    3714:	d803      	bhi.n	371e <system_clock_source_get_hz+0xe>
    3716:	0080      	lsls	r0, r0, #2
    3718:	4b0f      	ldr	r3, [pc, #60]	; (3758 <system_clock_source_get_hz+0x48>)
    371a:	581b      	ldr	r3, [r3, r0]
    371c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    371e:	2000      	movs	r0, #0
    3720:	e018      	b.n	3754 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
    3722:	4b0e      	ldr	r3, [pc, #56]	; (375c <system_clock_source_get_hz+0x4c>)
    3724:	6858      	ldr	r0, [r3, #4]
    3726:	e015      	b.n	3754 <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    3728:	4b0d      	ldr	r3, [pc, #52]	; (3760 <system_clock_source_get_hz+0x50>)
    372a:	7d59      	ldrb	r1, [r3, #21]
    372c:	0709      	lsls	r1, r1, #28
    372e:	0f09      	lsrs	r1, r1, #28
    3730:	3101      	adds	r1, #1
    3732:	480c      	ldr	r0, [pc, #48]	; (3764 <system_clock_source_get_hz+0x54>)
    3734:	4b0c      	ldr	r3, [pc, #48]	; (3768 <system_clock_source_get_hz+0x58>)
    3736:	4798      	blx	r3
    3738:	e00c      	b.n	3754 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
    373a:	4b08      	ldr	r3, [pc, #32]	; (375c <system_clock_source_get_hz+0x4c>)
    373c:	6898      	ldr	r0, [r3, #8]
    373e:	e009      	b.n	3754 <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    3740:	4b07      	ldr	r3, [pc, #28]	; (3760 <system_clock_source_get_hz+0x50>)
    3742:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    3744:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    3746:	079b      	lsls	r3, r3, #30
    3748:	d504      	bpl.n	3754 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
    374a:	4b04      	ldr	r3, [pc, #16]	; (375c <system_clock_source_get_hz+0x4c>)
    374c:	6818      	ldr	r0, [r3, #0]
    374e:	e001      	b.n	3754 <system_clock_source_get_hz+0x44>
		return 32768UL;
    3750:	2080      	movs	r0, #128	; 0x80
    3752:	0200      	lsls	r0, r0, #8
	}
}
    3754:	bd10      	pop	{r4, pc}
    3756:	46c0      	nop			; (mov r8, r8)
    3758:	00007cac 	.word	0x00007cac
    375c:	200000e0 	.word	0x200000e0
    3760:	40001000 	.word	0x40001000
    3764:	02dc6c00 	.word	0x02dc6c00
    3768:	00004b01 	.word	0x00004b01

0000376c <system_clock_source_xosc_set_config>:
 * \param[in] config  External oscillator configuration structure containing
 *                    the new config
 */
void system_clock_source_xosc_set_config(
		struct system_clock_source_xosc_config *const config)
{
    376c:	b5f0      	push	{r4, r5, r6, r7, lr}
    376e:	46de      	mov	lr, fp
    3770:	4657      	mov	r7, sl
    3772:	464e      	mov	r6, r9
    3774:	4645      	mov	r5, r8
    3776:	b5e0      	push	{r5, r6, r7, lr}
	OSCCTRL_XOSCCTRL_Type temp = OSCCTRL->XOSCCTRL;
    3778:	4b38      	ldr	r3, [pc, #224]	; (385c <system_clock_source_xosc_set_config+0xf0>)
    377a:	8a1b      	ldrh	r3, [r3, #16]
    377c:	071a      	lsls	r2, r3, #28
    377e:	0fd2      	lsrs	r2, r2, #31
    3780:	4691      	mov	r9, r2
    3782:	055e      	lsls	r6, r3, #21
    3784:	0f76      	lsrs	r6, r6, #29

	temp.bit.STARTUP = config->startup_time;
    3786:	7842      	ldrb	r2, [r0, #1]
    3788:	240f      	movs	r4, #15
    378a:	4014      	ands	r4, r2
    378c:	46a3      	mov	fp, r4

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    378e:	7802      	ldrb	r2, [r0, #0]
    3790:	4251      	negs	r1, r2
    3792:	414a      	adcs	r2, r1
    3794:	b2d2      	uxtb	r2, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AMPGC = config->auto_gain_control;
    3796:	7885      	ldrb	r5, [r0, #2]

	/* Set gain */
	if (config->frequency <= 2000000) {
    3798:	6841      	ldr	r1, [r0, #4]
    379a:	4f31      	ldr	r7, [pc, #196]	; (3860 <system_clock_source_xosc_set_config+0xf4>)
    379c:	42b9      	cmp	r1, r7
    379e:	d90d      	bls.n	37bc <system_clock_source_xosc_set_config+0x50>
		temp.bit.GAIN = 0;
	} else if (config->frequency <= 4000000) {
    37a0:	4f30      	ldr	r7, [pc, #192]	; (3864 <system_clock_source_xosc_set_config+0xf8>)
    37a2:	42b9      	cmp	r1, r7
    37a4:	d953      	bls.n	384e <system_clock_source_xosc_set_config+0xe2>
		temp.bit.GAIN = 1;
	} else if (config->frequency <= 8000000) {
    37a6:	4f30      	ldr	r7, [pc, #192]	; (3868 <system_clock_source_xosc_set_config+0xfc>)
    37a8:	42b9      	cmp	r1, r7
    37aa:	d952      	bls.n	3852 <system_clock_source_xosc_set_config+0xe6>
		temp.bit.GAIN = 2;
	} else if (config->frequency <= 16000000) {
    37ac:	4f2f      	ldr	r7, [pc, #188]	; (386c <system_clock_source_xosc_set_config+0x100>)
    37ae:	42b9      	cmp	r1, r7
    37b0:	d951      	bls.n	3856 <system_clock_source_xosc_set_config+0xea>
		temp.bit.GAIN = 3;
	} else if (config->frequency <= 32000000) {
    37b2:	4f2f      	ldr	r7, [pc, #188]	; (3870 <system_clock_source_xosc_set_config+0x104>)
    37b4:	42b9      	cmp	r1, r7
    37b6:	d802      	bhi.n	37be <system_clock_source_xosc_set_config+0x52>
		temp.bit.GAIN = 4;
    37b8:	2604      	movs	r6, #4
    37ba:	e000      	b.n	37be <system_clock_source_xosc_set_config+0x52>
		temp.bit.GAIN = 0;
    37bc:	2600      	movs	r6, #0
	}

	temp.bit.ONDEMAND = config->on_demand;
    37be:	7a47      	ldrb	r7, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    37c0:	7a04      	ldrb	r4, [r0, #8]
    37c2:	46a4      	mov	ip, r4
	temp.bit.SWBEN    = config->enable_clock_switch_back;
    37c4:	7b44      	ldrb	r4, [r0, #13]
    37c6:	46a0      	mov	r8, r4

	if (config->enable_clock_failure_detector) {
    37c8:	7b04      	ldrb	r4, [r0, #12]
    37ca:	2c00      	cmp	r4, #0
    37cc:	d001      	beq.n	37d2 <system_clock_source_xosc_set_config+0x66>
		Assert(OSCCTRL->OSC48MCTRL.reg & OSCCTRL_OSC48MCTRL_ENABLE);
		temp.bit.CFDEN    = config->enable_clock_failure_detector;
    37ce:	2401      	movs	r4, #1
    37d0:	46a1      	mov	r9, r4
	}

	/* Store XOSC frequency for internal use */
	_system_clock_inst.xosc.frequency = config->frequency;
    37d2:	4c28      	ldr	r4, [pc, #160]	; (3874 <system_clock_source_xosc_set_config+0x108>)
    37d4:	6061      	str	r1, [r4, #4]

	OSCCTRL->EVCTRL.reg =
			config->enable_clock_failure_detector_event_outut << OSCCTRL_EVCTRL_CFDEO_Pos;
    37d6:	7ac1      	ldrb	r1, [r0, #11]
    37d8:	468a      	mov	sl, r1
	OSCCTRL->EVCTRL.reg =
    37da:	4920      	ldr	r1, [pc, #128]	; (385c <system_clock_source_xosc_set_config+0xf0>)
    37dc:	4654      	mov	r4, sl
    37de:	74cc      	strb	r4, [r1, #19]

	OSCCTRL->CFDPRESC.reg = OSCCTRL_CFDPRESC_CFDPRESC(config->clock_failure_detector_prescaler) ;
    37e0:	7a80      	ldrb	r0, [r0, #10]
    37e2:	4682      	mov	sl, r0
    37e4:	2007      	movs	r0, #7
    37e6:	4654      	mov	r4, sl
    37e8:	4020      	ands	r0, r4
    37ea:	7488      	strb	r0, [r1, #18]

	OSCCTRL->XOSCCTRL = temp;
    37ec:	0092      	lsls	r2, r2, #2
    37ee:	2004      	movs	r0, #4
    37f0:	4383      	bics	r3, r0
    37f2:	431a      	orrs	r2, r3
    37f4:	3803      	subs	r0, #3
    37f6:	464b      	mov	r3, r9
    37f8:	00db      	lsls	r3, r3, #3
    37fa:	2408      	movs	r4, #8
    37fc:	43a2      	bics	r2, r4
    37fe:	431a      	orrs	r2, r3
    3800:	4643      	mov	r3, r8
    3802:	4003      	ands	r3, r0
    3804:	011b      	lsls	r3, r3, #4
    3806:	3408      	adds	r4, #8
    3808:	43a2      	bics	r2, r4
    380a:	431a      	orrs	r2, r3
    380c:	4663      	mov	r3, ip
    380e:	4003      	ands	r3, r0
    3810:	019b      	lsls	r3, r3, #6
    3812:	3430      	adds	r4, #48	; 0x30
    3814:	43a2      	bics	r2, r4
    3816:	431a      	orrs	r2, r3
    3818:	4007      	ands	r7, r0
    381a:	01ff      	lsls	r7, r7, #7
    381c:	2380      	movs	r3, #128	; 0x80
    381e:	439a      	bics	r2, r3
    3820:	0013      	movs	r3, r2
    3822:	433b      	orrs	r3, r7
    3824:	0236      	lsls	r6, r6, #8
    3826:	4a14      	ldr	r2, [pc, #80]	; (3878 <system_clock_source_xosc_set_config+0x10c>)
    3828:	4013      	ands	r3, r2
    382a:	4333      	orrs	r3, r6
    382c:	4028      	ands	r0, r5
    382e:	02c0      	lsls	r0, r0, #11
    3830:	4a12      	ldr	r2, [pc, #72]	; (387c <system_clock_source_xosc_set_config+0x110>)
    3832:	4013      	ands	r3, r2
    3834:	4303      	orrs	r3, r0
    3836:	465a      	mov	r2, fp
    3838:	0314      	lsls	r4, r2, #12
    383a:	051b      	lsls	r3, r3, #20
    383c:	0d1b      	lsrs	r3, r3, #20
    383e:	4323      	orrs	r3, r4
    3840:	820b      	strh	r3, [r1, #16]
}
    3842:	bc3c      	pop	{r2, r3, r4, r5}
    3844:	4690      	mov	r8, r2
    3846:	4699      	mov	r9, r3
    3848:	46a2      	mov	sl, r4
    384a:	46ab      	mov	fp, r5
    384c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp.bit.GAIN = 1;
    384e:	2601      	movs	r6, #1
    3850:	e7b5      	b.n	37be <system_clock_source_xosc_set_config+0x52>
		temp.bit.GAIN = 2;
    3852:	2602      	movs	r6, #2
    3854:	e7b3      	b.n	37be <system_clock_source_xosc_set_config+0x52>
		temp.bit.GAIN = 3;
    3856:	2603      	movs	r6, #3
    3858:	e7b1      	b.n	37be <system_clock_source_xosc_set_config+0x52>
    385a:	46c0      	nop			; (mov r8, r8)
    385c:	40001000 	.word	0x40001000
    3860:	001e8480 	.word	0x001e8480
    3864:	003d0900 	.word	0x003d0900
    3868:	007a1200 	.word	0x007a1200
    386c:	00f42400 	.word	0x00f42400
    3870:	01e84800 	.word	0x01e84800
    3874:	200000e0 	.word	0x200000e0
    3878:	fffff8ff 	.word	0xfffff8ff
    387c:	fffff7ff 	.word	0xfffff7ff

00003880 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    3880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3882:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    3884:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    3886:	7d03      	ldrb	r3, [r0, #20]
    3888:	2b01      	cmp	r3, #1
    388a:	d04d      	beq.n	3928 <system_clock_source_dpll_set_config+0xa8>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    388c:	68a3      	ldr	r3, [r4, #8]
    388e:	0118      	lsls	r0, r3, #4
    3890:	0029      	movs	r1, r5
    3892:	4b29      	ldr	r3, [pc, #164]	; (3938 <system_clock_source_dpll_set_config+0xb8>)
    3894:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    3896:	220f      	movs	r2, #15
    3898:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    389a:	0903      	lsrs	r3, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    389c:	7821      	ldrb	r1, [r4, #0]
    389e:	01c9      	lsls	r1, r1, #7
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    38a0:	7866      	ldrb	r6, [r4, #1]
    38a2:	01b6      	lsls	r6, r6, #6
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    38a4:	4331      	orrs	r1, r6
    38a6:	b2c9      	uxtb	r1, r1
	OSCCTRL->DPLLCTRLA.reg =
    38a8:	4e24      	ldr	r6, [pc, #144]	; (393c <system_clock_source_dpll_set_config+0xbc>)
    38aa:	7731      	strb	r1, [r6, #28]

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    38ac:	0411      	lsls	r1, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    38ae:	3b01      	subs	r3, #1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);
    38b0:	051b      	lsls	r3, r3, #20
    38b2:	0d1b      	lsrs	r3, r3, #20
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    38b4:	430b      	orrs	r3, r1
	OSCCTRL->DPLLRATIO.reg =
    38b6:	6233      	str	r3, [r6, #32]

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    38b8:	0037      	movs	r7, r6
    38ba:	262c      	movs	r6, #44	; 0x2c
    38bc:	2104      	movs	r1, #4
    38be:	5dbb      	ldrb	r3, [r7, r6]
    38c0:	420b      	tst	r3, r1
    38c2:	d1fc      	bne.n	38be <system_clock_source_dpll_set_config+0x3e>
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
    38c4:	78a3      	ldrb	r3, [r4, #2]
    38c6:	031b      	lsls	r3, r3, #12
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
    38c8:	78e1      	ldrb	r1, [r4, #3]
    38ca:	00c9      	lsls	r1, r1, #3
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    38cc:	430b      	orrs	r3, r1
    38ce:	7921      	ldrb	r1, [r4, #4]
    38d0:	0089      	lsls	r1, r1, #2
    38d2:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);
    38d4:	7ca1      	ldrb	r1, [r4, #18]
    38d6:	2603      	movs	r6, #3
    38d8:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    38da:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    38dc:	8a21      	ldrh	r1, [r4, #16]
    38de:	0409      	lsls	r1, r1, #16
    38e0:	4f17      	ldr	r7, [pc, #92]	; (3940 <system_clock_source_dpll_set_config+0xc0>)
    38e2:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    38e4:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    38e6:	7ce1      	ldrb	r1, [r4, #19]
    38e8:	0209      	lsls	r1, r1, #8
    38ea:	27e0      	movs	r7, #224	; 0xe0
    38ec:	00ff      	lsls	r7, r7, #3
    38ee:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    38f0:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    38f2:	7d27      	ldrb	r7, [r4, #20]
    38f4:	013f      	lsls	r7, r7, #4
    38f6:	2130      	movs	r1, #48	; 0x30
    38f8:	4039      	ands	r1, r7
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    38fa:	430b      	orrs	r3, r1
	OSCCTRL->DPLLCTRLB.reg =
    38fc:	490f      	ldr	r1, [pc, #60]	; (393c <system_clock_source_dpll_set_config+0xbc>)
    38fe:	624b      	str	r3, [r1, #36]	; 0x24

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    3900:	7d63      	ldrb	r3, [r4, #21]
    3902:	401e      	ands	r6, r3
    3904:	2328      	movs	r3, #40	; 0x28
    3906:	54ce      	strb	r6, [r1, r3]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    3908:	000f      	movs	r7, r1
    390a:	262c      	movs	r6, #44	; 0x2c
    390c:	2108      	movs	r1, #8
    390e:	5dbb      	ldrb	r3, [r7, r6]
    3910:	420b      	tst	r3, r1
    3912:	d1fc      	bne.n	390e <system_clock_source_dpll_set_config+0x8e>
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
    3914:	230f      	movs	r3, #15
    3916:	4398      	bics	r0, r3
    3918:	1882      	adds	r2, r0, r2
			(refclk *
    391a:	436a      	muls	r2, r5
			) >> (4 + config->prescaler);
    391c:	7d63      	ldrb	r3, [r4, #21]
    391e:	3304      	adds	r3, #4
    3920:	40da      	lsrs	r2, r3
	_system_clock_inst.dpll.frequency =
    3922:	4b08      	ldr	r3, [pc, #32]	; (3944 <system_clock_source_dpll_set_config+0xc4>)
    3924:	601a      	str	r2, [r3, #0]
}
    3926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    3928:	8a01      	ldrh	r1, [r0, #16]
    392a:	3101      	adds	r1, #1
    392c:	0049      	lsls	r1, r1, #1
    392e:	0028      	movs	r0, r5
    3930:	4b01      	ldr	r3, [pc, #4]	; (3938 <system_clock_source_dpll_set_config+0xb8>)
    3932:	4798      	blx	r3
    3934:	0005      	movs	r5, r0
    3936:	e7a9      	b.n	388c <system_clock_source_dpll_set_config+0xc>
    3938:	00004b01 	.word	0x00004b01
    393c:	40001000 	.word	0x40001000
    3940:	07ff0000 	.word	0x07ff0000
    3944:	200000e0 	.word	0x200000e0

00003948 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3948:	2807      	cmp	r0, #7
    394a:	d803      	bhi.n	3954 <system_clock_source_enable+0xc>
    394c:	0080      	lsls	r0, r0, #2
    394e:	4b18      	ldr	r3, [pc, #96]	; (39b0 <system_clock_source_enable+0x68>)
    3950:	581b      	ldr	r3, [r3, r0]
    3952:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3954:	2017      	movs	r0, #23
    3956:	e029      	b.n	39ac <system_clock_source_enable+0x64>
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
    3958:	4a16      	ldr	r2, [pc, #88]	; (39b4 <system_clock_source_enable+0x6c>)
    395a:	7d13      	ldrb	r3, [r2, #20]
    395c:	2102      	movs	r1, #2
    395e:	430b      	orrs	r3, r1
    3960:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    3962:	2000      	movs	r0, #0
    3964:	e022      	b.n	39ac <system_clock_source_enable+0x64>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    3966:	4a14      	ldr	r2, [pc, #80]	; (39b8 <system_clock_source_enable+0x70>)
    3968:	6993      	ldr	r3, [r2, #24]
    396a:	2102      	movs	r1, #2
    396c:	430b      	orrs	r3, r1
    396e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    3970:	2000      	movs	r0, #0
		break;
    3972:	e01b      	b.n	39ac <system_clock_source_enable+0x64>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    3974:	4a0f      	ldr	r2, [pc, #60]	; (39b4 <system_clock_source_enable+0x6c>)
    3976:	8a13      	ldrh	r3, [r2, #16]
    3978:	2102      	movs	r1, #2
    397a:	430b      	orrs	r3, r1
    397c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    397e:	2000      	movs	r0, #0
		break;
    3980:	e014      	b.n	39ac <system_clock_source_enable+0x64>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    3982:	4a0d      	ldr	r2, [pc, #52]	; (39b8 <system_clock_source_enable+0x70>)
    3984:	8a93      	ldrh	r3, [r2, #20]
    3986:	2102      	movs	r1, #2
    3988:	430b      	orrs	r3, r1
    398a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    398c:	2000      	movs	r0, #0
		break;
    398e:	e00d      	b.n	39ac <system_clock_source_enable+0x64>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    3990:	4a08      	ldr	r2, [pc, #32]	; (39b4 <system_clock_source_enable+0x6c>)
    3992:	7f13      	ldrb	r3, [r2, #28]
    3994:	2102      	movs	r1, #2
    3996:	430b      	orrs	r3, r1
    3998:	7713      	strb	r3, [r2, #28]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    399a:	0010      	movs	r0, r2
    399c:	312a      	adds	r1, #42	; 0x2a
    399e:	2202      	movs	r2, #2
    39a0:	5c43      	ldrb	r3, [r0, r1]
    39a2:	4213      	tst	r3, r2
    39a4:	d1fc      	bne.n	39a0 <system_clock_source_enable+0x58>
	return STATUS_OK;
    39a6:	2000      	movs	r0, #0
    39a8:	e000      	b.n	39ac <system_clock_source_enable+0x64>
		return STATUS_OK;
    39aa:	2000      	movs	r0, #0
}
    39ac:	4770      	bx	lr
    39ae:	46c0      	nop			; (mov r8, r8)
    39b0:	00007ccc 	.word	0x00007ccc
    39b4:	40001000 	.word	0x40001000
    39b8:	40001400 	.word	0x40001400

000039bc <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    39bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    39be:	46d6      	mov	lr, sl
    39c0:	464f      	mov	r7, r9
    39c2:	4646      	mov	r6, r8
    39c4:	b5c0      	push	{r6, r7, lr}
    39c6:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    39c8:	2203      	movs	r2, #3
    39ca:	4b62      	ldr	r3, [pc, #392]	; (3b54 <system_clock_init+0x198>)
    39cc:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    39ce:	4a62      	ldr	r2, [pc, #392]	; (3b58 <system_clock_init+0x19c>)
    39d0:	6853      	ldr	r3, [r2, #4]
    39d2:	211e      	movs	r1, #30
    39d4:	438b      	bics	r3, r1
    39d6:	3918      	subs	r1, #24
    39d8:	430b      	orrs	r3, r1
    39da:	6053      	str	r3, [r2, #4]
	config->external_clock    = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    39dc:	a80a      	add	r0, sp, #40	; 0x28
    39de:	2300      	movs	r3, #0
    39e0:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control = false;
    39e2:	7083      	strb	r3, [r0, #2]
	config->frequency         = 12000000UL;
    39e4:	4a5d      	ldr	r2, [pc, #372]	; (3b5c <system_clock_init+0x1a0>)
    39e6:	6042      	str	r2, [r0, #4]
	config->run_in_standby    = false;
    39e8:	7203      	strb	r3, [r0, #8]
	config->on_demand         = false;
    39ea:	7243      	strb	r3, [r0, #9]
	config->clock_failure_detector_prescaler = SYSTEM_CLOCK_XOSC_FAILURE_DETECTOR_PRESCALER_1;
    39ec:	7283      	strb	r3, [r0, #10]
	config->enable_clock_failure_detector_event_outut = false;
    39ee:	72c3      	strb	r3, [r0, #11]
	config->enable_clock_failure_detector = false;
    39f0:	7303      	strb	r3, [r0, #12]
	config->enable_clock_switch_back = false;
    39f2:	7343      	strb	r3, [r0, #13]
#if CONF_CLOCK_XOSC_ENABLE == true
	struct system_clock_source_xosc_config xosc_conf;
	system_clock_source_xosc_get_config_defaults(&xosc_conf);

	xosc_conf.external_clock    = CONF_CLOCK_XOSC_EXTERNAL_CRYSTAL;
	xosc_conf.startup_time      = CONF_CLOCK_XOSC_STARTUP_TIME;
    39f4:	3301      	adds	r3, #1
    39f6:	7043      	strb	r3, [r0, #1]
	xosc_conf.enable_clock_failure_detector    = CONF_CLOCK_XOSC_FAILURE_DETECTOR_ENABLE;
	xosc_conf.enable_clock_failure_detector_event_outut =
		CONF_CLOCK_XOSC_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc_conf.enable_clock_switch_back = CONF_CLOCK_XOSC_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc_set_config(&xosc_conf);
    39f8:	4b59      	ldr	r3, [pc, #356]	; (3b60 <system_clock_init+0x1a4>)
    39fa:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC);
    39fc:	2000      	movs	r0, #0
    39fe:	4b59      	ldr	r3, [pc, #356]	; (3b64 <system_clock_init+0x1a8>)
    3a00:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    3a02:	4959      	ldr	r1, [pc, #356]	; (3b68 <system_clock_init+0x1ac>)
    3a04:	2201      	movs	r2, #1
    3a06:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC));
    3a08:	421a      	tst	r2, r3
    3a0a:	d0fc      	beq.n	3a06 <system_clock_init+0x4a>
	if (CONF_CLOCK_XOSC_ON_DEMAND || CONF_CLOCK_XOSC_AUTO_GAIN_CONTROL) {
		OSCCTRL->XOSCCTRL.reg |=
    3a0c:	4b56      	ldr	r3, [pc, #344]	; (3b68 <system_clock_init+0x1ac>)
    3a0e:	8a1a      	ldrh	r2, [r3, #16]
    3a10:	2180      	movs	r1, #128	; 0x80
    3a12:	430a      	orrs	r2, r1
    3a14:	821a      	strh	r2, [r3, #16]
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    3a16:	7d1a      	ldrb	r2, [r3, #20]
    3a18:	3140      	adds	r1, #64	; 0x40
    3a1a:	430a      	orrs	r2, r1
    3a1c:	751a      	strb	r2, [r3, #20]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3a1e:	4b53      	ldr	r3, [pc, #332]	; (3b6c <system_clock_init+0x1b0>)
    3a20:	4798      	blx	r3
	config->division_factor    = 1;
    3a22:	ac01      	add	r4, sp, #4
    3a24:	2601      	movs	r6, #1
    3a26:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3a28:	2500      	movs	r5, #0
    3a2a:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    3a2c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3a2e:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3a30:	7025      	strb	r5, [r4, #0]
    3a32:	0021      	movs	r1, r4
    3a34:	2001      	movs	r0, #1
    3a36:	4b4e      	ldr	r3, [pc, #312]	; (3b70 <system_clock_init+0x1b4>)
    3a38:	4698      	mov	r8, r3
    3a3a:	4798      	blx	r3
    3a3c:	2001      	movs	r0, #1
    3a3e:	4f4d      	ldr	r7, [pc, #308]	; (3b74 <system_clock_init+0x1b8>)
    3a40:	47b8      	blx	r7
	config->division_factor    = 1;
    3a42:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3a44:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    3a46:	2306      	movs	r3, #6
    3a48:	4699      	mov	r9, r3
    3a4a:	7023      	strb	r3, [r4, #0]
	config->output_enable      = false;
    3a4c:	7265      	strb	r5, [r4, #9]
    3a4e:	7226      	strb	r6, [r4, #8]
    3a50:	0021      	movs	r1, r4
    3a52:	2002      	movs	r0, #2
    3a54:	47c0      	blx	r8
    3a56:	2002      	movs	r0, #2
    3a58:	47b8      	blx	r7
	config->division_factor    = 1;
    3a5a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3a5c:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    3a5e:	7265      	strb	r5, [r4, #9]
    3a60:	2307      	movs	r3, #7
    3a62:	469a      	mov	sl, r3
    3a64:	7023      	strb	r3, [r4, #0]
    3a66:	7226      	strb	r6, [r4, #8]
    3a68:	0021      	movs	r1, r4
    3a6a:	2003      	movs	r0, #3
    3a6c:	47c0      	blx	r8
    3a6e:	2003      	movs	r0, #3
    3a70:	47b8      	blx	r7
	config->division_factor    = 1;
    3a72:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3a74:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    3a76:	464b      	mov	r3, r9
    3a78:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    3a7a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3a7c:	7265      	strb	r5, [r4, #9]
    3a7e:	0021      	movs	r1, r4
    3a80:	2004      	movs	r0, #4
    3a82:	47c0      	blx	r8
    3a84:	2004      	movs	r0, #4
    3a86:	47b8      	blx	r7
	config->division_factor    = 1;
    3a88:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3a8a:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    3a8c:	464b      	mov	r3, r9
    3a8e:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    3a90:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3a92:	7265      	strb	r5, [r4, #9]
    3a94:	0021      	movs	r1, r4
    3a96:	2005      	movs	r0, #5
    3a98:	47c0      	blx	r8
    3a9a:	2005      	movs	r0, #5
    3a9c:	47b8      	blx	r7
	config->division_factor    = 1;
    3a9e:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3aa0:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    3aa2:	464b      	mov	r3, r9
    3aa4:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    3aa6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3aa8:	7265      	strb	r5, [r4, #9]
    3aaa:	0021      	movs	r1, r4
    3aac:	2006      	movs	r0, #6
    3aae:	47c0      	blx	r8
    3ab0:	2006      	movs	r0, #6
    3ab2:	47b8      	blx	r7
	config->division_factor    = 1;
    3ab4:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3ab6:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
    3ab8:	464b      	mov	r3, r9
    3aba:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    3abc:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3abe:	7265      	strb	r5, [r4, #9]
    3ac0:	0021      	movs	r1, r4
    3ac2:	2007      	movs	r0, #7
    3ac4:	47c0      	blx	r8
    3ac6:	2007      	movs	r0, #7
    3ac8:	47b8      	blx	r7
	config->division_factor    = 1;
    3aca:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3acc:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    3ace:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3ad0:	7265      	strb	r5, [r4, #9]
    3ad2:	4653      	mov	r3, sl
    3ad4:	7023      	strb	r3, [r4, #0]
    3ad6:	0021      	movs	r1, r4
    3ad8:	2008      	movs	r0, #8
    3ada:	47c0      	blx	r8
    3adc:	2008      	movs	r0, #8
    3ade:	47b8      	blx	r7
	config->lock_bypass         = false;
    3ae0:	a804      	add	r0, sp, #16
    3ae2:	7085      	strb	r5, [r0, #2]
	config->wake_up_fast        = false;
    3ae4:	70c5      	strb	r5, [r0, #3]
	config->low_power_enable    = false;
    3ae6:	7105      	strb	r5, [r0, #4]
	config->output_frequency    = 48000000;
    3ae8:	4b23      	ldr	r3, [pc, #140]	; (3b78 <system_clock_init+0x1bc>)
    3aea:	6083      	str	r3, [r0, #8]
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    3aec:	7545      	strb	r5, [r0, #21]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    3aee:	74c5      	strb	r5, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    3af0:	7485      	strb	r5, [r0, #18]
		Assert(false);
	}
	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    3af2:	7005      	strb	r5, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    3af4:	7046      	strb	r6, [r0, #1]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    3af6:	7506      	strb	r6, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    3af8:	4b18      	ldr	r3, [pc, #96]	; (3b5c <system_clock_init+0x1a0>)
    3afa:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
    3afc:	2378      	movs	r3, #120	; 0x78
    3afe:	33ff      	adds	r3, #255	; 0xff
    3b00:	8203      	strh	r3, [r0, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    3b02:	4b1e      	ldr	r3, [pc, #120]	; (3b7c <system_clock_init+0x1c0>)
    3b04:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    3b06:	2007      	movs	r0, #7
    3b08:	4b16      	ldr	r3, [pc, #88]	; (3b64 <system_clock_init+0x1a8>)
    3b0a:	4798      	blx	r3
		return ((OSCCTRL->DPLLSTATUS.reg &
    3b0c:	4816      	ldr	r0, [pc, #88]	; (3b68 <system_clock_init+0x1ac>)
    3b0e:	2130      	movs	r1, #48	; 0x30
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    3b10:	2203      	movs	r2, #3
		return ((OSCCTRL->DPLLSTATUS.reg &
    3b12:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    3b14:	4013      	ands	r3, r2
    3b16:	2b03      	cmp	r3, #3
    3b18:	d1fb      	bne.n	3b12 <system_clock_init+0x156>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		OSCCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    3b1a:	4a13      	ldr	r2, [pc, #76]	; (3b68 <system_clock_init+0x1ac>)
    3b1c:	7f11      	ldrb	r1, [r2, #28]
    3b1e:	3b83      	subs	r3, #131	; 0x83
    3b20:	430b      	orrs	r3, r1
    3b22:	7713      	strb	r3, [r2, #28]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    3b24:	2301      	movs	r3, #1
    3b26:	4a16      	ldr	r2, [pc, #88]	; (3b80 <system_clock_init+0x1c4>)
    3b28:	7113      	strb	r3, [r2, #4]
	config->division_factor    = 1;
    3b2a:	a901      	add	r1, sp, #4
    3b2c:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    3b2e:	2300      	movs	r3, #0
    3b30:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    3b32:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    3b34:	724b      	strb	r3, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3b36:	3307      	adds	r3, #7
    3b38:	700b      	strb	r3, [r1, #0]
    3b3a:	2000      	movs	r0, #0
    3b3c:	4b0c      	ldr	r3, [pc, #48]	; (3b70 <system_clock_init+0x1b4>)
    3b3e:	4798      	blx	r3
    3b40:	2000      	movs	r0, #0
    3b42:	4b0c      	ldr	r3, [pc, #48]	; (3b74 <system_clock_init+0x1b8>)
    3b44:	4798      	blx	r3
#endif

}
    3b46:	b00e      	add	sp, #56	; 0x38
    3b48:	bc1c      	pop	{r2, r3, r4}
    3b4a:	4690      	mov	r8, r2
    3b4c:	4699      	mov	r9, r3
    3b4e:	46a2      	mov	sl, r4
    3b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b52:	46c0      	nop			; (mov r8, r8)
    3b54:	40001800 	.word	0x40001800
    3b58:	41004000 	.word	0x41004000
    3b5c:	00b71b00 	.word	0x00b71b00
    3b60:	0000376d 	.word	0x0000376d
    3b64:	00003949 	.word	0x00003949
    3b68:	40001000 	.word	0x40001000
    3b6c:	00003b85 	.word	0x00003b85
    3b70:	00003ba9 	.word	0x00003ba9
    3b74:	00003c55 	.word	0x00003c55
    3b78:	02dc6c00 	.word	0x02dc6c00
    3b7c:	00003881 	.word	0x00003881
    3b80:	40000800 	.word	0x40000800

00003b84 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    3b84:	4a06      	ldr	r2, [pc, #24]	; (3ba0 <system_gclk_init+0x1c>)
    3b86:	6953      	ldr	r3, [r2, #20]
    3b88:	2180      	movs	r1, #128	; 0x80
    3b8a:	430b      	orrs	r3, r1
    3b8c:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    3b8e:	2201      	movs	r2, #1
    3b90:	4b04      	ldr	r3, [pc, #16]	; (3ba4 <system_gclk_init+0x20>)
    3b92:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    3b94:	0019      	movs	r1, r3
    3b96:	780b      	ldrb	r3, [r1, #0]
    3b98:	4213      	tst	r3, r2
    3b9a:	d1fc      	bne.n	3b96 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3b9c:	4770      	bx	lr
    3b9e:	46c0      	nop			; (mov r8, r8)
    3ba0:	40000800 	.word	0x40000800
    3ba4:	40001c00 	.word	0x40001c00

00003ba8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3ba8:	b570      	push	{r4, r5, r6, lr}
    3baa:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3bac:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3bae:	784b      	ldrb	r3, [r1, #1]
    3bb0:	2b00      	cmp	r3, #0
    3bb2:	d002      	beq.n	3bba <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3bb4:	2380      	movs	r3, #128	; 0x80
    3bb6:	00db      	lsls	r3, r3, #3
    3bb8:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3bba:	7a4b      	ldrb	r3, [r1, #9]
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	d002      	beq.n	3bc6 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3bc0:	2380      	movs	r3, #128	; 0x80
    3bc2:	011b      	lsls	r3, r3, #4
    3bc4:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3bc6:	6848      	ldr	r0, [r1, #4]
    3bc8:	2801      	cmp	r0, #1
    3bca:	d90f      	bls.n	3bec <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3bcc:	1e43      	subs	r3, r0, #1
    3bce:	4218      	tst	r0, r3
    3bd0:	d131      	bne.n	3c36 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3bd2:	2802      	cmp	r0, #2
    3bd4:	d92d      	bls.n	3c32 <system_gclk_gen_set_config+0x8a>
    3bd6:	2302      	movs	r3, #2
    3bd8:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3bda:	3201      	adds	r2, #1
						mask <<= 1) {
    3bdc:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    3bde:	4298      	cmp	r0, r3
    3be0:	d8fb      	bhi.n	3bda <system_gclk_gen_set_config+0x32>
    3be2:	2380      	movs	r3, #128	; 0x80
    3be4:	015b      	lsls	r3, r3, #5
    3be6:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    3be8:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3bea:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3bec:	7a0b      	ldrb	r3, [r1, #8]
    3bee:	2b00      	cmp	r3, #0
    3bf0:	d002      	beq.n	3bf8 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3bf2:	2380      	movs	r3, #128	; 0x80
    3bf4:	019b      	lsls	r3, r3, #6
    3bf6:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3bf8:	2604      	movs	r6, #4
    3bfa:	40a6      	lsls	r6, r4
    3bfc:	4911      	ldr	r1, [pc, #68]	; (3c44 <system_gclk_gen_set_config+0x9c>)
    3bfe:	4a12      	ldr	r2, [pc, #72]	; (3c48 <system_gclk_gen_set_config+0xa0>)
    3c00:	684b      	ldr	r3, [r1, #4]
    3c02:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    3c04:	421e      	tst	r6, r3
    3c06:	d1fb      	bne.n	3c00 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    3c08:	4b10      	ldr	r3, [pc, #64]	; (3c4c <system_gclk_gen_set_config+0xa4>)
    3c0a:	4798      	blx	r3
    3c0c:	00a4      	lsls	r4, r4, #2
    3c0e:	4b0d      	ldr	r3, [pc, #52]	; (3c44 <system_gclk_gen_set_config+0x9c>)
    3c10:	469c      	mov	ip, r3
    3c12:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    3c14:	6a22      	ldr	r2, [r4, #32]
    3c16:	2380      	movs	r3, #128	; 0x80
    3c18:	005b      	lsls	r3, r3, #1
    3c1a:	401a      	ands	r2, r3
    3c1c:	432a      	orrs	r2, r5
    3c1e:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3c20:	4661      	mov	r1, ip
    3c22:	4a09      	ldr	r2, [pc, #36]	; (3c48 <system_gclk_gen_set_config+0xa0>)
    3c24:	684b      	ldr	r3, [r1, #4]
    3c26:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    3c28:	421e      	tst	r6, r3
    3c2a:	d1fb      	bne.n	3c24 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    3c2c:	4b08      	ldr	r3, [pc, #32]	; (3c50 <system_gclk_gen_set_config+0xa8>)
    3c2e:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    3c30:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3c32:	2200      	movs	r2, #0
    3c34:	e7d5      	b.n	3be2 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    3c36:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3c38:	2380      	movs	r3, #128	; 0x80
    3c3a:	009b      	lsls	r3, r3, #2
    3c3c:	4318      	orrs	r0, r3
    3c3e:	4305      	orrs	r5, r0
    3c40:	e7d4      	b.n	3bec <system_gclk_gen_set_config+0x44>
    3c42:	46c0      	nop			; (mov r8, r8)
    3c44:	40001c00 	.word	0x40001c00
    3c48:	000007fc 	.word	0x000007fc
    3c4c:	000036a1 	.word	0x000036a1
    3c50:	000036e1 	.word	0x000036e1

00003c54 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3c54:	b510      	push	{r4, lr}
    3c56:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3c58:	2204      	movs	r2, #4
    3c5a:	4082      	lsls	r2, r0
    3c5c:	4809      	ldr	r0, [pc, #36]	; (3c84 <system_gclk_gen_enable+0x30>)
    3c5e:	490a      	ldr	r1, [pc, #40]	; (3c88 <system_gclk_gen_enable+0x34>)
    3c60:	6843      	ldr	r3, [r0, #4]
    3c62:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    3c64:	421a      	tst	r2, r3
    3c66:	d1fb      	bne.n	3c60 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    3c68:	4b08      	ldr	r3, [pc, #32]	; (3c8c <system_gclk_gen_enable+0x38>)
    3c6a:	4798      	blx	r3
    3c6c:	00a4      	lsls	r4, r4, #2
    3c6e:	4b05      	ldr	r3, [pc, #20]	; (3c84 <system_gclk_gen_enable+0x30>)
    3c70:	469c      	mov	ip, r3
    3c72:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    3c74:	6a22      	ldr	r2, [r4, #32]
    3c76:	2380      	movs	r3, #128	; 0x80
    3c78:	005b      	lsls	r3, r3, #1
    3c7a:	4313      	orrs	r3, r2
    3c7c:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    3c7e:	4b04      	ldr	r3, [pc, #16]	; (3c90 <system_gclk_gen_enable+0x3c>)
    3c80:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3c82:	bd10      	pop	{r4, pc}
    3c84:	40001c00 	.word	0x40001c00
    3c88:	000007fc 	.word	0x000007fc
    3c8c:	000036a1 	.word	0x000036a1
    3c90:	000036e1 	.word	0x000036e1

00003c94 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c96:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3c98:	2204      	movs	r2, #4
    3c9a:	4082      	lsls	r2, r0
    3c9c:	4812      	ldr	r0, [pc, #72]	; (3ce8 <system_gclk_gen_get_hz+0x54>)
    3c9e:	4913      	ldr	r1, [pc, #76]	; (3cec <system_gclk_gen_get_hz+0x58>)
    3ca0:	6843      	ldr	r3, [r0, #4]
    3ca2:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    3ca4:	421a      	tst	r2, r3
    3ca6:	d1fb      	bne.n	3ca0 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    3ca8:	4b11      	ldr	r3, [pc, #68]	; (3cf0 <system_gclk_gen_get_hz+0x5c>)
    3caa:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    3cac:	4f0e      	ldr	r7, [pc, #56]	; (3ce8 <system_gclk_gen_get_hz+0x54>)
    3cae:	3408      	adds	r4, #8
    3cb0:	00a4      	lsls	r4, r4, #2
    3cb2:	59e0      	ldr	r0, [r4, r7]
    3cb4:	0740      	lsls	r0, r0, #29
    3cb6:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3cb8:	4b0e      	ldr	r3, [pc, #56]	; (3cf4 <system_gclk_gen_get_hz+0x60>)
    3cba:	4798      	blx	r3
    3cbc:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    3cbe:	59e5      	ldr	r5, [r4, r7]
    3cc0:	04ed      	lsls	r5, r5, #19
    3cc2:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    3cc4:	59e4      	ldr	r4, [r4, r7]
    3cc6:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    3cc8:	4b0b      	ldr	r3, [pc, #44]	; (3cf8 <system_gclk_gen_get_hz+0x64>)
    3cca:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3ccc:	2d00      	cmp	r5, #0
    3cce:	d107      	bne.n	3ce0 <system_gclk_gen_get_hz+0x4c>
    3cd0:	2c01      	cmp	r4, #1
    3cd2:	d907      	bls.n	3ce4 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    3cd4:	0021      	movs	r1, r4
    3cd6:	0030      	movs	r0, r6
    3cd8:	4b08      	ldr	r3, [pc, #32]	; (3cfc <system_gclk_gen_get_hz+0x68>)
    3cda:	4798      	blx	r3
    3cdc:	0006      	movs	r6, r0
    3cde:	e001      	b.n	3ce4 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3ce0:	3401      	adds	r4, #1
    3ce2:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    3ce4:	0030      	movs	r0, r6
    3ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ce8:	40001c00 	.word	0x40001c00
    3cec:	000007fc 	.word	0x000007fc
    3cf0:	000036a1 	.word	0x000036a1
    3cf4:	00003711 	.word	0x00003711
    3cf8:	000036e1 	.word	0x000036e1
    3cfc:	00004b01 	.word	0x00004b01

00003d00 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3d00:	b510      	push	{r4, lr}
    3d02:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3d04:	4b09      	ldr	r3, [pc, #36]	; (3d2c <system_gclk_chan_enable+0x2c>)
    3d06:	4798      	blx	r3
    3d08:	00a0      	lsls	r0, r4, #2
    3d0a:	4b09      	ldr	r3, [pc, #36]	; (3d30 <system_gclk_chan_enable+0x30>)
    3d0c:	469c      	mov	ip, r3
    3d0e:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    3d10:	2280      	movs	r2, #128	; 0x80
    3d12:	5883      	ldr	r3, [r0, r2]
    3d14:	2140      	movs	r1, #64	; 0x40
    3d16:	430b      	orrs	r3, r1
    3d18:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    3d1a:	3140      	adds	r1, #64	; 0x40
    3d1c:	3a40      	subs	r2, #64	; 0x40
    3d1e:	5843      	ldr	r3, [r0, r1]
    3d20:	421a      	tst	r2, r3
    3d22:	d0fc      	beq.n	3d1e <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    3d24:	4b03      	ldr	r3, [pc, #12]	; (3d34 <system_gclk_chan_enable+0x34>)
    3d26:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    3d28:	bd10      	pop	{r4, pc}
    3d2a:	46c0      	nop			; (mov r8, r8)
    3d2c:	000036a1 	.word	0x000036a1
    3d30:	40001c00 	.word	0x40001c00
    3d34:	000036e1 	.word	0x000036e1

00003d38 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3d38:	b510      	push	{r4, lr}
    3d3a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3d3c:	4b09      	ldr	r3, [pc, #36]	; (3d64 <system_gclk_chan_disable+0x2c>)
    3d3e:	4798      	blx	r3
    3d40:	00a0      	lsls	r0, r4, #2
    3d42:	4b09      	ldr	r3, [pc, #36]	; (3d68 <system_gclk_chan_disable+0x30>)
    3d44:	469c      	mov	ip, r3
    3d46:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    3d48:	2280      	movs	r2, #128	; 0x80
    3d4a:	5883      	ldr	r3, [r0, r2]
    3d4c:	2140      	movs	r1, #64	; 0x40
    3d4e:	438b      	bics	r3, r1
    3d50:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    3d52:	3140      	adds	r1, #64	; 0x40
    3d54:	3a40      	subs	r2, #64	; 0x40
    3d56:	5843      	ldr	r3, [r0, r1]
    3d58:	421a      	tst	r2, r3
    3d5a:	d1fc      	bne.n	3d56 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    3d5c:	4b03      	ldr	r3, [pc, #12]	; (3d6c <system_gclk_chan_disable+0x34>)
    3d5e:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    3d60:	bd10      	pop	{r4, pc}
    3d62:	46c0      	nop			; (mov r8, r8)
    3d64:	000036a1 	.word	0x000036a1
    3d68:	40001c00 	.word	0x40001c00
    3d6c:	000036e1 	.word	0x000036e1

00003d70 <system_gclk_chan_set_config>:
{
    3d70:	b570      	push	{r4, r5, r6, lr}
    3d72:	0004      	movs	r4, r0
    3d74:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    3d76:	4b05      	ldr	r3, [pc, #20]	; (3d8c <system_gclk_chan_set_config+0x1c>)
    3d78:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    3d7a:	782a      	ldrb	r2, [r5, #0]
    3d7c:	230f      	movs	r3, #15
    3d7e:	4013      	ands	r3, r2
    3d80:	3420      	adds	r4, #32
    3d82:	00a4      	lsls	r4, r4, #2
    3d84:	4a02      	ldr	r2, [pc, #8]	; (3d90 <system_gclk_chan_set_config+0x20>)
    3d86:	50a3      	str	r3, [r4, r2]
}
    3d88:	bd70      	pop	{r4, r5, r6, pc}
    3d8a:	46c0      	nop			; (mov r8, r8)
    3d8c:	00003d39 	.word	0x00003d39
    3d90:	40001c00 	.word	0x40001c00

00003d94 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3d94:	b510      	push	{r4, lr}
    3d96:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3d98:	4b06      	ldr	r3, [pc, #24]	; (3db4 <system_gclk_chan_get_hz+0x20>)
    3d9a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    3d9c:	3420      	adds	r4, #32
    3d9e:	00a4      	lsls	r4, r4, #2
    3da0:	4b05      	ldr	r3, [pc, #20]	; (3db8 <system_gclk_chan_get_hz+0x24>)
    3da2:	58e4      	ldr	r4, [r4, r3]
    3da4:	0724      	lsls	r4, r4, #28
    3da6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3da8:	4b04      	ldr	r3, [pc, #16]	; (3dbc <system_gclk_chan_get_hz+0x28>)
    3daa:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3dac:	0020      	movs	r0, r4
    3dae:	4b04      	ldr	r3, [pc, #16]	; (3dc0 <system_gclk_chan_get_hz+0x2c>)
    3db0:	4798      	blx	r3
}
    3db2:	bd10      	pop	{r4, pc}
    3db4:	000036a1 	.word	0x000036a1
    3db8:	40001c00 	.word	0x40001c00
    3dbc:	000036e1 	.word	0x000036e1
    3dc0:	00003c95 	.word	0x00003c95

00003dc4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3dc4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3dc6:	78d3      	ldrb	r3, [r2, #3]
    3dc8:	2b00      	cmp	r3, #0
    3dca:	d135      	bne.n	3e38 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3dcc:	7813      	ldrb	r3, [r2, #0]
    3dce:	2b80      	cmp	r3, #128	; 0x80
    3dd0:	d029      	beq.n	3e26 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3dd2:	061b      	lsls	r3, r3, #24
    3dd4:	2480      	movs	r4, #128	; 0x80
    3dd6:	0264      	lsls	r4, r4, #9
    3dd8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3dda:	7854      	ldrb	r4, [r2, #1]
    3ddc:	2502      	movs	r5, #2
    3dde:	43ac      	bics	r4, r5
    3de0:	d106      	bne.n	3df0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3de2:	7894      	ldrb	r4, [r2, #2]
    3de4:	2c00      	cmp	r4, #0
    3de6:	d120      	bne.n	3e2a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    3de8:	2480      	movs	r4, #128	; 0x80
    3dea:	02a4      	lsls	r4, r4, #10
    3dec:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3dee:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3df0:	7854      	ldrb	r4, [r2, #1]
    3df2:	3c01      	subs	r4, #1
    3df4:	2c01      	cmp	r4, #1
    3df6:	d91c      	bls.n	3e32 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3df8:	040d      	lsls	r5, r1, #16
    3dfa:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3dfc:	24a0      	movs	r4, #160	; 0xa0
    3dfe:	05e4      	lsls	r4, r4, #23
    3e00:	432c      	orrs	r4, r5
    3e02:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3e04:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3e06:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3e08:	24d0      	movs	r4, #208	; 0xd0
    3e0a:	0624      	lsls	r4, r4, #24
    3e0c:	432c      	orrs	r4, r5
    3e0e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3e10:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3e12:	78d4      	ldrb	r4, [r2, #3]
    3e14:	2c00      	cmp	r4, #0
    3e16:	d122      	bne.n	3e5e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3e18:	035b      	lsls	r3, r3, #13
    3e1a:	d51c      	bpl.n	3e56 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3e1c:	7893      	ldrb	r3, [r2, #2]
    3e1e:	2b01      	cmp	r3, #1
    3e20:	d01e      	beq.n	3e60 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    3e22:	6141      	str	r1, [r0, #20]
    3e24:	e017      	b.n	3e56 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    3e26:	2300      	movs	r3, #0
    3e28:	e7d7      	b.n	3dda <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3e2a:	24c0      	movs	r4, #192	; 0xc0
    3e2c:	02e4      	lsls	r4, r4, #11
    3e2e:	4323      	orrs	r3, r4
    3e30:	e7dd      	b.n	3dee <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3e32:	4c0d      	ldr	r4, [pc, #52]	; (3e68 <_system_pinmux_config+0xa4>)
    3e34:	4023      	ands	r3, r4
    3e36:	e7df      	b.n	3df8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3e38:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3e3a:	040c      	lsls	r4, r1, #16
    3e3c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3e3e:	23a0      	movs	r3, #160	; 0xa0
    3e40:	05db      	lsls	r3, r3, #23
    3e42:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3e44:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3e46:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3e48:	23d0      	movs	r3, #208	; 0xd0
    3e4a:	061b      	lsls	r3, r3, #24
    3e4c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3e4e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3e50:	78d3      	ldrb	r3, [r2, #3]
    3e52:	2b00      	cmp	r3, #0
    3e54:	d103      	bne.n	3e5e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3e56:	7853      	ldrb	r3, [r2, #1]
    3e58:	3b01      	subs	r3, #1
    3e5a:	2b01      	cmp	r3, #1
    3e5c:	d902      	bls.n	3e64 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    3e5e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3e60:	6181      	str	r1, [r0, #24]
    3e62:	e7f8      	b.n	3e56 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3e64:	6081      	str	r1, [r0, #8]
}
    3e66:	e7fa      	b.n	3e5e <_system_pinmux_config+0x9a>
    3e68:	fffbffff 	.word	0xfffbffff

00003e6c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3e6c:	b510      	push	{r4, lr}
    3e6e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3e70:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3e72:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3e74:	2900      	cmp	r1, #0
    3e76:	d105      	bne.n	3e84 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    3e78:	0943      	lsrs	r3, r0, #5
    3e7a:	01db      	lsls	r3, r3, #7
    3e7c:	2182      	movs	r1, #130	; 0x82
    3e7e:	05c9      	lsls	r1, r1, #23
    3e80:	468c      	mov	ip, r1
    3e82:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3e84:	241f      	movs	r4, #31
    3e86:	4020      	ands	r0, r4
    3e88:	2101      	movs	r1, #1
    3e8a:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    3e8c:	0018      	movs	r0, r3
    3e8e:	4b01      	ldr	r3, [pc, #4]	; (3e94 <system_pinmux_pin_set_config+0x28>)
    3e90:	4798      	blx	r3
}
    3e92:	bd10      	pop	{r4, pc}
    3e94:	00003dc5 	.word	0x00003dc5

00003e98 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3e98:	4770      	bx	lr
	...

00003e9c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3e9c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3e9e:	4b05      	ldr	r3, [pc, #20]	; (3eb4 <system_init+0x18>)
    3ea0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3ea2:	4b05      	ldr	r3, [pc, #20]	; (3eb8 <system_init+0x1c>)
    3ea4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3ea6:	4b05      	ldr	r3, [pc, #20]	; (3ebc <system_init+0x20>)
    3ea8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3eaa:	4b05      	ldr	r3, [pc, #20]	; (3ec0 <system_init+0x24>)
    3eac:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3eae:	4b05      	ldr	r3, [pc, #20]	; (3ec4 <system_init+0x28>)
    3eb0:	4798      	blx	r3
}
    3eb2:	bd10      	pop	{r4, pc}
    3eb4:	000039bd 	.word	0x000039bd
    3eb8:	0000369d 	.word	0x0000369d
    3ebc:	00003e99 	.word	0x00003e99
    3ec0:	00001349 	.word	0x00001349
    3ec4:	00003e99 	.word	0x00003e99

00003ec8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3ec8:	e7fe      	b.n	3ec8 <Dummy_Handler>
	...

00003ecc <Reset_Handler>:
{
    3ecc:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    3ece:	4a17      	ldr	r2, [pc, #92]	; (3f2c <Reset_Handler+0x60>)
    3ed0:	4b17      	ldr	r3, [pc, #92]	; (3f30 <Reset_Handler+0x64>)
    3ed2:	429a      	cmp	r2, r3
    3ed4:	d011      	beq.n	3efa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    3ed6:	001a      	movs	r2, r3
    3ed8:	4b16      	ldr	r3, [pc, #88]	; (3f34 <Reset_Handler+0x68>)
    3eda:	429a      	cmp	r2, r3
    3edc:	d20d      	bcs.n	3efa <Reset_Handler+0x2e>
    3ede:	4a16      	ldr	r2, [pc, #88]	; (3f38 <Reset_Handler+0x6c>)
    3ee0:	3303      	adds	r3, #3
    3ee2:	1a9b      	subs	r3, r3, r2
    3ee4:	089b      	lsrs	r3, r3, #2
    3ee6:	3301      	adds	r3, #1
    3ee8:	009b      	lsls	r3, r3, #2
    3eea:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3eec:	4810      	ldr	r0, [pc, #64]	; (3f30 <Reset_Handler+0x64>)
    3eee:	490f      	ldr	r1, [pc, #60]	; (3f2c <Reset_Handler+0x60>)
    3ef0:	588c      	ldr	r4, [r1, r2]
    3ef2:	5084      	str	r4, [r0, r2]
    3ef4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    3ef6:	429a      	cmp	r2, r3
    3ef8:	d1fa      	bne.n	3ef0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    3efa:	4a10      	ldr	r2, [pc, #64]	; (3f3c <Reset_Handler+0x70>)
    3efc:	4b10      	ldr	r3, [pc, #64]	; (3f40 <Reset_Handler+0x74>)
    3efe:	429a      	cmp	r2, r3
    3f00:	d20a      	bcs.n	3f18 <Reset_Handler+0x4c>
    3f02:	43d3      	mvns	r3, r2
    3f04:	490e      	ldr	r1, [pc, #56]	; (3f40 <Reset_Handler+0x74>)
    3f06:	185b      	adds	r3, r3, r1
    3f08:	2103      	movs	r1, #3
    3f0a:	438b      	bics	r3, r1
    3f0c:	3304      	adds	r3, #4
    3f0e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3f10:	2100      	movs	r1, #0
    3f12:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3f14:	4293      	cmp	r3, r2
    3f16:	d1fc      	bne.n	3f12 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3f18:	4a0a      	ldr	r2, [pc, #40]	; (3f44 <Reset_Handler+0x78>)
    3f1a:	21ff      	movs	r1, #255	; 0xff
    3f1c:	4b0a      	ldr	r3, [pc, #40]	; (3f48 <Reset_Handler+0x7c>)
    3f1e:	438b      	bics	r3, r1
    3f20:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    3f22:	4b0a      	ldr	r3, [pc, #40]	; (3f4c <Reset_Handler+0x80>)
    3f24:	4798      	blx	r3
        main();
    3f26:	4b0a      	ldr	r3, [pc, #40]	; (3f50 <Reset_Handler+0x84>)
    3f28:	4798      	blx	r3
    3f2a:	e7fe      	b.n	3f2a <Reset_Handler+0x5e>
    3f2c:	00007f0c 	.word	0x00007f0c
    3f30:	20000000 	.word	0x20000000
    3f34:	20000088 	.word	0x20000088
    3f38:	20000004 	.word	0x20000004
    3f3c:	20000088 	.word	0x20000088
    3f40:	20002080 	.word	0x20002080
    3f44:	e000ed00 	.word	0xe000ed00
    3f48:	00000000 	.word	0x00000000
    3f4c:	00007135 	.word	0x00007135
    3f50:	00004191 	.word	0x00004191

00003f54 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3f54:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3f56:	4a06      	ldr	r2, [pc, #24]	; (3f70 <_sbrk+0x1c>)
    3f58:	6812      	ldr	r2, [r2, #0]
    3f5a:	2a00      	cmp	r2, #0
    3f5c:	d004      	beq.n	3f68 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3f5e:	4a04      	ldr	r2, [pc, #16]	; (3f70 <_sbrk+0x1c>)
    3f60:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3f62:	18c3      	adds	r3, r0, r3
    3f64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3f66:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3f68:	4902      	ldr	r1, [pc, #8]	; (3f74 <_sbrk+0x20>)
    3f6a:	4a01      	ldr	r2, [pc, #4]	; (3f70 <_sbrk+0x1c>)
    3f6c:	6011      	str	r1, [r2, #0]
    3f6e:	e7f6      	b.n	3f5e <_sbrk+0xa>
    3f70:	200000ec 	.word	0x200000ec
    3f74:	20004080 	.word	0x20004080

00003f78 <NMI_Handler>:
struct dac_module dac_instance;
void IO_init(void);

void NMI_Handler(void)
{
    BREAKPOINT;
    3f78:	46c0      	nop			; (mov r8, r8)
}
    3f7a:	4770      	bx	lr

00003f7c <HardFault_Handler>:
void HardFault_Handler(void)
{
    BREAKPOINT;
    3f7c:	46c0      	nop			; (mov r8, r8)
}
    3f7e:	4770      	bx	lr

00003f80 <SVC_Handler>:
void SVC_Handler(void)
{
    BREAKPOINT;
    3f80:	46c0      	nop			; (mov r8, r8)
}
    3f82:	4770      	bx	lr

00003f84 <PendSV_Handler>:
void PendSV_Handler(void)
{
    BREAKPOINT;
    3f84:	46c0      	nop			; (mov r8, r8)
}
    3f86:	4770      	bx	lr

00003f88 <SysTick_Handler>:
void SysTick_Handler(void)
{
    BREAKPOINT;
    3f88:	46c0      	nop			; (mov r8, r8)
}
    3f8a:	4770      	bx	lr

00003f8c <IO_init>:
            return DMX;
    }
}

void IO_init(void)
{
    3f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f8e:	b085      	sub	sp, #20
	config->direction  = PORT_PIN_DIR_INPUT;
    3f90:	2700      	movs	r7, #0
    3f92:	466b      	mov	r3, sp
    3f94:	731f      	strb	r7, [r3, #12]
	config->powersave  = false;
    3f96:	739f      	strb	r7, [r3, #14]
    //configure all ports!
    struct port_config input_pin_no_pullup;
    port_get_config_defaults(&input_pin_no_pullup);
    input_pin_no_pullup.direction = PORT_PIN_DIR_INPUT;
    input_pin_no_pullup.input_pull = PORT_PIN_PULL_NONE;
    3f98:	735f      	strb	r7, [r3, #13]
	config->direction  = PORT_PIN_DIR_INPUT;
    3f9a:	a902      	add	r1, sp, #8
    3f9c:	700f      	strb	r7, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3f9e:	2601      	movs	r6, #1
    3fa0:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    3fa2:	708f      	strb	r7, [r1, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    3fa4:	ad01      	add	r5, sp, #4
    3fa6:	706e      	strb	r6, [r5, #1]
	config->powersave  = false;
    3fa8:	70af      	strb	r7, [r5, #2]
    input_pin_pullup.direction = PORT_PIN_DIR_INPUT;
    input_pin_pullup.input_pull = PORT_PIN_PULL_UP;

    struct port_config output_pin;
    port_get_config_defaults(&output_pin);
    output_pin.direction = PORT_PIN_DIR_OUTPUT;
    3faa:	702e      	strb	r6, [r5, #0]
    struct port_config output_pin_w_readback;
    port_get_config_defaults(&output_pin_w_readback);
    output_pin_w_readback.direction = PORT_PIN_DIR_OUTPUT_WTH_READBACK;
    /* DEFINE PINS WITH PULLUPS */
    port_pin_set_config(PIN_SW1, &input_pin_pullup);
    3fac:	200c      	movs	r0, #12
    3fae:	4c2c      	ldr	r4, [pc, #176]	; (4060 <IO_init+0xd4>)
    3fb0:	47a0      	blx	r4
    port_pin_set_config(PIN_SW2, &input_pin_no_pullup);
    3fb2:	a903      	add	r1, sp, #12
    3fb4:	200d      	movs	r0, #13
    3fb6:	47a0      	blx	r4

    /* DEFINE PINS WITHOUT PULLUPS */
    port_pin_set_config(PIN_ENC_B, &input_pin_no_pullup);
    3fb8:	a903      	add	r1, sp, #12
    3fba:	2036      	movs	r0, #54	; 0x36
    3fbc:	47a0      	blx	r4
    port_pin_set_config(PIN_ENC_A, &input_pin_no_pullup);
    3fbe:	a903      	add	r1, sp, #12
    3fc0:	2037      	movs	r0, #55	; 0x37
    3fc2:	47a0      	blx	r4

    /* DEFINE OUTPUT PINS */
    port_pin_set_config(PIN_EEPROM_WP, &output_pin);
    3fc4:	0029      	movs	r1, r5
    3fc6:	2018      	movs	r0, #24
    3fc8:	47a0      	blx	r4
    port_pin_set_config(PIN_LED_POWER, &output_pin);
    3fca:	0029      	movs	r1, r5
    3fcc:	201c      	movs	r0, #28
    3fce:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D0, &output_pin);
    3fd0:	0029      	movs	r1, r5
    3fd2:	2026      	movs	r0, #38	; 0x26
    3fd4:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D1, &output_pin);
    3fd6:	0029      	movs	r1, r5
    3fd8:	2025      	movs	r0, #37	; 0x25
    3fda:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D2, &output_pin);
    3fdc:	0029      	movs	r1, r5
    3fde:	2024      	movs	r0, #36	; 0x24
    3fe0:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D3, &output_pin);
    3fe2:	0029      	movs	r1, r5
    3fe4:	2023      	movs	r0, #35	; 0x23
    3fe6:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D4, &output_pin);
    3fe8:	0029      	movs	r1, r5
    3fea:	2022      	movs	r0, #34	; 0x22
    3fec:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D5, &output_pin);
    3fee:	0029      	movs	r1, r5
    3ff0:	2021      	movs	r0, #33	; 0x21
    3ff2:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D6, &output_pin);
    3ff4:	0029      	movs	r1, r5
    3ff6:	2020      	movs	r0, #32
    3ff8:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_D7, &output_pin);
    3ffa:	0029      	movs	r1, r5
    3ffc:	203f      	movs	r0, #63	; 0x3f
    3ffe:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_EN, &output_pin);
    4000:	0029      	movs	r1, r5
    4002:	2027      	movs	r0, #39	; 0x27
    4004:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_RW, &output_pin);
    4006:	0029      	movs	r1, r5
    4008:	2028      	movs	r0, #40	; 0x28
    400a:	47a0      	blx	r4
    port_pin_set_config(PIN_LCD_RS, &output_pin);
    400c:	0029      	movs	r1, r5
    400e:	2029      	movs	r0, #41	; 0x29
    4010:	47a0      	blx	r4
    port_pin_set_config(PIN_DMX_DIR, &output_pin);
    4012:	0029      	movs	r1, r5
    4014:	2014      	movs	r0, #20
    4016:	47a0      	blx	r4
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4018:	466b      	mov	r3, sp
    401a:	705f      	strb	r7, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    401c:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
    401e:	70df      	strb	r7, [r3, #3]

    struct system_pinmux_config mux_config;
    system_pinmux_get_config_defaults(&mux_config);
    mux_config.mux_position = MUX_ADC0;
    4020:	701e      	strb	r6, [r3, #0]
    system_pinmux_pin_set_config(PIN_ADC0, &mux_config);
    4022:	4669      	mov	r1, sp
    4024:	2004      	movs	r0, #4
    4026:	4c0f      	ldr	r4, [pc, #60]	; (4064 <IO_init+0xd8>)
    4028:	47a0      	blx	r4

    mux_config.mux_position = MUX_ADC1;
    402a:	466b      	mov	r3, sp
    402c:	701e      	strb	r6, [r3, #0]
    system_pinmux_pin_set_config(PIN_ADC1, &mux_config);
    402e:	4669      	mov	r1, sp
    4030:	2005      	movs	r0, #5
    4032:	47a0      	blx	r4
    mux_config.mux_position = MUX_ADC2;
    4034:	466b      	mov	r3, sp
    4036:	701e      	strb	r6, [r3, #0]
    system_pinmux_pin_set_config(PIN_ADC2, &mux_config);
    4038:	4669      	mov	r1, sp
    403a:	2006      	movs	r0, #6
    403c:	47a0      	blx	r4
    mux_config.mux_position = MUX_ADC3;
    403e:	466b      	mov	r3, sp
    4040:	701e      	strb	r6, [r3, #0]
    system_pinmux_pin_set_config(PIN_ADC3, &mux_config);
    4042:	4669      	mov	r1, sp
    4044:	2007      	movs	r0, #7
    4046:	47a0      	blx	r4
    mux_config.mux_position = MUX_ADC4;
    4048:	466b      	mov	r3, sp
    404a:	701e      	strb	r6, [r3, #0]
    system_pinmux_pin_set_config(PIN_ADC4, &mux_config);
    404c:	4669      	mov	r1, sp
    404e:	2003      	movs	r0, #3
    4050:	47a0      	blx	r4

    mux_config.mux_position = MUX_LCD_VO;
    4052:	466b      	mov	r3, sp
    4054:	701e      	strb	r6, [r3, #0]
    system_pinmux_pin_set_config(PIN_LCD_VO, &mux_config);
    4056:	4669      	mov	r1, sp
    4058:	2002      	movs	r0, #2
    405a:	47a0      	blx	r4
}
    405c:	b005      	add	sp, #20
    405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4060:	00002989 	.word	0x00002989
    4064:	00003e6d 	.word	0x00003e6d

00004068 <configure_dac>:

void configure_dac(void)
{
    4068:	b500      	push	{lr}
    406a:	b083      	sub	sp, #12
    struct dac_config config_dac;
    dac_get_config_defaults(&config_dac);
    406c:	4668      	mov	r0, sp
    406e:	4b05      	ldr	r3, [pc, #20]	; (4084 <configure_dac+0x1c>)
    4070:	4798      	blx	r3
    config_dac.reference = DAC_REFERENCE_AVCC;
    4072:	2340      	movs	r3, #64	; 0x40
    4074:	466a      	mov	r2, sp
    4076:	7013      	strb	r3, [r2, #0]
    dac_init(&dac_instance, DAC, &config_dac);
    4078:	4903      	ldr	r1, [pc, #12]	; (4088 <configure_dac+0x20>)
    407a:	4804      	ldr	r0, [pc, #16]	; (408c <configure_dac+0x24>)
    407c:	4b04      	ldr	r3, [pc, #16]	; (4090 <configure_dac+0x28>)
    407e:	4798      	blx	r3
}
    4080:	b003      	add	sp, #12
    4082:	bd00      	pop	{pc}
    4084:	0000163d 	.word	0x0000163d
    4088:	42005400 	.word	0x42005400
    408c:	20001fc8 	.word	0x20001fc8
    4090:	00001651 	.word	0x00001651

00004094 <configure_dac_channel>:

void configure_dac_channel(void)
{
    4094:	b510      	push	{r4, lr}
    4096:	b082      	sub	sp, #8
    struct dac_chan_config config_dac_chan;
    dac_chan_get_config_defaults(&config_dac_chan);
    4098:	a801      	add	r0, sp, #4
    409a:	4b07      	ldr	r3, [pc, #28]	; (40b8 <configure_dac_channel+0x24>)
    409c:	4798      	blx	r3

    dac_chan_set_config(&dac_instance, DAC_CHANNEL_0, &config_dac_chan);
    409e:	4c07      	ldr	r4, [pc, #28]	; (40bc <configure_dac_channel+0x28>)
    40a0:	aa01      	add	r2, sp, #4
    40a2:	2100      	movs	r1, #0
    40a4:	0020      	movs	r0, r4
    40a6:	4b06      	ldr	r3, [pc, #24]	; (40c0 <configure_dac_channel+0x2c>)
    40a8:	4798      	blx	r3

    dac_chan_enable(&dac_instance, DAC_CHANNEL_0);
    40aa:	2100      	movs	r1, #0
    40ac:	0020      	movs	r0, r4
    40ae:	4b05      	ldr	r3, [pc, #20]	; (40c4 <configure_dac_channel+0x30>)
    40b0:	4798      	blx	r3
}
    40b2:	b002      	add	sp, #8
    40b4:	bd10      	pop	{r4, pc}
    40b6:	46c0      	nop			; (mov r8, r8)
    40b8:	00001761 	.word	0x00001761
    40bc:	20001fc8 	.word	0x20001fc8
    40c0:	00001763 	.word	0x00001763
    40c4:	00001765 	.word	0x00001765

000040c8 <button_handler>:

void button_handler(TIPKA t, STATE *s)
{
    40c8:	b570      	push	{r4, r5, r6, lr}
    40ca:	000c      	movs	r4, r1
    key_pressed=1;
    40cc:	2201      	movs	r2, #1
    40ce:	4b13      	ldr	r3, [pc, #76]	; (411c <button_handler+0x54>)
    40d0:	701a      	strb	r2, [r3, #0]
    switch(t) {
    40d2:	2801      	cmp	r0, #1
    40d4:	d021      	beq.n	411a <button_handler+0x52>
    40d6:	2802      	cmp	r0, #2
    40d8:	d11c      	bne.n	4114 <button_handler+0x4c>
        case BUTTON_1:
            break;
        case BUTTON_2:
            if(get_p_to_item(selected_menu)->type==TYPE_MENU) {
    40da:	4b11      	ldr	r3, [pc, #68]	; (4120 <button_handler+0x58>)
    40dc:	6818      	ldr	r0, [r3, #0]
    40de:	4b11      	ldr	r3, [pc, #68]	; (4124 <button_handler+0x5c>)
    40e0:	4798      	blx	r3
    40e2:	7803      	ldrb	r3, [r0, #0]
    40e4:	2b04      	cmp	r3, #4
    40e6:	d007      	beq.n	40f8 <button_handler+0x30>
                menu_swap(&selected_menu, (MENU *)(get_p_to_item(selected_menu)->variable));
                *s= SCROLL;
            }
            else if(*s== EDIT)
    40e8:	7823      	ldrb	r3, [r4, #0]
    40ea:	2b01      	cmp	r3, #1
    40ec:	d00f      	beq.n	410e <button_handler+0x46>
                *s= SCROLL;
            else if(*s== SCROLL)
    40ee:	2b00      	cmp	r3, #0
    40f0:	d113      	bne.n	411a <button_handler+0x52>
                *s= EDIT;
    40f2:	3301      	adds	r3, #1
    40f4:	7023      	strb	r3, [r4, #0]
    40f6:	e010      	b.n	411a <button_handler+0x52>
                menu_swap(&selected_menu, (MENU *)(get_p_to_item(selected_menu)->variable));
    40f8:	4d09      	ldr	r5, [pc, #36]	; (4120 <button_handler+0x58>)
    40fa:	6828      	ldr	r0, [r5, #0]
    40fc:	4b09      	ldr	r3, [pc, #36]	; (4124 <button_handler+0x5c>)
    40fe:	4798      	blx	r3
    4100:	6901      	ldr	r1, [r0, #16]
    4102:	0028      	movs	r0, r5
    4104:	4b08      	ldr	r3, [pc, #32]	; (4128 <button_handler+0x60>)
    4106:	4798      	blx	r3
                *s= SCROLL;
    4108:	2300      	movs	r3, #0
    410a:	7023      	strb	r3, [r4, #0]
    410c:	e005      	b.n	411a <button_handler+0x52>
                *s= SCROLL;
    410e:	2300      	movs	r3, #0
    4110:	7023      	strb	r3, [r4, #0]
    4112:	e002      	b.n	411a <button_handler+0x52>
            break;
        default:
            key_pressed=0;
    4114:	2200      	movs	r2, #0
    4116:	4b01      	ldr	r3, [pc, #4]	; (411c <button_handler+0x54>)
    4118:	701a      	strb	r2, [r3, #0]
            break;
    }
    return;
}
    411a:	bd70      	pop	{r4, r5, r6, pc}
    411c:	2000001c 	.word	0x2000001c
    4120:	20000020 	.word	0x20000020
    4124:	00002c95 	.word	0x00002c95
    4128:	0000320d 	.word	0x0000320d

0000412c <menu_draw>:
void menu_draw(void)
{
    412c:	b5f0      	push	{r4, r5, r6, r7, lr}
    412e:	b097      	sub	sp, #92	; 0x5c
    4130:	ad01      	add	r5, sp, #4
    4132:	ae16      	add	r6, sp, #88	; 0x58
    4134:	0028      	movs	r0, r5
    char menu_string_array[4][21];
    for(uint8_t i=0; i<4; i++) {
        for(uint8_t j=0; j<20; j++)
            menu_string_array[i][j]=' ';
    4136:	2120      	movs	r1, #32
        menu_string_array[i][20]=0;
    4138:	2400      	movs	r4, #0
    413a:	0002      	movs	r2, r0
    413c:	3214      	adds	r2, #20
{
    413e:	0003      	movs	r3, r0
            menu_string_array[i][j]=' ';
    4140:	7019      	strb	r1, [r3, #0]
    4142:	3301      	adds	r3, #1
        for(uint8_t j=0; j<20; j++)
    4144:	4293      	cmp	r3, r2
    4146:	d1fb      	bne.n	4140 <menu_draw+0x14>
        menu_string_array[i][20]=0;
    4148:	7504      	strb	r4, [r0, #20]
    414a:	3015      	adds	r0, #21
    for(uint8_t i=0; i<4; i++) {
    414c:	42b0      	cmp	r0, r6
    414e:	d1f4      	bne.n	413a <menu_draw+0xe>
    }
    menu_whole_string(selected_menu, menu_string_array, state);
    4150:	4b0a      	ldr	r3, [pc, #40]	; (417c <menu_draw+0x50>)
    4152:	781a      	ldrb	r2, [r3, #0]
    4154:	4b0a      	ldr	r3, [pc, #40]	; (4180 <menu_draw+0x54>)
    4156:	6818      	ldr	r0, [r3, #0]
    4158:	a901      	add	r1, sp, #4
    415a:	4b0a      	ldr	r3, [pc, #40]	; (4184 <menu_draw+0x58>)
    415c:	4798      	blx	r3
    for(uint8_t i = 0; i < 4; i++) {
    415e:	2400      	movs	r4, #0
        lcd_setCursor(0,i);
    4160:	4f09      	ldr	r7, [pc, #36]	; (4188 <menu_draw+0x5c>)
        lcd_printstr(menu_string_array[i]);
    4162:	4e0a      	ldr	r6, [pc, #40]	; (418c <menu_draw+0x60>)
        lcd_setCursor(0,i);
    4164:	0021      	movs	r1, r4
    4166:	2000      	movs	r0, #0
    4168:	47b8      	blx	r7
        lcd_printstr(menu_string_array[i]);
    416a:	0028      	movs	r0, r5
    416c:	47b0      	blx	r6
    for(uint8_t i = 0; i < 4; i++) {
    416e:	3401      	adds	r4, #1
    4170:	b2e4      	uxtb	r4, r4
    4172:	3515      	adds	r5, #21
    4174:	2c04      	cmp	r4, #4
    4176:	d1f5      	bne.n	4164 <menu_draw+0x38>
    }
    4178:	b017      	add	sp, #92	; 0x5c
    417a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    417c:	200011c8 	.word	0x200011c8
    4180:	20000020 	.word	0x20000020
    4184:	00002ed1 	.word	0x00002ed1
    4188:	000004f5 	.word	0x000004f5
    418c:	00000561 	.word	0x00000561

00004190 <main>:
{
    4190:	b5f0      	push	{r4, r5, r6, r7, lr}
    4192:	46de      	mov	lr, fp
    4194:	4657      	mov	r7, sl
    4196:	464e      	mov	r6, r9
    4198:	4645      	mov	r5, r8
    419a:	b5e0      	push	{r5, r6, r7, lr}
    419c:	b0b1      	sub	sp, #196	; 0xc4
    adsr_init(&adsr_channel0, 1);
    419e:	4cd1      	ldr	r4, [pc, #836]	; (44e4 <main+0x354>)
    41a0:	2101      	movs	r1, #1
    41a2:	0020      	movs	r0, r4
    41a4:	4dd0      	ldr	r5, [pc, #832]	; (44e8 <main+0x358>)
    41a6:	47a8      	blx	r5
    adsr_init(&adsr_channel1, 1);
    41a8:	4bd0      	ldr	r3, [pc, #832]	; (44ec <main+0x35c>)
    41aa:	4699      	mov	r9, r3
    41ac:	2101      	movs	r1, #1
    41ae:	0018      	movs	r0, r3
    41b0:	47a8      	blx	r5
    adsr_init(&adsr_channel2, 1);
    41b2:	4bcf      	ldr	r3, [pc, #828]	; (44f0 <main+0x360>)
    41b4:	4698      	mov	r8, r3
    41b6:	2101      	movs	r1, #1
    41b8:	0018      	movs	r0, r3
    41ba:	47a8      	blx	r5
    adsr_init(&adsr_channel3, 1);
    41bc:	4fcd      	ldr	r7, [pc, #820]	; (44f4 <main+0x364>)
    41be:	2101      	movs	r1, #1
    41c0:	0038      	movs	r0, r7
    41c2:	47a8      	blx	r5
    adsr_init(&adsr_channel4, 1);
    41c4:	4ecc      	ldr	r6, [pc, #816]	; (44f8 <main+0x368>)
    41c6:	2101      	movs	r1, #1
    41c8:	0030      	movs	r0, r6
    41ca:	47a8      	blx	r5
    adsr_channel0.attack=1000;
    41cc:	23fa      	movs	r3, #250	; 0xfa
    41ce:	009b      	lsls	r3, r3, #2
    41d0:	60e3      	str	r3, [r4, #12]
    adsr_channel0.decay=1000;
    41d2:	6163      	str	r3, [r4, #20]
    adsr_channel0.sustain=1000;
    41d4:	61e3      	str	r3, [r4, #28]
    adsr_channel0.release=1000;
    41d6:	62a3      	str	r3, [r4, #40]	; 0x28
    adsr_channel0.sustain_level=127;
    41d8:	237f      	movs	r3, #127	; 0x7f
    41da:	6223      	str	r3, [r4, #32]
    trigger_channel0.adsr=&adsr_channel0;
    41dc:	4bc7      	ldr	r3, [pc, #796]	; (44fc <main+0x36c>)
    41de:	605c      	str	r4, [r3, #4]
    trigger_channel1.adsr=&adsr_channel1;
    41e0:	4bc7      	ldr	r3, [pc, #796]	; (4500 <main+0x370>)
    41e2:	464a      	mov	r2, r9
    41e4:	605a      	str	r2, [r3, #4]
    trigger_channel2.adsr=&adsr_channel2;
    41e6:	4bc7      	ldr	r3, [pc, #796]	; (4504 <main+0x374>)
    41e8:	4642      	mov	r2, r8
    41ea:	605a      	str	r2, [r3, #4]
    trigger_channel3.adsr=&adsr_channel3;
    41ec:	4bc6      	ldr	r3, [pc, #792]	; (4508 <main+0x378>)
    41ee:	605f      	str	r7, [r3, #4]
    trigger_channel4.adsr=&adsr_channel4;
    41f0:	4bc6      	ldr	r3, [pc, #792]	; (450c <main+0x37c>)
    41f2:	605e      	str	r6, [r3, #4]
    system_init();
    41f4:	4bc6      	ldr	r3, [pc, #792]	; (4510 <main+0x380>)
    41f6:	4798      	blx	r3
    delay_init();
    41f8:	4bc6      	ldr	r3, [pc, #792]	; (4514 <main+0x384>)
    41fa:	4798      	blx	r3
    IO_init();
    41fc:	4bc6      	ldr	r3, [pc, #792]	; (4518 <main+0x388>)
    41fe:	4798      	blx	r3
    lcd_begin();
    4200:	4bc6      	ldr	r3, [pc, #792]	; (451c <main+0x38c>)
    4202:	4798      	blx	r3
    delay_ms(199);
    4204:	2000      	movs	r0, #0
    4206:	4bc6      	ldr	r3, [pc, #792]	; (4520 <main+0x390>)
    4208:	4798      	blx	r3
    420a:	22c7      	movs	r2, #199	; 0xc7
    420c:	2300      	movs	r3, #0
    420e:	2100      	movs	r1, #0
    4210:	4cc4      	ldr	r4, [pc, #784]	; (4524 <main+0x394>)
    4212:	47a0      	blx	r4
    4214:	4ac4      	ldr	r2, [pc, #784]	; (4528 <main+0x398>)
    4216:	2300      	movs	r3, #0
    4218:	1880      	adds	r0, r0, r2
    421a:	4159      	adcs	r1, r3
    421c:	4ac3      	ldr	r2, [pc, #780]	; (452c <main+0x39c>)
    421e:	2300      	movs	r3, #0
    4220:	4cc3      	ldr	r4, [pc, #780]	; (4530 <main+0x3a0>)
    4222:	47a0      	blx	r4
    4224:	4bc3      	ldr	r3, [pc, #780]	; (4534 <main+0x3a4>)
    4226:	4798      	blx	r3
    lcd_noCursor();
    4228:	4bc3      	ldr	r3, [pc, #780]	; (4538 <main+0x3a8>)
    422a:	4798      	blx	r3
    configure_dac();
    422c:	4bc3      	ldr	r3, [pc, #780]	; (453c <main+0x3ac>)
    422e:	4798      	blx	r3
    configure_dac_channel();
    4230:	4bc3      	ldr	r3, [pc, #780]	; (4540 <main+0x3b0>)
    4232:	4798      	blx	r3
    configure_USB();
    4234:	4bc3      	ldr	r3, [pc, #780]	; (4544 <main+0x3b4>)
    4236:	4798      	blx	r3
    configure_DMX();
    4238:	4bc3      	ldr	r3, [pc, #780]	; (4548 <main+0x3b8>)
    423a:	4798      	blx	r3
    configure_tc0();
    423c:	4bc3      	ldr	r3, [pc, #780]	; (454c <main+0x3bc>)
    423e:	4798      	blx	r3
    dac_enable(&dac_instance);
    4240:	48c3      	ldr	r0, [pc, #780]	; (4550 <main+0x3c0>)
    4242:	4bc4      	ldr	r3, [pc, #784]	; (4554 <main+0x3c4>)
    4244:	4798      	blx	r3
    4246:	4bc4      	ldr	r3, [pc, #784]	; (4558 <main+0x3c8>)
    4248:	9309      	str	r3, [sp, #36]	; 0x24
    424a:	1c5a      	adds	r2, r3, #1
    424c:	32ff      	adds	r2, #255	; 0xff
    424e:	0019      	movs	r1, r3
        dmx_values[i] = 0;
    4250:	2300      	movs	r3, #0
    4252:	700b      	strb	r3, [r1, #0]
    4254:	3101      	adds	r1, #1
    for(uint16_t i = 0; i < sizeof(dmx_values); i++) {
    4256:	4291      	cmp	r1, r2
    4258:	d1fb      	bne.n	4252 <main+0xc2>
    425a:	9108      	str	r1, [sp, #32]
    Enable_global_interrupt();
    425c:	2201      	movs	r2, #1
    425e:	4bbf      	ldr	r3, [pc, #764]	; (455c <main+0x3cc>)
    4260:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4262:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4266:	b662      	cpsie	i
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4268:	4bbd      	ldr	r3, [pc, #756]	; (4560 <main+0x3d0>)
    426a:	20c6      	movs	r0, #198	; 0xc6
    426c:	0080      	lsls	r0, r0, #2
    426e:	581a      	ldr	r2, [r3, r0]
    4270:	49bc      	ldr	r1, [pc, #752]	; (4564 <main+0x3d4>)
    4272:	4011      	ands	r1, r2
    4274:	2280      	movs	r2, #128	; 0x80
    4276:	01d2      	lsls	r2, r2, #7
    4278:	430a      	orrs	r2, r1
    427a:	501a      	str	r2, [r3, r0]
    427c:	380c      	subs	r0, #12
    427e:	581a      	ldr	r2, [r3, r0]
    4280:	49b9      	ldr	r1, [pc, #740]	; (4568 <main+0x3d8>)
    4282:	4011      	ands	r1, r2
    4284:	2280      	movs	r2, #128	; 0x80
    4286:	0412      	lsls	r2, r2, #16
    4288:	430a      	orrs	r2, r1
    428a:	501a      	str	r2, [r3, r0]
    configure_adc0(&adsr_channel0, &adsr_channel1, &adsr_channel2, &adsr_channel3, &adsr_channel4);
    428c:	4f99      	ldr	r7, [pc, #612]	; (44f4 <main+0x364>)
    428e:	4e98      	ldr	r6, [pc, #608]	; (44f0 <main+0x360>)
    4290:	4d96      	ldr	r5, [pc, #600]	; (44ec <main+0x35c>)
    4292:	4b99      	ldr	r3, [pc, #612]	; (44f8 <main+0x368>)
    4294:	4698      	mov	r8, r3
    4296:	9300      	str	r3, [sp, #0]
    4298:	003b      	movs	r3, r7
    429a:	0032      	movs	r2, r6
    429c:	0029      	movs	r1, r5
    429e:	4891      	ldr	r0, [pc, #580]	; (44e4 <main+0x354>)
    42a0:	4cb2      	ldr	r4, [pc, #712]	; (456c <main+0x3dc>)
    42a2:	47a0      	blx	r4
    adc0_set_compare_value(100);
    42a4:	2064      	movs	r0, #100	; 0x64
    42a6:	4bb2      	ldr	r3, [pc, #712]	; (4570 <main+0x3e0>)
    42a8:	4798      	blx	r3
    configure_tcc0();
    42aa:	4bb2      	ldr	r3, [pc, #712]	; (4574 <main+0x3e4>)
    42ac:	4798      	blx	r3
    configure_tcc0_callbacks(&adsr_channel0, &adsr_channel1, &adsr_channel2, &adsr_channel3, &adsr_channel4);
    42ae:	4643      	mov	r3, r8
    42b0:	9300      	str	r3, [sp, #0]
    42b2:	003b      	movs	r3, r7
    42b4:	0032      	movs	r2, r6
    42b6:	0029      	movs	r1, r5
    42b8:	488a      	ldr	r0, [pc, #552]	; (44e4 <main+0x354>)
    42ba:	4caf      	ldr	r4, [pc, #700]	; (4578 <main+0x3e8>)
    42bc:	47a0      	blx	r4
    42be:	ab20      	add	r3, sp, #128	; 0x80
    42c0:	ac30      	add	r4, sp, #192	; 0xc0
    42c2:	001e      	movs	r6, r3
        p_to_dmx_group_menus[i] = (MENU *)malloc(sizeof(MENU));
    42c4:	4fad      	ldr	r7, [pc, #692]	; (457c <main+0x3ec>)
    42c6:	001d      	movs	r5, r3
    42c8:	209a      	movs	r0, #154	; 0x9a
    42ca:	0080      	lsls	r0, r0, #2
    42cc:	47b8      	blx	r7
    42ce:	c601      	stmia	r6!, {r0}
    for(uint8_t i = 0; i < 16; i++) {
    42d0:	42a6      	cmp	r6, r4
    42d2:	d1f9      	bne.n	42c8 <main+0x138>
    42d4:	9507      	str	r5, [sp, #28]
    channel *p_to_channels[5] = {&trigger_channel0, &trigger_channel1, &trigger_channel2, &trigger_channel3, &trigger_channel4};
    42d6:	a81b      	add	r0, sp, #108	; 0x6c
    42d8:	4ba9      	ldr	r3, [pc, #676]	; (4580 <main+0x3f0>)
    42da:	0002      	movs	r2, r0
    42dc:	0019      	movs	r1, r3
    42de:	c951      	ldmia	r1!, {r0, r4, r6}
    42e0:	c251      	stmia	r2!, {r0, r4, r6}
    42e2:	c911      	ldmia	r1!, {r0, r4}
    42e4:	c211      	stmia	r2!, {r0, r4}
    volatile MENU *p_to_menus[5] = {&channel1_menu, &channel2_menu, &channel3_menu, &channel4_menu, &channel5_menu};
    42e6:	a916      	add	r1, sp, #88	; 0x58
    42e8:	3314      	adds	r3, #20
    42ea:	000a      	movs	r2, r1
    42ec:	cb13      	ldmia	r3!, {r0, r1, r4}
    42ee:	c213      	stmia	r2!, {r0, r1, r4}
    42f0:	cb03      	ldmia	r3!, {r0, r1}
    42f2:	c203      	stmia	r2!, {r0, r1}
    menu_create_item(&tmp_item, "SETTINGS", TYPE_MENU, "", (void *)&settings_menu, 0, 0);
    42f4:	2400      	movs	r4, #0
    42f6:	9402      	str	r4, [sp, #8]
    42f8:	9401      	str	r4, [sp, #4]
    42fa:	4ba2      	ldr	r3, [pc, #648]	; (4584 <main+0x3f4>)
    42fc:	9300      	str	r3, [sp, #0]
    42fe:	4ba2      	ldr	r3, [pc, #648]	; (4588 <main+0x3f8>)
    4300:	2204      	movs	r2, #4
    4302:	49a2      	ldr	r1, [pc, #648]	; (458c <main+0x3fc>)
    4304:	a80d      	add	r0, sp, #52	; 0x34
    4306:	4fa2      	ldr	r7, [pc, #648]	; (4590 <main+0x400>)
    4308:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    430a:	ab10      	add	r3, sp, #64	; 0x40
    430c:	466a      	mov	r2, sp
    430e:	cb43      	ldmia	r3!, {r0, r1, r6}
    4310:	c243      	stmia	r2!, {r0, r1, r6}
    4312:	cb43      	ldmia	r3!, {r0, r1, r6}
    4314:	c243      	stmia	r2!, {r0, r1, r6}
    4316:	990d      	ldr	r1, [sp, #52]	; 0x34
    4318:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    431a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    431c:	489d      	ldr	r0, [pc, #628]	; (4594 <main+0x404>)
    431e:	4e9e      	ldr	r6, [pc, #632]	; (4598 <main+0x408>)
    4320:	47b0      	blx	r6
    menu_create_item(&tmp_item, "CHANNEL 1", TYPE_MENU, "", (void *)p_to_menus[0], 0, 0);
    4322:	9402      	str	r4, [sp, #8]
    4324:	9401      	str	r4, [sp, #4]
    4326:	4b9d      	ldr	r3, [pc, #628]	; (459c <main+0x40c>)
    4328:	9300      	str	r3, [sp, #0]
    432a:	4b97      	ldr	r3, [pc, #604]	; (4588 <main+0x3f8>)
    432c:	2204      	movs	r2, #4
    432e:	499c      	ldr	r1, [pc, #624]	; (45a0 <main+0x410>)
    4330:	a80d      	add	r0, sp, #52	; 0x34
    4332:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    4334:	ab10      	add	r3, sp, #64	; 0x40
    4336:	466a      	mov	r2, sp
    4338:	cb23      	ldmia	r3!, {r0, r1, r5}
    433a:	c223      	stmia	r2!, {r0, r1, r5}
    433c:	cb23      	ldmia	r3!, {r0, r1, r5}
    433e:	c223      	stmia	r2!, {r0, r1, r5}
    4340:	990d      	ldr	r1, [sp, #52]	; 0x34
    4342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4346:	4893      	ldr	r0, [pc, #588]	; (4594 <main+0x404>)
    4348:	47b0      	blx	r6
    menu_create_item(&tmp_item, "CHANNEL 2", TYPE_MENU, "", (void *)p_to_menus[1], 0, 0);
    434a:	9402      	str	r4, [sp, #8]
    434c:	9401      	str	r4, [sp, #4]
    434e:	4b95      	ldr	r3, [pc, #596]	; (45a4 <main+0x414>)
    4350:	9300      	str	r3, [sp, #0]
    4352:	4b8d      	ldr	r3, [pc, #564]	; (4588 <main+0x3f8>)
    4354:	2204      	movs	r2, #4
    4356:	4994      	ldr	r1, [pc, #592]	; (45a8 <main+0x418>)
    4358:	a80d      	add	r0, sp, #52	; 0x34
    435a:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    435c:	ab10      	add	r3, sp, #64	; 0x40
    435e:	466a      	mov	r2, sp
    4360:	cb23      	ldmia	r3!, {r0, r1, r5}
    4362:	c223      	stmia	r2!, {r0, r1, r5}
    4364:	cb23      	ldmia	r3!, {r0, r1, r5}
    4366:	c223      	stmia	r2!, {r0, r1, r5}
    4368:	990d      	ldr	r1, [sp, #52]	; 0x34
    436a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    436c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    436e:	4889      	ldr	r0, [pc, #548]	; (4594 <main+0x404>)
    4370:	47b0      	blx	r6
    menu_create_item(&tmp_item, "CHANNEL 3", TYPE_MENU, "", (void *)p_to_menus[2], 0, 0);
    4372:	9402      	str	r4, [sp, #8]
    4374:	9401      	str	r4, [sp, #4]
    4376:	4b8d      	ldr	r3, [pc, #564]	; (45ac <main+0x41c>)
    4378:	9300      	str	r3, [sp, #0]
    437a:	4b83      	ldr	r3, [pc, #524]	; (4588 <main+0x3f8>)
    437c:	2204      	movs	r2, #4
    437e:	498c      	ldr	r1, [pc, #560]	; (45b0 <main+0x420>)
    4380:	a80d      	add	r0, sp, #52	; 0x34
    4382:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    4384:	ab10      	add	r3, sp, #64	; 0x40
    4386:	466a      	mov	r2, sp
    4388:	cb23      	ldmia	r3!, {r0, r1, r5}
    438a:	c223      	stmia	r2!, {r0, r1, r5}
    438c:	cb23      	ldmia	r3!, {r0, r1, r5}
    438e:	c223      	stmia	r2!, {r0, r1, r5}
    4390:	990d      	ldr	r1, [sp, #52]	; 0x34
    4392:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4394:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4396:	487f      	ldr	r0, [pc, #508]	; (4594 <main+0x404>)
    4398:	47b0      	blx	r6
    menu_create_item(&tmp_item, "CHANNEL 4", TYPE_MENU, "", (void *)p_to_menus[3], 0, 0);
    439a:	9402      	str	r4, [sp, #8]
    439c:	9401      	str	r4, [sp, #4]
    439e:	4b85      	ldr	r3, [pc, #532]	; (45b4 <main+0x424>)
    43a0:	9300      	str	r3, [sp, #0]
    43a2:	4b79      	ldr	r3, [pc, #484]	; (4588 <main+0x3f8>)
    43a4:	2204      	movs	r2, #4
    43a6:	4984      	ldr	r1, [pc, #528]	; (45b8 <main+0x428>)
    43a8:	a80d      	add	r0, sp, #52	; 0x34
    43aa:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    43ac:	ab10      	add	r3, sp, #64	; 0x40
    43ae:	466a      	mov	r2, sp
    43b0:	cb23      	ldmia	r3!, {r0, r1, r5}
    43b2:	c223      	stmia	r2!, {r0, r1, r5}
    43b4:	cb23      	ldmia	r3!, {r0, r1, r5}
    43b6:	c223      	stmia	r2!, {r0, r1, r5}
    43b8:	990d      	ldr	r1, [sp, #52]	; 0x34
    43ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    43bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    43be:	4875      	ldr	r0, [pc, #468]	; (4594 <main+0x404>)
    43c0:	47b0      	blx	r6
    menu_create_item(&tmp_item, "CHANNEL 5", TYPE_MENU, "", (void *)p_to_menus[4], 0, 0);
    43c2:	9402      	str	r4, [sp, #8]
    43c4:	9401      	str	r4, [sp, #4]
    43c6:	4b7d      	ldr	r3, [pc, #500]	; (45bc <main+0x42c>)
    43c8:	9300      	str	r3, [sp, #0]
    43ca:	4b6f      	ldr	r3, [pc, #444]	; (4588 <main+0x3f8>)
    43cc:	2204      	movs	r2, #4
    43ce:	497c      	ldr	r1, [pc, #496]	; (45c0 <main+0x430>)
    43d0:	a80d      	add	r0, sp, #52	; 0x34
    43d2:	47b8      	blx	r7
    menu_add_item(&main_menu, tmp_item);
    43d4:	ab10      	add	r3, sp, #64	; 0x40
    43d6:	466a      	mov	r2, sp
    43d8:	cb23      	ldmia	r3!, {r0, r1, r5}
    43da:	c223      	stmia	r2!, {r0, r1, r5}
    43dc:	cb23      	ldmia	r3!, {r0, r1, r5}
    43de:	c223      	stmia	r2!, {r0, r1, r5}
    43e0:	990d      	ldr	r1, [sp, #52]	; 0x34
    43e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    43e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    43e6:	486b      	ldr	r0, [pc, #428]	; (4594 <main+0x404>)
    43e8:	47b0      	blx	r6
    menu_create_item(&tmp_item, "CONTRAST", UINT8, "", (void *)&device_settings.contrast, 0, 16);
    43ea:	2383      	movs	r3, #131	; 0x83
    43ec:	05db      	lsls	r3, r3, #23
    43ee:	469b      	mov	fp, r3
    43f0:	9302      	str	r3, [sp, #8]
    43f2:	9401      	str	r4, [sp, #4]
    43f4:	4b73      	ldr	r3, [pc, #460]	; (45c4 <main+0x434>)
    43f6:	469a      	mov	sl, r3
    43f8:	9300      	str	r3, [sp, #0]
    43fa:	4b63      	ldr	r3, [pc, #396]	; (4588 <main+0x3f8>)
    43fc:	2200      	movs	r2, #0
    43fe:	4972      	ldr	r1, [pc, #456]	; (45c8 <main+0x438>)
    4400:	a80d      	add	r0, sp, #52	; 0x34
    4402:	47b8      	blx	r7
    menu_add_item(&settings_menu, tmp_item);
    4404:	ab10      	add	r3, sp, #64	; 0x40
    4406:	466a      	mov	r2, sp
    4408:	cb23      	ldmia	r3!, {r0, r1, r5}
    440a:	c223      	stmia	r2!, {r0, r1, r5}
    440c:	cb23      	ldmia	r3!, {r0, r1, r5}
    440e:	c223      	stmia	r2!, {r0, r1, r5}
    4410:	990d      	ldr	r1, [sp, #52]	; 0x34
    4412:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4416:	485b      	ldr	r0, [pc, #364]	; (4584 <main+0x3f4>)
    4418:	47b0      	blx	r6
    menu_create_item(&tmp_item, "BRIGHTNES", UINT8, "", (void *)&device_settings.brightness, 0, 16);
    441a:	465b      	mov	r3, fp
    441c:	9302      	str	r3, [sp, #8]
    441e:	9401      	str	r4, [sp, #4]
    4420:	4653      	mov	r3, sl
    4422:	3301      	adds	r3, #1
    4424:	9300      	str	r3, [sp, #0]
    4426:	4b58      	ldr	r3, [pc, #352]	; (4588 <main+0x3f8>)
    4428:	2200      	movs	r2, #0
    442a:	4968      	ldr	r1, [pc, #416]	; (45cc <main+0x43c>)
    442c:	a80d      	add	r0, sp, #52	; 0x34
    442e:	47b8      	blx	r7
    menu_add_item(&settings_menu, tmp_item);
    4430:	ab10      	add	r3, sp, #64	; 0x40
    4432:	466a      	mov	r2, sp
    4434:	cb23      	ldmia	r3!, {r0, r1, r5}
    4436:	c223      	stmia	r2!, {r0, r1, r5}
    4438:	cb23      	ldmia	r3!, {r0, r1, r5}
    443a:	c223      	stmia	r2!, {r0, r1, r5}
    443c:	990d      	ldr	r1, [sp, #52]	; 0x34
    443e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4440:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4442:	4850      	ldr	r0, [pc, #320]	; (4584 <main+0x3f4>)
    4444:	47b0      	blx	r6
    menu_create_item(&tmp_item, "MODE", UINT8, "", (void *)&device_settings.mode, 0, 2);
    4446:	2380      	movs	r3, #128	; 0x80
    4448:	05db      	lsls	r3, r3, #23
    444a:	9302      	str	r3, [sp, #8]
    444c:	9401      	str	r4, [sp, #4]
    444e:	4653      	mov	r3, sl
    4450:	3303      	adds	r3, #3
    4452:	9300      	str	r3, [sp, #0]
    4454:	4b4c      	ldr	r3, [pc, #304]	; (4588 <main+0x3f8>)
    4456:	2200      	movs	r2, #0
    4458:	495d      	ldr	r1, [pc, #372]	; (45d0 <main+0x440>)
    445a:	a80d      	add	r0, sp, #52	; 0x34
    445c:	47b8      	blx	r7
    menu_add_item(&settings_menu, tmp_item);
    445e:	ab10      	add	r3, sp, #64	; 0x40
    4460:	466a      	mov	r2, sp
    4462:	cb23      	ldmia	r3!, {r0, r1, r5}
    4464:	c223      	stmia	r2!, {r0, r1, r5}
    4466:	cb23      	ldmia	r3!, {r0, r1, r5}
    4468:	c223      	stmia	r2!, {r0, r1, r5}
    446a:	990d      	ldr	r1, [sp, #52]	; 0x34
    446c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    446e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4470:	4844      	ldr	r0, [pc, #272]	; (4584 <main+0x3f4>)
    4472:	47b0      	blx	r6
    menu_create_item(&tmp_item, "FIX_SIZE", UINT8, "", (void *)&device_settings.fixture_size, 7, 8);
    4474:	2382      	movs	r3, #130	; 0x82
    4476:	05db      	lsls	r3, r3, #23
    4478:	9302      	str	r3, [sp, #8]
    447a:	4b56      	ldr	r3, [pc, #344]	; (45d4 <main+0x444>)
    447c:	9301      	str	r3, [sp, #4]
    447e:	4653      	mov	r3, sl
    4480:	3302      	adds	r3, #2
    4482:	9300      	str	r3, [sp, #0]
    4484:	4b40      	ldr	r3, [pc, #256]	; (4588 <main+0x3f8>)
    4486:	2200      	movs	r2, #0
    4488:	4953      	ldr	r1, [pc, #332]	; (45d8 <main+0x448>)
    448a:	a80d      	add	r0, sp, #52	; 0x34
    448c:	47b8      	blx	r7
    menu_add_item(&settings_menu, tmp_item);
    448e:	ab10      	add	r3, sp, #64	; 0x40
    4490:	466a      	mov	r2, sp
    4492:	cb23      	ldmia	r3!, {r0, r1, r5}
    4494:	c223      	stmia	r2!, {r0, r1, r5}
    4496:	cb23      	ldmia	r3!, {r0, r1, r5}
    4498:	c223      	stmia	r2!, {r0, r1, r5}
    449a:	990d      	ldr	r1, [sp, #52]	; 0x34
    449c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    449e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    44a0:	4838      	ldr	r0, [pc, #224]	; (4584 <main+0x3f4>)
    44a2:	47b0      	blx	r6
    menu_create_item(&tmp_item, "BACK", TYPE_MENU, "", (void *)&main_menu, 0, 0);
    44a4:	9402      	str	r4, [sp, #8]
    44a6:	9401      	str	r4, [sp, #4]
    44a8:	4b3a      	ldr	r3, [pc, #232]	; (4594 <main+0x404>)
    44aa:	9300      	str	r3, [sp, #0]
    44ac:	4b36      	ldr	r3, [pc, #216]	; (4588 <main+0x3f8>)
    44ae:	2204      	movs	r2, #4
    44b0:	494a      	ldr	r1, [pc, #296]	; (45dc <main+0x44c>)
    44b2:	a80d      	add	r0, sp, #52	; 0x34
    44b4:	47b8      	blx	r7
    menu_add_item(&settings_menu, tmp_item);
    44b6:	ab10      	add	r3, sp, #64	; 0x40
    44b8:	466a      	mov	r2, sp
    44ba:	cb13      	ldmia	r3!, {r0, r1, r4}
    44bc:	c213      	stmia	r2!, {r0, r1, r4}
    44be:	cb13      	ldmia	r3!, {r0, r1, r4}
    44c0:	c213      	stmia	r2!, {r0, r1, r4}
    44c2:	990d      	ldr	r1, [sp, #52]	; 0x34
    44c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    44c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    44c8:	482e      	ldr	r0, [pc, #184]	; (4584 <main+0x3f4>)
    44ca:	47b0      	blx	r6
    44cc:	2310      	movs	r3, #16
    44ce:	469a      	mov	sl, r3
    44d0:	2300      	movs	r3, #0
    44d2:	4698      	mov	r8, r3
    44d4:	469b      	mov	fp, r3
            sprintf(menu_item_name, "DMX%d", i * MENU_MAX_ITEMS + j);
    44d6:	4b42      	ldr	r3, [pc, #264]	; (45e0 <main+0x450>)
    44d8:	4699      	mov	r9, r3
    44da:	4643      	mov	r3, r8
    44dc:	9306      	str	r3, [sp, #24]
    44de:	9d07      	ldr	r5, [sp, #28]
    44e0:	4656      	mov	r6, sl
    44e2:	e0c2      	b.n	466a <main+0x4da>
    44e4:	20002038 	.word	0x20002038
    44e8:	000006ad 	.word	0x000006ad
    44ec:	20001e14 	.word	0x20001e14
    44f0:	20001e54 	.word	0x20001e54
    44f4:	20001ff8 	.word	0x20001ff8
    44f8:	20001f94 	.word	0x20001f94
    44fc:	2000202c 	.word	0x2000202c
    4500:	20001e88 	.word	0x20001e88
    4504:	2000206c 	.word	0x2000206c
    4508:	20001fec 	.word	0x20001fec
    450c:	20001e48 	.word	0x20001e48
    4510:	00003e9d 	.word	0x00003e9d
    4514:	00000bad 	.word	0x00000bad
    4518:	00003f8d 	.word	0x00003f8d
    451c:	000003c9 	.word	0x000003c9
    4520:	00003c95 	.word	0x00003c95
    4524:	00004ccd 	.word	0x00004ccd
    4528:	00001b57 	.word	0x00001b57
    452c:	00001b58 	.word	0x00001b58
    4530:	00004c8d 	.word	0x00004c8d
    4534:	20000001 	.word	0x20000001
    4538:	00000531 	.word	0x00000531
    453c:	00004069 	.word	0x00004069
    4540:	00004095 	.word	0x00004095
    4544:	000032bd 	.word	0x000032bd
    4548:	000013d9 	.word	0x000013d9
    454c:	00003601 	.word	0x00003601
    4550:	20001fc8 	.word	0x20001fc8
    4554:	00001719 	.word	0x00001719
    4558:	20001e94 	.word	0x20001e94
    455c:	20000014 	.word	0x20000014
    4560:	e000e100 	.word	0xe000e100
    4564:	ffff00ff 	.word	0xffff00ff
    4568:	ff00ffff 	.word	0xff00ffff
    456c:	00002a55 	.word	0x00002a55
    4570:	00002b39 	.word	0x00002b39
    4574:	00003525 	.word	0x00003525
    4578:	00003575 	.word	0x00003575
    457c:	0000717d 	.word	0x0000717d
    4580:	00007cec 	.word	0x00007cec
    4584:	20000f60 	.word	0x20000f60
    4588:	00007c70 	.word	0x00007c70
    458c:	00007d14 	.word	0x00007d14
    4590:	00002f7d 	.word	0x00002f7d
    4594:	20000cf8 	.word	0x20000cf8
    4598:	00002be9 	.word	0x00002be9
    459c:	200000f0 	.word	0x200000f0
    45a0:	00007d20 	.word	0x00007d20
    45a4:	20000358 	.word	0x20000358
    45a8:	00007d2c 	.word	0x00007d2c
    45ac:	200005c0 	.word	0x200005c0
    45b0:	00007d38 	.word	0x00007d38
    45b4:	20000828 	.word	0x20000828
    45b8:	00007d44 	.word	0x00007d44
    45bc:	20000a90 	.word	0x20000a90
    45c0:	00007d50 	.word	0x00007d50
    45c4:	20000018 	.word	0x20000018
    45c8:	00007d5c 	.word	0x00007d5c
    45cc:	00007d68 	.word	0x00007d68
    45d0:	00007d74 	.word	0x00007d74
    45d4:	40e00000 	.word	0x40e00000
    45d8:	00007d7c 	.word	0x00007d7c
    45dc:	00007d88 	.word	0x00007d88
    45e0:	00007319 	.word	0x00007319
    45e4:	0035      	movs	r5, r6
    45e6:	4646      	mov	r6, r8
        menu_create_item(&tmp_item, "BACK", TYPE_MENU, "", (void *)&static_channels_menu, 0, 0);
    45e8:	2300      	movs	r3, #0
    45ea:	4698      	mov	r8, r3
    45ec:	9302      	str	r3, [sp, #8]
    45ee:	9301      	str	r3, [sp, #4]
    45f0:	4bcf      	ldr	r3, [pc, #828]	; (4930 <main+0x7a0>)
    45f2:	9300      	str	r3, [sp, #0]
    45f4:	4bcf      	ldr	r3, [pc, #828]	; (4934 <main+0x7a4>)
    45f6:	2204      	movs	r2, #4
    45f8:	49cf      	ldr	r1, [pc, #828]	; (4938 <main+0x7a8>)
    45fa:	a80d      	add	r0, sp, #52	; 0x34
    45fc:	4fcf      	ldr	r7, [pc, #828]	; (493c <main+0x7ac>)
    45fe:	46ba      	mov	sl, r7
    4600:	47b8      	blx	r7
        menu_add_item(p_to_dmx_group_menus[i], tmp_item);
    4602:	ab10      	add	r3, sp, #64	; 0x40
    4604:	466a      	mov	r2, sp
    4606:	cb83      	ldmia	r3!, {r0, r1, r7}
    4608:	c283      	stmia	r2!, {r0, r1, r7}
    460a:	cb83      	ldmia	r3!, {r0, r1, r7}
    460c:	c283      	stmia	r2!, {r0, r1, r7}
    460e:	990d      	ldr	r1, [sp, #52]	; 0x34
    4610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4612:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4614:	0020      	movs	r0, r4
    4616:	4fca      	ldr	r7, [pc, #808]	; (4940 <main+0x7b0>)
    4618:	47b8      	blx	r7
        sprintf(menu_item_name, "DMX%d-%d", i * 16, i * 16 + 15);
    461a:	465b      	mov	r3, fp
    461c:	330f      	adds	r3, #15
    461e:	465a      	mov	r2, fp
    4620:	49c8      	ldr	r1, [pc, #800]	; (4944 <main+0x7b4>)
    4622:	a80a      	add	r0, sp, #40	; 0x28
    4624:	4fc8      	ldr	r7, [pc, #800]	; (4948 <main+0x7b8>)
    4626:	47b8      	blx	r7
        menu_create_item(&tmp_item, menu_item_name, TYPE_MENU, "", (void *)p_to_dmx_group_menus[i], 0, 0);
    4628:	4643      	mov	r3, r8
    462a:	9302      	str	r3, [sp, #8]
    462c:	9301      	str	r3, [sp, #4]
    462e:	9400      	str	r4, [sp, #0]
    4630:	4bc0      	ldr	r3, [pc, #768]	; (4934 <main+0x7a4>)
    4632:	2204      	movs	r2, #4
    4634:	a90a      	add	r1, sp, #40	; 0x28
    4636:	a80d      	add	r0, sp, #52	; 0x34
    4638:	47d0      	blx	sl
        menu_add_item(&static_channels_menu, tmp_item);
    463a:	ab10      	add	r3, sp, #64	; 0x40
    463c:	466a      	mov	r2, sp
    463e:	cb13      	ldmia	r3!, {r0, r1, r4}
    4640:	c213      	stmia	r2!, {r0, r1, r4}
    4642:	cb13      	ldmia	r3!, {r0, r1, r4}
    4644:	c213      	stmia	r2!, {r0, r1, r4}
    4646:	990d      	ldr	r1, [sp, #52]	; 0x34
    4648:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    464a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    464c:	48b8      	ldr	r0, [pc, #736]	; (4930 <main+0x7a0>)
    464e:	4cbc      	ldr	r4, [pc, #752]	; (4940 <main+0x7b0>)
    4650:	47a0      	blx	r4
    4652:	3504      	adds	r5, #4
    4654:	2310      	movs	r3, #16
    4656:	469c      	mov	ip, r3
    4658:	44e3      	add	fp, ip
    465a:	9b06      	ldr	r3, [sp, #24]
    465c:	3b01      	subs	r3, #1
    465e:	9306      	str	r3, [sp, #24]
    4660:	3611      	adds	r6, #17
    for(uint16_t i = 0; i < (MAX_DMX_CHANNELS / 16); i++) {
    4662:	2380      	movs	r3, #128	; 0x80
    4664:	005b      	lsls	r3, r3, #1
    4666:	459b      	cmp	fp, r3
    4668:	d029      	beq.n	46be <main+0x52e>
    466a:	0037      	movs	r7, r6
    466c:	3f10      	subs	r7, #16
    466e:	0033      	movs	r3, r6
    4670:	002e      	movs	r6, r5
    4672:	4698      	mov	r8, r3
            sprintf(menu_item_name, "DMX%d", i * MENU_MAX_ITEMS + j);
    4674:	003a      	movs	r2, r7
    4676:	49b5      	ldr	r1, [pc, #724]	; (494c <main+0x7bc>)
    4678:	a80a      	add	r0, sp, #40	; 0x28
    467a:	47c8      	blx	r9
            menu_create_item(&tmp_item, menu_item_name, UINT8, "", dmx_values + i * 16 + j, -1, 256);
    467c:	2387      	movs	r3, #135	; 0x87
    467e:	05db      	lsls	r3, r3, #23
    4680:	9302      	str	r3, [sp, #8]
    4682:	4bb3      	ldr	r3, [pc, #716]	; (4950 <main+0x7c0>)
    4684:	9301      	str	r3, [sp, #4]
    4686:	9b06      	ldr	r3, [sp, #24]
    4688:	19db      	adds	r3, r3, r7
    468a:	4ab2      	ldr	r2, [pc, #712]	; (4954 <main+0x7c4>)
    468c:	189b      	adds	r3, r3, r2
    468e:	9300      	str	r3, [sp, #0]
    4690:	4ba8      	ldr	r3, [pc, #672]	; (4934 <main+0x7a4>)
    4692:	2200      	movs	r2, #0
    4694:	a90a      	add	r1, sp, #40	; 0x28
    4696:	a80d      	add	r0, sp, #52	; 0x34
    4698:	4ca8      	ldr	r4, [pc, #672]	; (493c <main+0x7ac>)
    469a:	47a0      	blx	r4
            menu_add_item(p_to_dmx_group_menus[i], tmp_item);
    469c:	6834      	ldr	r4, [r6, #0]
    469e:	ab10      	add	r3, sp, #64	; 0x40
    46a0:	466a      	mov	r2, sp
    46a2:	cb23      	ldmia	r3!, {r0, r1, r5}
    46a4:	c223      	stmia	r2!, {r0, r1, r5}
    46a6:	cb23      	ldmia	r3!, {r0, r1, r5}
    46a8:	c223      	stmia	r2!, {r0, r1, r5}
    46aa:	990d      	ldr	r1, [sp, #52]	; 0x34
    46ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    46ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    46b0:	0020      	movs	r0, r4
    46b2:	4da3      	ldr	r5, [pc, #652]	; (4940 <main+0x7b0>)
    46b4:	47a8      	blx	r5
    46b6:	3701      	adds	r7, #1
        for(uint16_t j = 0; j < MENU_MAX_ITEMS-1 ; j++) {
    46b8:	4547      	cmp	r7, r8
    46ba:	d1db      	bne.n	4674 <main+0x4e4>
    46bc:	e792      	b.n	45e4 <main+0x454>
    menu_create_item(&tmp_item, "STATIC_CH", TYPE_MENU, "", (void *)&static_channels_menu, 0, 0);
    46be:	2400      	movs	r4, #0
    46c0:	9402      	str	r4, [sp, #8]
    46c2:	9401      	str	r4, [sp, #4]
    46c4:	4f9a      	ldr	r7, [pc, #616]	; (4930 <main+0x7a0>)
    46c6:	9700      	str	r7, [sp, #0]
    46c8:	4b9a      	ldr	r3, [pc, #616]	; (4934 <main+0x7a4>)
    46ca:	2204      	movs	r2, #4
    46cc:	49a2      	ldr	r1, [pc, #648]	; (4958 <main+0x7c8>)
    46ce:	a80d      	add	r0, sp, #52	; 0x34
    46d0:	4d9a      	ldr	r5, [pc, #616]	; (493c <main+0x7ac>)
    46d2:	47a8      	blx	r5
    menu_add_item(&main_menu, tmp_item);
    46d4:	4ba1      	ldr	r3, [pc, #644]	; (495c <main+0x7cc>)
    46d6:	4699      	mov	r9, r3
    46d8:	ab10      	add	r3, sp, #64	; 0x40
    46da:	466a      	mov	r2, sp
    46dc:	cb43      	ldmia	r3!, {r0, r1, r6}
    46de:	c243      	stmia	r2!, {r0, r1, r6}
    46e0:	cb43      	ldmia	r3!, {r0, r1, r6}
    46e2:	c243      	stmia	r2!, {r0, r1, r6}
    46e4:	990d      	ldr	r1, [sp, #52]	; 0x34
    46e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    46e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    46ea:	4648      	mov	r0, r9
    46ec:	4e94      	ldr	r6, [pc, #592]	; (4940 <main+0x7b0>)
    46ee:	47b0      	blx	r6
    menu_create_item(&tmp_item, "BACK", TYPE_MENU, "", (void *)&main_menu, 0, 0);
    46f0:	9402      	str	r4, [sp, #8]
    46f2:	9401      	str	r4, [sp, #4]
    46f4:	464b      	mov	r3, r9
    46f6:	9300      	str	r3, [sp, #0]
    46f8:	4b8e      	ldr	r3, [pc, #568]	; (4934 <main+0x7a4>)
    46fa:	2204      	movs	r2, #4
    46fc:	498e      	ldr	r1, [pc, #568]	; (4938 <main+0x7a8>)
    46fe:	a80d      	add	r0, sp, #52	; 0x34
    4700:	47a8      	blx	r5
    menu_add_item(&static_channels_menu, tmp_item);
    4702:	ab10      	add	r3, sp, #64	; 0x40
    4704:	466a      	mov	r2, sp
    4706:	cb13      	ldmia	r3!, {r0, r1, r4}
    4708:	c213      	stmia	r2!, {r0, r1, r4}
    470a:	cb13      	ldmia	r3!, {r0, r1, r4}
    470c:	c213      	stmia	r2!, {r0, r1, r4}
    470e:	990d      	ldr	r1, [sp, #52]	; 0x34
    4710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4712:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4714:	0038      	movs	r0, r7
    4716:	47b0      	blx	r6
    4718:	2300      	movs	r3, #0
    471a:	4698      	mov	r8, r3
        menu_create_item(&tmp_item, "DMX CH", UINT8, "", (void *)&p_to_channels[i]->ch, 0, 255);
    471c:	4b90      	ldr	r3, [pc, #576]	; (4960 <main+0x7d0>)
    471e:	469b      	mov	fp, r3
    4720:	4e86      	ldr	r6, [pc, #536]	; (493c <main+0x7ac>)
    4722:	4643      	mov	r3, r8
    4724:	9307      	str	r3, [sp, #28]
    4726:	ab1b      	add	r3, sp, #108	; 0x6c
    4728:	9d07      	ldr	r5, [sp, #28]
    472a:	58eb      	ldr	r3, [r5, r3]
    472c:	4699      	mov	r9, r3
    472e:	4b8d      	ldr	r3, [pc, #564]	; (4964 <main+0x7d4>)
    4730:	4698      	mov	r8, r3
    4732:	9302      	str	r3, [sp, #8]
    4734:	2400      	movs	r4, #0
    4736:	9401      	str	r4, [sp, #4]
    4738:	464b      	mov	r3, r9
    473a:	9300      	str	r3, [sp, #0]
    473c:	4b7d      	ldr	r3, [pc, #500]	; (4934 <main+0x7a4>)
    473e:	2200      	movs	r2, #0
    4740:	4659      	mov	r1, fp
    4742:	a80d      	add	r0, sp, #52	; 0x34
    4744:	47b0      	blx	r6
        menu_add_item(p_to_menus[i], tmp_item);
    4746:	ab16      	add	r3, sp, #88	; 0x58
    4748:	9507      	str	r5, [sp, #28]
    474a:	58eb      	ldr	r3, [r5, r3]
    474c:	0018      	movs	r0, r3
    474e:	ab10      	add	r3, sp, #64	; 0x40
    4750:	466a      	mov	r2, sp
    4752:	cba2      	ldmia	r3!, {r1, r5, r7}
    4754:	c2a2      	stmia	r2!, {r1, r5, r7}
    4756:	cba2      	ldmia	r3!, {r1, r5, r7}
    4758:	c2a2      	stmia	r2!, {r1, r5, r7}
    475a:	990d      	ldr	r1, [sp, #52]	; 0x34
    475c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    475e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4760:	9006      	str	r0, [sp, #24]
    4762:	4d77      	ldr	r5, [pc, #476]	; (4940 <main+0x7b0>)
    4764:	47a8      	blx	r5
        menu_create_item(&tmp_item, "LEVEL", FLOAT, "V", (void *)&p_to_channels[i]->level, 0, 5);
    4766:	4b80      	ldr	r3, [pc, #512]	; (4968 <main+0x7d8>)
    4768:	9302      	str	r3, [sp, #8]
    476a:	9401      	str	r4, [sp, #4]
    476c:	464b      	mov	r3, r9
    476e:	3308      	adds	r3, #8
    4770:	9300      	str	r3, [sp, #0]
    4772:	4b7e      	ldr	r3, [pc, #504]	; (496c <main+0x7dc>)
    4774:	2203      	movs	r2, #3
    4776:	497e      	ldr	r1, [pc, #504]	; (4970 <main+0x7e0>)
    4778:	a80d      	add	r0, sp, #52	; 0x34
    477a:	47b0      	blx	r6
        menu_add_item(p_to_menus[i], tmp_item);
    477c:	ab10      	add	r3, sp, #64	; 0x40
    477e:	466a      	mov	r2, sp
    4780:	cb83      	ldmia	r3!, {r0, r1, r7}
    4782:	c283      	stmia	r2!, {r0, r1, r7}
    4784:	cb83      	ldmia	r3!, {r0, r1, r7}
    4786:	c283      	stmia	r2!, {r0, r1, r7}
    4788:	990d      	ldr	r1, [sp, #52]	; 0x34
    478a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    478c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    478e:	9806      	ldr	r0, [sp, #24]
    4790:	47a8      	blx	r5
        menu_create_item(&tmp_item, "ATTACK", UINT32, "ms", (void *)&p_to_channels[i]->adsr->attack, 0, 5000);
    4792:	4a78      	ldr	r2, [pc, #480]	; (4974 <main+0x7e4>)
    4794:	4692      	mov	sl, r2
    4796:	9202      	str	r2, [sp, #8]
    4798:	9401      	str	r4, [sp, #4]
    479a:	464a      	mov	r2, r9
    479c:	6853      	ldr	r3, [r2, #4]
    479e:	330c      	adds	r3, #12
    47a0:	9300      	str	r3, [sp, #0]
    47a2:	4b75      	ldr	r3, [pc, #468]	; (4978 <main+0x7e8>)
    47a4:	2202      	movs	r2, #2
    47a6:	4975      	ldr	r1, [pc, #468]	; (497c <main+0x7ec>)
    47a8:	a80d      	add	r0, sp, #52	; 0x34
    47aa:	47b0      	blx	r6
        menu_add_item(p_to_menus[i], tmp_item);
    47ac:	ab10      	add	r3, sp, #64	; 0x40
    47ae:	466a      	mov	r2, sp
    47b0:	cb83      	ldmia	r3!, {r0, r1, r7}
    47b2:	c283      	stmia	r2!, {r0, r1, r7}
    47b4:	cb83      	ldmia	r3!, {r0, r1, r7}
    47b6:	c283      	stmia	r2!, {r0, r1, r7}
    47b8:	990d      	ldr	r1, [sp, #52]	; 0x34
    47ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    47bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    47be:	9806      	ldr	r0, [sp, #24]
    47c0:	47a8      	blx	r5
        menu_create_item(&tmp_item, "DECAY", UINT32, "ms", (void *)&p_to_channels[i]->adsr->decay, 0, 5000);
    47c2:	4652      	mov	r2, sl
    47c4:	9202      	str	r2, [sp, #8]
    47c6:	9401      	str	r4, [sp, #4]
    47c8:	464a      	mov	r2, r9
    47ca:	6853      	ldr	r3, [r2, #4]
    47cc:	3314      	adds	r3, #20
    47ce:	9300      	str	r3, [sp, #0]
    47d0:	4b69      	ldr	r3, [pc, #420]	; (4978 <main+0x7e8>)
    47d2:	2202      	movs	r2, #2
    47d4:	496a      	ldr	r1, [pc, #424]	; (4980 <main+0x7f0>)
    47d6:	a80d      	add	r0, sp, #52	; 0x34
    47d8:	47b0      	blx	r6
        menu_add_item(p_to_menus[i], tmp_item);
    47da:	ab10      	add	r3, sp, #64	; 0x40
    47dc:	466a      	mov	r2, sp
    47de:	cb83      	ldmia	r3!, {r0, r1, r7}
    47e0:	c283      	stmia	r2!, {r0, r1, r7}
    47e2:	cb83      	ldmia	r3!, {r0, r1, r7}
    47e4:	c283      	stmia	r2!, {r0, r1, r7}
    47e6:	990d      	ldr	r1, [sp, #52]	; 0x34
    47e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    47ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    47ec:	9806      	ldr	r0, [sp, #24]
    47ee:	47a8      	blx	r5
        menu_create_item(&tmp_item, "SUSTAIN", UINT32, "ms", (void *)&p_to_channels[i]->adsr->sustain, 0, 5000);
    47f0:	4652      	mov	r2, sl
    47f2:	9202      	str	r2, [sp, #8]
    47f4:	9401      	str	r4, [sp, #4]
    47f6:	464a      	mov	r2, r9
    47f8:	6853      	ldr	r3, [r2, #4]
    47fa:	331c      	adds	r3, #28
    47fc:	9300      	str	r3, [sp, #0]
    47fe:	4b5e      	ldr	r3, [pc, #376]	; (4978 <main+0x7e8>)
    4800:	2202      	movs	r2, #2
    4802:	4960      	ldr	r1, [pc, #384]	; (4984 <main+0x7f4>)
    4804:	a80d      	add	r0, sp, #52	; 0x34
    4806:	47b0      	blx	r6
        menu_add_item(p_to_menus[i], tmp_item);
    4808:	ab10      	add	r3, sp, #64	; 0x40
    480a:	466a      	mov	r2, sp
    480c:	cb83      	ldmia	r3!, {r0, r1, r7}
    480e:	c283      	stmia	r2!, {r0, r1, r7}
    4810:	cb83      	ldmia	r3!, {r0, r1, r7}
    4812:	c283      	stmia	r2!, {r0, r1, r7}
    4814:	990d      	ldr	r1, [sp, #52]	; 0x34
    4816:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    481a:	9806      	ldr	r0, [sp, #24]
    481c:	47a8      	blx	r5
        menu_create_item(&tmp_item, "S_LEVEL", UINT8, "", (void *)&p_to_channels[i]->adsr->sustain_level, 0, 255);
    481e:	4642      	mov	r2, r8
    4820:	9202      	str	r2, [sp, #8]
    4822:	9401      	str	r4, [sp, #4]
    4824:	464a      	mov	r2, r9
    4826:	6853      	ldr	r3, [r2, #4]
    4828:	3320      	adds	r3, #32
    482a:	9300      	str	r3, [sp, #0]
    482c:	4b41      	ldr	r3, [pc, #260]	; (4934 <main+0x7a4>)
    482e:	2200      	movs	r2, #0
    4830:	4955      	ldr	r1, [pc, #340]	; (4988 <main+0x7f8>)
    4832:	a80d      	add	r0, sp, #52	; 0x34
    4834:	47b0      	blx	r6
        menu_add_item(p_to_menus[i], tmp_item);
    4836:	ab10      	add	r3, sp, #64	; 0x40
    4838:	466a      	mov	r2, sp
    483a:	cb83      	ldmia	r3!, {r0, r1, r7}
    483c:	c283      	stmia	r2!, {r0, r1, r7}
    483e:	cb83      	ldmia	r3!, {r0, r1, r7}
    4840:	c283      	stmia	r2!, {r0, r1, r7}
    4842:	990d      	ldr	r1, [sp, #52]	; 0x34
    4844:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4846:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4848:	9806      	ldr	r0, [sp, #24]
    484a:	47a8      	blx	r5
        menu_create_item(&tmp_item, "RELEASE", UINT32, "ms", (void *)&p_to_channels[i]->adsr->release, 0, 5000);
    484c:	4653      	mov	r3, sl
    484e:	9302      	str	r3, [sp, #8]
    4850:	9401      	str	r4, [sp, #4]
    4852:	464b      	mov	r3, r9
    4854:	685b      	ldr	r3, [r3, #4]
    4856:	3328      	adds	r3, #40	; 0x28
    4858:	9300      	str	r3, [sp, #0]
    485a:	4b47      	ldr	r3, [pc, #284]	; (4978 <main+0x7e8>)
    485c:	2202      	movs	r2, #2
    485e:	494b      	ldr	r1, [pc, #300]	; (498c <main+0x7fc>)
    4860:	a80d      	add	r0, sp, #52	; 0x34
    4862:	47b0      	blx	r6
        menu_add_item(p_to_menus[i], tmp_item);
    4864:	ab10      	add	r3, sp, #64	; 0x40
    4866:	466a      	mov	r2, sp
    4868:	cb83      	ldmia	r3!, {r0, r1, r7}
    486a:	c283      	stmia	r2!, {r0, r1, r7}
    486c:	cb83      	ldmia	r3!, {r0, r1, r7}
    486e:	c283      	stmia	r2!, {r0, r1, r7}
    4870:	990d      	ldr	r1, [sp, #52]	; 0x34
    4872:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4876:	9806      	ldr	r0, [sp, #24]
    4878:	47a8      	blx	r5
        menu_create_item(&tmp_item, "BACK", TYPE_MENU, "", (void *)&main_menu, 0, 0);
    487a:	9402      	str	r4, [sp, #8]
    487c:	9401      	str	r4, [sp, #4]
    487e:	4b37      	ldr	r3, [pc, #220]	; (495c <main+0x7cc>)
    4880:	9300      	str	r3, [sp, #0]
    4882:	4b2c      	ldr	r3, [pc, #176]	; (4934 <main+0x7a4>)
    4884:	2204      	movs	r2, #4
    4886:	492c      	ldr	r1, [pc, #176]	; (4938 <main+0x7a8>)
    4888:	a80d      	add	r0, sp, #52	; 0x34
    488a:	47b0      	blx	r6
        menu_add_item(p_to_menus[i], tmp_item);
    488c:	ab10      	add	r3, sp, #64	; 0x40
    488e:	466a      	mov	r2, sp
    4890:	cb92      	ldmia	r3!, {r1, r4, r7}
    4892:	c292      	stmia	r2!, {r1, r4, r7}
    4894:	cb92      	ldmia	r3!, {r1, r4, r7}
    4896:	c292      	stmia	r2!, {r1, r4, r7}
    4898:	990d      	ldr	r1, [sp, #52]	; 0x34
    489a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    489c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    489e:	9806      	ldr	r0, [sp, #24]
    48a0:	47a8      	blx	r5
    48a2:	9b07      	ldr	r3, [sp, #28]
    48a4:	3304      	adds	r3, #4
    48a6:	9307      	str	r3, [sp, #28]
    for(uint8_t i = 0; i < 5; i++) {
    48a8:	2b14      	cmp	r3, #20
    48aa:	d000      	beq.n	48ae <main+0x71e>
    48ac:	e73b      	b.n	4726 <main+0x596>
        dmx_values[i] = 0;
    48ae:	2300      	movs	r3, #0
    48b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    48b2:	7013      	strb	r3, [r2, #0]
    48b4:	3201      	adds	r2, #1
    for(uint16_t i = 0; i < sizeof(dmx_values); i++) {
    48b6:	9908      	ldr	r1, [sp, #32]
    48b8:	428a      	cmp	r2, r1
    48ba:	d1fa      	bne.n	48b2 <main+0x722>
    dmx_values[0] = 255;
    48bc:	4b25      	ldr	r3, [pc, #148]	; (4954 <main+0x7c4>)
    48be:	22ff      	movs	r2, #255	; 0xff
    48c0:	701a      	strb	r2, [r3, #0]
    dmx_values[6] = 255;
    48c2:	719a      	strb	r2, [r3, #6]
    uint32_t send_data_timer = 0, read_button_timer =0;
    48c4:	2300      	movs	r3, #0
    48c6:	9307      	str	r3, [sp, #28]
    48c8:	9306      	str	r3, [sp, #24]
    uint8_t prev_brightness = 0;
    48ca:	2700      	movs	r7, #0
        if(device_settings.contrast != prev_contrast) {
    48cc:	4a30      	ldr	r2, [pc, #192]	; (4990 <main+0x800>)
    48ce:	4690      	mov	r8, r2
                        increment_menu_position(selected_menu);
    48d0:	4a30      	ldr	r2, [pc, #192]	; (4994 <main+0x804>)
    48d2:	4692      	mov	sl, r2
    48d4:	4a30      	ldr	r2, [pc, #192]	; (4998 <main+0x808>)
    48d6:	4691      	mov	r9, r2
    48d8:	e0ad      	b.n	4a36 <main+0x8a6>
    48da:	0007      	movs	r7, r0
    48dc:	e0bd      	b.n	4a5a <main+0x8ca>
            menu_draw();
    48de:	4b2f      	ldr	r3, [pc, #188]	; (499c <main+0x80c>)
    48e0:	4798      	blx	r3
    48e2:	e0bf      	b.n	4a64 <main+0x8d4>
                        menu_decrement_item(selected_menu);
    48e4:	4b2b      	ldr	r3, [pc, #172]	; (4994 <main+0x804>)
    48e6:	6818      	ldr	r0, [r3, #0]
    48e8:	4b2d      	ldr	r3, [pc, #180]	; (49a0 <main+0x810>)
    48ea:	4798      	blx	r3
                for(uint8_t i=get_encoder_speed(); i>0; i--)
    48ec:	3c01      	subs	r4, #1
    48ee:	b2e4      	uxtb	r4, r4
    48f0:	2c00      	cmp	r4, #0
    48f2:	d062      	beq.n	49ba <main+0x82a>
                    if(state==SCROLL) {
    48f4:	782b      	ldrb	r3, [r5, #0]
    48f6:	2b00      	cmp	r3, #0
    48f8:	d1f4      	bne.n	48e4 <main+0x754>
                        decrement_menu_position(selected_menu);
    48fa:	465b      	mov	r3, fp
    48fc:	6818      	ldr	r0, [r3, #0]
    48fe:	4b29      	ldr	r3, [pc, #164]	; (49a4 <main+0x814>)
    4900:	4798      	blx	r3
    4902:	e7f3      	b.n	48ec <main+0x75c>
                for(uint8_t i=get_encoder_speed(); i>0; i--)
    4904:	4b28      	ldr	r3, [pc, #160]	; (49a8 <main+0x818>)
    4906:	4798      	blx	r3
    4908:	1e04      	subs	r4, r0, #0
    490a:	d056      	beq.n	49ba <main+0x82a>
                    if(state==SCROLL) {
    490c:	4d27      	ldr	r5, [pc, #156]	; (49ac <main+0x81c>)
    490e:	e007      	b.n	4920 <main+0x790>
                        menu_increment_item(selected_menu);
    4910:	4b20      	ldr	r3, [pc, #128]	; (4994 <main+0x804>)
    4912:	6818      	ldr	r0, [r3, #0]
    4914:	4b26      	ldr	r3, [pc, #152]	; (49b0 <main+0x820>)
    4916:	4798      	blx	r3
                for(uint8_t i=get_encoder_speed(); i>0; i--)
    4918:	3c01      	subs	r4, #1
    491a:	b2e4      	uxtb	r4, r4
    491c:	2c00      	cmp	r4, #0
    491e:	d04c      	beq.n	49ba <main+0x82a>
                    if(state==SCROLL) {
    4920:	782b      	ldrb	r3, [r5, #0]
    4922:	2b00      	cmp	r3, #0
    4924:	d1f4      	bne.n	4910 <main+0x780>
                        increment_menu_position(selected_menu);
    4926:	4653      	mov	r3, sl
    4928:	6818      	ldr	r0, [r3, #0]
    492a:	47c8      	blx	r9
    492c:	e7f4      	b.n	4918 <main+0x788>
    492e:	46c0      	nop			; (mov r8, r8)
    4930:	200011cc 	.word	0x200011cc
    4934:	00007c70 	.word	0x00007c70
    4938:	00007d88 	.word	0x00007d88
    493c:	00002f7d 	.word	0x00002f7d
    4940:	00002be9 	.word	0x00002be9
    4944:	00007d98 	.word	0x00007d98
    4948:	00007319 	.word	0x00007319
    494c:	00007d90 	.word	0x00007d90
    4950:	bf800000 	.word	0xbf800000
    4954:	20001e94 	.word	0x20001e94
    4958:	00007da4 	.word	0x00007da4
    495c:	20000cf8 	.word	0x20000cf8
    4960:	00007db0 	.word	0x00007db0
    4964:	437f0000 	.word	0x437f0000
    4968:	40a00000 	.word	0x40a00000
    496c:	00007db8 	.word	0x00007db8
    4970:	00007dbc 	.word	0x00007dbc
    4974:	459c4000 	.word	0x459c4000
    4978:	00007dc4 	.word	0x00007dc4
    497c:	00007dc8 	.word	0x00007dc8
    4980:	00007dd0 	.word	0x00007dd0
    4984:	00007dd8 	.word	0x00007dd8
    4988:	00007de0 	.word	0x00007de0
    498c:	00007de8 	.word	0x00007de8
    4990:	20000018 	.word	0x20000018
    4994:	20000020 	.word	0x20000020
    4998:	00002c35 	.word	0x00002c35
    499c:	0000412d 	.word	0x0000412d
    49a0:	000030e9 	.word	0x000030e9
    49a4:	00002c69 	.word	0x00002c69
    49a8:	000035d9 	.word	0x000035d9
    49ac:	200011c8 	.word	0x200011c8
    49b0:	00002fe9 	.word	0x00002fe9
                key_pressed = 0;
    49b4:	2200      	movs	r2, #0
    49b6:	4b3b      	ldr	r3, [pc, #236]	; (4aa4 <main+0x914>)
    49b8:	701a      	strb	r2, [r3, #0]
        if(millis()-read_button_timer>2) {
    49ba:	4b3b      	ldr	r3, [pc, #236]	; (4aa8 <main+0x918>)
    49bc:	4798      	blx	r3
    49be:	9b07      	ldr	r3, [sp, #28]
    49c0:	1ac0      	subs	r0, r0, r3
    49c2:	2802      	cmp	r0, #2
    49c4:	d860      	bhi.n	4a88 <main+0x8f8>
	return (port_base->IN.reg & pin_mask);
    49c6:	2382      	movs	r3, #130	; 0x82
    49c8:	05db      	lsls	r3, r3, #23
    49ca:	6a1b      	ldr	r3, [r3, #32]
        if(port_pin_get_input_level(PIN_SW1)==0)
    49cc:	04db      	lsls	r3, r3, #19
    49ce:	d564      	bpl.n	4a9a <main+0x90a>
        if(millis() - send_data_timer > 70) {
    49d0:	4b35      	ldr	r3, [pc, #212]	; (4aa8 <main+0x918>)
    49d2:	4798      	blx	r3
    49d4:	9b06      	ldr	r3, [sp, #24]
    49d6:	1ac0      	subs	r0, r0, r3
    49d8:	2846      	cmp	r0, #70	; 0x46
    49da:	d92b      	bls.n	4a34 <main+0x8a4>
            dmx_values[p_to_channels[0]->ch]=adsr_get_value(&adsr_channel0);
    49dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    49de:	681c      	ldr	r4, [r3, #0]
    49e0:	4832      	ldr	r0, [pc, #200]	; (4aac <main+0x91c>)
    49e2:	4b33      	ldr	r3, [pc, #204]	; (4ab0 <main+0x920>)
    49e4:	4798      	blx	r3
    49e6:	4d33      	ldr	r5, [pc, #204]	; (4ab4 <main+0x924>)
    49e8:	5528      	strb	r0, [r5, r4]
            send_data_timer = millis();
    49ea:	4b2f      	ldr	r3, [pc, #188]	; (4aa8 <main+0x918>)
    49ec:	4798      	blx	r3
    49ee:	9006      	str	r0, [sp, #24]
            device_mode = select_device_mode(device_mode_num);
    49f0:	4c31      	ldr	r4, [pc, #196]	; (4ab8 <main+0x928>)
    49f2:	2301      	movs	r3, #1
    49f4:	7023      	strb	r3, [r4, #0]
                DMX_SendMessage(dmx_values, sizeof(dmx_values));
    49f6:	2180      	movs	r1, #128	; 0x80
    49f8:	0049      	lsls	r1, r1, #1
    49fa:	0028      	movs	r0, r5
    49fc:	4b2f      	ldr	r3, [pc, #188]	; (4abc <main+0x92c>)
    49fe:	4798      	blx	r3
            if(device_mode == TRIGGER || device_mode == BOTH) {
    4a00:	7823      	ldrb	r3, [r4, #0]
    4a02:	2202      	movs	r2, #2
    4a04:	4393      	bics	r3, r2
    4a06:	d115      	bne.n	4a34 <main+0x8a4>
                BREAKPOINT;
    4a08:	46c0      	nop			; (mov r8, r8)
                uint8_t usb_values[] = {adsr_get_value(&adsr_channel0), adsr_get_value(&adsr_channel1), adsr_get_value(&adsr_channel2), adsr_get_value(&adsr_channel3), adsr_get_value(&adsr_channel4)};
    4a0a:	4828      	ldr	r0, [pc, #160]	; (4aac <main+0x91c>)
    4a0c:	4d28      	ldr	r5, [pc, #160]	; (4ab0 <main+0x920>)
    4a0e:	47a8      	blx	r5
    4a10:	ac0a      	add	r4, sp, #40	; 0x28
    4a12:	7020      	strb	r0, [r4, #0]
    4a14:	482a      	ldr	r0, [pc, #168]	; (4ac0 <main+0x930>)
    4a16:	47a8      	blx	r5
    4a18:	7060      	strb	r0, [r4, #1]
    4a1a:	482a      	ldr	r0, [pc, #168]	; (4ac4 <main+0x934>)
    4a1c:	47a8      	blx	r5
    4a1e:	70a0      	strb	r0, [r4, #2]
    4a20:	4829      	ldr	r0, [pc, #164]	; (4ac8 <main+0x938>)
    4a22:	47a8      	blx	r5
    4a24:	70e0      	strb	r0, [r4, #3]
    4a26:	4829      	ldr	r0, [pc, #164]	; (4acc <main+0x93c>)
    4a28:	47a8      	blx	r5
    4a2a:	7120      	strb	r0, [r4, #4]
                USB_SendMessage(usb_values, 5);
    4a2c:	2105      	movs	r1, #5
    4a2e:	0020      	movs	r0, r4
    4a30:	4b27      	ldr	r3, [pc, #156]	; (4ad0 <main+0x940>)
    4a32:	4798      	blx	r3
    menu_add_item(&static_channels_menu, tmp_item);
    4a34:	0033      	movs	r3, r6
        if(device_settings.contrast != prev_contrast) {
    4a36:	4642      	mov	r2, r8
    4a38:	7816      	ldrb	r6, [r2, #0]
    4a3a:	42b3      	cmp	r3, r6
    4a3c:	d004      	beq.n	4a48 <main+0x8b8>
            dac_chan_write(&dac_instance, DAC_CHANNEL_0, (device_settings.contrast << 5));
    4a3e:	0172      	lsls	r2, r6, #5
    4a40:	2100      	movs	r1, #0
    4a42:	4824      	ldr	r0, [pc, #144]	; (4ad4 <main+0x944>)
    4a44:	4b24      	ldr	r3, [pc, #144]	; (4ad8 <main+0x948>)
    4a46:	4798      	blx	r3
        if(device_settings.brightness != prev_brightness) {
    4a48:	4b24      	ldr	r3, [pc, #144]	; (4adc <main+0x94c>)
    4a4a:	7858      	ldrb	r0, [r3, #1]
    4a4c:	4287      	cmp	r7, r0
    4a4e:	d100      	bne.n	4a52 <main+0x8c2>
    4a50:	e743      	b.n	48da <main+0x74a>
            set_brightness(device_settings.brightness);
    4a52:	4b23      	ldr	r3, [pc, #140]	; (4ae0 <main+0x950>)
    4a54:	4798      	blx	r3
            prev_brightness = device_settings.brightness;
    4a56:	4b21      	ldr	r3, [pc, #132]	; (4adc <main+0x94c>)
    4a58:	785f      	ldrb	r7, [r3, #1]
        if(key_pressed) {
    4a5a:	4b12      	ldr	r3, [pc, #72]	; (4aa4 <main+0x914>)
    4a5c:	781b      	ldrb	r3, [r3, #0]
    4a5e:	2b00      	cmp	r3, #0
    4a60:	d000      	beq.n	4a64 <main+0x8d4>
    4a62:	e73c      	b.n	48de <main+0x74e>
        key_pressed = 1;
    4a64:	2201      	movs	r2, #1
    4a66:	4b0f      	ldr	r3, [pc, #60]	; (4aa4 <main+0x914>)
    4a68:	701a      	strb	r2, [r3, #0]
        switch(get_encoder_status()) {
    4a6a:	4b1e      	ldr	r3, [pc, #120]	; (4ae4 <main+0x954>)
    4a6c:	4798      	blx	r3
    4a6e:	2801      	cmp	r0, #1
    4a70:	d100      	bne.n	4a74 <main+0x8e4>
    4a72:	e747      	b.n	4904 <main+0x774>
    4a74:	2802      	cmp	r0, #2
    4a76:	d19d      	bne.n	49b4 <main+0x824>
                for(uint8_t i=get_encoder_speed(); i>0; i--)
    4a78:	4b1b      	ldr	r3, [pc, #108]	; (4ae8 <main+0x958>)
    4a7a:	4798      	blx	r3
    4a7c:	1e04      	subs	r4, r0, #0
    4a7e:	d09c      	beq.n	49ba <main+0x82a>
                    if(state==SCROLL) {
    4a80:	4d1a      	ldr	r5, [pc, #104]	; (4aec <main+0x95c>)
                        decrement_menu_position(selected_menu);
    4a82:	4b1b      	ldr	r3, [pc, #108]	; (4af0 <main+0x960>)
    4a84:	469b      	mov	fp, r3
    4a86:	e735      	b.n	48f4 <main+0x764>
            read_button_timer=millis();
    4a88:	4b07      	ldr	r3, [pc, #28]	; (4aa8 <main+0x918>)
    4a8a:	4798      	blx	r3
    4a8c:	9007      	str	r0, [sp, #28]
            button_handler(button_read(),&state);
    4a8e:	4b19      	ldr	r3, [pc, #100]	; (4af4 <main+0x964>)
    4a90:	4798      	blx	r3
    4a92:	4916      	ldr	r1, [pc, #88]	; (4aec <main+0x95c>)
    4a94:	4b18      	ldr	r3, [pc, #96]	; (4af8 <main+0x968>)
    4a96:	4798      	blx	r3
    4a98:	e795      	b.n	49c6 <main+0x836>
            adsr_trigger(&adsr_channel0);
    4a9a:	4804      	ldr	r0, [pc, #16]	; (4aac <main+0x91c>)
    4a9c:	4b17      	ldr	r3, [pc, #92]	; (4afc <main+0x96c>)
    4a9e:	4798      	blx	r3
    4aa0:	e796      	b.n	49d0 <main+0x840>
    4aa2:	46c0      	nop			; (mov r8, r8)
    4aa4:	2000001c 	.word	0x2000001c
    4aa8:	00003409 	.word	0x00003409
    4aac:	20002038 	.word	0x20002038
    4ab0:	000006a1 	.word	0x000006a1
    4ab4:	20001e94 	.word	0x20001e94
    4ab8:	20002078 	.word	0x20002078
    4abc:	000015c5 	.word	0x000015c5
    4ac0:	20001e14 	.word	0x20001e14
    4ac4:	20001e54 	.word	0x20001e54
    4ac8:	20001ff8 	.word	0x20001ff8
    4acc:	20001f94 	.word	0x20001f94
    4ad0:	0000323d 	.word	0x0000323d
    4ad4:	20001fc8 	.word	0x20001fc8
    4ad8:	00001769 	.word	0x00001769
    4adc:	20000018 	.word	0x20000018
    4ae0:	00003685 	.word	0x00003685
    4ae4:	00003415 	.word	0x00003415
    4ae8:	000035d9 	.word	0x000035d9
    4aec:	200011c8 	.word	0x200011c8
    4af0:	20000020 	.word	0x20000020
    4af4:	00000b71 	.word	0x00000b71
    4af8:	000040c9 	.word	0x000040c9
    4afc:	000006a5 	.word	0x000006a5

00004b00 <__udivsi3>:
    4b00:	2200      	movs	r2, #0
    4b02:	0843      	lsrs	r3, r0, #1
    4b04:	428b      	cmp	r3, r1
    4b06:	d374      	bcc.n	4bf2 <__udivsi3+0xf2>
    4b08:	0903      	lsrs	r3, r0, #4
    4b0a:	428b      	cmp	r3, r1
    4b0c:	d35f      	bcc.n	4bce <__udivsi3+0xce>
    4b0e:	0a03      	lsrs	r3, r0, #8
    4b10:	428b      	cmp	r3, r1
    4b12:	d344      	bcc.n	4b9e <__udivsi3+0x9e>
    4b14:	0b03      	lsrs	r3, r0, #12
    4b16:	428b      	cmp	r3, r1
    4b18:	d328      	bcc.n	4b6c <__udivsi3+0x6c>
    4b1a:	0c03      	lsrs	r3, r0, #16
    4b1c:	428b      	cmp	r3, r1
    4b1e:	d30d      	bcc.n	4b3c <__udivsi3+0x3c>
    4b20:	22ff      	movs	r2, #255	; 0xff
    4b22:	0209      	lsls	r1, r1, #8
    4b24:	ba12      	rev	r2, r2
    4b26:	0c03      	lsrs	r3, r0, #16
    4b28:	428b      	cmp	r3, r1
    4b2a:	d302      	bcc.n	4b32 <__udivsi3+0x32>
    4b2c:	1212      	asrs	r2, r2, #8
    4b2e:	0209      	lsls	r1, r1, #8
    4b30:	d065      	beq.n	4bfe <__udivsi3+0xfe>
    4b32:	0b03      	lsrs	r3, r0, #12
    4b34:	428b      	cmp	r3, r1
    4b36:	d319      	bcc.n	4b6c <__udivsi3+0x6c>
    4b38:	e000      	b.n	4b3c <__udivsi3+0x3c>
    4b3a:	0a09      	lsrs	r1, r1, #8
    4b3c:	0bc3      	lsrs	r3, r0, #15
    4b3e:	428b      	cmp	r3, r1
    4b40:	d301      	bcc.n	4b46 <__udivsi3+0x46>
    4b42:	03cb      	lsls	r3, r1, #15
    4b44:	1ac0      	subs	r0, r0, r3
    4b46:	4152      	adcs	r2, r2
    4b48:	0b83      	lsrs	r3, r0, #14
    4b4a:	428b      	cmp	r3, r1
    4b4c:	d301      	bcc.n	4b52 <__udivsi3+0x52>
    4b4e:	038b      	lsls	r3, r1, #14
    4b50:	1ac0      	subs	r0, r0, r3
    4b52:	4152      	adcs	r2, r2
    4b54:	0b43      	lsrs	r3, r0, #13
    4b56:	428b      	cmp	r3, r1
    4b58:	d301      	bcc.n	4b5e <__udivsi3+0x5e>
    4b5a:	034b      	lsls	r3, r1, #13
    4b5c:	1ac0      	subs	r0, r0, r3
    4b5e:	4152      	adcs	r2, r2
    4b60:	0b03      	lsrs	r3, r0, #12
    4b62:	428b      	cmp	r3, r1
    4b64:	d301      	bcc.n	4b6a <__udivsi3+0x6a>
    4b66:	030b      	lsls	r3, r1, #12
    4b68:	1ac0      	subs	r0, r0, r3
    4b6a:	4152      	adcs	r2, r2
    4b6c:	0ac3      	lsrs	r3, r0, #11
    4b6e:	428b      	cmp	r3, r1
    4b70:	d301      	bcc.n	4b76 <__udivsi3+0x76>
    4b72:	02cb      	lsls	r3, r1, #11
    4b74:	1ac0      	subs	r0, r0, r3
    4b76:	4152      	adcs	r2, r2
    4b78:	0a83      	lsrs	r3, r0, #10
    4b7a:	428b      	cmp	r3, r1
    4b7c:	d301      	bcc.n	4b82 <__udivsi3+0x82>
    4b7e:	028b      	lsls	r3, r1, #10
    4b80:	1ac0      	subs	r0, r0, r3
    4b82:	4152      	adcs	r2, r2
    4b84:	0a43      	lsrs	r3, r0, #9
    4b86:	428b      	cmp	r3, r1
    4b88:	d301      	bcc.n	4b8e <__udivsi3+0x8e>
    4b8a:	024b      	lsls	r3, r1, #9
    4b8c:	1ac0      	subs	r0, r0, r3
    4b8e:	4152      	adcs	r2, r2
    4b90:	0a03      	lsrs	r3, r0, #8
    4b92:	428b      	cmp	r3, r1
    4b94:	d301      	bcc.n	4b9a <__udivsi3+0x9a>
    4b96:	020b      	lsls	r3, r1, #8
    4b98:	1ac0      	subs	r0, r0, r3
    4b9a:	4152      	adcs	r2, r2
    4b9c:	d2cd      	bcs.n	4b3a <__udivsi3+0x3a>
    4b9e:	09c3      	lsrs	r3, r0, #7
    4ba0:	428b      	cmp	r3, r1
    4ba2:	d301      	bcc.n	4ba8 <__udivsi3+0xa8>
    4ba4:	01cb      	lsls	r3, r1, #7
    4ba6:	1ac0      	subs	r0, r0, r3
    4ba8:	4152      	adcs	r2, r2
    4baa:	0983      	lsrs	r3, r0, #6
    4bac:	428b      	cmp	r3, r1
    4bae:	d301      	bcc.n	4bb4 <__udivsi3+0xb4>
    4bb0:	018b      	lsls	r3, r1, #6
    4bb2:	1ac0      	subs	r0, r0, r3
    4bb4:	4152      	adcs	r2, r2
    4bb6:	0943      	lsrs	r3, r0, #5
    4bb8:	428b      	cmp	r3, r1
    4bba:	d301      	bcc.n	4bc0 <__udivsi3+0xc0>
    4bbc:	014b      	lsls	r3, r1, #5
    4bbe:	1ac0      	subs	r0, r0, r3
    4bc0:	4152      	adcs	r2, r2
    4bc2:	0903      	lsrs	r3, r0, #4
    4bc4:	428b      	cmp	r3, r1
    4bc6:	d301      	bcc.n	4bcc <__udivsi3+0xcc>
    4bc8:	010b      	lsls	r3, r1, #4
    4bca:	1ac0      	subs	r0, r0, r3
    4bcc:	4152      	adcs	r2, r2
    4bce:	08c3      	lsrs	r3, r0, #3
    4bd0:	428b      	cmp	r3, r1
    4bd2:	d301      	bcc.n	4bd8 <__udivsi3+0xd8>
    4bd4:	00cb      	lsls	r3, r1, #3
    4bd6:	1ac0      	subs	r0, r0, r3
    4bd8:	4152      	adcs	r2, r2
    4bda:	0883      	lsrs	r3, r0, #2
    4bdc:	428b      	cmp	r3, r1
    4bde:	d301      	bcc.n	4be4 <__udivsi3+0xe4>
    4be0:	008b      	lsls	r3, r1, #2
    4be2:	1ac0      	subs	r0, r0, r3
    4be4:	4152      	adcs	r2, r2
    4be6:	0843      	lsrs	r3, r0, #1
    4be8:	428b      	cmp	r3, r1
    4bea:	d301      	bcc.n	4bf0 <__udivsi3+0xf0>
    4bec:	004b      	lsls	r3, r1, #1
    4bee:	1ac0      	subs	r0, r0, r3
    4bf0:	4152      	adcs	r2, r2
    4bf2:	1a41      	subs	r1, r0, r1
    4bf4:	d200      	bcs.n	4bf8 <__udivsi3+0xf8>
    4bf6:	4601      	mov	r1, r0
    4bf8:	4152      	adcs	r2, r2
    4bfa:	4610      	mov	r0, r2
    4bfc:	4770      	bx	lr
    4bfe:	e7ff      	b.n	4c00 <__udivsi3+0x100>
    4c00:	b501      	push	{r0, lr}
    4c02:	2000      	movs	r0, #0
    4c04:	f000 f806 	bl	4c14 <__aeabi_idiv0>
    4c08:	bd02      	pop	{r1, pc}
    4c0a:	46c0      	nop			; (mov r8, r8)

00004c0c <__aeabi_uidivmod>:
    4c0c:	2900      	cmp	r1, #0
    4c0e:	d0f7      	beq.n	4c00 <__udivsi3+0x100>
    4c10:	e776      	b.n	4b00 <__udivsi3>
    4c12:	4770      	bx	lr

00004c14 <__aeabi_idiv0>:
    4c14:	4770      	bx	lr
    4c16:	46c0      	nop			; (mov r8, r8)

00004c18 <__aeabi_cfrcmple>:
    4c18:	4684      	mov	ip, r0
    4c1a:	1c08      	adds	r0, r1, #0
    4c1c:	4661      	mov	r1, ip
    4c1e:	e7ff      	b.n	4c20 <__aeabi_cfcmpeq>

00004c20 <__aeabi_cfcmpeq>:
    4c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4c22:	f000 f9bb 	bl	4f9c <__lesf2>
    4c26:	2800      	cmp	r0, #0
    4c28:	d401      	bmi.n	4c2e <__aeabi_cfcmpeq+0xe>
    4c2a:	2100      	movs	r1, #0
    4c2c:	42c8      	cmn	r0, r1
    4c2e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004c30 <__aeabi_fcmpeq>:
    4c30:	b510      	push	{r4, lr}
    4c32:	f000 f94d 	bl	4ed0 <__eqsf2>
    4c36:	4240      	negs	r0, r0
    4c38:	3001      	adds	r0, #1
    4c3a:	bd10      	pop	{r4, pc}

00004c3c <__aeabi_fcmplt>:
    4c3c:	b510      	push	{r4, lr}
    4c3e:	f000 f9ad 	bl	4f9c <__lesf2>
    4c42:	2800      	cmp	r0, #0
    4c44:	db01      	blt.n	4c4a <__aeabi_fcmplt+0xe>
    4c46:	2000      	movs	r0, #0
    4c48:	bd10      	pop	{r4, pc}
    4c4a:	2001      	movs	r0, #1
    4c4c:	bd10      	pop	{r4, pc}
    4c4e:	46c0      	nop			; (mov r8, r8)

00004c50 <__aeabi_fcmple>:
    4c50:	b510      	push	{r4, lr}
    4c52:	f000 f9a3 	bl	4f9c <__lesf2>
    4c56:	2800      	cmp	r0, #0
    4c58:	dd01      	ble.n	4c5e <__aeabi_fcmple+0xe>
    4c5a:	2000      	movs	r0, #0
    4c5c:	bd10      	pop	{r4, pc}
    4c5e:	2001      	movs	r0, #1
    4c60:	bd10      	pop	{r4, pc}
    4c62:	46c0      	nop			; (mov r8, r8)

00004c64 <__aeabi_fcmpgt>:
    4c64:	b510      	push	{r4, lr}
    4c66:	f000 f959 	bl	4f1c <__gesf2>
    4c6a:	2800      	cmp	r0, #0
    4c6c:	dc01      	bgt.n	4c72 <__aeabi_fcmpgt+0xe>
    4c6e:	2000      	movs	r0, #0
    4c70:	bd10      	pop	{r4, pc}
    4c72:	2001      	movs	r0, #1
    4c74:	bd10      	pop	{r4, pc}
    4c76:	46c0      	nop			; (mov r8, r8)

00004c78 <__aeabi_fcmpge>:
    4c78:	b510      	push	{r4, lr}
    4c7a:	f000 f94f 	bl	4f1c <__gesf2>
    4c7e:	2800      	cmp	r0, #0
    4c80:	da01      	bge.n	4c86 <__aeabi_fcmpge+0xe>
    4c82:	2000      	movs	r0, #0
    4c84:	bd10      	pop	{r4, pc}
    4c86:	2001      	movs	r0, #1
    4c88:	bd10      	pop	{r4, pc}
    4c8a:	46c0      	nop			; (mov r8, r8)

00004c8c <__aeabi_uldivmod>:
    4c8c:	2b00      	cmp	r3, #0
    4c8e:	d111      	bne.n	4cb4 <__aeabi_uldivmod+0x28>
    4c90:	2a00      	cmp	r2, #0
    4c92:	d10f      	bne.n	4cb4 <__aeabi_uldivmod+0x28>
    4c94:	2900      	cmp	r1, #0
    4c96:	d100      	bne.n	4c9a <__aeabi_uldivmod+0xe>
    4c98:	2800      	cmp	r0, #0
    4c9a:	d002      	beq.n	4ca2 <__aeabi_uldivmod+0x16>
    4c9c:	2100      	movs	r1, #0
    4c9e:	43c9      	mvns	r1, r1
    4ca0:	1c08      	adds	r0, r1, #0
    4ca2:	b407      	push	{r0, r1, r2}
    4ca4:	4802      	ldr	r0, [pc, #8]	; (4cb0 <__aeabi_uldivmod+0x24>)
    4ca6:	a102      	add	r1, pc, #8	; (adr r1, 4cb0 <__aeabi_uldivmod+0x24>)
    4ca8:	1840      	adds	r0, r0, r1
    4caa:	9002      	str	r0, [sp, #8]
    4cac:	bd03      	pop	{r0, r1, pc}
    4cae:	46c0      	nop			; (mov r8, r8)
    4cb0:	ffffff65 	.word	0xffffff65
    4cb4:	b403      	push	{r0, r1}
    4cb6:	4668      	mov	r0, sp
    4cb8:	b501      	push	{r0, lr}
    4cba:	9802      	ldr	r0, [sp, #8]
    4cbc:	f000 f848 	bl	4d50 <__udivmoddi4>
    4cc0:	9b01      	ldr	r3, [sp, #4]
    4cc2:	469e      	mov	lr, r3
    4cc4:	b002      	add	sp, #8
    4cc6:	bc0c      	pop	{r2, r3}
    4cc8:	4770      	bx	lr
    4cca:	46c0      	nop			; (mov r8, r8)

00004ccc <__aeabi_lmul>:
    4ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cce:	46ce      	mov	lr, r9
    4cd0:	4647      	mov	r7, r8
    4cd2:	0415      	lsls	r5, r2, #16
    4cd4:	0c2d      	lsrs	r5, r5, #16
    4cd6:	002e      	movs	r6, r5
    4cd8:	b580      	push	{r7, lr}
    4cda:	0407      	lsls	r7, r0, #16
    4cdc:	0c14      	lsrs	r4, r2, #16
    4cde:	0c3f      	lsrs	r7, r7, #16
    4ce0:	4699      	mov	r9, r3
    4ce2:	0c03      	lsrs	r3, r0, #16
    4ce4:	437e      	muls	r6, r7
    4ce6:	435d      	muls	r5, r3
    4ce8:	4367      	muls	r7, r4
    4cea:	4363      	muls	r3, r4
    4cec:	197f      	adds	r7, r7, r5
    4cee:	0c34      	lsrs	r4, r6, #16
    4cf0:	19e4      	adds	r4, r4, r7
    4cf2:	469c      	mov	ip, r3
    4cf4:	42a5      	cmp	r5, r4
    4cf6:	d903      	bls.n	4d00 <__aeabi_lmul+0x34>
    4cf8:	2380      	movs	r3, #128	; 0x80
    4cfa:	025b      	lsls	r3, r3, #9
    4cfc:	4698      	mov	r8, r3
    4cfe:	44c4      	add	ip, r8
    4d00:	464b      	mov	r3, r9
    4d02:	4351      	muls	r1, r2
    4d04:	4343      	muls	r3, r0
    4d06:	0436      	lsls	r6, r6, #16
    4d08:	0c36      	lsrs	r6, r6, #16
    4d0a:	0c25      	lsrs	r5, r4, #16
    4d0c:	0424      	lsls	r4, r4, #16
    4d0e:	4465      	add	r5, ip
    4d10:	19a4      	adds	r4, r4, r6
    4d12:	1859      	adds	r1, r3, r1
    4d14:	1949      	adds	r1, r1, r5
    4d16:	0020      	movs	r0, r4
    4d18:	bc0c      	pop	{r2, r3}
    4d1a:	4690      	mov	r8, r2
    4d1c:	4699      	mov	r9, r3
    4d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004d20 <__aeabi_f2uiz>:
    4d20:	219e      	movs	r1, #158	; 0x9e
    4d22:	b510      	push	{r4, lr}
    4d24:	05c9      	lsls	r1, r1, #23
    4d26:	1c04      	adds	r4, r0, #0
    4d28:	f7ff ffa6 	bl	4c78 <__aeabi_fcmpge>
    4d2c:	2800      	cmp	r0, #0
    4d2e:	d103      	bne.n	4d38 <__aeabi_f2uiz+0x18>
    4d30:	1c20      	adds	r0, r4, #0
    4d32:	f000 fc31 	bl	5598 <__aeabi_f2iz>
    4d36:	bd10      	pop	{r4, pc}
    4d38:	219e      	movs	r1, #158	; 0x9e
    4d3a:	1c20      	adds	r0, r4, #0
    4d3c:	05c9      	lsls	r1, r1, #23
    4d3e:	f000 fa8f 	bl	5260 <__aeabi_fsub>
    4d42:	f000 fc29 	bl	5598 <__aeabi_f2iz>
    4d46:	2380      	movs	r3, #128	; 0x80
    4d48:	061b      	lsls	r3, r3, #24
    4d4a:	469c      	mov	ip, r3
    4d4c:	4460      	add	r0, ip
    4d4e:	e7f2      	b.n	4d36 <__aeabi_f2uiz+0x16>

00004d50 <__udivmoddi4>:
    4d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d52:	4657      	mov	r7, sl
    4d54:	464e      	mov	r6, r9
    4d56:	4645      	mov	r5, r8
    4d58:	46de      	mov	lr, fp
    4d5a:	b5e0      	push	{r5, r6, r7, lr}
    4d5c:	0004      	movs	r4, r0
    4d5e:	b083      	sub	sp, #12
    4d60:	000d      	movs	r5, r1
    4d62:	4692      	mov	sl, r2
    4d64:	4699      	mov	r9, r3
    4d66:	428b      	cmp	r3, r1
    4d68:	d82f      	bhi.n	4dca <__udivmoddi4+0x7a>
    4d6a:	d02c      	beq.n	4dc6 <__udivmoddi4+0x76>
    4d6c:	4649      	mov	r1, r9
    4d6e:	4650      	mov	r0, sl
    4d70:	f002 f9d4 	bl	711c <__clzdi2>
    4d74:	0029      	movs	r1, r5
    4d76:	0006      	movs	r6, r0
    4d78:	0020      	movs	r0, r4
    4d7a:	f002 f9cf 	bl	711c <__clzdi2>
    4d7e:	1a33      	subs	r3, r6, r0
    4d80:	4698      	mov	r8, r3
    4d82:	3b20      	subs	r3, #32
    4d84:	469b      	mov	fp, r3
    4d86:	d500      	bpl.n	4d8a <__udivmoddi4+0x3a>
    4d88:	e074      	b.n	4e74 <__udivmoddi4+0x124>
    4d8a:	4653      	mov	r3, sl
    4d8c:	465a      	mov	r2, fp
    4d8e:	4093      	lsls	r3, r2
    4d90:	001f      	movs	r7, r3
    4d92:	4653      	mov	r3, sl
    4d94:	4642      	mov	r2, r8
    4d96:	4093      	lsls	r3, r2
    4d98:	001e      	movs	r6, r3
    4d9a:	42af      	cmp	r7, r5
    4d9c:	d829      	bhi.n	4df2 <__udivmoddi4+0xa2>
    4d9e:	d026      	beq.n	4dee <__udivmoddi4+0x9e>
    4da0:	465b      	mov	r3, fp
    4da2:	1ba4      	subs	r4, r4, r6
    4da4:	41bd      	sbcs	r5, r7
    4da6:	2b00      	cmp	r3, #0
    4da8:	da00      	bge.n	4dac <__udivmoddi4+0x5c>
    4daa:	e079      	b.n	4ea0 <__udivmoddi4+0x150>
    4dac:	2200      	movs	r2, #0
    4dae:	2300      	movs	r3, #0
    4db0:	9200      	str	r2, [sp, #0]
    4db2:	9301      	str	r3, [sp, #4]
    4db4:	2301      	movs	r3, #1
    4db6:	465a      	mov	r2, fp
    4db8:	4093      	lsls	r3, r2
    4dba:	9301      	str	r3, [sp, #4]
    4dbc:	2301      	movs	r3, #1
    4dbe:	4642      	mov	r2, r8
    4dc0:	4093      	lsls	r3, r2
    4dc2:	9300      	str	r3, [sp, #0]
    4dc4:	e019      	b.n	4dfa <__udivmoddi4+0xaa>
    4dc6:	4282      	cmp	r2, r0
    4dc8:	d9d0      	bls.n	4d6c <__udivmoddi4+0x1c>
    4dca:	2200      	movs	r2, #0
    4dcc:	2300      	movs	r3, #0
    4dce:	9200      	str	r2, [sp, #0]
    4dd0:	9301      	str	r3, [sp, #4]
    4dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4dd4:	2b00      	cmp	r3, #0
    4dd6:	d001      	beq.n	4ddc <__udivmoddi4+0x8c>
    4dd8:	601c      	str	r4, [r3, #0]
    4dda:	605d      	str	r5, [r3, #4]
    4ddc:	9800      	ldr	r0, [sp, #0]
    4dde:	9901      	ldr	r1, [sp, #4]
    4de0:	b003      	add	sp, #12
    4de2:	bc3c      	pop	{r2, r3, r4, r5}
    4de4:	4690      	mov	r8, r2
    4de6:	4699      	mov	r9, r3
    4de8:	46a2      	mov	sl, r4
    4dea:	46ab      	mov	fp, r5
    4dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4dee:	42a3      	cmp	r3, r4
    4df0:	d9d6      	bls.n	4da0 <__udivmoddi4+0x50>
    4df2:	2200      	movs	r2, #0
    4df4:	2300      	movs	r3, #0
    4df6:	9200      	str	r2, [sp, #0]
    4df8:	9301      	str	r3, [sp, #4]
    4dfa:	4643      	mov	r3, r8
    4dfc:	2b00      	cmp	r3, #0
    4dfe:	d0e8      	beq.n	4dd2 <__udivmoddi4+0x82>
    4e00:	07fb      	lsls	r3, r7, #31
    4e02:	0872      	lsrs	r2, r6, #1
    4e04:	431a      	orrs	r2, r3
    4e06:	4646      	mov	r6, r8
    4e08:	087b      	lsrs	r3, r7, #1
    4e0a:	e00e      	b.n	4e2a <__udivmoddi4+0xda>
    4e0c:	42ab      	cmp	r3, r5
    4e0e:	d101      	bne.n	4e14 <__udivmoddi4+0xc4>
    4e10:	42a2      	cmp	r2, r4
    4e12:	d80c      	bhi.n	4e2e <__udivmoddi4+0xde>
    4e14:	1aa4      	subs	r4, r4, r2
    4e16:	419d      	sbcs	r5, r3
    4e18:	2001      	movs	r0, #1
    4e1a:	1924      	adds	r4, r4, r4
    4e1c:	416d      	adcs	r5, r5
    4e1e:	2100      	movs	r1, #0
    4e20:	3e01      	subs	r6, #1
    4e22:	1824      	adds	r4, r4, r0
    4e24:	414d      	adcs	r5, r1
    4e26:	2e00      	cmp	r6, #0
    4e28:	d006      	beq.n	4e38 <__udivmoddi4+0xe8>
    4e2a:	42ab      	cmp	r3, r5
    4e2c:	d9ee      	bls.n	4e0c <__udivmoddi4+0xbc>
    4e2e:	3e01      	subs	r6, #1
    4e30:	1924      	adds	r4, r4, r4
    4e32:	416d      	adcs	r5, r5
    4e34:	2e00      	cmp	r6, #0
    4e36:	d1f8      	bne.n	4e2a <__udivmoddi4+0xda>
    4e38:	465b      	mov	r3, fp
    4e3a:	9800      	ldr	r0, [sp, #0]
    4e3c:	9901      	ldr	r1, [sp, #4]
    4e3e:	1900      	adds	r0, r0, r4
    4e40:	4169      	adcs	r1, r5
    4e42:	2b00      	cmp	r3, #0
    4e44:	db22      	blt.n	4e8c <__udivmoddi4+0x13c>
    4e46:	002b      	movs	r3, r5
    4e48:	465a      	mov	r2, fp
    4e4a:	40d3      	lsrs	r3, r2
    4e4c:	002a      	movs	r2, r5
    4e4e:	4644      	mov	r4, r8
    4e50:	40e2      	lsrs	r2, r4
    4e52:	001c      	movs	r4, r3
    4e54:	465b      	mov	r3, fp
    4e56:	0015      	movs	r5, r2
    4e58:	2b00      	cmp	r3, #0
    4e5a:	db2c      	blt.n	4eb6 <__udivmoddi4+0x166>
    4e5c:	0026      	movs	r6, r4
    4e5e:	409e      	lsls	r6, r3
    4e60:	0033      	movs	r3, r6
    4e62:	0026      	movs	r6, r4
    4e64:	4647      	mov	r7, r8
    4e66:	40be      	lsls	r6, r7
    4e68:	0032      	movs	r2, r6
    4e6a:	1a80      	subs	r0, r0, r2
    4e6c:	4199      	sbcs	r1, r3
    4e6e:	9000      	str	r0, [sp, #0]
    4e70:	9101      	str	r1, [sp, #4]
    4e72:	e7ae      	b.n	4dd2 <__udivmoddi4+0x82>
    4e74:	4642      	mov	r2, r8
    4e76:	2320      	movs	r3, #32
    4e78:	1a9b      	subs	r3, r3, r2
    4e7a:	4652      	mov	r2, sl
    4e7c:	40da      	lsrs	r2, r3
    4e7e:	4641      	mov	r1, r8
    4e80:	0013      	movs	r3, r2
    4e82:	464a      	mov	r2, r9
    4e84:	408a      	lsls	r2, r1
    4e86:	0017      	movs	r7, r2
    4e88:	431f      	orrs	r7, r3
    4e8a:	e782      	b.n	4d92 <__udivmoddi4+0x42>
    4e8c:	4642      	mov	r2, r8
    4e8e:	2320      	movs	r3, #32
    4e90:	1a9b      	subs	r3, r3, r2
    4e92:	002a      	movs	r2, r5
    4e94:	4646      	mov	r6, r8
    4e96:	409a      	lsls	r2, r3
    4e98:	0023      	movs	r3, r4
    4e9a:	40f3      	lsrs	r3, r6
    4e9c:	4313      	orrs	r3, r2
    4e9e:	e7d5      	b.n	4e4c <__udivmoddi4+0xfc>
    4ea0:	4642      	mov	r2, r8
    4ea2:	2320      	movs	r3, #32
    4ea4:	2100      	movs	r1, #0
    4ea6:	1a9b      	subs	r3, r3, r2
    4ea8:	2200      	movs	r2, #0
    4eaa:	9100      	str	r1, [sp, #0]
    4eac:	9201      	str	r2, [sp, #4]
    4eae:	2201      	movs	r2, #1
    4eb0:	40da      	lsrs	r2, r3
    4eb2:	9201      	str	r2, [sp, #4]
    4eb4:	e782      	b.n	4dbc <__udivmoddi4+0x6c>
    4eb6:	4642      	mov	r2, r8
    4eb8:	2320      	movs	r3, #32
    4eba:	0026      	movs	r6, r4
    4ebc:	1a9b      	subs	r3, r3, r2
    4ebe:	40de      	lsrs	r6, r3
    4ec0:	002f      	movs	r7, r5
    4ec2:	46b4      	mov	ip, r6
    4ec4:	4097      	lsls	r7, r2
    4ec6:	4666      	mov	r6, ip
    4ec8:	003b      	movs	r3, r7
    4eca:	4333      	orrs	r3, r6
    4ecc:	e7c9      	b.n	4e62 <__udivmoddi4+0x112>
    4ece:	46c0      	nop			; (mov r8, r8)

00004ed0 <__eqsf2>:
    4ed0:	b570      	push	{r4, r5, r6, lr}
    4ed2:	0042      	lsls	r2, r0, #1
    4ed4:	0245      	lsls	r5, r0, #9
    4ed6:	024e      	lsls	r6, r1, #9
    4ed8:	004c      	lsls	r4, r1, #1
    4eda:	0fc3      	lsrs	r3, r0, #31
    4edc:	0a6d      	lsrs	r5, r5, #9
    4ede:	0e12      	lsrs	r2, r2, #24
    4ee0:	0a76      	lsrs	r6, r6, #9
    4ee2:	0e24      	lsrs	r4, r4, #24
    4ee4:	0fc9      	lsrs	r1, r1, #31
    4ee6:	2001      	movs	r0, #1
    4ee8:	2aff      	cmp	r2, #255	; 0xff
    4eea:	d006      	beq.n	4efa <__eqsf2+0x2a>
    4eec:	2cff      	cmp	r4, #255	; 0xff
    4eee:	d003      	beq.n	4ef8 <__eqsf2+0x28>
    4ef0:	42a2      	cmp	r2, r4
    4ef2:	d101      	bne.n	4ef8 <__eqsf2+0x28>
    4ef4:	42b5      	cmp	r5, r6
    4ef6:	d006      	beq.n	4f06 <__eqsf2+0x36>
    4ef8:	bd70      	pop	{r4, r5, r6, pc}
    4efa:	2d00      	cmp	r5, #0
    4efc:	d1fc      	bne.n	4ef8 <__eqsf2+0x28>
    4efe:	2cff      	cmp	r4, #255	; 0xff
    4f00:	d1fa      	bne.n	4ef8 <__eqsf2+0x28>
    4f02:	2e00      	cmp	r6, #0
    4f04:	d1f8      	bne.n	4ef8 <__eqsf2+0x28>
    4f06:	428b      	cmp	r3, r1
    4f08:	d006      	beq.n	4f18 <__eqsf2+0x48>
    4f0a:	2001      	movs	r0, #1
    4f0c:	2a00      	cmp	r2, #0
    4f0e:	d1f3      	bne.n	4ef8 <__eqsf2+0x28>
    4f10:	0028      	movs	r0, r5
    4f12:	1e45      	subs	r5, r0, #1
    4f14:	41a8      	sbcs	r0, r5
    4f16:	e7ef      	b.n	4ef8 <__eqsf2+0x28>
    4f18:	2000      	movs	r0, #0
    4f1a:	e7ed      	b.n	4ef8 <__eqsf2+0x28>

00004f1c <__gesf2>:
    4f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f1e:	0042      	lsls	r2, r0, #1
    4f20:	0245      	lsls	r5, r0, #9
    4f22:	024c      	lsls	r4, r1, #9
    4f24:	0fc3      	lsrs	r3, r0, #31
    4f26:	0048      	lsls	r0, r1, #1
    4f28:	0a6d      	lsrs	r5, r5, #9
    4f2a:	0e12      	lsrs	r2, r2, #24
    4f2c:	0a64      	lsrs	r4, r4, #9
    4f2e:	0e00      	lsrs	r0, r0, #24
    4f30:	0fc9      	lsrs	r1, r1, #31
    4f32:	2aff      	cmp	r2, #255	; 0xff
    4f34:	d01e      	beq.n	4f74 <__gesf2+0x58>
    4f36:	28ff      	cmp	r0, #255	; 0xff
    4f38:	d021      	beq.n	4f7e <__gesf2+0x62>
    4f3a:	2a00      	cmp	r2, #0
    4f3c:	d10a      	bne.n	4f54 <__gesf2+0x38>
    4f3e:	426e      	negs	r6, r5
    4f40:	416e      	adcs	r6, r5
    4f42:	b2f6      	uxtb	r6, r6
    4f44:	2800      	cmp	r0, #0
    4f46:	d10f      	bne.n	4f68 <__gesf2+0x4c>
    4f48:	2c00      	cmp	r4, #0
    4f4a:	d10d      	bne.n	4f68 <__gesf2+0x4c>
    4f4c:	2000      	movs	r0, #0
    4f4e:	2d00      	cmp	r5, #0
    4f50:	d009      	beq.n	4f66 <__gesf2+0x4a>
    4f52:	e005      	b.n	4f60 <__gesf2+0x44>
    4f54:	2800      	cmp	r0, #0
    4f56:	d101      	bne.n	4f5c <__gesf2+0x40>
    4f58:	2c00      	cmp	r4, #0
    4f5a:	d001      	beq.n	4f60 <__gesf2+0x44>
    4f5c:	428b      	cmp	r3, r1
    4f5e:	d011      	beq.n	4f84 <__gesf2+0x68>
    4f60:	2101      	movs	r1, #1
    4f62:	4258      	negs	r0, r3
    4f64:	4308      	orrs	r0, r1
    4f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f68:	2e00      	cmp	r6, #0
    4f6a:	d0f7      	beq.n	4f5c <__gesf2+0x40>
    4f6c:	2001      	movs	r0, #1
    4f6e:	3901      	subs	r1, #1
    4f70:	4308      	orrs	r0, r1
    4f72:	e7f8      	b.n	4f66 <__gesf2+0x4a>
    4f74:	2d00      	cmp	r5, #0
    4f76:	d0de      	beq.n	4f36 <__gesf2+0x1a>
    4f78:	2002      	movs	r0, #2
    4f7a:	4240      	negs	r0, r0
    4f7c:	e7f3      	b.n	4f66 <__gesf2+0x4a>
    4f7e:	2c00      	cmp	r4, #0
    4f80:	d0db      	beq.n	4f3a <__gesf2+0x1e>
    4f82:	e7f9      	b.n	4f78 <__gesf2+0x5c>
    4f84:	4282      	cmp	r2, r0
    4f86:	dceb      	bgt.n	4f60 <__gesf2+0x44>
    4f88:	db04      	blt.n	4f94 <__gesf2+0x78>
    4f8a:	42a5      	cmp	r5, r4
    4f8c:	d8e8      	bhi.n	4f60 <__gesf2+0x44>
    4f8e:	2000      	movs	r0, #0
    4f90:	42a5      	cmp	r5, r4
    4f92:	d2e8      	bcs.n	4f66 <__gesf2+0x4a>
    4f94:	2101      	movs	r1, #1
    4f96:	1e58      	subs	r0, r3, #1
    4f98:	4308      	orrs	r0, r1
    4f9a:	e7e4      	b.n	4f66 <__gesf2+0x4a>

00004f9c <__lesf2>:
    4f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f9e:	0042      	lsls	r2, r0, #1
    4fa0:	024d      	lsls	r5, r1, #9
    4fa2:	004c      	lsls	r4, r1, #1
    4fa4:	0246      	lsls	r6, r0, #9
    4fa6:	0a76      	lsrs	r6, r6, #9
    4fa8:	0e12      	lsrs	r2, r2, #24
    4faa:	0fc3      	lsrs	r3, r0, #31
    4fac:	0a6d      	lsrs	r5, r5, #9
    4fae:	0e24      	lsrs	r4, r4, #24
    4fb0:	0fc9      	lsrs	r1, r1, #31
    4fb2:	2aff      	cmp	r2, #255	; 0xff
    4fb4:	d016      	beq.n	4fe4 <__lesf2+0x48>
    4fb6:	2cff      	cmp	r4, #255	; 0xff
    4fb8:	d018      	beq.n	4fec <__lesf2+0x50>
    4fba:	2a00      	cmp	r2, #0
    4fbc:	d10a      	bne.n	4fd4 <__lesf2+0x38>
    4fbe:	4270      	negs	r0, r6
    4fc0:	4170      	adcs	r0, r6
    4fc2:	b2c0      	uxtb	r0, r0
    4fc4:	2c00      	cmp	r4, #0
    4fc6:	d015      	beq.n	4ff4 <__lesf2+0x58>
    4fc8:	2800      	cmp	r0, #0
    4fca:	d005      	beq.n	4fd8 <__lesf2+0x3c>
    4fcc:	2001      	movs	r0, #1
    4fce:	3901      	subs	r1, #1
    4fd0:	4308      	orrs	r0, r1
    4fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fd4:	2c00      	cmp	r4, #0
    4fd6:	d013      	beq.n	5000 <__lesf2+0x64>
    4fd8:	4299      	cmp	r1, r3
    4fda:	d014      	beq.n	5006 <__lesf2+0x6a>
    4fdc:	2001      	movs	r0, #1
    4fde:	425b      	negs	r3, r3
    4fe0:	4318      	orrs	r0, r3
    4fe2:	e7f6      	b.n	4fd2 <__lesf2+0x36>
    4fe4:	2002      	movs	r0, #2
    4fe6:	2e00      	cmp	r6, #0
    4fe8:	d1f3      	bne.n	4fd2 <__lesf2+0x36>
    4fea:	e7e4      	b.n	4fb6 <__lesf2+0x1a>
    4fec:	2002      	movs	r0, #2
    4fee:	2d00      	cmp	r5, #0
    4ff0:	d1ef      	bne.n	4fd2 <__lesf2+0x36>
    4ff2:	e7e2      	b.n	4fba <__lesf2+0x1e>
    4ff4:	2d00      	cmp	r5, #0
    4ff6:	d1e7      	bne.n	4fc8 <__lesf2+0x2c>
    4ff8:	2000      	movs	r0, #0
    4ffa:	2e00      	cmp	r6, #0
    4ffc:	d0e9      	beq.n	4fd2 <__lesf2+0x36>
    4ffe:	e7ed      	b.n	4fdc <__lesf2+0x40>
    5000:	2d00      	cmp	r5, #0
    5002:	d1e9      	bne.n	4fd8 <__lesf2+0x3c>
    5004:	e7ea      	b.n	4fdc <__lesf2+0x40>
    5006:	42a2      	cmp	r2, r4
    5008:	dc06      	bgt.n	5018 <__lesf2+0x7c>
    500a:	dbdf      	blt.n	4fcc <__lesf2+0x30>
    500c:	42ae      	cmp	r6, r5
    500e:	d803      	bhi.n	5018 <__lesf2+0x7c>
    5010:	2000      	movs	r0, #0
    5012:	42ae      	cmp	r6, r5
    5014:	d3da      	bcc.n	4fcc <__lesf2+0x30>
    5016:	e7dc      	b.n	4fd2 <__lesf2+0x36>
    5018:	2001      	movs	r0, #1
    501a:	4249      	negs	r1, r1
    501c:	4308      	orrs	r0, r1
    501e:	e7d8      	b.n	4fd2 <__lesf2+0x36>

00005020 <__aeabi_fmul>:
    5020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5022:	4657      	mov	r7, sl
    5024:	464e      	mov	r6, r9
    5026:	4645      	mov	r5, r8
    5028:	46de      	mov	lr, fp
    502a:	b5e0      	push	{r5, r6, r7, lr}
    502c:	0247      	lsls	r7, r0, #9
    502e:	0046      	lsls	r6, r0, #1
    5030:	4688      	mov	r8, r1
    5032:	0a7f      	lsrs	r7, r7, #9
    5034:	0e36      	lsrs	r6, r6, #24
    5036:	0fc4      	lsrs	r4, r0, #31
    5038:	2e00      	cmp	r6, #0
    503a:	d047      	beq.n	50cc <__aeabi_fmul+0xac>
    503c:	2eff      	cmp	r6, #255	; 0xff
    503e:	d024      	beq.n	508a <__aeabi_fmul+0x6a>
    5040:	00fb      	lsls	r3, r7, #3
    5042:	2780      	movs	r7, #128	; 0x80
    5044:	04ff      	lsls	r7, r7, #19
    5046:	431f      	orrs	r7, r3
    5048:	2300      	movs	r3, #0
    504a:	4699      	mov	r9, r3
    504c:	469a      	mov	sl, r3
    504e:	3e7f      	subs	r6, #127	; 0x7f
    5050:	4643      	mov	r3, r8
    5052:	025d      	lsls	r5, r3, #9
    5054:	0058      	lsls	r0, r3, #1
    5056:	0fdb      	lsrs	r3, r3, #31
    5058:	0a6d      	lsrs	r5, r5, #9
    505a:	0e00      	lsrs	r0, r0, #24
    505c:	4698      	mov	r8, r3
    505e:	d043      	beq.n	50e8 <__aeabi_fmul+0xc8>
    5060:	28ff      	cmp	r0, #255	; 0xff
    5062:	d03b      	beq.n	50dc <__aeabi_fmul+0xbc>
    5064:	00eb      	lsls	r3, r5, #3
    5066:	2580      	movs	r5, #128	; 0x80
    5068:	2200      	movs	r2, #0
    506a:	04ed      	lsls	r5, r5, #19
    506c:	431d      	orrs	r5, r3
    506e:	387f      	subs	r0, #127	; 0x7f
    5070:	1836      	adds	r6, r6, r0
    5072:	1c73      	adds	r3, r6, #1
    5074:	4641      	mov	r1, r8
    5076:	469b      	mov	fp, r3
    5078:	464b      	mov	r3, r9
    507a:	4061      	eors	r1, r4
    507c:	4313      	orrs	r3, r2
    507e:	2b0f      	cmp	r3, #15
    5080:	d864      	bhi.n	514c <__aeabi_fmul+0x12c>
    5082:	4875      	ldr	r0, [pc, #468]	; (5258 <__aeabi_fmul+0x238>)
    5084:	009b      	lsls	r3, r3, #2
    5086:	58c3      	ldr	r3, [r0, r3]
    5088:	469f      	mov	pc, r3
    508a:	2f00      	cmp	r7, #0
    508c:	d142      	bne.n	5114 <__aeabi_fmul+0xf4>
    508e:	2308      	movs	r3, #8
    5090:	4699      	mov	r9, r3
    5092:	3b06      	subs	r3, #6
    5094:	26ff      	movs	r6, #255	; 0xff
    5096:	469a      	mov	sl, r3
    5098:	e7da      	b.n	5050 <__aeabi_fmul+0x30>
    509a:	4641      	mov	r1, r8
    509c:	2a02      	cmp	r2, #2
    509e:	d028      	beq.n	50f2 <__aeabi_fmul+0xd2>
    50a0:	2a03      	cmp	r2, #3
    50a2:	d100      	bne.n	50a6 <__aeabi_fmul+0x86>
    50a4:	e0ce      	b.n	5244 <__aeabi_fmul+0x224>
    50a6:	2a01      	cmp	r2, #1
    50a8:	d000      	beq.n	50ac <__aeabi_fmul+0x8c>
    50aa:	e0ac      	b.n	5206 <__aeabi_fmul+0x1e6>
    50ac:	4011      	ands	r1, r2
    50ae:	2000      	movs	r0, #0
    50b0:	2200      	movs	r2, #0
    50b2:	b2cc      	uxtb	r4, r1
    50b4:	0240      	lsls	r0, r0, #9
    50b6:	05d2      	lsls	r2, r2, #23
    50b8:	0a40      	lsrs	r0, r0, #9
    50ba:	07e4      	lsls	r4, r4, #31
    50bc:	4310      	orrs	r0, r2
    50be:	4320      	orrs	r0, r4
    50c0:	bc3c      	pop	{r2, r3, r4, r5}
    50c2:	4690      	mov	r8, r2
    50c4:	4699      	mov	r9, r3
    50c6:	46a2      	mov	sl, r4
    50c8:	46ab      	mov	fp, r5
    50ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50cc:	2f00      	cmp	r7, #0
    50ce:	d115      	bne.n	50fc <__aeabi_fmul+0xdc>
    50d0:	2304      	movs	r3, #4
    50d2:	4699      	mov	r9, r3
    50d4:	3b03      	subs	r3, #3
    50d6:	2600      	movs	r6, #0
    50d8:	469a      	mov	sl, r3
    50da:	e7b9      	b.n	5050 <__aeabi_fmul+0x30>
    50dc:	20ff      	movs	r0, #255	; 0xff
    50de:	2202      	movs	r2, #2
    50e0:	2d00      	cmp	r5, #0
    50e2:	d0c5      	beq.n	5070 <__aeabi_fmul+0x50>
    50e4:	2203      	movs	r2, #3
    50e6:	e7c3      	b.n	5070 <__aeabi_fmul+0x50>
    50e8:	2d00      	cmp	r5, #0
    50ea:	d119      	bne.n	5120 <__aeabi_fmul+0x100>
    50ec:	2000      	movs	r0, #0
    50ee:	2201      	movs	r2, #1
    50f0:	e7be      	b.n	5070 <__aeabi_fmul+0x50>
    50f2:	2401      	movs	r4, #1
    50f4:	22ff      	movs	r2, #255	; 0xff
    50f6:	400c      	ands	r4, r1
    50f8:	2000      	movs	r0, #0
    50fa:	e7db      	b.n	50b4 <__aeabi_fmul+0x94>
    50fc:	0038      	movs	r0, r7
    50fe:	f001 ffef 	bl	70e0 <__clzsi2>
    5102:	2676      	movs	r6, #118	; 0x76
    5104:	1f43      	subs	r3, r0, #5
    5106:	409f      	lsls	r7, r3
    5108:	2300      	movs	r3, #0
    510a:	4276      	negs	r6, r6
    510c:	1a36      	subs	r6, r6, r0
    510e:	4699      	mov	r9, r3
    5110:	469a      	mov	sl, r3
    5112:	e79d      	b.n	5050 <__aeabi_fmul+0x30>
    5114:	230c      	movs	r3, #12
    5116:	4699      	mov	r9, r3
    5118:	3b09      	subs	r3, #9
    511a:	26ff      	movs	r6, #255	; 0xff
    511c:	469a      	mov	sl, r3
    511e:	e797      	b.n	5050 <__aeabi_fmul+0x30>
    5120:	0028      	movs	r0, r5
    5122:	f001 ffdd 	bl	70e0 <__clzsi2>
    5126:	1f43      	subs	r3, r0, #5
    5128:	409d      	lsls	r5, r3
    512a:	2376      	movs	r3, #118	; 0x76
    512c:	425b      	negs	r3, r3
    512e:	1a18      	subs	r0, r3, r0
    5130:	2200      	movs	r2, #0
    5132:	e79d      	b.n	5070 <__aeabi_fmul+0x50>
    5134:	2080      	movs	r0, #128	; 0x80
    5136:	2400      	movs	r4, #0
    5138:	03c0      	lsls	r0, r0, #15
    513a:	22ff      	movs	r2, #255	; 0xff
    513c:	e7ba      	b.n	50b4 <__aeabi_fmul+0x94>
    513e:	003d      	movs	r5, r7
    5140:	4652      	mov	r2, sl
    5142:	e7ab      	b.n	509c <__aeabi_fmul+0x7c>
    5144:	003d      	movs	r5, r7
    5146:	0021      	movs	r1, r4
    5148:	4652      	mov	r2, sl
    514a:	e7a7      	b.n	509c <__aeabi_fmul+0x7c>
    514c:	0c3b      	lsrs	r3, r7, #16
    514e:	469c      	mov	ip, r3
    5150:	042a      	lsls	r2, r5, #16
    5152:	0c12      	lsrs	r2, r2, #16
    5154:	0c2b      	lsrs	r3, r5, #16
    5156:	0014      	movs	r4, r2
    5158:	4660      	mov	r0, ip
    515a:	4665      	mov	r5, ip
    515c:	043f      	lsls	r7, r7, #16
    515e:	0c3f      	lsrs	r7, r7, #16
    5160:	437c      	muls	r4, r7
    5162:	4342      	muls	r2, r0
    5164:	435d      	muls	r5, r3
    5166:	437b      	muls	r3, r7
    5168:	0c27      	lsrs	r7, r4, #16
    516a:	189b      	adds	r3, r3, r2
    516c:	18ff      	adds	r7, r7, r3
    516e:	42ba      	cmp	r2, r7
    5170:	d903      	bls.n	517a <__aeabi_fmul+0x15a>
    5172:	2380      	movs	r3, #128	; 0x80
    5174:	025b      	lsls	r3, r3, #9
    5176:	469c      	mov	ip, r3
    5178:	4465      	add	r5, ip
    517a:	0424      	lsls	r4, r4, #16
    517c:	043a      	lsls	r2, r7, #16
    517e:	0c24      	lsrs	r4, r4, #16
    5180:	1912      	adds	r2, r2, r4
    5182:	0193      	lsls	r3, r2, #6
    5184:	1e5c      	subs	r4, r3, #1
    5186:	41a3      	sbcs	r3, r4
    5188:	0c3f      	lsrs	r7, r7, #16
    518a:	0e92      	lsrs	r2, r2, #26
    518c:	197d      	adds	r5, r7, r5
    518e:	431a      	orrs	r2, r3
    5190:	01ad      	lsls	r5, r5, #6
    5192:	4315      	orrs	r5, r2
    5194:	012b      	lsls	r3, r5, #4
    5196:	d504      	bpl.n	51a2 <__aeabi_fmul+0x182>
    5198:	2301      	movs	r3, #1
    519a:	465e      	mov	r6, fp
    519c:	086a      	lsrs	r2, r5, #1
    519e:	401d      	ands	r5, r3
    51a0:	4315      	orrs	r5, r2
    51a2:	0032      	movs	r2, r6
    51a4:	327f      	adds	r2, #127	; 0x7f
    51a6:	2a00      	cmp	r2, #0
    51a8:	dd25      	ble.n	51f6 <__aeabi_fmul+0x1d6>
    51aa:	076b      	lsls	r3, r5, #29
    51ac:	d004      	beq.n	51b8 <__aeabi_fmul+0x198>
    51ae:	230f      	movs	r3, #15
    51b0:	402b      	ands	r3, r5
    51b2:	2b04      	cmp	r3, #4
    51b4:	d000      	beq.n	51b8 <__aeabi_fmul+0x198>
    51b6:	3504      	adds	r5, #4
    51b8:	012b      	lsls	r3, r5, #4
    51ba:	d503      	bpl.n	51c4 <__aeabi_fmul+0x1a4>
    51bc:	0032      	movs	r2, r6
    51be:	4b27      	ldr	r3, [pc, #156]	; (525c <__aeabi_fmul+0x23c>)
    51c0:	3280      	adds	r2, #128	; 0x80
    51c2:	401d      	ands	r5, r3
    51c4:	2afe      	cmp	r2, #254	; 0xfe
    51c6:	dc94      	bgt.n	50f2 <__aeabi_fmul+0xd2>
    51c8:	2401      	movs	r4, #1
    51ca:	01a8      	lsls	r0, r5, #6
    51cc:	0a40      	lsrs	r0, r0, #9
    51ce:	b2d2      	uxtb	r2, r2
    51d0:	400c      	ands	r4, r1
    51d2:	e76f      	b.n	50b4 <__aeabi_fmul+0x94>
    51d4:	2080      	movs	r0, #128	; 0x80
    51d6:	03c0      	lsls	r0, r0, #15
    51d8:	4207      	tst	r7, r0
    51da:	d007      	beq.n	51ec <__aeabi_fmul+0x1cc>
    51dc:	4205      	tst	r5, r0
    51de:	d105      	bne.n	51ec <__aeabi_fmul+0x1cc>
    51e0:	4328      	orrs	r0, r5
    51e2:	0240      	lsls	r0, r0, #9
    51e4:	0a40      	lsrs	r0, r0, #9
    51e6:	4644      	mov	r4, r8
    51e8:	22ff      	movs	r2, #255	; 0xff
    51ea:	e763      	b.n	50b4 <__aeabi_fmul+0x94>
    51ec:	4338      	orrs	r0, r7
    51ee:	0240      	lsls	r0, r0, #9
    51f0:	0a40      	lsrs	r0, r0, #9
    51f2:	22ff      	movs	r2, #255	; 0xff
    51f4:	e75e      	b.n	50b4 <__aeabi_fmul+0x94>
    51f6:	2401      	movs	r4, #1
    51f8:	1aa3      	subs	r3, r4, r2
    51fa:	2b1b      	cmp	r3, #27
    51fc:	dd05      	ble.n	520a <__aeabi_fmul+0x1ea>
    51fe:	400c      	ands	r4, r1
    5200:	2200      	movs	r2, #0
    5202:	2000      	movs	r0, #0
    5204:	e756      	b.n	50b4 <__aeabi_fmul+0x94>
    5206:	465e      	mov	r6, fp
    5208:	e7cb      	b.n	51a2 <__aeabi_fmul+0x182>
    520a:	002a      	movs	r2, r5
    520c:	2020      	movs	r0, #32
    520e:	40da      	lsrs	r2, r3
    5210:	1ac3      	subs	r3, r0, r3
    5212:	409d      	lsls	r5, r3
    5214:	002b      	movs	r3, r5
    5216:	1e5d      	subs	r5, r3, #1
    5218:	41ab      	sbcs	r3, r5
    521a:	4313      	orrs	r3, r2
    521c:	075a      	lsls	r2, r3, #29
    521e:	d004      	beq.n	522a <__aeabi_fmul+0x20a>
    5220:	220f      	movs	r2, #15
    5222:	401a      	ands	r2, r3
    5224:	2a04      	cmp	r2, #4
    5226:	d000      	beq.n	522a <__aeabi_fmul+0x20a>
    5228:	3304      	adds	r3, #4
    522a:	015a      	lsls	r2, r3, #5
    522c:	d504      	bpl.n	5238 <__aeabi_fmul+0x218>
    522e:	2401      	movs	r4, #1
    5230:	2201      	movs	r2, #1
    5232:	400c      	ands	r4, r1
    5234:	2000      	movs	r0, #0
    5236:	e73d      	b.n	50b4 <__aeabi_fmul+0x94>
    5238:	2401      	movs	r4, #1
    523a:	019b      	lsls	r3, r3, #6
    523c:	0a58      	lsrs	r0, r3, #9
    523e:	400c      	ands	r4, r1
    5240:	2200      	movs	r2, #0
    5242:	e737      	b.n	50b4 <__aeabi_fmul+0x94>
    5244:	2080      	movs	r0, #128	; 0x80
    5246:	2401      	movs	r4, #1
    5248:	03c0      	lsls	r0, r0, #15
    524a:	4328      	orrs	r0, r5
    524c:	0240      	lsls	r0, r0, #9
    524e:	0a40      	lsrs	r0, r0, #9
    5250:	400c      	ands	r4, r1
    5252:	22ff      	movs	r2, #255	; 0xff
    5254:	e72e      	b.n	50b4 <__aeabi_fmul+0x94>
    5256:	46c0      	nop			; (mov r8, r8)
    5258:	00007df0 	.word	0x00007df0
    525c:	f7ffffff 	.word	0xf7ffffff

00005260 <__aeabi_fsub>:
    5260:	b5f0      	push	{r4, r5, r6, r7, lr}
    5262:	464f      	mov	r7, r9
    5264:	46d6      	mov	lr, sl
    5266:	4646      	mov	r6, r8
    5268:	0044      	lsls	r4, r0, #1
    526a:	b5c0      	push	{r6, r7, lr}
    526c:	0fc2      	lsrs	r2, r0, #31
    526e:	0247      	lsls	r7, r0, #9
    5270:	0248      	lsls	r0, r1, #9
    5272:	0a40      	lsrs	r0, r0, #9
    5274:	4684      	mov	ip, r0
    5276:	4666      	mov	r6, ip
    5278:	0a7b      	lsrs	r3, r7, #9
    527a:	0048      	lsls	r0, r1, #1
    527c:	0fc9      	lsrs	r1, r1, #31
    527e:	469a      	mov	sl, r3
    5280:	0e24      	lsrs	r4, r4, #24
    5282:	0015      	movs	r5, r2
    5284:	00db      	lsls	r3, r3, #3
    5286:	0e00      	lsrs	r0, r0, #24
    5288:	4689      	mov	r9, r1
    528a:	00f6      	lsls	r6, r6, #3
    528c:	28ff      	cmp	r0, #255	; 0xff
    528e:	d100      	bne.n	5292 <__aeabi_fsub+0x32>
    5290:	e08f      	b.n	53b2 <__aeabi_fsub+0x152>
    5292:	2101      	movs	r1, #1
    5294:	464f      	mov	r7, r9
    5296:	404f      	eors	r7, r1
    5298:	0039      	movs	r1, r7
    529a:	4291      	cmp	r1, r2
    529c:	d066      	beq.n	536c <__aeabi_fsub+0x10c>
    529e:	1a22      	subs	r2, r4, r0
    52a0:	2a00      	cmp	r2, #0
    52a2:	dc00      	bgt.n	52a6 <__aeabi_fsub+0x46>
    52a4:	e09d      	b.n	53e2 <__aeabi_fsub+0x182>
    52a6:	2800      	cmp	r0, #0
    52a8:	d13d      	bne.n	5326 <__aeabi_fsub+0xc6>
    52aa:	2e00      	cmp	r6, #0
    52ac:	d100      	bne.n	52b0 <__aeabi_fsub+0x50>
    52ae:	e08b      	b.n	53c8 <__aeabi_fsub+0x168>
    52b0:	1e51      	subs	r1, r2, #1
    52b2:	2900      	cmp	r1, #0
    52b4:	d000      	beq.n	52b8 <__aeabi_fsub+0x58>
    52b6:	e0b5      	b.n	5424 <__aeabi_fsub+0x1c4>
    52b8:	2401      	movs	r4, #1
    52ba:	1b9b      	subs	r3, r3, r6
    52bc:	015a      	lsls	r2, r3, #5
    52be:	d544      	bpl.n	534a <__aeabi_fsub+0xea>
    52c0:	019b      	lsls	r3, r3, #6
    52c2:	099f      	lsrs	r7, r3, #6
    52c4:	0038      	movs	r0, r7
    52c6:	f001 ff0b 	bl	70e0 <__clzsi2>
    52ca:	3805      	subs	r0, #5
    52cc:	4087      	lsls	r7, r0
    52ce:	4284      	cmp	r4, r0
    52d0:	dd00      	ble.n	52d4 <__aeabi_fsub+0x74>
    52d2:	e096      	b.n	5402 <__aeabi_fsub+0x1a2>
    52d4:	1b04      	subs	r4, r0, r4
    52d6:	003a      	movs	r2, r7
    52d8:	2020      	movs	r0, #32
    52da:	3401      	adds	r4, #1
    52dc:	40e2      	lsrs	r2, r4
    52de:	1b04      	subs	r4, r0, r4
    52e0:	40a7      	lsls	r7, r4
    52e2:	003b      	movs	r3, r7
    52e4:	1e5f      	subs	r7, r3, #1
    52e6:	41bb      	sbcs	r3, r7
    52e8:	2400      	movs	r4, #0
    52ea:	4313      	orrs	r3, r2
    52ec:	075a      	lsls	r2, r3, #29
    52ee:	d004      	beq.n	52fa <__aeabi_fsub+0x9a>
    52f0:	220f      	movs	r2, #15
    52f2:	401a      	ands	r2, r3
    52f4:	2a04      	cmp	r2, #4
    52f6:	d000      	beq.n	52fa <__aeabi_fsub+0x9a>
    52f8:	3304      	adds	r3, #4
    52fa:	015a      	lsls	r2, r3, #5
    52fc:	d527      	bpl.n	534e <__aeabi_fsub+0xee>
    52fe:	3401      	adds	r4, #1
    5300:	2cff      	cmp	r4, #255	; 0xff
    5302:	d100      	bne.n	5306 <__aeabi_fsub+0xa6>
    5304:	e079      	b.n	53fa <__aeabi_fsub+0x19a>
    5306:	2201      	movs	r2, #1
    5308:	019b      	lsls	r3, r3, #6
    530a:	0a5b      	lsrs	r3, r3, #9
    530c:	b2e4      	uxtb	r4, r4
    530e:	402a      	ands	r2, r5
    5310:	025b      	lsls	r3, r3, #9
    5312:	05e4      	lsls	r4, r4, #23
    5314:	0a58      	lsrs	r0, r3, #9
    5316:	07d2      	lsls	r2, r2, #31
    5318:	4320      	orrs	r0, r4
    531a:	4310      	orrs	r0, r2
    531c:	bc1c      	pop	{r2, r3, r4}
    531e:	4690      	mov	r8, r2
    5320:	4699      	mov	r9, r3
    5322:	46a2      	mov	sl, r4
    5324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5326:	2cff      	cmp	r4, #255	; 0xff
    5328:	d0e0      	beq.n	52ec <__aeabi_fsub+0x8c>
    532a:	2180      	movs	r1, #128	; 0x80
    532c:	04c9      	lsls	r1, r1, #19
    532e:	430e      	orrs	r6, r1
    5330:	2a1b      	cmp	r2, #27
    5332:	dc7b      	bgt.n	542c <__aeabi_fsub+0x1cc>
    5334:	0031      	movs	r1, r6
    5336:	2020      	movs	r0, #32
    5338:	40d1      	lsrs	r1, r2
    533a:	1a82      	subs	r2, r0, r2
    533c:	4096      	lsls	r6, r2
    533e:	1e72      	subs	r2, r6, #1
    5340:	4196      	sbcs	r6, r2
    5342:	430e      	orrs	r6, r1
    5344:	1b9b      	subs	r3, r3, r6
    5346:	015a      	lsls	r2, r3, #5
    5348:	d4ba      	bmi.n	52c0 <__aeabi_fsub+0x60>
    534a:	075a      	lsls	r2, r3, #29
    534c:	d1d0      	bne.n	52f0 <__aeabi_fsub+0x90>
    534e:	2201      	movs	r2, #1
    5350:	08df      	lsrs	r7, r3, #3
    5352:	402a      	ands	r2, r5
    5354:	2cff      	cmp	r4, #255	; 0xff
    5356:	d133      	bne.n	53c0 <__aeabi_fsub+0x160>
    5358:	2f00      	cmp	r7, #0
    535a:	d100      	bne.n	535e <__aeabi_fsub+0xfe>
    535c:	e0a8      	b.n	54b0 <__aeabi_fsub+0x250>
    535e:	2380      	movs	r3, #128	; 0x80
    5360:	03db      	lsls	r3, r3, #15
    5362:	433b      	orrs	r3, r7
    5364:	025b      	lsls	r3, r3, #9
    5366:	0a5b      	lsrs	r3, r3, #9
    5368:	24ff      	movs	r4, #255	; 0xff
    536a:	e7d1      	b.n	5310 <__aeabi_fsub+0xb0>
    536c:	1a21      	subs	r1, r4, r0
    536e:	2900      	cmp	r1, #0
    5370:	dd4c      	ble.n	540c <__aeabi_fsub+0x1ac>
    5372:	2800      	cmp	r0, #0
    5374:	d02a      	beq.n	53cc <__aeabi_fsub+0x16c>
    5376:	2cff      	cmp	r4, #255	; 0xff
    5378:	d0b8      	beq.n	52ec <__aeabi_fsub+0x8c>
    537a:	2080      	movs	r0, #128	; 0x80
    537c:	04c0      	lsls	r0, r0, #19
    537e:	4306      	orrs	r6, r0
    5380:	291b      	cmp	r1, #27
    5382:	dd00      	ble.n	5386 <__aeabi_fsub+0x126>
    5384:	e0af      	b.n	54e6 <__aeabi_fsub+0x286>
    5386:	0030      	movs	r0, r6
    5388:	2720      	movs	r7, #32
    538a:	40c8      	lsrs	r0, r1
    538c:	1a79      	subs	r1, r7, r1
    538e:	408e      	lsls	r6, r1
    5390:	1e71      	subs	r1, r6, #1
    5392:	418e      	sbcs	r6, r1
    5394:	4306      	orrs	r6, r0
    5396:	199b      	adds	r3, r3, r6
    5398:	0159      	lsls	r1, r3, #5
    539a:	d5d6      	bpl.n	534a <__aeabi_fsub+0xea>
    539c:	3401      	adds	r4, #1
    539e:	2cff      	cmp	r4, #255	; 0xff
    53a0:	d100      	bne.n	53a4 <__aeabi_fsub+0x144>
    53a2:	e085      	b.n	54b0 <__aeabi_fsub+0x250>
    53a4:	2201      	movs	r2, #1
    53a6:	497a      	ldr	r1, [pc, #488]	; (5590 <__aeabi_fsub+0x330>)
    53a8:	401a      	ands	r2, r3
    53aa:	085b      	lsrs	r3, r3, #1
    53ac:	400b      	ands	r3, r1
    53ae:	4313      	orrs	r3, r2
    53b0:	e79c      	b.n	52ec <__aeabi_fsub+0x8c>
    53b2:	2e00      	cmp	r6, #0
    53b4:	d000      	beq.n	53b8 <__aeabi_fsub+0x158>
    53b6:	e770      	b.n	529a <__aeabi_fsub+0x3a>
    53b8:	e76b      	b.n	5292 <__aeabi_fsub+0x32>
    53ba:	1e3b      	subs	r3, r7, #0
    53bc:	d1c5      	bne.n	534a <__aeabi_fsub+0xea>
    53be:	2200      	movs	r2, #0
    53c0:	027b      	lsls	r3, r7, #9
    53c2:	0a5b      	lsrs	r3, r3, #9
    53c4:	b2e4      	uxtb	r4, r4
    53c6:	e7a3      	b.n	5310 <__aeabi_fsub+0xb0>
    53c8:	0014      	movs	r4, r2
    53ca:	e78f      	b.n	52ec <__aeabi_fsub+0x8c>
    53cc:	2e00      	cmp	r6, #0
    53ce:	d04d      	beq.n	546c <__aeabi_fsub+0x20c>
    53d0:	1e48      	subs	r0, r1, #1
    53d2:	2800      	cmp	r0, #0
    53d4:	d157      	bne.n	5486 <__aeabi_fsub+0x226>
    53d6:	199b      	adds	r3, r3, r6
    53d8:	2401      	movs	r4, #1
    53da:	015a      	lsls	r2, r3, #5
    53dc:	d5b5      	bpl.n	534a <__aeabi_fsub+0xea>
    53de:	2402      	movs	r4, #2
    53e0:	e7e0      	b.n	53a4 <__aeabi_fsub+0x144>
    53e2:	2a00      	cmp	r2, #0
    53e4:	d125      	bne.n	5432 <__aeabi_fsub+0x1d2>
    53e6:	1c62      	adds	r2, r4, #1
    53e8:	b2d2      	uxtb	r2, r2
    53ea:	2a01      	cmp	r2, #1
    53ec:	dd72      	ble.n	54d4 <__aeabi_fsub+0x274>
    53ee:	1b9f      	subs	r7, r3, r6
    53f0:	017a      	lsls	r2, r7, #5
    53f2:	d535      	bpl.n	5460 <__aeabi_fsub+0x200>
    53f4:	1af7      	subs	r7, r6, r3
    53f6:	000d      	movs	r5, r1
    53f8:	e764      	b.n	52c4 <__aeabi_fsub+0x64>
    53fa:	2201      	movs	r2, #1
    53fc:	2300      	movs	r3, #0
    53fe:	402a      	ands	r2, r5
    5400:	e786      	b.n	5310 <__aeabi_fsub+0xb0>
    5402:	003b      	movs	r3, r7
    5404:	4a63      	ldr	r2, [pc, #396]	; (5594 <__aeabi_fsub+0x334>)
    5406:	1a24      	subs	r4, r4, r0
    5408:	4013      	ands	r3, r2
    540a:	e76f      	b.n	52ec <__aeabi_fsub+0x8c>
    540c:	2900      	cmp	r1, #0
    540e:	d16c      	bne.n	54ea <__aeabi_fsub+0x28a>
    5410:	1c61      	adds	r1, r4, #1
    5412:	b2c8      	uxtb	r0, r1
    5414:	2801      	cmp	r0, #1
    5416:	dd4e      	ble.n	54b6 <__aeabi_fsub+0x256>
    5418:	29ff      	cmp	r1, #255	; 0xff
    541a:	d049      	beq.n	54b0 <__aeabi_fsub+0x250>
    541c:	199b      	adds	r3, r3, r6
    541e:	085b      	lsrs	r3, r3, #1
    5420:	000c      	movs	r4, r1
    5422:	e763      	b.n	52ec <__aeabi_fsub+0x8c>
    5424:	2aff      	cmp	r2, #255	; 0xff
    5426:	d041      	beq.n	54ac <__aeabi_fsub+0x24c>
    5428:	000a      	movs	r2, r1
    542a:	e781      	b.n	5330 <__aeabi_fsub+0xd0>
    542c:	2601      	movs	r6, #1
    542e:	1b9b      	subs	r3, r3, r6
    5430:	e789      	b.n	5346 <__aeabi_fsub+0xe6>
    5432:	2c00      	cmp	r4, #0
    5434:	d01c      	beq.n	5470 <__aeabi_fsub+0x210>
    5436:	28ff      	cmp	r0, #255	; 0xff
    5438:	d021      	beq.n	547e <__aeabi_fsub+0x21e>
    543a:	2480      	movs	r4, #128	; 0x80
    543c:	04e4      	lsls	r4, r4, #19
    543e:	4252      	negs	r2, r2
    5440:	4323      	orrs	r3, r4
    5442:	2a1b      	cmp	r2, #27
    5444:	dd00      	ble.n	5448 <__aeabi_fsub+0x1e8>
    5446:	e096      	b.n	5576 <__aeabi_fsub+0x316>
    5448:	001c      	movs	r4, r3
    544a:	2520      	movs	r5, #32
    544c:	40d4      	lsrs	r4, r2
    544e:	1aaa      	subs	r2, r5, r2
    5450:	4093      	lsls	r3, r2
    5452:	1e5a      	subs	r2, r3, #1
    5454:	4193      	sbcs	r3, r2
    5456:	4323      	orrs	r3, r4
    5458:	1af3      	subs	r3, r6, r3
    545a:	0004      	movs	r4, r0
    545c:	000d      	movs	r5, r1
    545e:	e72d      	b.n	52bc <__aeabi_fsub+0x5c>
    5460:	2f00      	cmp	r7, #0
    5462:	d000      	beq.n	5466 <__aeabi_fsub+0x206>
    5464:	e72e      	b.n	52c4 <__aeabi_fsub+0x64>
    5466:	2200      	movs	r2, #0
    5468:	2400      	movs	r4, #0
    546a:	e7a9      	b.n	53c0 <__aeabi_fsub+0x160>
    546c:	000c      	movs	r4, r1
    546e:	e73d      	b.n	52ec <__aeabi_fsub+0x8c>
    5470:	2b00      	cmp	r3, #0
    5472:	d058      	beq.n	5526 <__aeabi_fsub+0x2c6>
    5474:	43d2      	mvns	r2, r2
    5476:	2a00      	cmp	r2, #0
    5478:	d0ee      	beq.n	5458 <__aeabi_fsub+0x1f8>
    547a:	28ff      	cmp	r0, #255	; 0xff
    547c:	d1e1      	bne.n	5442 <__aeabi_fsub+0x1e2>
    547e:	0033      	movs	r3, r6
    5480:	24ff      	movs	r4, #255	; 0xff
    5482:	000d      	movs	r5, r1
    5484:	e732      	b.n	52ec <__aeabi_fsub+0x8c>
    5486:	29ff      	cmp	r1, #255	; 0xff
    5488:	d010      	beq.n	54ac <__aeabi_fsub+0x24c>
    548a:	0001      	movs	r1, r0
    548c:	e778      	b.n	5380 <__aeabi_fsub+0x120>
    548e:	2b00      	cmp	r3, #0
    5490:	d06e      	beq.n	5570 <__aeabi_fsub+0x310>
    5492:	24ff      	movs	r4, #255	; 0xff
    5494:	2e00      	cmp	r6, #0
    5496:	d100      	bne.n	549a <__aeabi_fsub+0x23a>
    5498:	e728      	b.n	52ec <__aeabi_fsub+0x8c>
    549a:	2280      	movs	r2, #128	; 0x80
    549c:	4651      	mov	r1, sl
    549e:	03d2      	lsls	r2, r2, #15
    54a0:	4211      	tst	r1, r2
    54a2:	d003      	beq.n	54ac <__aeabi_fsub+0x24c>
    54a4:	4661      	mov	r1, ip
    54a6:	4211      	tst	r1, r2
    54a8:	d100      	bne.n	54ac <__aeabi_fsub+0x24c>
    54aa:	0033      	movs	r3, r6
    54ac:	24ff      	movs	r4, #255	; 0xff
    54ae:	e71d      	b.n	52ec <__aeabi_fsub+0x8c>
    54b0:	24ff      	movs	r4, #255	; 0xff
    54b2:	2300      	movs	r3, #0
    54b4:	e72c      	b.n	5310 <__aeabi_fsub+0xb0>
    54b6:	2c00      	cmp	r4, #0
    54b8:	d1e9      	bne.n	548e <__aeabi_fsub+0x22e>
    54ba:	2b00      	cmp	r3, #0
    54bc:	d063      	beq.n	5586 <__aeabi_fsub+0x326>
    54be:	2e00      	cmp	r6, #0
    54c0:	d100      	bne.n	54c4 <__aeabi_fsub+0x264>
    54c2:	e713      	b.n	52ec <__aeabi_fsub+0x8c>
    54c4:	199b      	adds	r3, r3, r6
    54c6:	015a      	lsls	r2, r3, #5
    54c8:	d400      	bmi.n	54cc <__aeabi_fsub+0x26c>
    54ca:	e73e      	b.n	534a <__aeabi_fsub+0xea>
    54cc:	4a31      	ldr	r2, [pc, #196]	; (5594 <__aeabi_fsub+0x334>)
    54ce:	000c      	movs	r4, r1
    54d0:	4013      	ands	r3, r2
    54d2:	e70b      	b.n	52ec <__aeabi_fsub+0x8c>
    54d4:	2c00      	cmp	r4, #0
    54d6:	d11e      	bne.n	5516 <__aeabi_fsub+0x2b6>
    54d8:	2b00      	cmp	r3, #0
    54da:	d12f      	bne.n	553c <__aeabi_fsub+0x2dc>
    54dc:	2e00      	cmp	r6, #0
    54de:	d04f      	beq.n	5580 <__aeabi_fsub+0x320>
    54e0:	0033      	movs	r3, r6
    54e2:	000d      	movs	r5, r1
    54e4:	e702      	b.n	52ec <__aeabi_fsub+0x8c>
    54e6:	2601      	movs	r6, #1
    54e8:	e755      	b.n	5396 <__aeabi_fsub+0x136>
    54ea:	2c00      	cmp	r4, #0
    54ec:	d11f      	bne.n	552e <__aeabi_fsub+0x2ce>
    54ee:	2b00      	cmp	r3, #0
    54f0:	d043      	beq.n	557a <__aeabi_fsub+0x31a>
    54f2:	43c9      	mvns	r1, r1
    54f4:	2900      	cmp	r1, #0
    54f6:	d00b      	beq.n	5510 <__aeabi_fsub+0x2b0>
    54f8:	28ff      	cmp	r0, #255	; 0xff
    54fa:	d039      	beq.n	5570 <__aeabi_fsub+0x310>
    54fc:	291b      	cmp	r1, #27
    54fe:	dc44      	bgt.n	558a <__aeabi_fsub+0x32a>
    5500:	001c      	movs	r4, r3
    5502:	2720      	movs	r7, #32
    5504:	40cc      	lsrs	r4, r1
    5506:	1a79      	subs	r1, r7, r1
    5508:	408b      	lsls	r3, r1
    550a:	1e59      	subs	r1, r3, #1
    550c:	418b      	sbcs	r3, r1
    550e:	4323      	orrs	r3, r4
    5510:	199b      	adds	r3, r3, r6
    5512:	0004      	movs	r4, r0
    5514:	e740      	b.n	5398 <__aeabi_fsub+0x138>
    5516:	2b00      	cmp	r3, #0
    5518:	d11a      	bne.n	5550 <__aeabi_fsub+0x2f0>
    551a:	2e00      	cmp	r6, #0
    551c:	d124      	bne.n	5568 <__aeabi_fsub+0x308>
    551e:	2780      	movs	r7, #128	; 0x80
    5520:	2200      	movs	r2, #0
    5522:	03ff      	lsls	r7, r7, #15
    5524:	e71b      	b.n	535e <__aeabi_fsub+0xfe>
    5526:	0033      	movs	r3, r6
    5528:	0004      	movs	r4, r0
    552a:	000d      	movs	r5, r1
    552c:	e6de      	b.n	52ec <__aeabi_fsub+0x8c>
    552e:	28ff      	cmp	r0, #255	; 0xff
    5530:	d01e      	beq.n	5570 <__aeabi_fsub+0x310>
    5532:	2480      	movs	r4, #128	; 0x80
    5534:	04e4      	lsls	r4, r4, #19
    5536:	4249      	negs	r1, r1
    5538:	4323      	orrs	r3, r4
    553a:	e7df      	b.n	54fc <__aeabi_fsub+0x29c>
    553c:	2e00      	cmp	r6, #0
    553e:	d100      	bne.n	5542 <__aeabi_fsub+0x2e2>
    5540:	e6d4      	b.n	52ec <__aeabi_fsub+0x8c>
    5542:	1b9f      	subs	r7, r3, r6
    5544:	017a      	lsls	r2, r7, #5
    5546:	d400      	bmi.n	554a <__aeabi_fsub+0x2ea>
    5548:	e737      	b.n	53ba <__aeabi_fsub+0x15a>
    554a:	1af3      	subs	r3, r6, r3
    554c:	000d      	movs	r5, r1
    554e:	e6cd      	b.n	52ec <__aeabi_fsub+0x8c>
    5550:	24ff      	movs	r4, #255	; 0xff
    5552:	2e00      	cmp	r6, #0
    5554:	d100      	bne.n	5558 <__aeabi_fsub+0x2f8>
    5556:	e6c9      	b.n	52ec <__aeabi_fsub+0x8c>
    5558:	2280      	movs	r2, #128	; 0x80
    555a:	4650      	mov	r0, sl
    555c:	03d2      	lsls	r2, r2, #15
    555e:	4210      	tst	r0, r2
    5560:	d0a4      	beq.n	54ac <__aeabi_fsub+0x24c>
    5562:	4660      	mov	r0, ip
    5564:	4210      	tst	r0, r2
    5566:	d1a1      	bne.n	54ac <__aeabi_fsub+0x24c>
    5568:	0033      	movs	r3, r6
    556a:	000d      	movs	r5, r1
    556c:	24ff      	movs	r4, #255	; 0xff
    556e:	e6bd      	b.n	52ec <__aeabi_fsub+0x8c>
    5570:	0033      	movs	r3, r6
    5572:	24ff      	movs	r4, #255	; 0xff
    5574:	e6ba      	b.n	52ec <__aeabi_fsub+0x8c>
    5576:	2301      	movs	r3, #1
    5578:	e76e      	b.n	5458 <__aeabi_fsub+0x1f8>
    557a:	0033      	movs	r3, r6
    557c:	0004      	movs	r4, r0
    557e:	e6b5      	b.n	52ec <__aeabi_fsub+0x8c>
    5580:	2700      	movs	r7, #0
    5582:	2200      	movs	r2, #0
    5584:	e71c      	b.n	53c0 <__aeabi_fsub+0x160>
    5586:	0033      	movs	r3, r6
    5588:	e6b0      	b.n	52ec <__aeabi_fsub+0x8c>
    558a:	2301      	movs	r3, #1
    558c:	e7c0      	b.n	5510 <__aeabi_fsub+0x2b0>
    558e:	46c0      	nop			; (mov r8, r8)
    5590:	7dffffff 	.word	0x7dffffff
    5594:	fbffffff 	.word	0xfbffffff

00005598 <__aeabi_f2iz>:
    5598:	0241      	lsls	r1, r0, #9
    559a:	0043      	lsls	r3, r0, #1
    559c:	0fc2      	lsrs	r2, r0, #31
    559e:	0a49      	lsrs	r1, r1, #9
    55a0:	0e1b      	lsrs	r3, r3, #24
    55a2:	2000      	movs	r0, #0
    55a4:	2b7e      	cmp	r3, #126	; 0x7e
    55a6:	dd0d      	ble.n	55c4 <__aeabi_f2iz+0x2c>
    55a8:	2b9d      	cmp	r3, #157	; 0x9d
    55aa:	dc0c      	bgt.n	55c6 <__aeabi_f2iz+0x2e>
    55ac:	2080      	movs	r0, #128	; 0x80
    55ae:	0400      	lsls	r0, r0, #16
    55b0:	4301      	orrs	r1, r0
    55b2:	2b95      	cmp	r3, #149	; 0x95
    55b4:	dc0a      	bgt.n	55cc <__aeabi_f2iz+0x34>
    55b6:	2096      	movs	r0, #150	; 0x96
    55b8:	1ac3      	subs	r3, r0, r3
    55ba:	40d9      	lsrs	r1, r3
    55bc:	4248      	negs	r0, r1
    55be:	2a00      	cmp	r2, #0
    55c0:	d100      	bne.n	55c4 <__aeabi_f2iz+0x2c>
    55c2:	0008      	movs	r0, r1
    55c4:	4770      	bx	lr
    55c6:	4b03      	ldr	r3, [pc, #12]	; (55d4 <__aeabi_f2iz+0x3c>)
    55c8:	18d0      	adds	r0, r2, r3
    55ca:	e7fb      	b.n	55c4 <__aeabi_f2iz+0x2c>
    55cc:	3b96      	subs	r3, #150	; 0x96
    55ce:	4099      	lsls	r1, r3
    55d0:	e7f4      	b.n	55bc <__aeabi_f2iz+0x24>
    55d2:	46c0      	nop			; (mov r8, r8)
    55d4:	7fffffff 	.word	0x7fffffff

000055d8 <__aeabi_i2f>:
    55d8:	b570      	push	{r4, r5, r6, lr}
    55da:	2800      	cmp	r0, #0
    55dc:	d030      	beq.n	5640 <__aeabi_i2f+0x68>
    55de:	17c3      	asrs	r3, r0, #31
    55e0:	18c4      	adds	r4, r0, r3
    55e2:	405c      	eors	r4, r3
    55e4:	0fc5      	lsrs	r5, r0, #31
    55e6:	0020      	movs	r0, r4
    55e8:	f001 fd7a 	bl	70e0 <__clzsi2>
    55ec:	239e      	movs	r3, #158	; 0x9e
    55ee:	1a1b      	subs	r3, r3, r0
    55f0:	2b96      	cmp	r3, #150	; 0x96
    55f2:	dc0d      	bgt.n	5610 <__aeabi_i2f+0x38>
    55f4:	2296      	movs	r2, #150	; 0x96
    55f6:	1ad2      	subs	r2, r2, r3
    55f8:	4094      	lsls	r4, r2
    55fa:	002a      	movs	r2, r5
    55fc:	0264      	lsls	r4, r4, #9
    55fe:	0a64      	lsrs	r4, r4, #9
    5600:	b2db      	uxtb	r3, r3
    5602:	0264      	lsls	r4, r4, #9
    5604:	05db      	lsls	r3, r3, #23
    5606:	0a60      	lsrs	r0, r4, #9
    5608:	07d2      	lsls	r2, r2, #31
    560a:	4318      	orrs	r0, r3
    560c:	4310      	orrs	r0, r2
    560e:	bd70      	pop	{r4, r5, r6, pc}
    5610:	2b99      	cmp	r3, #153	; 0x99
    5612:	dc19      	bgt.n	5648 <__aeabi_i2f+0x70>
    5614:	2299      	movs	r2, #153	; 0x99
    5616:	1ad2      	subs	r2, r2, r3
    5618:	2a00      	cmp	r2, #0
    561a:	dd29      	ble.n	5670 <__aeabi_i2f+0x98>
    561c:	4094      	lsls	r4, r2
    561e:	0022      	movs	r2, r4
    5620:	4c14      	ldr	r4, [pc, #80]	; (5674 <__aeabi_i2f+0x9c>)
    5622:	4014      	ands	r4, r2
    5624:	0751      	lsls	r1, r2, #29
    5626:	d004      	beq.n	5632 <__aeabi_i2f+0x5a>
    5628:	210f      	movs	r1, #15
    562a:	400a      	ands	r2, r1
    562c:	2a04      	cmp	r2, #4
    562e:	d000      	beq.n	5632 <__aeabi_i2f+0x5a>
    5630:	3404      	adds	r4, #4
    5632:	0162      	lsls	r2, r4, #5
    5634:	d413      	bmi.n	565e <__aeabi_i2f+0x86>
    5636:	01a4      	lsls	r4, r4, #6
    5638:	0a64      	lsrs	r4, r4, #9
    563a:	b2db      	uxtb	r3, r3
    563c:	002a      	movs	r2, r5
    563e:	e7e0      	b.n	5602 <__aeabi_i2f+0x2a>
    5640:	2200      	movs	r2, #0
    5642:	2300      	movs	r3, #0
    5644:	2400      	movs	r4, #0
    5646:	e7dc      	b.n	5602 <__aeabi_i2f+0x2a>
    5648:	2205      	movs	r2, #5
    564a:	0021      	movs	r1, r4
    564c:	1a12      	subs	r2, r2, r0
    564e:	40d1      	lsrs	r1, r2
    5650:	22b9      	movs	r2, #185	; 0xb9
    5652:	1ad2      	subs	r2, r2, r3
    5654:	4094      	lsls	r4, r2
    5656:	1e62      	subs	r2, r4, #1
    5658:	4194      	sbcs	r4, r2
    565a:	430c      	orrs	r4, r1
    565c:	e7da      	b.n	5614 <__aeabi_i2f+0x3c>
    565e:	4b05      	ldr	r3, [pc, #20]	; (5674 <__aeabi_i2f+0x9c>)
    5660:	002a      	movs	r2, r5
    5662:	401c      	ands	r4, r3
    5664:	239f      	movs	r3, #159	; 0x9f
    5666:	01a4      	lsls	r4, r4, #6
    5668:	1a1b      	subs	r3, r3, r0
    566a:	0a64      	lsrs	r4, r4, #9
    566c:	b2db      	uxtb	r3, r3
    566e:	e7c8      	b.n	5602 <__aeabi_i2f+0x2a>
    5670:	0022      	movs	r2, r4
    5672:	e7d5      	b.n	5620 <__aeabi_i2f+0x48>
    5674:	fbffffff 	.word	0xfbffffff

00005678 <__aeabi_ui2f>:
    5678:	b510      	push	{r4, lr}
    567a:	1e04      	subs	r4, r0, #0
    567c:	d027      	beq.n	56ce <__aeabi_ui2f+0x56>
    567e:	f001 fd2f 	bl	70e0 <__clzsi2>
    5682:	239e      	movs	r3, #158	; 0x9e
    5684:	1a1b      	subs	r3, r3, r0
    5686:	2b96      	cmp	r3, #150	; 0x96
    5688:	dc0a      	bgt.n	56a0 <__aeabi_ui2f+0x28>
    568a:	2296      	movs	r2, #150	; 0x96
    568c:	1ad2      	subs	r2, r2, r3
    568e:	4094      	lsls	r4, r2
    5690:	0264      	lsls	r4, r4, #9
    5692:	0a64      	lsrs	r4, r4, #9
    5694:	b2db      	uxtb	r3, r3
    5696:	0264      	lsls	r4, r4, #9
    5698:	05db      	lsls	r3, r3, #23
    569a:	0a60      	lsrs	r0, r4, #9
    569c:	4318      	orrs	r0, r3
    569e:	bd10      	pop	{r4, pc}
    56a0:	2b99      	cmp	r3, #153	; 0x99
    56a2:	dc17      	bgt.n	56d4 <__aeabi_ui2f+0x5c>
    56a4:	2299      	movs	r2, #153	; 0x99
    56a6:	1ad2      	subs	r2, r2, r3
    56a8:	2a00      	cmp	r2, #0
    56aa:	dd27      	ble.n	56fc <__aeabi_ui2f+0x84>
    56ac:	4094      	lsls	r4, r2
    56ae:	0022      	movs	r2, r4
    56b0:	4c13      	ldr	r4, [pc, #76]	; (5700 <__aeabi_ui2f+0x88>)
    56b2:	4014      	ands	r4, r2
    56b4:	0751      	lsls	r1, r2, #29
    56b6:	d004      	beq.n	56c2 <__aeabi_ui2f+0x4a>
    56b8:	210f      	movs	r1, #15
    56ba:	400a      	ands	r2, r1
    56bc:	2a04      	cmp	r2, #4
    56be:	d000      	beq.n	56c2 <__aeabi_ui2f+0x4a>
    56c0:	3404      	adds	r4, #4
    56c2:	0162      	lsls	r2, r4, #5
    56c4:	d412      	bmi.n	56ec <__aeabi_ui2f+0x74>
    56c6:	01a4      	lsls	r4, r4, #6
    56c8:	0a64      	lsrs	r4, r4, #9
    56ca:	b2db      	uxtb	r3, r3
    56cc:	e7e3      	b.n	5696 <__aeabi_ui2f+0x1e>
    56ce:	2300      	movs	r3, #0
    56d0:	2400      	movs	r4, #0
    56d2:	e7e0      	b.n	5696 <__aeabi_ui2f+0x1e>
    56d4:	22b9      	movs	r2, #185	; 0xb9
    56d6:	0021      	movs	r1, r4
    56d8:	1ad2      	subs	r2, r2, r3
    56da:	4091      	lsls	r1, r2
    56dc:	000a      	movs	r2, r1
    56de:	1e51      	subs	r1, r2, #1
    56e0:	418a      	sbcs	r2, r1
    56e2:	2105      	movs	r1, #5
    56e4:	1a09      	subs	r1, r1, r0
    56e6:	40cc      	lsrs	r4, r1
    56e8:	4314      	orrs	r4, r2
    56ea:	e7db      	b.n	56a4 <__aeabi_ui2f+0x2c>
    56ec:	4b04      	ldr	r3, [pc, #16]	; (5700 <__aeabi_ui2f+0x88>)
    56ee:	401c      	ands	r4, r3
    56f0:	239f      	movs	r3, #159	; 0x9f
    56f2:	01a4      	lsls	r4, r4, #6
    56f4:	1a1b      	subs	r3, r3, r0
    56f6:	0a64      	lsrs	r4, r4, #9
    56f8:	b2db      	uxtb	r3, r3
    56fa:	e7cc      	b.n	5696 <__aeabi_ui2f+0x1e>
    56fc:	0022      	movs	r2, r4
    56fe:	e7d7      	b.n	56b0 <__aeabi_ui2f+0x38>
    5700:	fbffffff 	.word	0xfbffffff

00005704 <__aeabi_dadd>:
    5704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5706:	4645      	mov	r5, r8
    5708:	46de      	mov	lr, fp
    570a:	4657      	mov	r7, sl
    570c:	464e      	mov	r6, r9
    570e:	030c      	lsls	r4, r1, #12
    5710:	b5e0      	push	{r5, r6, r7, lr}
    5712:	004e      	lsls	r6, r1, #1
    5714:	0fc9      	lsrs	r1, r1, #31
    5716:	4688      	mov	r8, r1
    5718:	000d      	movs	r5, r1
    571a:	0a61      	lsrs	r1, r4, #9
    571c:	0f44      	lsrs	r4, r0, #29
    571e:	430c      	orrs	r4, r1
    5720:	00c7      	lsls	r7, r0, #3
    5722:	0319      	lsls	r1, r3, #12
    5724:	0058      	lsls	r0, r3, #1
    5726:	0fdb      	lsrs	r3, r3, #31
    5728:	469b      	mov	fp, r3
    572a:	0a4b      	lsrs	r3, r1, #9
    572c:	0f51      	lsrs	r1, r2, #29
    572e:	430b      	orrs	r3, r1
    5730:	0d76      	lsrs	r6, r6, #21
    5732:	0d40      	lsrs	r0, r0, #21
    5734:	0019      	movs	r1, r3
    5736:	00d2      	lsls	r2, r2, #3
    5738:	45d8      	cmp	r8, fp
    573a:	d100      	bne.n	573e <__aeabi_dadd+0x3a>
    573c:	e0ae      	b.n	589c <__aeabi_dadd+0x198>
    573e:	1a35      	subs	r5, r6, r0
    5740:	2d00      	cmp	r5, #0
    5742:	dc00      	bgt.n	5746 <__aeabi_dadd+0x42>
    5744:	e0f6      	b.n	5934 <__aeabi_dadd+0x230>
    5746:	2800      	cmp	r0, #0
    5748:	d10f      	bne.n	576a <__aeabi_dadd+0x66>
    574a:	4313      	orrs	r3, r2
    574c:	d100      	bne.n	5750 <__aeabi_dadd+0x4c>
    574e:	e0db      	b.n	5908 <__aeabi_dadd+0x204>
    5750:	1e6b      	subs	r3, r5, #1
    5752:	2b00      	cmp	r3, #0
    5754:	d000      	beq.n	5758 <__aeabi_dadd+0x54>
    5756:	e137      	b.n	59c8 <__aeabi_dadd+0x2c4>
    5758:	1aba      	subs	r2, r7, r2
    575a:	4297      	cmp	r7, r2
    575c:	41bf      	sbcs	r7, r7
    575e:	1a64      	subs	r4, r4, r1
    5760:	427f      	negs	r7, r7
    5762:	1be4      	subs	r4, r4, r7
    5764:	2601      	movs	r6, #1
    5766:	0017      	movs	r7, r2
    5768:	e024      	b.n	57b4 <__aeabi_dadd+0xb0>
    576a:	4bc6      	ldr	r3, [pc, #792]	; (5a84 <__aeabi_dadd+0x380>)
    576c:	429e      	cmp	r6, r3
    576e:	d04d      	beq.n	580c <__aeabi_dadd+0x108>
    5770:	2380      	movs	r3, #128	; 0x80
    5772:	041b      	lsls	r3, r3, #16
    5774:	4319      	orrs	r1, r3
    5776:	2d38      	cmp	r5, #56	; 0x38
    5778:	dd00      	ble.n	577c <__aeabi_dadd+0x78>
    577a:	e107      	b.n	598c <__aeabi_dadd+0x288>
    577c:	2d1f      	cmp	r5, #31
    577e:	dd00      	ble.n	5782 <__aeabi_dadd+0x7e>
    5780:	e138      	b.n	59f4 <__aeabi_dadd+0x2f0>
    5782:	2020      	movs	r0, #32
    5784:	1b43      	subs	r3, r0, r5
    5786:	469a      	mov	sl, r3
    5788:	000b      	movs	r3, r1
    578a:	4650      	mov	r0, sl
    578c:	4083      	lsls	r3, r0
    578e:	4699      	mov	r9, r3
    5790:	0013      	movs	r3, r2
    5792:	4648      	mov	r0, r9
    5794:	40eb      	lsrs	r3, r5
    5796:	4318      	orrs	r0, r3
    5798:	0003      	movs	r3, r0
    579a:	4650      	mov	r0, sl
    579c:	4082      	lsls	r2, r0
    579e:	1e50      	subs	r0, r2, #1
    57a0:	4182      	sbcs	r2, r0
    57a2:	40e9      	lsrs	r1, r5
    57a4:	431a      	orrs	r2, r3
    57a6:	1aba      	subs	r2, r7, r2
    57a8:	1a61      	subs	r1, r4, r1
    57aa:	4297      	cmp	r7, r2
    57ac:	41a4      	sbcs	r4, r4
    57ae:	0017      	movs	r7, r2
    57b0:	4264      	negs	r4, r4
    57b2:	1b0c      	subs	r4, r1, r4
    57b4:	0223      	lsls	r3, r4, #8
    57b6:	d562      	bpl.n	587e <__aeabi_dadd+0x17a>
    57b8:	0264      	lsls	r4, r4, #9
    57ba:	0a65      	lsrs	r5, r4, #9
    57bc:	2d00      	cmp	r5, #0
    57be:	d100      	bne.n	57c2 <__aeabi_dadd+0xbe>
    57c0:	e0df      	b.n	5982 <__aeabi_dadd+0x27e>
    57c2:	0028      	movs	r0, r5
    57c4:	f001 fc8c 	bl	70e0 <__clzsi2>
    57c8:	0003      	movs	r3, r0
    57ca:	3b08      	subs	r3, #8
    57cc:	2b1f      	cmp	r3, #31
    57ce:	dd00      	ble.n	57d2 <__aeabi_dadd+0xce>
    57d0:	e0d2      	b.n	5978 <__aeabi_dadd+0x274>
    57d2:	2220      	movs	r2, #32
    57d4:	003c      	movs	r4, r7
    57d6:	1ad2      	subs	r2, r2, r3
    57d8:	409d      	lsls	r5, r3
    57da:	40d4      	lsrs	r4, r2
    57dc:	409f      	lsls	r7, r3
    57de:	4325      	orrs	r5, r4
    57e0:	429e      	cmp	r6, r3
    57e2:	dd00      	ble.n	57e6 <__aeabi_dadd+0xe2>
    57e4:	e0c4      	b.n	5970 <__aeabi_dadd+0x26c>
    57e6:	1b9e      	subs	r6, r3, r6
    57e8:	1c73      	adds	r3, r6, #1
    57ea:	2b1f      	cmp	r3, #31
    57ec:	dd00      	ble.n	57f0 <__aeabi_dadd+0xec>
    57ee:	e0f1      	b.n	59d4 <__aeabi_dadd+0x2d0>
    57f0:	2220      	movs	r2, #32
    57f2:	0038      	movs	r0, r7
    57f4:	0029      	movs	r1, r5
    57f6:	1ad2      	subs	r2, r2, r3
    57f8:	40d8      	lsrs	r0, r3
    57fa:	4091      	lsls	r1, r2
    57fc:	4097      	lsls	r7, r2
    57fe:	002c      	movs	r4, r5
    5800:	4301      	orrs	r1, r0
    5802:	1e78      	subs	r0, r7, #1
    5804:	4187      	sbcs	r7, r0
    5806:	40dc      	lsrs	r4, r3
    5808:	2600      	movs	r6, #0
    580a:	430f      	orrs	r7, r1
    580c:	077b      	lsls	r3, r7, #29
    580e:	d009      	beq.n	5824 <__aeabi_dadd+0x120>
    5810:	230f      	movs	r3, #15
    5812:	403b      	ands	r3, r7
    5814:	2b04      	cmp	r3, #4
    5816:	d005      	beq.n	5824 <__aeabi_dadd+0x120>
    5818:	1d3b      	adds	r3, r7, #4
    581a:	42bb      	cmp	r3, r7
    581c:	41bf      	sbcs	r7, r7
    581e:	427f      	negs	r7, r7
    5820:	19e4      	adds	r4, r4, r7
    5822:	001f      	movs	r7, r3
    5824:	0223      	lsls	r3, r4, #8
    5826:	d52c      	bpl.n	5882 <__aeabi_dadd+0x17e>
    5828:	4b96      	ldr	r3, [pc, #600]	; (5a84 <__aeabi_dadd+0x380>)
    582a:	3601      	adds	r6, #1
    582c:	429e      	cmp	r6, r3
    582e:	d100      	bne.n	5832 <__aeabi_dadd+0x12e>
    5830:	e09a      	b.n	5968 <__aeabi_dadd+0x264>
    5832:	4645      	mov	r5, r8
    5834:	4b94      	ldr	r3, [pc, #592]	; (5a88 <__aeabi_dadd+0x384>)
    5836:	08ff      	lsrs	r7, r7, #3
    5838:	401c      	ands	r4, r3
    583a:	0760      	lsls	r0, r4, #29
    583c:	0576      	lsls	r6, r6, #21
    583e:	0264      	lsls	r4, r4, #9
    5840:	4307      	orrs	r7, r0
    5842:	0b24      	lsrs	r4, r4, #12
    5844:	0d76      	lsrs	r6, r6, #21
    5846:	2100      	movs	r1, #0
    5848:	0324      	lsls	r4, r4, #12
    584a:	0b23      	lsrs	r3, r4, #12
    584c:	0d0c      	lsrs	r4, r1, #20
    584e:	4a8f      	ldr	r2, [pc, #572]	; (5a8c <__aeabi_dadd+0x388>)
    5850:	0524      	lsls	r4, r4, #20
    5852:	431c      	orrs	r4, r3
    5854:	4014      	ands	r4, r2
    5856:	0533      	lsls	r3, r6, #20
    5858:	4323      	orrs	r3, r4
    585a:	005b      	lsls	r3, r3, #1
    585c:	07ed      	lsls	r5, r5, #31
    585e:	085b      	lsrs	r3, r3, #1
    5860:	432b      	orrs	r3, r5
    5862:	0038      	movs	r0, r7
    5864:	0019      	movs	r1, r3
    5866:	bc3c      	pop	{r2, r3, r4, r5}
    5868:	4690      	mov	r8, r2
    586a:	4699      	mov	r9, r3
    586c:	46a2      	mov	sl, r4
    586e:	46ab      	mov	fp, r5
    5870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5872:	4664      	mov	r4, ip
    5874:	4304      	orrs	r4, r0
    5876:	d100      	bne.n	587a <__aeabi_dadd+0x176>
    5878:	e211      	b.n	5c9e <__aeabi_dadd+0x59a>
    587a:	0004      	movs	r4, r0
    587c:	4667      	mov	r7, ip
    587e:	077b      	lsls	r3, r7, #29
    5880:	d1c6      	bne.n	5810 <__aeabi_dadd+0x10c>
    5882:	4645      	mov	r5, r8
    5884:	0760      	lsls	r0, r4, #29
    5886:	08ff      	lsrs	r7, r7, #3
    5888:	4307      	orrs	r7, r0
    588a:	08e4      	lsrs	r4, r4, #3
    588c:	4b7d      	ldr	r3, [pc, #500]	; (5a84 <__aeabi_dadd+0x380>)
    588e:	429e      	cmp	r6, r3
    5890:	d030      	beq.n	58f4 <__aeabi_dadd+0x1f0>
    5892:	0324      	lsls	r4, r4, #12
    5894:	0576      	lsls	r6, r6, #21
    5896:	0b24      	lsrs	r4, r4, #12
    5898:	0d76      	lsrs	r6, r6, #21
    589a:	e7d4      	b.n	5846 <__aeabi_dadd+0x142>
    589c:	1a33      	subs	r3, r6, r0
    589e:	469a      	mov	sl, r3
    58a0:	2b00      	cmp	r3, #0
    58a2:	dd78      	ble.n	5996 <__aeabi_dadd+0x292>
    58a4:	2800      	cmp	r0, #0
    58a6:	d031      	beq.n	590c <__aeabi_dadd+0x208>
    58a8:	4876      	ldr	r0, [pc, #472]	; (5a84 <__aeabi_dadd+0x380>)
    58aa:	4286      	cmp	r6, r0
    58ac:	d0ae      	beq.n	580c <__aeabi_dadd+0x108>
    58ae:	2080      	movs	r0, #128	; 0x80
    58b0:	0400      	lsls	r0, r0, #16
    58b2:	4301      	orrs	r1, r0
    58b4:	4653      	mov	r3, sl
    58b6:	2b38      	cmp	r3, #56	; 0x38
    58b8:	dc00      	bgt.n	58bc <__aeabi_dadd+0x1b8>
    58ba:	e0e9      	b.n	5a90 <__aeabi_dadd+0x38c>
    58bc:	430a      	orrs	r2, r1
    58be:	1e51      	subs	r1, r2, #1
    58c0:	418a      	sbcs	r2, r1
    58c2:	2100      	movs	r1, #0
    58c4:	19d2      	adds	r2, r2, r7
    58c6:	42ba      	cmp	r2, r7
    58c8:	41bf      	sbcs	r7, r7
    58ca:	1909      	adds	r1, r1, r4
    58cc:	427c      	negs	r4, r7
    58ce:	0017      	movs	r7, r2
    58d0:	190c      	adds	r4, r1, r4
    58d2:	0223      	lsls	r3, r4, #8
    58d4:	d5d3      	bpl.n	587e <__aeabi_dadd+0x17a>
    58d6:	4b6b      	ldr	r3, [pc, #428]	; (5a84 <__aeabi_dadd+0x380>)
    58d8:	3601      	adds	r6, #1
    58da:	429e      	cmp	r6, r3
    58dc:	d100      	bne.n	58e0 <__aeabi_dadd+0x1dc>
    58de:	e13a      	b.n	5b56 <__aeabi_dadd+0x452>
    58e0:	2001      	movs	r0, #1
    58e2:	4b69      	ldr	r3, [pc, #420]	; (5a88 <__aeabi_dadd+0x384>)
    58e4:	401c      	ands	r4, r3
    58e6:	087b      	lsrs	r3, r7, #1
    58e8:	4007      	ands	r7, r0
    58ea:	431f      	orrs	r7, r3
    58ec:	07e0      	lsls	r0, r4, #31
    58ee:	4307      	orrs	r7, r0
    58f0:	0864      	lsrs	r4, r4, #1
    58f2:	e78b      	b.n	580c <__aeabi_dadd+0x108>
    58f4:	0023      	movs	r3, r4
    58f6:	433b      	orrs	r3, r7
    58f8:	d100      	bne.n	58fc <__aeabi_dadd+0x1f8>
    58fa:	e1cb      	b.n	5c94 <__aeabi_dadd+0x590>
    58fc:	2280      	movs	r2, #128	; 0x80
    58fe:	0312      	lsls	r2, r2, #12
    5900:	4314      	orrs	r4, r2
    5902:	0324      	lsls	r4, r4, #12
    5904:	0b24      	lsrs	r4, r4, #12
    5906:	e79e      	b.n	5846 <__aeabi_dadd+0x142>
    5908:	002e      	movs	r6, r5
    590a:	e77f      	b.n	580c <__aeabi_dadd+0x108>
    590c:	0008      	movs	r0, r1
    590e:	4310      	orrs	r0, r2
    5910:	d100      	bne.n	5914 <__aeabi_dadd+0x210>
    5912:	e0b4      	b.n	5a7e <__aeabi_dadd+0x37a>
    5914:	1e58      	subs	r0, r3, #1
    5916:	2800      	cmp	r0, #0
    5918:	d000      	beq.n	591c <__aeabi_dadd+0x218>
    591a:	e0de      	b.n	5ada <__aeabi_dadd+0x3d6>
    591c:	18ba      	adds	r2, r7, r2
    591e:	42ba      	cmp	r2, r7
    5920:	419b      	sbcs	r3, r3
    5922:	1864      	adds	r4, r4, r1
    5924:	425b      	negs	r3, r3
    5926:	18e4      	adds	r4, r4, r3
    5928:	0017      	movs	r7, r2
    592a:	2601      	movs	r6, #1
    592c:	0223      	lsls	r3, r4, #8
    592e:	d5a6      	bpl.n	587e <__aeabi_dadd+0x17a>
    5930:	2602      	movs	r6, #2
    5932:	e7d5      	b.n	58e0 <__aeabi_dadd+0x1dc>
    5934:	2d00      	cmp	r5, #0
    5936:	d16e      	bne.n	5a16 <__aeabi_dadd+0x312>
    5938:	1c70      	adds	r0, r6, #1
    593a:	0540      	lsls	r0, r0, #21
    593c:	0d40      	lsrs	r0, r0, #21
    593e:	2801      	cmp	r0, #1
    5940:	dc00      	bgt.n	5944 <__aeabi_dadd+0x240>
    5942:	e0f9      	b.n	5b38 <__aeabi_dadd+0x434>
    5944:	1ab8      	subs	r0, r7, r2
    5946:	4684      	mov	ip, r0
    5948:	4287      	cmp	r7, r0
    594a:	4180      	sbcs	r0, r0
    594c:	1ae5      	subs	r5, r4, r3
    594e:	4240      	negs	r0, r0
    5950:	1a2d      	subs	r5, r5, r0
    5952:	0228      	lsls	r0, r5, #8
    5954:	d400      	bmi.n	5958 <__aeabi_dadd+0x254>
    5956:	e089      	b.n	5a6c <__aeabi_dadd+0x368>
    5958:	1bd7      	subs	r7, r2, r7
    595a:	42ba      	cmp	r2, r7
    595c:	4192      	sbcs	r2, r2
    595e:	1b1c      	subs	r4, r3, r4
    5960:	4252      	negs	r2, r2
    5962:	1aa5      	subs	r5, r4, r2
    5964:	46d8      	mov	r8, fp
    5966:	e729      	b.n	57bc <__aeabi_dadd+0xb8>
    5968:	4645      	mov	r5, r8
    596a:	2400      	movs	r4, #0
    596c:	2700      	movs	r7, #0
    596e:	e76a      	b.n	5846 <__aeabi_dadd+0x142>
    5970:	4c45      	ldr	r4, [pc, #276]	; (5a88 <__aeabi_dadd+0x384>)
    5972:	1af6      	subs	r6, r6, r3
    5974:	402c      	ands	r4, r5
    5976:	e749      	b.n	580c <__aeabi_dadd+0x108>
    5978:	003d      	movs	r5, r7
    597a:	3828      	subs	r0, #40	; 0x28
    597c:	4085      	lsls	r5, r0
    597e:	2700      	movs	r7, #0
    5980:	e72e      	b.n	57e0 <__aeabi_dadd+0xdc>
    5982:	0038      	movs	r0, r7
    5984:	f001 fbac 	bl	70e0 <__clzsi2>
    5988:	3020      	adds	r0, #32
    598a:	e71d      	b.n	57c8 <__aeabi_dadd+0xc4>
    598c:	430a      	orrs	r2, r1
    598e:	1e51      	subs	r1, r2, #1
    5990:	418a      	sbcs	r2, r1
    5992:	2100      	movs	r1, #0
    5994:	e707      	b.n	57a6 <__aeabi_dadd+0xa2>
    5996:	2b00      	cmp	r3, #0
    5998:	d000      	beq.n	599c <__aeabi_dadd+0x298>
    599a:	e0f3      	b.n	5b84 <__aeabi_dadd+0x480>
    599c:	1c70      	adds	r0, r6, #1
    599e:	0543      	lsls	r3, r0, #21
    59a0:	0d5b      	lsrs	r3, r3, #21
    59a2:	2b01      	cmp	r3, #1
    59a4:	dc00      	bgt.n	59a8 <__aeabi_dadd+0x2a4>
    59a6:	e0ad      	b.n	5b04 <__aeabi_dadd+0x400>
    59a8:	4b36      	ldr	r3, [pc, #216]	; (5a84 <__aeabi_dadd+0x380>)
    59aa:	4298      	cmp	r0, r3
    59ac:	d100      	bne.n	59b0 <__aeabi_dadd+0x2ac>
    59ae:	e0d1      	b.n	5b54 <__aeabi_dadd+0x450>
    59b0:	18ba      	adds	r2, r7, r2
    59b2:	42ba      	cmp	r2, r7
    59b4:	41bf      	sbcs	r7, r7
    59b6:	1864      	adds	r4, r4, r1
    59b8:	427f      	negs	r7, r7
    59ba:	19e4      	adds	r4, r4, r7
    59bc:	07e7      	lsls	r7, r4, #31
    59be:	0852      	lsrs	r2, r2, #1
    59c0:	4317      	orrs	r7, r2
    59c2:	0864      	lsrs	r4, r4, #1
    59c4:	0006      	movs	r6, r0
    59c6:	e721      	b.n	580c <__aeabi_dadd+0x108>
    59c8:	482e      	ldr	r0, [pc, #184]	; (5a84 <__aeabi_dadd+0x380>)
    59ca:	4285      	cmp	r5, r0
    59cc:	d100      	bne.n	59d0 <__aeabi_dadd+0x2cc>
    59ce:	e093      	b.n	5af8 <__aeabi_dadd+0x3f4>
    59d0:	001d      	movs	r5, r3
    59d2:	e6d0      	b.n	5776 <__aeabi_dadd+0x72>
    59d4:	0029      	movs	r1, r5
    59d6:	3e1f      	subs	r6, #31
    59d8:	40f1      	lsrs	r1, r6
    59da:	2b20      	cmp	r3, #32
    59dc:	d100      	bne.n	59e0 <__aeabi_dadd+0x2dc>
    59de:	e08d      	b.n	5afc <__aeabi_dadd+0x3f8>
    59e0:	2240      	movs	r2, #64	; 0x40
    59e2:	1ad3      	subs	r3, r2, r3
    59e4:	409d      	lsls	r5, r3
    59e6:	432f      	orrs	r7, r5
    59e8:	1e7d      	subs	r5, r7, #1
    59ea:	41af      	sbcs	r7, r5
    59ec:	2400      	movs	r4, #0
    59ee:	430f      	orrs	r7, r1
    59f0:	2600      	movs	r6, #0
    59f2:	e744      	b.n	587e <__aeabi_dadd+0x17a>
    59f4:	002b      	movs	r3, r5
    59f6:	0008      	movs	r0, r1
    59f8:	3b20      	subs	r3, #32
    59fa:	40d8      	lsrs	r0, r3
    59fc:	0003      	movs	r3, r0
    59fe:	2d20      	cmp	r5, #32
    5a00:	d100      	bne.n	5a04 <__aeabi_dadd+0x300>
    5a02:	e07d      	b.n	5b00 <__aeabi_dadd+0x3fc>
    5a04:	2040      	movs	r0, #64	; 0x40
    5a06:	1b45      	subs	r5, r0, r5
    5a08:	40a9      	lsls	r1, r5
    5a0a:	430a      	orrs	r2, r1
    5a0c:	1e51      	subs	r1, r2, #1
    5a0e:	418a      	sbcs	r2, r1
    5a10:	2100      	movs	r1, #0
    5a12:	431a      	orrs	r2, r3
    5a14:	e6c7      	b.n	57a6 <__aeabi_dadd+0xa2>
    5a16:	2e00      	cmp	r6, #0
    5a18:	d050      	beq.n	5abc <__aeabi_dadd+0x3b8>
    5a1a:	4e1a      	ldr	r6, [pc, #104]	; (5a84 <__aeabi_dadd+0x380>)
    5a1c:	42b0      	cmp	r0, r6
    5a1e:	d057      	beq.n	5ad0 <__aeabi_dadd+0x3cc>
    5a20:	2680      	movs	r6, #128	; 0x80
    5a22:	426b      	negs	r3, r5
    5a24:	4699      	mov	r9, r3
    5a26:	0436      	lsls	r6, r6, #16
    5a28:	4334      	orrs	r4, r6
    5a2a:	464b      	mov	r3, r9
    5a2c:	2b38      	cmp	r3, #56	; 0x38
    5a2e:	dd00      	ble.n	5a32 <__aeabi_dadd+0x32e>
    5a30:	e0d6      	b.n	5be0 <__aeabi_dadd+0x4dc>
    5a32:	2b1f      	cmp	r3, #31
    5a34:	dd00      	ble.n	5a38 <__aeabi_dadd+0x334>
    5a36:	e135      	b.n	5ca4 <__aeabi_dadd+0x5a0>
    5a38:	2620      	movs	r6, #32
    5a3a:	1af5      	subs	r5, r6, r3
    5a3c:	0026      	movs	r6, r4
    5a3e:	40ae      	lsls	r6, r5
    5a40:	46b2      	mov	sl, r6
    5a42:	003e      	movs	r6, r7
    5a44:	40de      	lsrs	r6, r3
    5a46:	46ac      	mov	ip, r5
    5a48:	0035      	movs	r5, r6
    5a4a:	4656      	mov	r6, sl
    5a4c:	432e      	orrs	r6, r5
    5a4e:	4665      	mov	r5, ip
    5a50:	40af      	lsls	r7, r5
    5a52:	1e7d      	subs	r5, r7, #1
    5a54:	41af      	sbcs	r7, r5
    5a56:	40dc      	lsrs	r4, r3
    5a58:	4337      	orrs	r7, r6
    5a5a:	1bd7      	subs	r7, r2, r7
    5a5c:	42ba      	cmp	r2, r7
    5a5e:	4192      	sbcs	r2, r2
    5a60:	1b0c      	subs	r4, r1, r4
    5a62:	4252      	negs	r2, r2
    5a64:	1aa4      	subs	r4, r4, r2
    5a66:	0006      	movs	r6, r0
    5a68:	46d8      	mov	r8, fp
    5a6a:	e6a3      	b.n	57b4 <__aeabi_dadd+0xb0>
    5a6c:	4664      	mov	r4, ip
    5a6e:	4667      	mov	r7, ip
    5a70:	432c      	orrs	r4, r5
    5a72:	d000      	beq.n	5a76 <__aeabi_dadd+0x372>
    5a74:	e6a2      	b.n	57bc <__aeabi_dadd+0xb8>
    5a76:	2500      	movs	r5, #0
    5a78:	2600      	movs	r6, #0
    5a7a:	2700      	movs	r7, #0
    5a7c:	e706      	b.n	588c <__aeabi_dadd+0x188>
    5a7e:	001e      	movs	r6, r3
    5a80:	e6c4      	b.n	580c <__aeabi_dadd+0x108>
    5a82:	46c0      	nop			; (mov r8, r8)
    5a84:	000007ff 	.word	0x000007ff
    5a88:	ff7fffff 	.word	0xff7fffff
    5a8c:	800fffff 	.word	0x800fffff
    5a90:	2b1f      	cmp	r3, #31
    5a92:	dc63      	bgt.n	5b5c <__aeabi_dadd+0x458>
    5a94:	2020      	movs	r0, #32
    5a96:	1ac3      	subs	r3, r0, r3
    5a98:	0008      	movs	r0, r1
    5a9a:	4098      	lsls	r0, r3
    5a9c:	469c      	mov	ip, r3
    5a9e:	4683      	mov	fp, r0
    5aa0:	4653      	mov	r3, sl
    5aa2:	0010      	movs	r0, r2
    5aa4:	40d8      	lsrs	r0, r3
    5aa6:	0003      	movs	r3, r0
    5aa8:	4658      	mov	r0, fp
    5aaa:	4318      	orrs	r0, r3
    5aac:	4663      	mov	r3, ip
    5aae:	409a      	lsls	r2, r3
    5ab0:	1e53      	subs	r3, r2, #1
    5ab2:	419a      	sbcs	r2, r3
    5ab4:	4653      	mov	r3, sl
    5ab6:	4302      	orrs	r2, r0
    5ab8:	40d9      	lsrs	r1, r3
    5aba:	e703      	b.n	58c4 <__aeabi_dadd+0x1c0>
    5abc:	0026      	movs	r6, r4
    5abe:	433e      	orrs	r6, r7
    5ac0:	d006      	beq.n	5ad0 <__aeabi_dadd+0x3cc>
    5ac2:	43eb      	mvns	r3, r5
    5ac4:	4699      	mov	r9, r3
    5ac6:	2b00      	cmp	r3, #0
    5ac8:	d0c7      	beq.n	5a5a <__aeabi_dadd+0x356>
    5aca:	4e94      	ldr	r6, [pc, #592]	; (5d1c <__aeabi_dadd+0x618>)
    5acc:	42b0      	cmp	r0, r6
    5ace:	d1ac      	bne.n	5a2a <__aeabi_dadd+0x326>
    5ad0:	000c      	movs	r4, r1
    5ad2:	0017      	movs	r7, r2
    5ad4:	0006      	movs	r6, r0
    5ad6:	46d8      	mov	r8, fp
    5ad8:	e698      	b.n	580c <__aeabi_dadd+0x108>
    5ada:	4b90      	ldr	r3, [pc, #576]	; (5d1c <__aeabi_dadd+0x618>)
    5adc:	459a      	cmp	sl, r3
    5ade:	d00b      	beq.n	5af8 <__aeabi_dadd+0x3f4>
    5ae0:	4682      	mov	sl, r0
    5ae2:	e6e7      	b.n	58b4 <__aeabi_dadd+0x1b0>
    5ae4:	2800      	cmp	r0, #0
    5ae6:	d000      	beq.n	5aea <__aeabi_dadd+0x3e6>
    5ae8:	e09e      	b.n	5c28 <__aeabi_dadd+0x524>
    5aea:	0018      	movs	r0, r3
    5aec:	4310      	orrs	r0, r2
    5aee:	d100      	bne.n	5af2 <__aeabi_dadd+0x3ee>
    5af0:	e0e9      	b.n	5cc6 <__aeabi_dadd+0x5c2>
    5af2:	001c      	movs	r4, r3
    5af4:	0017      	movs	r7, r2
    5af6:	46d8      	mov	r8, fp
    5af8:	4e88      	ldr	r6, [pc, #544]	; (5d1c <__aeabi_dadd+0x618>)
    5afa:	e687      	b.n	580c <__aeabi_dadd+0x108>
    5afc:	2500      	movs	r5, #0
    5afe:	e772      	b.n	59e6 <__aeabi_dadd+0x2e2>
    5b00:	2100      	movs	r1, #0
    5b02:	e782      	b.n	5a0a <__aeabi_dadd+0x306>
    5b04:	0023      	movs	r3, r4
    5b06:	433b      	orrs	r3, r7
    5b08:	2e00      	cmp	r6, #0
    5b0a:	d000      	beq.n	5b0e <__aeabi_dadd+0x40a>
    5b0c:	e0ab      	b.n	5c66 <__aeabi_dadd+0x562>
    5b0e:	2b00      	cmp	r3, #0
    5b10:	d100      	bne.n	5b14 <__aeabi_dadd+0x410>
    5b12:	e0e7      	b.n	5ce4 <__aeabi_dadd+0x5e0>
    5b14:	000b      	movs	r3, r1
    5b16:	4313      	orrs	r3, r2
    5b18:	d100      	bne.n	5b1c <__aeabi_dadd+0x418>
    5b1a:	e677      	b.n	580c <__aeabi_dadd+0x108>
    5b1c:	18ba      	adds	r2, r7, r2
    5b1e:	42ba      	cmp	r2, r7
    5b20:	41bf      	sbcs	r7, r7
    5b22:	1864      	adds	r4, r4, r1
    5b24:	427f      	negs	r7, r7
    5b26:	19e4      	adds	r4, r4, r7
    5b28:	0223      	lsls	r3, r4, #8
    5b2a:	d400      	bmi.n	5b2e <__aeabi_dadd+0x42a>
    5b2c:	e0f2      	b.n	5d14 <__aeabi_dadd+0x610>
    5b2e:	4b7c      	ldr	r3, [pc, #496]	; (5d20 <__aeabi_dadd+0x61c>)
    5b30:	0017      	movs	r7, r2
    5b32:	401c      	ands	r4, r3
    5b34:	0006      	movs	r6, r0
    5b36:	e669      	b.n	580c <__aeabi_dadd+0x108>
    5b38:	0020      	movs	r0, r4
    5b3a:	4338      	orrs	r0, r7
    5b3c:	2e00      	cmp	r6, #0
    5b3e:	d1d1      	bne.n	5ae4 <__aeabi_dadd+0x3e0>
    5b40:	2800      	cmp	r0, #0
    5b42:	d15b      	bne.n	5bfc <__aeabi_dadd+0x4f8>
    5b44:	001c      	movs	r4, r3
    5b46:	4314      	orrs	r4, r2
    5b48:	d100      	bne.n	5b4c <__aeabi_dadd+0x448>
    5b4a:	e0a8      	b.n	5c9e <__aeabi_dadd+0x59a>
    5b4c:	001c      	movs	r4, r3
    5b4e:	0017      	movs	r7, r2
    5b50:	46d8      	mov	r8, fp
    5b52:	e65b      	b.n	580c <__aeabi_dadd+0x108>
    5b54:	0006      	movs	r6, r0
    5b56:	2400      	movs	r4, #0
    5b58:	2700      	movs	r7, #0
    5b5a:	e697      	b.n	588c <__aeabi_dadd+0x188>
    5b5c:	4650      	mov	r0, sl
    5b5e:	000b      	movs	r3, r1
    5b60:	3820      	subs	r0, #32
    5b62:	40c3      	lsrs	r3, r0
    5b64:	4699      	mov	r9, r3
    5b66:	4653      	mov	r3, sl
    5b68:	2b20      	cmp	r3, #32
    5b6a:	d100      	bne.n	5b6e <__aeabi_dadd+0x46a>
    5b6c:	e095      	b.n	5c9a <__aeabi_dadd+0x596>
    5b6e:	2340      	movs	r3, #64	; 0x40
    5b70:	4650      	mov	r0, sl
    5b72:	1a1b      	subs	r3, r3, r0
    5b74:	4099      	lsls	r1, r3
    5b76:	430a      	orrs	r2, r1
    5b78:	1e51      	subs	r1, r2, #1
    5b7a:	418a      	sbcs	r2, r1
    5b7c:	464b      	mov	r3, r9
    5b7e:	2100      	movs	r1, #0
    5b80:	431a      	orrs	r2, r3
    5b82:	e69f      	b.n	58c4 <__aeabi_dadd+0x1c0>
    5b84:	2e00      	cmp	r6, #0
    5b86:	d130      	bne.n	5bea <__aeabi_dadd+0x4e6>
    5b88:	0026      	movs	r6, r4
    5b8a:	433e      	orrs	r6, r7
    5b8c:	d067      	beq.n	5c5e <__aeabi_dadd+0x55a>
    5b8e:	43db      	mvns	r3, r3
    5b90:	469a      	mov	sl, r3
    5b92:	2b00      	cmp	r3, #0
    5b94:	d01c      	beq.n	5bd0 <__aeabi_dadd+0x4cc>
    5b96:	4e61      	ldr	r6, [pc, #388]	; (5d1c <__aeabi_dadd+0x618>)
    5b98:	42b0      	cmp	r0, r6
    5b9a:	d060      	beq.n	5c5e <__aeabi_dadd+0x55a>
    5b9c:	4653      	mov	r3, sl
    5b9e:	2b38      	cmp	r3, #56	; 0x38
    5ba0:	dd00      	ble.n	5ba4 <__aeabi_dadd+0x4a0>
    5ba2:	e096      	b.n	5cd2 <__aeabi_dadd+0x5ce>
    5ba4:	2b1f      	cmp	r3, #31
    5ba6:	dd00      	ble.n	5baa <__aeabi_dadd+0x4a6>
    5ba8:	e09f      	b.n	5cea <__aeabi_dadd+0x5e6>
    5baa:	2620      	movs	r6, #32
    5bac:	1af3      	subs	r3, r6, r3
    5bae:	0026      	movs	r6, r4
    5bb0:	409e      	lsls	r6, r3
    5bb2:	469c      	mov	ip, r3
    5bb4:	46b3      	mov	fp, r6
    5bb6:	4653      	mov	r3, sl
    5bb8:	003e      	movs	r6, r7
    5bba:	40de      	lsrs	r6, r3
    5bbc:	0033      	movs	r3, r6
    5bbe:	465e      	mov	r6, fp
    5bc0:	431e      	orrs	r6, r3
    5bc2:	4663      	mov	r3, ip
    5bc4:	409f      	lsls	r7, r3
    5bc6:	1e7b      	subs	r3, r7, #1
    5bc8:	419f      	sbcs	r7, r3
    5bca:	4653      	mov	r3, sl
    5bcc:	40dc      	lsrs	r4, r3
    5bce:	4337      	orrs	r7, r6
    5bd0:	18bf      	adds	r7, r7, r2
    5bd2:	4297      	cmp	r7, r2
    5bd4:	4192      	sbcs	r2, r2
    5bd6:	1864      	adds	r4, r4, r1
    5bd8:	4252      	negs	r2, r2
    5bda:	18a4      	adds	r4, r4, r2
    5bdc:	0006      	movs	r6, r0
    5bde:	e678      	b.n	58d2 <__aeabi_dadd+0x1ce>
    5be0:	4327      	orrs	r7, r4
    5be2:	1e7c      	subs	r4, r7, #1
    5be4:	41a7      	sbcs	r7, r4
    5be6:	2400      	movs	r4, #0
    5be8:	e737      	b.n	5a5a <__aeabi_dadd+0x356>
    5bea:	4e4c      	ldr	r6, [pc, #304]	; (5d1c <__aeabi_dadd+0x618>)
    5bec:	42b0      	cmp	r0, r6
    5bee:	d036      	beq.n	5c5e <__aeabi_dadd+0x55a>
    5bf0:	2680      	movs	r6, #128	; 0x80
    5bf2:	425b      	negs	r3, r3
    5bf4:	0436      	lsls	r6, r6, #16
    5bf6:	469a      	mov	sl, r3
    5bf8:	4334      	orrs	r4, r6
    5bfa:	e7cf      	b.n	5b9c <__aeabi_dadd+0x498>
    5bfc:	0018      	movs	r0, r3
    5bfe:	4310      	orrs	r0, r2
    5c00:	d100      	bne.n	5c04 <__aeabi_dadd+0x500>
    5c02:	e603      	b.n	580c <__aeabi_dadd+0x108>
    5c04:	1ab8      	subs	r0, r7, r2
    5c06:	4684      	mov	ip, r0
    5c08:	4567      	cmp	r7, ip
    5c0a:	41ad      	sbcs	r5, r5
    5c0c:	1ae0      	subs	r0, r4, r3
    5c0e:	426d      	negs	r5, r5
    5c10:	1b40      	subs	r0, r0, r5
    5c12:	0205      	lsls	r5, r0, #8
    5c14:	d400      	bmi.n	5c18 <__aeabi_dadd+0x514>
    5c16:	e62c      	b.n	5872 <__aeabi_dadd+0x16e>
    5c18:	1bd7      	subs	r7, r2, r7
    5c1a:	42ba      	cmp	r2, r7
    5c1c:	4192      	sbcs	r2, r2
    5c1e:	1b1c      	subs	r4, r3, r4
    5c20:	4252      	negs	r2, r2
    5c22:	1aa4      	subs	r4, r4, r2
    5c24:	46d8      	mov	r8, fp
    5c26:	e5f1      	b.n	580c <__aeabi_dadd+0x108>
    5c28:	0018      	movs	r0, r3
    5c2a:	4310      	orrs	r0, r2
    5c2c:	d100      	bne.n	5c30 <__aeabi_dadd+0x52c>
    5c2e:	e763      	b.n	5af8 <__aeabi_dadd+0x3f4>
    5c30:	08f8      	lsrs	r0, r7, #3
    5c32:	0767      	lsls	r7, r4, #29
    5c34:	4307      	orrs	r7, r0
    5c36:	2080      	movs	r0, #128	; 0x80
    5c38:	08e4      	lsrs	r4, r4, #3
    5c3a:	0300      	lsls	r0, r0, #12
    5c3c:	4204      	tst	r4, r0
    5c3e:	d008      	beq.n	5c52 <__aeabi_dadd+0x54e>
    5c40:	08dd      	lsrs	r5, r3, #3
    5c42:	4205      	tst	r5, r0
    5c44:	d105      	bne.n	5c52 <__aeabi_dadd+0x54e>
    5c46:	08d2      	lsrs	r2, r2, #3
    5c48:	0759      	lsls	r1, r3, #29
    5c4a:	4311      	orrs	r1, r2
    5c4c:	000f      	movs	r7, r1
    5c4e:	002c      	movs	r4, r5
    5c50:	46d8      	mov	r8, fp
    5c52:	0f7b      	lsrs	r3, r7, #29
    5c54:	00e4      	lsls	r4, r4, #3
    5c56:	431c      	orrs	r4, r3
    5c58:	00ff      	lsls	r7, r7, #3
    5c5a:	4e30      	ldr	r6, [pc, #192]	; (5d1c <__aeabi_dadd+0x618>)
    5c5c:	e5d6      	b.n	580c <__aeabi_dadd+0x108>
    5c5e:	000c      	movs	r4, r1
    5c60:	0017      	movs	r7, r2
    5c62:	0006      	movs	r6, r0
    5c64:	e5d2      	b.n	580c <__aeabi_dadd+0x108>
    5c66:	2b00      	cmp	r3, #0
    5c68:	d038      	beq.n	5cdc <__aeabi_dadd+0x5d8>
    5c6a:	000b      	movs	r3, r1
    5c6c:	4313      	orrs	r3, r2
    5c6e:	d100      	bne.n	5c72 <__aeabi_dadd+0x56e>
    5c70:	e742      	b.n	5af8 <__aeabi_dadd+0x3f4>
    5c72:	08f8      	lsrs	r0, r7, #3
    5c74:	0767      	lsls	r7, r4, #29
    5c76:	4307      	orrs	r7, r0
    5c78:	2080      	movs	r0, #128	; 0x80
    5c7a:	08e4      	lsrs	r4, r4, #3
    5c7c:	0300      	lsls	r0, r0, #12
    5c7e:	4204      	tst	r4, r0
    5c80:	d0e7      	beq.n	5c52 <__aeabi_dadd+0x54e>
    5c82:	08cb      	lsrs	r3, r1, #3
    5c84:	4203      	tst	r3, r0
    5c86:	d1e4      	bne.n	5c52 <__aeabi_dadd+0x54e>
    5c88:	08d2      	lsrs	r2, r2, #3
    5c8a:	0749      	lsls	r1, r1, #29
    5c8c:	4311      	orrs	r1, r2
    5c8e:	000f      	movs	r7, r1
    5c90:	001c      	movs	r4, r3
    5c92:	e7de      	b.n	5c52 <__aeabi_dadd+0x54e>
    5c94:	2700      	movs	r7, #0
    5c96:	2400      	movs	r4, #0
    5c98:	e5d5      	b.n	5846 <__aeabi_dadd+0x142>
    5c9a:	2100      	movs	r1, #0
    5c9c:	e76b      	b.n	5b76 <__aeabi_dadd+0x472>
    5c9e:	2500      	movs	r5, #0
    5ca0:	2700      	movs	r7, #0
    5ca2:	e5f3      	b.n	588c <__aeabi_dadd+0x188>
    5ca4:	464e      	mov	r6, r9
    5ca6:	0025      	movs	r5, r4
    5ca8:	3e20      	subs	r6, #32
    5caa:	40f5      	lsrs	r5, r6
    5cac:	464b      	mov	r3, r9
    5cae:	002e      	movs	r6, r5
    5cb0:	2b20      	cmp	r3, #32
    5cb2:	d02d      	beq.n	5d10 <__aeabi_dadd+0x60c>
    5cb4:	2540      	movs	r5, #64	; 0x40
    5cb6:	1aed      	subs	r5, r5, r3
    5cb8:	40ac      	lsls	r4, r5
    5cba:	4327      	orrs	r7, r4
    5cbc:	1e7c      	subs	r4, r7, #1
    5cbe:	41a7      	sbcs	r7, r4
    5cc0:	2400      	movs	r4, #0
    5cc2:	4337      	orrs	r7, r6
    5cc4:	e6c9      	b.n	5a5a <__aeabi_dadd+0x356>
    5cc6:	2480      	movs	r4, #128	; 0x80
    5cc8:	2500      	movs	r5, #0
    5cca:	0324      	lsls	r4, r4, #12
    5ccc:	4e13      	ldr	r6, [pc, #76]	; (5d1c <__aeabi_dadd+0x618>)
    5cce:	2700      	movs	r7, #0
    5cd0:	e5dc      	b.n	588c <__aeabi_dadd+0x188>
    5cd2:	4327      	orrs	r7, r4
    5cd4:	1e7c      	subs	r4, r7, #1
    5cd6:	41a7      	sbcs	r7, r4
    5cd8:	2400      	movs	r4, #0
    5cda:	e779      	b.n	5bd0 <__aeabi_dadd+0x4cc>
    5cdc:	000c      	movs	r4, r1
    5cde:	0017      	movs	r7, r2
    5ce0:	4e0e      	ldr	r6, [pc, #56]	; (5d1c <__aeabi_dadd+0x618>)
    5ce2:	e593      	b.n	580c <__aeabi_dadd+0x108>
    5ce4:	000c      	movs	r4, r1
    5ce6:	0017      	movs	r7, r2
    5ce8:	e590      	b.n	580c <__aeabi_dadd+0x108>
    5cea:	4656      	mov	r6, sl
    5cec:	0023      	movs	r3, r4
    5cee:	3e20      	subs	r6, #32
    5cf0:	40f3      	lsrs	r3, r6
    5cf2:	4699      	mov	r9, r3
    5cf4:	4653      	mov	r3, sl
    5cf6:	2b20      	cmp	r3, #32
    5cf8:	d00e      	beq.n	5d18 <__aeabi_dadd+0x614>
    5cfa:	2340      	movs	r3, #64	; 0x40
    5cfc:	4656      	mov	r6, sl
    5cfe:	1b9b      	subs	r3, r3, r6
    5d00:	409c      	lsls	r4, r3
    5d02:	4327      	orrs	r7, r4
    5d04:	1e7c      	subs	r4, r7, #1
    5d06:	41a7      	sbcs	r7, r4
    5d08:	464b      	mov	r3, r9
    5d0a:	2400      	movs	r4, #0
    5d0c:	431f      	orrs	r7, r3
    5d0e:	e75f      	b.n	5bd0 <__aeabi_dadd+0x4cc>
    5d10:	2400      	movs	r4, #0
    5d12:	e7d2      	b.n	5cba <__aeabi_dadd+0x5b6>
    5d14:	0017      	movs	r7, r2
    5d16:	e5b2      	b.n	587e <__aeabi_dadd+0x17a>
    5d18:	2400      	movs	r4, #0
    5d1a:	e7f2      	b.n	5d02 <__aeabi_dadd+0x5fe>
    5d1c:	000007ff 	.word	0x000007ff
    5d20:	ff7fffff 	.word	0xff7fffff

00005d24 <__aeabi_ddiv>:
    5d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d26:	4657      	mov	r7, sl
    5d28:	4645      	mov	r5, r8
    5d2a:	46de      	mov	lr, fp
    5d2c:	464e      	mov	r6, r9
    5d2e:	b5e0      	push	{r5, r6, r7, lr}
    5d30:	004c      	lsls	r4, r1, #1
    5d32:	030e      	lsls	r6, r1, #12
    5d34:	b087      	sub	sp, #28
    5d36:	4683      	mov	fp, r0
    5d38:	4692      	mov	sl, r2
    5d3a:	001d      	movs	r5, r3
    5d3c:	4680      	mov	r8, r0
    5d3e:	0b36      	lsrs	r6, r6, #12
    5d40:	0d64      	lsrs	r4, r4, #21
    5d42:	0fcf      	lsrs	r7, r1, #31
    5d44:	2c00      	cmp	r4, #0
    5d46:	d04f      	beq.n	5de8 <__aeabi_ddiv+0xc4>
    5d48:	4b6f      	ldr	r3, [pc, #444]	; (5f08 <__aeabi_ddiv+0x1e4>)
    5d4a:	429c      	cmp	r4, r3
    5d4c:	d035      	beq.n	5dba <__aeabi_ddiv+0x96>
    5d4e:	2380      	movs	r3, #128	; 0x80
    5d50:	0f42      	lsrs	r2, r0, #29
    5d52:	041b      	lsls	r3, r3, #16
    5d54:	00f6      	lsls	r6, r6, #3
    5d56:	4313      	orrs	r3, r2
    5d58:	4333      	orrs	r3, r6
    5d5a:	4699      	mov	r9, r3
    5d5c:	00c3      	lsls	r3, r0, #3
    5d5e:	4698      	mov	r8, r3
    5d60:	4b6a      	ldr	r3, [pc, #424]	; (5f0c <__aeabi_ddiv+0x1e8>)
    5d62:	2600      	movs	r6, #0
    5d64:	469c      	mov	ip, r3
    5d66:	2300      	movs	r3, #0
    5d68:	4464      	add	r4, ip
    5d6a:	9303      	str	r3, [sp, #12]
    5d6c:	032b      	lsls	r3, r5, #12
    5d6e:	0b1b      	lsrs	r3, r3, #12
    5d70:	469b      	mov	fp, r3
    5d72:	006b      	lsls	r3, r5, #1
    5d74:	0fed      	lsrs	r5, r5, #31
    5d76:	4650      	mov	r0, sl
    5d78:	0d5b      	lsrs	r3, r3, #21
    5d7a:	9501      	str	r5, [sp, #4]
    5d7c:	d05e      	beq.n	5e3c <__aeabi_ddiv+0x118>
    5d7e:	4a62      	ldr	r2, [pc, #392]	; (5f08 <__aeabi_ddiv+0x1e4>)
    5d80:	4293      	cmp	r3, r2
    5d82:	d053      	beq.n	5e2c <__aeabi_ddiv+0x108>
    5d84:	465a      	mov	r2, fp
    5d86:	00d1      	lsls	r1, r2, #3
    5d88:	2280      	movs	r2, #128	; 0x80
    5d8a:	0f40      	lsrs	r0, r0, #29
    5d8c:	0412      	lsls	r2, r2, #16
    5d8e:	4302      	orrs	r2, r0
    5d90:	430a      	orrs	r2, r1
    5d92:	4693      	mov	fp, r2
    5d94:	4652      	mov	r2, sl
    5d96:	00d1      	lsls	r1, r2, #3
    5d98:	4a5c      	ldr	r2, [pc, #368]	; (5f0c <__aeabi_ddiv+0x1e8>)
    5d9a:	4694      	mov	ip, r2
    5d9c:	2200      	movs	r2, #0
    5d9e:	4463      	add	r3, ip
    5da0:	0038      	movs	r0, r7
    5da2:	4068      	eors	r0, r5
    5da4:	4684      	mov	ip, r0
    5da6:	9002      	str	r0, [sp, #8]
    5da8:	1ae4      	subs	r4, r4, r3
    5daa:	4316      	orrs	r6, r2
    5dac:	2e0f      	cmp	r6, #15
    5dae:	d900      	bls.n	5db2 <__aeabi_ddiv+0x8e>
    5db0:	e0b4      	b.n	5f1c <__aeabi_ddiv+0x1f8>
    5db2:	4b57      	ldr	r3, [pc, #348]	; (5f10 <__aeabi_ddiv+0x1ec>)
    5db4:	00b6      	lsls	r6, r6, #2
    5db6:	599b      	ldr	r3, [r3, r6]
    5db8:	469f      	mov	pc, r3
    5dba:	0003      	movs	r3, r0
    5dbc:	4333      	orrs	r3, r6
    5dbe:	4699      	mov	r9, r3
    5dc0:	d16c      	bne.n	5e9c <__aeabi_ddiv+0x178>
    5dc2:	2300      	movs	r3, #0
    5dc4:	4698      	mov	r8, r3
    5dc6:	3302      	adds	r3, #2
    5dc8:	2608      	movs	r6, #8
    5dca:	9303      	str	r3, [sp, #12]
    5dcc:	e7ce      	b.n	5d6c <__aeabi_ddiv+0x48>
    5dce:	46cb      	mov	fp, r9
    5dd0:	4641      	mov	r1, r8
    5dd2:	9a03      	ldr	r2, [sp, #12]
    5dd4:	9701      	str	r7, [sp, #4]
    5dd6:	2a02      	cmp	r2, #2
    5dd8:	d165      	bne.n	5ea6 <__aeabi_ddiv+0x182>
    5dda:	9b01      	ldr	r3, [sp, #4]
    5ddc:	4c4a      	ldr	r4, [pc, #296]	; (5f08 <__aeabi_ddiv+0x1e4>)
    5dde:	469c      	mov	ip, r3
    5de0:	2300      	movs	r3, #0
    5de2:	2200      	movs	r2, #0
    5de4:	4698      	mov	r8, r3
    5de6:	e06b      	b.n	5ec0 <__aeabi_ddiv+0x19c>
    5de8:	0003      	movs	r3, r0
    5dea:	4333      	orrs	r3, r6
    5dec:	4699      	mov	r9, r3
    5dee:	d04e      	beq.n	5e8e <__aeabi_ddiv+0x16a>
    5df0:	2e00      	cmp	r6, #0
    5df2:	d100      	bne.n	5df6 <__aeabi_ddiv+0xd2>
    5df4:	e1bc      	b.n	6170 <__aeabi_ddiv+0x44c>
    5df6:	0030      	movs	r0, r6
    5df8:	f001 f972 	bl	70e0 <__clzsi2>
    5dfc:	0003      	movs	r3, r0
    5dfe:	3b0b      	subs	r3, #11
    5e00:	2b1c      	cmp	r3, #28
    5e02:	dd00      	ble.n	5e06 <__aeabi_ddiv+0xe2>
    5e04:	e1ac      	b.n	6160 <__aeabi_ddiv+0x43c>
    5e06:	221d      	movs	r2, #29
    5e08:	1ad3      	subs	r3, r2, r3
    5e0a:	465a      	mov	r2, fp
    5e0c:	0001      	movs	r1, r0
    5e0e:	40da      	lsrs	r2, r3
    5e10:	3908      	subs	r1, #8
    5e12:	408e      	lsls	r6, r1
    5e14:	0013      	movs	r3, r2
    5e16:	4333      	orrs	r3, r6
    5e18:	4699      	mov	r9, r3
    5e1a:	465b      	mov	r3, fp
    5e1c:	408b      	lsls	r3, r1
    5e1e:	4698      	mov	r8, r3
    5e20:	2300      	movs	r3, #0
    5e22:	4c3c      	ldr	r4, [pc, #240]	; (5f14 <__aeabi_ddiv+0x1f0>)
    5e24:	2600      	movs	r6, #0
    5e26:	1a24      	subs	r4, r4, r0
    5e28:	9303      	str	r3, [sp, #12]
    5e2a:	e79f      	b.n	5d6c <__aeabi_ddiv+0x48>
    5e2c:	4651      	mov	r1, sl
    5e2e:	465a      	mov	r2, fp
    5e30:	4311      	orrs	r1, r2
    5e32:	d129      	bne.n	5e88 <__aeabi_ddiv+0x164>
    5e34:	2200      	movs	r2, #0
    5e36:	4693      	mov	fp, r2
    5e38:	3202      	adds	r2, #2
    5e3a:	e7b1      	b.n	5da0 <__aeabi_ddiv+0x7c>
    5e3c:	4659      	mov	r1, fp
    5e3e:	4301      	orrs	r1, r0
    5e40:	d01e      	beq.n	5e80 <__aeabi_ddiv+0x15c>
    5e42:	465b      	mov	r3, fp
    5e44:	2b00      	cmp	r3, #0
    5e46:	d100      	bne.n	5e4a <__aeabi_ddiv+0x126>
    5e48:	e19e      	b.n	6188 <__aeabi_ddiv+0x464>
    5e4a:	4658      	mov	r0, fp
    5e4c:	f001 f948 	bl	70e0 <__clzsi2>
    5e50:	0003      	movs	r3, r0
    5e52:	3b0b      	subs	r3, #11
    5e54:	2b1c      	cmp	r3, #28
    5e56:	dd00      	ble.n	5e5a <__aeabi_ddiv+0x136>
    5e58:	e18f      	b.n	617a <__aeabi_ddiv+0x456>
    5e5a:	0002      	movs	r2, r0
    5e5c:	4659      	mov	r1, fp
    5e5e:	3a08      	subs	r2, #8
    5e60:	4091      	lsls	r1, r2
    5e62:	468b      	mov	fp, r1
    5e64:	211d      	movs	r1, #29
    5e66:	1acb      	subs	r3, r1, r3
    5e68:	4651      	mov	r1, sl
    5e6a:	40d9      	lsrs	r1, r3
    5e6c:	000b      	movs	r3, r1
    5e6e:	4659      	mov	r1, fp
    5e70:	430b      	orrs	r3, r1
    5e72:	4651      	mov	r1, sl
    5e74:	469b      	mov	fp, r3
    5e76:	4091      	lsls	r1, r2
    5e78:	4b26      	ldr	r3, [pc, #152]	; (5f14 <__aeabi_ddiv+0x1f0>)
    5e7a:	2200      	movs	r2, #0
    5e7c:	1a1b      	subs	r3, r3, r0
    5e7e:	e78f      	b.n	5da0 <__aeabi_ddiv+0x7c>
    5e80:	2300      	movs	r3, #0
    5e82:	2201      	movs	r2, #1
    5e84:	469b      	mov	fp, r3
    5e86:	e78b      	b.n	5da0 <__aeabi_ddiv+0x7c>
    5e88:	4651      	mov	r1, sl
    5e8a:	2203      	movs	r2, #3
    5e8c:	e788      	b.n	5da0 <__aeabi_ddiv+0x7c>
    5e8e:	2300      	movs	r3, #0
    5e90:	4698      	mov	r8, r3
    5e92:	3301      	adds	r3, #1
    5e94:	2604      	movs	r6, #4
    5e96:	2400      	movs	r4, #0
    5e98:	9303      	str	r3, [sp, #12]
    5e9a:	e767      	b.n	5d6c <__aeabi_ddiv+0x48>
    5e9c:	2303      	movs	r3, #3
    5e9e:	46b1      	mov	r9, r6
    5ea0:	9303      	str	r3, [sp, #12]
    5ea2:	260c      	movs	r6, #12
    5ea4:	e762      	b.n	5d6c <__aeabi_ddiv+0x48>
    5ea6:	2a03      	cmp	r2, #3
    5ea8:	d100      	bne.n	5eac <__aeabi_ddiv+0x188>
    5eaa:	e25c      	b.n	6366 <__aeabi_ddiv+0x642>
    5eac:	9b01      	ldr	r3, [sp, #4]
    5eae:	2a01      	cmp	r2, #1
    5eb0:	d000      	beq.n	5eb4 <__aeabi_ddiv+0x190>
    5eb2:	e1e4      	b.n	627e <__aeabi_ddiv+0x55a>
    5eb4:	4013      	ands	r3, r2
    5eb6:	469c      	mov	ip, r3
    5eb8:	2300      	movs	r3, #0
    5eba:	2400      	movs	r4, #0
    5ebc:	2200      	movs	r2, #0
    5ebe:	4698      	mov	r8, r3
    5ec0:	2100      	movs	r1, #0
    5ec2:	0312      	lsls	r2, r2, #12
    5ec4:	0b13      	lsrs	r3, r2, #12
    5ec6:	0d0a      	lsrs	r2, r1, #20
    5ec8:	0512      	lsls	r2, r2, #20
    5eca:	431a      	orrs	r2, r3
    5ecc:	0523      	lsls	r3, r4, #20
    5ece:	4c12      	ldr	r4, [pc, #72]	; (5f18 <__aeabi_ddiv+0x1f4>)
    5ed0:	4640      	mov	r0, r8
    5ed2:	4022      	ands	r2, r4
    5ed4:	4313      	orrs	r3, r2
    5ed6:	4662      	mov	r2, ip
    5ed8:	005b      	lsls	r3, r3, #1
    5eda:	07d2      	lsls	r2, r2, #31
    5edc:	085b      	lsrs	r3, r3, #1
    5ede:	4313      	orrs	r3, r2
    5ee0:	0019      	movs	r1, r3
    5ee2:	b007      	add	sp, #28
    5ee4:	bc3c      	pop	{r2, r3, r4, r5}
    5ee6:	4690      	mov	r8, r2
    5ee8:	4699      	mov	r9, r3
    5eea:	46a2      	mov	sl, r4
    5eec:	46ab      	mov	fp, r5
    5eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ef0:	2300      	movs	r3, #0
    5ef2:	2280      	movs	r2, #128	; 0x80
    5ef4:	469c      	mov	ip, r3
    5ef6:	0312      	lsls	r2, r2, #12
    5ef8:	4698      	mov	r8, r3
    5efa:	4c03      	ldr	r4, [pc, #12]	; (5f08 <__aeabi_ddiv+0x1e4>)
    5efc:	e7e0      	b.n	5ec0 <__aeabi_ddiv+0x19c>
    5efe:	2300      	movs	r3, #0
    5f00:	4c01      	ldr	r4, [pc, #4]	; (5f08 <__aeabi_ddiv+0x1e4>)
    5f02:	2200      	movs	r2, #0
    5f04:	4698      	mov	r8, r3
    5f06:	e7db      	b.n	5ec0 <__aeabi_ddiv+0x19c>
    5f08:	000007ff 	.word	0x000007ff
    5f0c:	fffffc01 	.word	0xfffffc01
    5f10:	00007e30 	.word	0x00007e30
    5f14:	fffffc0d 	.word	0xfffffc0d
    5f18:	800fffff 	.word	0x800fffff
    5f1c:	45d9      	cmp	r9, fp
    5f1e:	d900      	bls.n	5f22 <__aeabi_ddiv+0x1fe>
    5f20:	e139      	b.n	6196 <__aeabi_ddiv+0x472>
    5f22:	d100      	bne.n	5f26 <__aeabi_ddiv+0x202>
    5f24:	e134      	b.n	6190 <__aeabi_ddiv+0x46c>
    5f26:	2300      	movs	r3, #0
    5f28:	4646      	mov	r6, r8
    5f2a:	464d      	mov	r5, r9
    5f2c:	469a      	mov	sl, r3
    5f2e:	3c01      	subs	r4, #1
    5f30:	465b      	mov	r3, fp
    5f32:	0e0a      	lsrs	r2, r1, #24
    5f34:	021b      	lsls	r3, r3, #8
    5f36:	431a      	orrs	r2, r3
    5f38:	020b      	lsls	r3, r1, #8
    5f3a:	0c17      	lsrs	r7, r2, #16
    5f3c:	9303      	str	r3, [sp, #12]
    5f3e:	0413      	lsls	r3, r2, #16
    5f40:	0c1b      	lsrs	r3, r3, #16
    5f42:	0039      	movs	r1, r7
    5f44:	0028      	movs	r0, r5
    5f46:	4690      	mov	r8, r2
    5f48:	9301      	str	r3, [sp, #4]
    5f4a:	f7fe fdd9 	bl	4b00 <__udivsi3>
    5f4e:	0002      	movs	r2, r0
    5f50:	9b01      	ldr	r3, [sp, #4]
    5f52:	4683      	mov	fp, r0
    5f54:	435a      	muls	r2, r3
    5f56:	0028      	movs	r0, r5
    5f58:	0039      	movs	r1, r7
    5f5a:	4691      	mov	r9, r2
    5f5c:	f7fe fe56 	bl	4c0c <__aeabi_uidivmod>
    5f60:	0c35      	lsrs	r5, r6, #16
    5f62:	0409      	lsls	r1, r1, #16
    5f64:	430d      	orrs	r5, r1
    5f66:	45a9      	cmp	r9, r5
    5f68:	d90d      	bls.n	5f86 <__aeabi_ddiv+0x262>
    5f6a:	465b      	mov	r3, fp
    5f6c:	4445      	add	r5, r8
    5f6e:	3b01      	subs	r3, #1
    5f70:	45a8      	cmp	r8, r5
    5f72:	d900      	bls.n	5f76 <__aeabi_ddiv+0x252>
    5f74:	e13a      	b.n	61ec <__aeabi_ddiv+0x4c8>
    5f76:	45a9      	cmp	r9, r5
    5f78:	d800      	bhi.n	5f7c <__aeabi_ddiv+0x258>
    5f7a:	e137      	b.n	61ec <__aeabi_ddiv+0x4c8>
    5f7c:	2302      	movs	r3, #2
    5f7e:	425b      	negs	r3, r3
    5f80:	469c      	mov	ip, r3
    5f82:	4445      	add	r5, r8
    5f84:	44e3      	add	fp, ip
    5f86:	464b      	mov	r3, r9
    5f88:	1aeb      	subs	r3, r5, r3
    5f8a:	0039      	movs	r1, r7
    5f8c:	0018      	movs	r0, r3
    5f8e:	9304      	str	r3, [sp, #16]
    5f90:	f7fe fdb6 	bl	4b00 <__udivsi3>
    5f94:	9b01      	ldr	r3, [sp, #4]
    5f96:	0005      	movs	r5, r0
    5f98:	4343      	muls	r3, r0
    5f9a:	0039      	movs	r1, r7
    5f9c:	9804      	ldr	r0, [sp, #16]
    5f9e:	4699      	mov	r9, r3
    5fa0:	f7fe fe34 	bl	4c0c <__aeabi_uidivmod>
    5fa4:	0433      	lsls	r3, r6, #16
    5fa6:	0409      	lsls	r1, r1, #16
    5fa8:	0c1b      	lsrs	r3, r3, #16
    5faa:	430b      	orrs	r3, r1
    5fac:	4599      	cmp	r9, r3
    5fae:	d909      	bls.n	5fc4 <__aeabi_ddiv+0x2a0>
    5fb0:	4443      	add	r3, r8
    5fb2:	1e6a      	subs	r2, r5, #1
    5fb4:	4598      	cmp	r8, r3
    5fb6:	d900      	bls.n	5fba <__aeabi_ddiv+0x296>
    5fb8:	e11a      	b.n	61f0 <__aeabi_ddiv+0x4cc>
    5fba:	4599      	cmp	r9, r3
    5fbc:	d800      	bhi.n	5fc0 <__aeabi_ddiv+0x29c>
    5fbe:	e117      	b.n	61f0 <__aeabi_ddiv+0x4cc>
    5fc0:	3d02      	subs	r5, #2
    5fc2:	4443      	add	r3, r8
    5fc4:	464a      	mov	r2, r9
    5fc6:	1a9b      	subs	r3, r3, r2
    5fc8:	465a      	mov	r2, fp
    5fca:	0412      	lsls	r2, r2, #16
    5fcc:	432a      	orrs	r2, r5
    5fce:	9903      	ldr	r1, [sp, #12]
    5fd0:	4693      	mov	fp, r2
    5fd2:	0c10      	lsrs	r0, r2, #16
    5fd4:	0c0a      	lsrs	r2, r1, #16
    5fd6:	4691      	mov	r9, r2
    5fd8:	0409      	lsls	r1, r1, #16
    5fda:	465a      	mov	r2, fp
    5fdc:	0c09      	lsrs	r1, r1, #16
    5fde:	464e      	mov	r6, r9
    5fe0:	000d      	movs	r5, r1
    5fe2:	0412      	lsls	r2, r2, #16
    5fe4:	0c12      	lsrs	r2, r2, #16
    5fe6:	4345      	muls	r5, r0
    5fe8:	9105      	str	r1, [sp, #20]
    5fea:	4351      	muls	r1, r2
    5fec:	4372      	muls	r2, r6
    5fee:	4370      	muls	r0, r6
    5ff0:	1952      	adds	r2, r2, r5
    5ff2:	0c0e      	lsrs	r6, r1, #16
    5ff4:	18b2      	adds	r2, r6, r2
    5ff6:	4295      	cmp	r5, r2
    5ff8:	d903      	bls.n	6002 <__aeabi_ddiv+0x2de>
    5ffa:	2580      	movs	r5, #128	; 0x80
    5ffc:	026d      	lsls	r5, r5, #9
    5ffe:	46ac      	mov	ip, r5
    6000:	4460      	add	r0, ip
    6002:	0c15      	lsrs	r5, r2, #16
    6004:	0409      	lsls	r1, r1, #16
    6006:	0412      	lsls	r2, r2, #16
    6008:	0c09      	lsrs	r1, r1, #16
    600a:	1828      	adds	r0, r5, r0
    600c:	1852      	adds	r2, r2, r1
    600e:	4283      	cmp	r3, r0
    6010:	d200      	bcs.n	6014 <__aeabi_ddiv+0x2f0>
    6012:	e0ce      	b.n	61b2 <__aeabi_ddiv+0x48e>
    6014:	d100      	bne.n	6018 <__aeabi_ddiv+0x2f4>
    6016:	e0c8      	b.n	61aa <__aeabi_ddiv+0x486>
    6018:	1a1d      	subs	r5, r3, r0
    601a:	4653      	mov	r3, sl
    601c:	1a9e      	subs	r6, r3, r2
    601e:	45b2      	cmp	sl, r6
    6020:	4192      	sbcs	r2, r2
    6022:	4252      	negs	r2, r2
    6024:	1aab      	subs	r3, r5, r2
    6026:	469a      	mov	sl, r3
    6028:	4598      	cmp	r8, r3
    602a:	d100      	bne.n	602e <__aeabi_ddiv+0x30a>
    602c:	e117      	b.n	625e <__aeabi_ddiv+0x53a>
    602e:	0039      	movs	r1, r7
    6030:	0018      	movs	r0, r3
    6032:	f7fe fd65 	bl	4b00 <__udivsi3>
    6036:	9b01      	ldr	r3, [sp, #4]
    6038:	0005      	movs	r5, r0
    603a:	4343      	muls	r3, r0
    603c:	0039      	movs	r1, r7
    603e:	4650      	mov	r0, sl
    6040:	9304      	str	r3, [sp, #16]
    6042:	f7fe fde3 	bl	4c0c <__aeabi_uidivmod>
    6046:	9804      	ldr	r0, [sp, #16]
    6048:	040b      	lsls	r3, r1, #16
    604a:	0c31      	lsrs	r1, r6, #16
    604c:	4319      	orrs	r1, r3
    604e:	4288      	cmp	r0, r1
    6050:	d909      	bls.n	6066 <__aeabi_ddiv+0x342>
    6052:	4441      	add	r1, r8
    6054:	1e6b      	subs	r3, r5, #1
    6056:	4588      	cmp	r8, r1
    6058:	d900      	bls.n	605c <__aeabi_ddiv+0x338>
    605a:	e107      	b.n	626c <__aeabi_ddiv+0x548>
    605c:	4288      	cmp	r0, r1
    605e:	d800      	bhi.n	6062 <__aeabi_ddiv+0x33e>
    6060:	e104      	b.n	626c <__aeabi_ddiv+0x548>
    6062:	3d02      	subs	r5, #2
    6064:	4441      	add	r1, r8
    6066:	9b04      	ldr	r3, [sp, #16]
    6068:	1acb      	subs	r3, r1, r3
    606a:	0018      	movs	r0, r3
    606c:	0039      	movs	r1, r7
    606e:	9304      	str	r3, [sp, #16]
    6070:	f7fe fd46 	bl	4b00 <__udivsi3>
    6074:	9b01      	ldr	r3, [sp, #4]
    6076:	4682      	mov	sl, r0
    6078:	4343      	muls	r3, r0
    607a:	0039      	movs	r1, r7
    607c:	9804      	ldr	r0, [sp, #16]
    607e:	9301      	str	r3, [sp, #4]
    6080:	f7fe fdc4 	bl	4c0c <__aeabi_uidivmod>
    6084:	9801      	ldr	r0, [sp, #4]
    6086:	040b      	lsls	r3, r1, #16
    6088:	0431      	lsls	r1, r6, #16
    608a:	0c09      	lsrs	r1, r1, #16
    608c:	4319      	orrs	r1, r3
    608e:	4288      	cmp	r0, r1
    6090:	d90d      	bls.n	60ae <__aeabi_ddiv+0x38a>
    6092:	4653      	mov	r3, sl
    6094:	4441      	add	r1, r8
    6096:	3b01      	subs	r3, #1
    6098:	4588      	cmp	r8, r1
    609a:	d900      	bls.n	609e <__aeabi_ddiv+0x37a>
    609c:	e0e8      	b.n	6270 <__aeabi_ddiv+0x54c>
    609e:	4288      	cmp	r0, r1
    60a0:	d800      	bhi.n	60a4 <__aeabi_ddiv+0x380>
    60a2:	e0e5      	b.n	6270 <__aeabi_ddiv+0x54c>
    60a4:	2302      	movs	r3, #2
    60a6:	425b      	negs	r3, r3
    60a8:	469c      	mov	ip, r3
    60aa:	4441      	add	r1, r8
    60ac:	44e2      	add	sl, ip
    60ae:	9b01      	ldr	r3, [sp, #4]
    60b0:	042d      	lsls	r5, r5, #16
    60b2:	1ace      	subs	r6, r1, r3
    60b4:	4651      	mov	r1, sl
    60b6:	4329      	orrs	r1, r5
    60b8:	9d05      	ldr	r5, [sp, #20]
    60ba:	464f      	mov	r7, r9
    60bc:	002a      	movs	r2, r5
    60be:	040b      	lsls	r3, r1, #16
    60c0:	0c08      	lsrs	r0, r1, #16
    60c2:	0c1b      	lsrs	r3, r3, #16
    60c4:	435a      	muls	r2, r3
    60c6:	4345      	muls	r5, r0
    60c8:	437b      	muls	r3, r7
    60ca:	4378      	muls	r0, r7
    60cc:	195b      	adds	r3, r3, r5
    60ce:	0c17      	lsrs	r7, r2, #16
    60d0:	18fb      	adds	r3, r7, r3
    60d2:	429d      	cmp	r5, r3
    60d4:	d903      	bls.n	60de <__aeabi_ddiv+0x3ba>
    60d6:	2580      	movs	r5, #128	; 0x80
    60d8:	026d      	lsls	r5, r5, #9
    60da:	46ac      	mov	ip, r5
    60dc:	4460      	add	r0, ip
    60de:	0c1d      	lsrs	r5, r3, #16
    60e0:	0412      	lsls	r2, r2, #16
    60e2:	041b      	lsls	r3, r3, #16
    60e4:	0c12      	lsrs	r2, r2, #16
    60e6:	1828      	adds	r0, r5, r0
    60e8:	189b      	adds	r3, r3, r2
    60ea:	4286      	cmp	r6, r0
    60ec:	d200      	bcs.n	60f0 <__aeabi_ddiv+0x3cc>
    60ee:	e093      	b.n	6218 <__aeabi_ddiv+0x4f4>
    60f0:	d100      	bne.n	60f4 <__aeabi_ddiv+0x3d0>
    60f2:	e08e      	b.n	6212 <__aeabi_ddiv+0x4ee>
    60f4:	2301      	movs	r3, #1
    60f6:	4319      	orrs	r1, r3
    60f8:	4ba0      	ldr	r3, [pc, #640]	; (637c <__aeabi_ddiv+0x658>)
    60fa:	18e3      	adds	r3, r4, r3
    60fc:	2b00      	cmp	r3, #0
    60fe:	dc00      	bgt.n	6102 <__aeabi_ddiv+0x3de>
    6100:	e099      	b.n	6236 <__aeabi_ddiv+0x512>
    6102:	074a      	lsls	r2, r1, #29
    6104:	d000      	beq.n	6108 <__aeabi_ddiv+0x3e4>
    6106:	e09e      	b.n	6246 <__aeabi_ddiv+0x522>
    6108:	465a      	mov	r2, fp
    610a:	01d2      	lsls	r2, r2, #7
    610c:	d506      	bpl.n	611c <__aeabi_ddiv+0x3f8>
    610e:	465a      	mov	r2, fp
    6110:	4b9b      	ldr	r3, [pc, #620]	; (6380 <__aeabi_ddiv+0x65c>)
    6112:	401a      	ands	r2, r3
    6114:	2380      	movs	r3, #128	; 0x80
    6116:	4693      	mov	fp, r2
    6118:	00db      	lsls	r3, r3, #3
    611a:	18e3      	adds	r3, r4, r3
    611c:	4a99      	ldr	r2, [pc, #612]	; (6384 <__aeabi_ddiv+0x660>)
    611e:	4293      	cmp	r3, r2
    6120:	dd68      	ble.n	61f4 <__aeabi_ddiv+0x4d0>
    6122:	2301      	movs	r3, #1
    6124:	9a02      	ldr	r2, [sp, #8]
    6126:	4c98      	ldr	r4, [pc, #608]	; (6388 <__aeabi_ddiv+0x664>)
    6128:	401a      	ands	r2, r3
    612a:	2300      	movs	r3, #0
    612c:	4694      	mov	ip, r2
    612e:	4698      	mov	r8, r3
    6130:	2200      	movs	r2, #0
    6132:	e6c5      	b.n	5ec0 <__aeabi_ddiv+0x19c>
    6134:	2280      	movs	r2, #128	; 0x80
    6136:	464b      	mov	r3, r9
    6138:	0312      	lsls	r2, r2, #12
    613a:	4213      	tst	r3, r2
    613c:	d00a      	beq.n	6154 <__aeabi_ddiv+0x430>
    613e:	465b      	mov	r3, fp
    6140:	4213      	tst	r3, r2
    6142:	d106      	bne.n	6152 <__aeabi_ddiv+0x42e>
    6144:	431a      	orrs	r2, r3
    6146:	0312      	lsls	r2, r2, #12
    6148:	0b12      	lsrs	r2, r2, #12
    614a:	46ac      	mov	ip, r5
    614c:	4688      	mov	r8, r1
    614e:	4c8e      	ldr	r4, [pc, #568]	; (6388 <__aeabi_ddiv+0x664>)
    6150:	e6b6      	b.n	5ec0 <__aeabi_ddiv+0x19c>
    6152:	464b      	mov	r3, r9
    6154:	431a      	orrs	r2, r3
    6156:	0312      	lsls	r2, r2, #12
    6158:	0b12      	lsrs	r2, r2, #12
    615a:	46bc      	mov	ip, r7
    615c:	4c8a      	ldr	r4, [pc, #552]	; (6388 <__aeabi_ddiv+0x664>)
    615e:	e6af      	b.n	5ec0 <__aeabi_ddiv+0x19c>
    6160:	0003      	movs	r3, r0
    6162:	465a      	mov	r2, fp
    6164:	3b28      	subs	r3, #40	; 0x28
    6166:	409a      	lsls	r2, r3
    6168:	2300      	movs	r3, #0
    616a:	4691      	mov	r9, r2
    616c:	4698      	mov	r8, r3
    616e:	e657      	b.n	5e20 <__aeabi_ddiv+0xfc>
    6170:	4658      	mov	r0, fp
    6172:	f000 ffb5 	bl	70e0 <__clzsi2>
    6176:	3020      	adds	r0, #32
    6178:	e640      	b.n	5dfc <__aeabi_ddiv+0xd8>
    617a:	0003      	movs	r3, r0
    617c:	4652      	mov	r2, sl
    617e:	3b28      	subs	r3, #40	; 0x28
    6180:	409a      	lsls	r2, r3
    6182:	2100      	movs	r1, #0
    6184:	4693      	mov	fp, r2
    6186:	e677      	b.n	5e78 <__aeabi_ddiv+0x154>
    6188:	f000 ffaa 	bl	70e0 <__clzsi2>
    618c:	3020      	adds	r0, #32
    618e:	e65f      	b.n	5e50 <__aeabi_ddiv+0x12c>
    6190:	4588      	cmp	r8, r1
    6192:	d200      	bcs.n	6196 <__aeabi_ddiv+0x472>
    6194:	e6c7      	b.n	5f26 <__aeabi_ddiv+0x202>
    6196:	464b      	mov	r3, r9
    6198:	07de      	lsls	r6, r3, #31
    619a:	085d      	lsrs	r5, r3, #1
    619c:	4643      	mov	r3, r8
    619e:	085b      	lsrs	r3, r3, #1
    61a0:	431e      	orrs	r6, r3
    61a2:	4643      	mov	r3, r8
    61a4:	07db      	lsls	r3, r3, #31
    61a6:	469a      	mov	sl, r3
    61a8:	e6c2      	b.n	5f30 <__aeabi_ddiv+0x20c>
    61aa:	2500      	movs	r5, #0
    61ac:	4592      	cmp	sl, r2
    61ae:	d300      	bcc.n	61b2 <__aeabi_ddiv+0x48e>
    61b0:	e733      	b.n	601a <__aeabi_ddiv+0x2f6>
    61b2:	9e03      	ldr	r6, [sp, #12]
    61b4:	4659      	mov	r1, fp
    61b6:	46b4      	mov	ip, r6
    61b8:	44e2      	add	sl, ip
    61ba:	45b2      	cmp	sl, r6
    61bc:	41ad      	sbcs	r5, r5
    61be:	426d      	negs	r5, r5
    61c0:	4445      	add	r5, r8
    61c2:	18eb      	adds	r3, r5, r3
    61c4:	3901      	subs	r1, #1
    61c6:	4598      	cmp	r8, r3
    61c8:	d207      	bcs.n	61da <__aeabi_ddiv+0x4b6>
    61ca:	4298      	cmp	r0, r3
    61cc:	d900      	bls.n	61d0 <__aeabi_ddiv+0x4ac>
    61ce:	e07f      	b.n	62d0 <__aeabi_ddiv+0x5ac>
    61d0:	d100      	bne.n	61d4 <__aeabi_ddiv+0x4b0>
    61d2:	e0bc      	b.n	634e <__aeabi_ddiv+0x62a>
    61d4:	1a1d      	subs	r5, r3, r0
    61d6:	468b      	mov	fp, r1
    61d8:	e71f      	b.n	601a <__aeabi_ddiv+0x2f6>
    61da:	4598      	cmp	r8, r3
    61dc:	d1fa      	bne.n	61d4 <__aeabi_ddiv+0x4b0>
    61de:	9d03      	ldr	r5, [sp, #12]
    61e0:	4555      	cmp	r5, sl
    61e2:	d9f2      	bls.n	61ca <__aeabi_ddiv+0x4a6>
    61e4:	4643      	mov	r3, r8
    61e6:	468b      	mov	fp, r1
    61e8:	1a1d      	subs	r5, r3, r0
    61ea:	e716      	b.n	601a <__aeabi_ddiv+0x2f6>
    61ec:	469b      	mov	fp, r3
    61ee:	e6ca      	b.n	5f86 <__aeabi_ddiv+0x262>
    61f0:	0015      	movs	r5, r2
    61f2:	e6e7      	b.n	5fc4 <__aeabi_ddiv+0x2a0>
    61f4:	465a      	mov	r2, fp
    61f6:	08c9      	lsrs	r1, r1, #3
    61f8:	0752      	lsls	r2, r2, #29
    61fa:	430a      	orrs	r2, r1
    61fc:	055b      	lsls	r3, r3, #21
    61fe:	4690      	mov	r8, r2
    6200:	0d5c      	lsrs	r4, r3, #21
    6202:	465a      	mov	r2, fp
    6204:	2301      	movs	r3, #1
    6206:	9902      	ldr	r1, [sp, #8]
    6208:	0252      	lsls	r2, r2, #9
    620a:	4019      	ands	r1, r3
    620c:	0b12      	lsrs	r2, r2, #12
    620e:	468c      	mov	ip, r1
    6210:	e656      	b.n	5ec0 <__aeabi_ddiv+0x19c>
    6212:	2b00      	cmp	r3, #0
    6214:	d100      	bne.n	6218 <__aeabi_ddiv+0x4f4>
    6216:	e76f      	b.n	60f8 <__aeabi_ddiv+0x3d4>
    6218:	4446      	add	r6, r8
    621a:	1e4a      	subs	r2, r1, #1
    621c:	45b0      	cmp	r8, r6
    621e:	d929      	bls.n	6274 <__aeabi_ddiv+0x550>
    6220:	0011      	movs	r1, r2
    6222:	4286      	cmp	r6, r0
    6224:	d000      	beq.n	6228 <__aeabi_ddiv+0x504>
    6226:	e765      	b.n	60f4 <__aeabi_ddiv+0x3d0>
    6228:	9a03      	ldr	r2, [sp, #12]
    622a:	4293      	cmp	r3, r2
    622c:	d000      	beq.n	6230 <__aeabi_ddiv+0x50c>
    622e:	e761      	b.n	60f4 <__aeabi_ddiv+0x3d0>
    6230:	e762      	b.n	60f8 <__aeabi_ddiv+0x3d4>
    6232:	2101      	movs	r1, #1
    6234:	4249      	negs	r1, r1
    6236:	2001      	movs	r0, #1
    6238:	1ac2      	subs	r2, r0, r3
    623a:	2a38      	cmp	r2, #56	; 0x38
    623c:	dd21      	ble.n	6282 <__aeabi_ddiv+0x55e>
    623e:	9b02      	ldr	r3, [sp, #8]
    6240:	4003      	ands	r3, r0
    6242:	469c      	mov	ip, r3
    6244:	e638      	b.n	5eb8 <__aeabi_ddiv+0x194>
    6246:	220f      	movs	r2, #15
    6248:	400a      	ands	r2, r1
    624a:	2a04      	cmp	r2, #4
    624c:	d100      	bne.n	6250 <__aeabi_ddiv+0x52c>
    624e:	e75b      	b.n	6108 <__aeabi_ddiv+0x3e4>
    6250:	000a      	movs	r2, r1
    6252:	1d11      	adds	r1, r2, #4
    6254:	4291      	cmp	r1, r2
    6256:	4192      	sbcs	r2, r2
    6258:	4252      	negs	r2, r2
    625a:	4493      	add	fp, r2
    625c:	e754      	b.n	6108 <__aeabi_ddiv+0x3e4>
    625e:	4b47      	ldr	r3, [pc, #284]	; (637c <__aeabi_ddiv+0x658>)
    6260:	18e3      	adds	r3, r4, r3
    6262:	2b00      	cmp	r3, #0
    6264:	dde5      	ble.n	6232 <__aeabi_ddiv+0x50e>
    6266:	2201      	movs	r2, #1
    6268:	4252      	negs	r2, r2
    626a:	e7f2      	b.n	6252 <__aeabi_ddiv+0x52e>
    626c:	001d      	movs	r5, r3
    626e:	e6fa      	b.n	6066 <__aeabi_ddiv+0x342>
    6270:	469a      	mov	sl, r3
    6272:	e71c      	b.n	60ae <__aeabi_ddiv+0x38a>
    6274:	42b0      	cmp	r0, r6
    6276:	d839      	bhi.n	62ec <__aeabi_ddiv+0x5c8>
    6278:	d06e      	beq.n	6358 <__aeabi_ddiv+0x634>
    627a:	0011      	movs	r1, r2
    627c:	e73a      	b.n	60f4 <__aeabi_ddiv+0x3d0>
    627e:	9302      	str	r3, [sp, #8]
    6280:	e73a      	b.n	60f8 <__aeabi_ddiv+0x3d4>
    6282:	2a1f      	cmp	r2, #31
    6284:	dc3c      	bgt.n	6300 <__aeabi_ddiv+0x5dc>
    6286:	2320      	movs	r3, #32
    6288:	1a9b      	subs	r3, r3, r2
    628a:	000c      	movs	r4, r1
    628c:	4658      	mov	r0, fp
    628e:	4099      	lsls	r1, r3
    6290:	4098      	lsls	r0, r3
    6292:	1e4b      	subs	r3, r1, #1
    6294:	4199      	sbcs	r1, r3
    6296:	465b      	mov	r3, fp
    6298:	40d4      	lsrs	r4, r2
    629a:	40d3      	lsrs	r3, r2
    629c:	4320      	orrs	r0, r4
    629e:	4308      	orrs	r0, r1
    62a0:	001a      	movs	r2, r3
    62a2:	0743      	lsls	r3, r0, #29
    62a4:	d009      	beq.n	62ba <__aeabi_ddiv+0x596>
    62a6:	230f      	movs	r3, #15
    62a8:	4003      	ands	r3, r0
    62aa:	2b04      	cmp	r3, #4
    62ac:	d005      	beq.n	62ba <__aeabi_ddiv+0x596>
    62ae:	0001      	movs	r1, r0
    62b0:	1d08      	adds	r0, r1, #4
    62b2:	4288      	cmp	r0, r1
    62b4:	419b      	sbcs	r3, r3
    62b6:	425b      	negs	r3, r3
    62b8:	18d2      	adds	r2, r2, r3
    62ba:	0213      	lsls	r3, r2, #8
    62bc:	d53a      	bpl.n	6334 <__aeabi_ddiv+0x610>
    62be:	2301      	movs	r3, #1
    62c0:	9a02      	ldr	r2, [sp, #8]
    62c2:	2401      	movs	r4, #1
    62c4:	401a      	ands	r2, r3
    62c6:	2300      	movs	r3, #0
    62c8:	4694      	mov	ip, r2
    62ca:	4698      	mov	r8, r3
    62cc:	2200      	movs	r2, #0
    62ce:	e5f7      	b.n	5ec0 <__aeabi_ddiv+0x19c>
    62d0:	2102      	movs	r1, #2
    62d2:	4249      	negs	r1, r1
    62d4:	468c      	mov	ip, r1
    62d6:	9d03      	ldr	r5, [sp, #12]
    62d8:	44e3      	add	fp, ip
    62da:	46ac      	mov	ip, r5
    62dc:	44e2      	add	sl, ip
    62de:	45aa      	cmp	sl, r5
    62e0:	41ad      	sbcs	r5, r5
    62e2:	426d      	negs	r5, r5
    62e4:	4445      	add	r5, r8
    62e6:	18ed      	adds	r5, r5, r3
    62e8:	1a2d      	subs	r5, r5, r0
    62ea:	e696      	b.n	601a <__aeabi_ddiv+0x2f6>
    62ec:	1e8a      	subs	r2, r1, #2
    62ee:	9903      	ldr	r1, [sp, #12]
    62f0:	004d      	lsls	r5, r1, #1
    62f2:	428d      	cmp	r5, r1
    62f4:	4189      	sbcs	r1, r1
    62f6:	4249      	negs	r1, r1
    62f8:	4441      	add	r1, r8
    62fa:	1876      	adds	r6, r6, r1
    62fc:	9503      	str	r5, [sp, #12]
    62fe:	e78f      	b.n	6220 <__aeabi_ddiv+0x4fc>
    6300:	201f      	movs	r0, #31
    6302:	4240      	negs	r0, r0
    6304:	1ac3      	subs	r3, r0, r3
    6306:	4658      	mov	r0, fp
    6308:	40d8      	lsrs	r0, r3
    630a:	0003      	movs	r3, r0
    630c:	2a20      	cmp	r2, #32
    630e:	d028      	beq.n	6362 <__aeabi_ddiv+0x63e>
    6310:	2040      	movs	r0, #64	; 0x40
    6312:	465d      	mov	r5, fp
    6314:	1a82      	subs	r2, r0, r2
    6316:	4095      	lsls	r5, r2
    6318:	4329      	orrs	r1, r5
    631a:	1e4a      	subs	r2, r1, #1
    631c:	4191      	sbcs	r1, r2
    631e:	4319      	orrs	r1, r3
    6320:	2307      	movs	r3, #7
    6322:	2200      	movs	r2, #0
    6324:	400b      	ands	r3, r1
    6326:	d009      	beq.n	633c <__aeabi_ddiv+0x618>
    6328:	230f      	movs	r3, #15
    632a:	2200      	movs	r2, #0
    632c:	400b      	ands	r3, r1
    632e:	0008      	movs	r0, r1
    6330:	2b04      	cmp	r3, #4
    6332:	d1bd      	bne.n	62b0 <__aeabi_ddiv+0x58c>
    6334:	0001      	movs	r1, r0
    6336:	0753      	lsls	r3, r2, #29
    6338:	0252      	lsls	r2, r2, #9
    633a:	0b12      	lsrs	r2, r2, #12
    633c:	08c9      	lsrs	r1, r1, #3
    633e:	4319      	orrs	r1, r3
    6340:	2301      	movs	r3, #1
    6342:	4688      	mov	r8, r1
    6344:	9902      	ldr	r1, [sp, #8]
    6346:	2400      	movs	r4, #0
    6348:	4019      	ands	r1, r3
    634a:	468c      	mov	ip, r1
    634c:	e5b8      	b.n	5ec0 <__aeabi_ddiv+0x19c>
    634e:	4552      	cmp	r2, sl
    6350:	d8be      	bhi.n	62d0 <__aeabi_ddiv+0x5ac>
    6352:	468b      	mov	fp, r1
    6354:	2500      	movs	r5, #0
    6356:	e660      	b.n	601a <__aeabi_ddiv+0x2f6>
    6358:	9d03      	ldr	r5, [sp, #12]
    635a:	429d      	cmp	r5, r3
    635c:	d3c6      	bcc.n	62ec <__aeabi_ddiv+0x5c8>
    635e:	0011      	movs	r1, r2
    6360:	e762      	b.n	6228 <__aeabi_ddiv+0x504>
    6362:	2500      	movs	r5, #0
    6364:	e7d8      	b.n	6318 <__aeabi_ddiv+0x5f4>
    6366:	2280      	movs	r2, #128	; 0x80
    6368:	465b      	mov	r3, fp
    636a:	0312      	lsls	r2, r2, #12
    636c:	431a      	orrs	r2, r3
    636e:	9b01      	ldr	r3, [sp, #4]
    6370:	0312      	lsls	r2, r2, #12
    6372:	0b12      	lsrs	r2, r2, #12
    6374:	469c      	mov	ip, r3
    6376:	4688      	mov	r8, r1
    6378:	4c03      	ldr	r4, [pc, #12]	; (6388 <__aeabi_ddiv+0x664>)
    637a:	e5a1      	b.n	5ec0 <__aeabi_ddiv+0x19c>
    637c:	000003ff 	.word	0x000003ff
    6380:	feffffff 	.word	0xfeffffff
    6384:	000007fe 	.word	0x000007fe
    6388:	000007ff 	.word	0x000007ff

0000638c <__aeabi_dmul>:
    638c:	b5f0      	push	{r4, r5, r6, r7, lr}
    638e:	4657      	mov	r7, sl
    6390:	4645      	mov	r5, r8
    6392:	46de      	mov	lr, fp
    6394:	464e      	mov	r6, r9
    6396:	b5e0      	push	{r5, r6, r7, lr}
    6398:	030c      	lsls	r4, r1, #12
    639a:	4698      	mov	r8, r3
    639c:	004e      	lsls	r6, r1, #1
    639e:	0b23      	lsrs	r3, r4, #12
    63a0:	b087      	sub	sp, #28
    63a2:	0007      	movs	r7, r0
    63a4:	4692      	mov	sl, r2
    63a6:	469b      	mov	fp, r3
    63a8:	0d76      	lsrs	r6, r6, #21
    63aa:	0fcd      	lsrs	r5, r1, #31
    63ac:	2e00      	cmp	r6, #0
    63ae:	d06b      	beq.n	6488 <__aeabi_dmul+0xfc>
    63b0:	4b6d      	ldr	r3, [pc, #436]	; (6568 <__aeabi_dmul+0x1dc>)
    63b2:	429e      	cmp	r6, r3
    63b4:	d035      	beq.n	6422 <__aeabi_dmul+0x96>
    63b6:	2480      	movs	r4, #128	; 0x80
    63b8:	465b      	mov	r3, fp
    63ba:	0f42      	lsrs	r2, r0, #29
    63bc:	0424      	lsls	r4, r4, #16
    63be:	00db      	lsls	r3, r3, #3
    63c0:	4314      	orrs	r4, r2
    63c2:	431c      	orrs	r4, r3
    63c4:	00c3      	lsls	r3, r0, #3
    63c6:	4699      	mov	r9, r3
    63c8:	4b68      	ldr	r3, [pc, #416]	; (656c <__aeabi_dmul+0x1e0>)
    63ca:	46a3      	mov	fp, r4
    63cc:	469c      	mov	ip, r3
    63ce:	2300      	movs	r3, #0
    63d0:	2700      	movs	r7, #0
    63d2:	4466      	add	r6, ip
    63d4:	9302      	str	r3, [sp, #8]
    63d6:	4643      	mov	r3, r8
    63d8:	031c      	lsls	r4, r3, #12
    63da:	005a      	lsls	r2, r3, #1
    63dc:	0fdb      	lsrs	r3, r3, #31
    63de:	4650      	mov	r0, sl
    63e0:	0b24      	lsrs	r4, r4, #12
    63e2:	0d52      	lsrs	r2, r2, #21
    63e4:	4698      	mov	r8, r3
    63e6:	d100      	bne.n	63ea <__aeabi_dmul+0x5e>
    63e8:	e076      	b.n	64d8 <__aeabi_dmul+0x14c>
    63ea:	4b5f      	ldr	r3, [pc, #380]	; (6568 <__aeabi_dmul+0x1dc>)
    63ec:	429a      	cmp	r2, r3
    63ee:	d06d      	beq.n	64cc <__aeabi_dmul+0x140>
    63f0:	2380      	movs	r3, #128	; 0x80
    63f2:	0f41      	lsrs	r1, r0, #29
    63f4:	041b      	lsls	r3, r3, #16
    63f6:	430b      	orrs	r3, r1
    63f8:	495c      	ldr	r1, [pc, #368]	; (656c <__aeabi_dmul+0x1e0>)
    63fa:	00e4      	lsls	r4, r4, #3
    63fc:	468c      	mov	ip, r1
    63fe:	431c      	orrs	r4, r3
    6400:	00c3      	lsls	r3, r0, #3
    6402:	2000      	movs	r0, #0
    6404:	4462      	add	r2, ip
    6406:	4641      	mov	r1, r8
    6408:	18b6      	adds	r6, r6, r2
    640a:	4069      	eors	r1, r5
    640c:	1c72      	adds	r2, r6, #1
    640e:	9101      	str	r1, [sp, #4]
    6410:	4694      	mov	ip, r2
    6412:	4307      	orrs	r7, r0
    6414:	2f0f      	cmp	r7, #15
    6416:	d900      	bls.n	641a <__aeabi_dmul+0x8e>
    6418:	e0b0      	b.n	657c <__aeabi_dmul+0x1f0>
    641a:	4a55      	ldr	r2, [pc, #340]	; (6570 <__aeabi_dmul+0x1e4>)
    641c:	00bf      	lsls	r7, r7, #2
    641e:	59d2      	ldr	r2, [r2, r7]
    6420:	4697      	mov	pc, r2
    6422:	465b      	mov	r3, fp
    6424:	4303      	orrs	r3, r0
    6426:	4699      	mov	r9, r3
    6428:	d000      	beq.n	642c <__aeabi_dmul+0xa0>
    642a:	e087      	b.n	653c <__aeabi_dmul+0x1b0>
    642c:	2300      	movs	r3, #0
    642e:	469b      	mov	fp, r3
    6430:	3302      	adds	r3, #2
    6432:	2708      	movs	r7, #8
    6434:	9302      	str	r3, [sp, #8]
    6436:	e7ce      	b.n	63d6 <__aeabi_dmul+0x4a>
    6438:	4642      	mov	r2, r8
    643a:	9201      	str	r2, [sp, #4]
    643c:	2802      	cmp	r0, #2
    643e:	d067      	beq.n	6510 <__aeabi_dmul+0x184>
    6440:	2803      	cmp	r0, #3
    6442:	d100      	bne.n	6446 <__aeabi_dmul+0xba>
    6444:	e20e      	b.n	6864 <__aeabi_dmul+0x4d8>
    6446:	2801      	cmp	r0, #1
    6448:	d000      	beq.n	644c <__aeabi_dmul+0xc0>
    644a:	e162      	b.n	6712 <__aeabi_dmul+0x386>
    644c:	2300      	movs	r3, #0
    644e:	2400      	movs	r4, #0
    6450:	2200      	movs	r2, #0
    6452:	4699      	mov	r9, r3
    6454:	9901      	ldr	r1, [sp, #4]
    6456:	4001      	ands	r1, r0
    6458:	b2cd      	uxtb	r5, r1
    645a:	2100      	movs	r1, #0
    645c:	0312      	lsls	r2, r2, #12
    645e:	0d0b      	lsrs	r3, r1, #20
    6460:	0b12      	lsrs	r2, r2, #12
    6462:	051b      	lsls	r3, r3, #20
    6464:	4313      	orrs	r3, r2
    6466:	4a43      	ldr	r2, [pc, #268]	; (6574 <__aeabi_dmul+0x1e8>)
    6468:	0524      	lsls	r4, r4, #20
    646a:	4013      	ands	r3, r2
    646c:	431c      	orrs	r4, r3
    646e:	0064      	lsls	r4, r4, #1
    6470:	07ed      	lsls	r5, r5, #31
    6472:	0864      	lsrs	r4, r4, #1
    6474:	432c      	orrs	r4, r5
    6476:	4648      	mov	r0, r9
    6478:	0021      	movs	r1, r4
    647a:	b007      	add	sp, #28
    647c:	bc3c      	pop	{r2, r3, r4, r5}
    647e:	4690      	mov	r8, r2
    6480:	4699      	mov	r9, r3
    6482:	46a2      	mov	sl, r4
    6484:	46ab      	mov	fp, r5
    6486:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6488:	4303      	orrs	r3, r0
    648a:	4699      	mov	r9, r3
    648c:	d04f      	beq.n	652e <__aeabi_dmul+0x1a2>
    648e:	465b      	mov	r3, fp
    6490:	2b00      	cmp	r3, #0
    6492:	d100      	bne.n	6496 <__aeabi_dmul+0x10a>
    6494:	e189      	b.n	67aa <__aeabi_dmul+0x41e>
    6496:	4658      	mov	r0, fp
    6498:	f000 fe22 	bl	70e0 <__clzsi2>
    649c:	0003      	movs	r3, r0
    649e:	3b0b      	subs	r3, #11
    64a0:	2b1c      	cmp	r3, #28
    64a2:	dd00      	ble.n	64a6 <__aeabi_dmul+0x11a>
    64a4:	e17a      	b.n	679c <__aeabi_dmul+0x410>
    64a6:	221d      	movs	r2, #29
    64a8:	1ad3      	subs	r3, r2, r3
    64aa:	003a      	movs	r2, r7
    64ac:	0001      	movs	r1, r0
    64ae:	465c      	mov	r4, fp
    64b0:	40da      	lsrs	r2, r3
    64b2:	3908      	subs	r1, #8
    64b4:	408c      	lsls	r4, r1
    64b6:	0013      	movs	r3, r2
    64b8:	408f      	lsls	r7, r1
    64ba:	4323      	orrs	r3, r4
    64bc:	469b      	mov	fp, r3
    64be:	46b9      	mov	r9, r7
    64c0:	2300      	movs	r3, #0
    64c2:	4e2d      	ldr	r6, [pc, #180]	; (6578 <__aeabi_dmul+0x1ec>)
    64c4:	2700      	movs	r7, #0
    64c6:	1a36      	subs	r6, r6, r0
    64c8:	9302      	str	r3, [sp, #8]
    64ca:	e784      	b.n	63d6 <__aeabi_dmul+0x4a>
    64cc:	4653      	mov	r3, sl
    64ce:	4323      	orrs	r3, r4
    64d0:	d12a      	bne.n	6528 <__aeabi_dmul+0x19c>
    64d2:	2400      	movs	r4, #0
    64d4:	2002      	movs	r0, #2
    64d6:	e796      	b.n	6406 <__aeabi_dmul+0x7a>
    64d8:	4653      	mov	r3, sl
    64da:	4323      	orrs	r3, r4
    64dc:	d020      	beq.n	6520 <__aeabi_dmul+0x194>
    64de:	2c00      	cmp	r4, #0
    64e0:	d100      	bne.n	64e4 <__aeabi_dmul+0x158>
    64e2:	e157      	b.n	6794 <__aeabi_dmul+0x408>
    64e4:	0020      	movs	r0, r4
    64e6:	f000 fdfb 	bl	70e0 <__clzsi2>
    64ea:	0003      	movs	r3, r0
    64ec:	3b0b      	subs	r3, #11
    64ee:	2b1c      	cmp	r3, #28
    64f0:	dd00      	ble.n	64f4 <__aeabi_dmul+0x168>
    64f2:	e149      	b.n	6788 <__aeabi_dmul+0x3fc>
    64f4:	211d      	movs	r1, #29
    64f6:	1acb      	subs	r3, r1, r3
    64f8:	4651      	mov	r1, sl
    64fa:	0002      	movs	r2, r0
    64fc:	40d9      	lsrs	r1, r3
    64fe:	4653      	mov	r3, sl
    6500:	3a08      	subs	r2, #8
    6502:	4094      	lsls	r4, r2
    6504:	4093      	lsls	r3, r2
    6506:	430c      	orrs	r4, r1
    6508:	4a1b      	ldr	r2, [pc, #108]	; (6578 <__aeabi_dmul+0x1ec>)
    650a:	1a12      	subs	r2, r2, r0
    650c:	2000      	movs	r0, #0
    650e:	e77a      	b.n	6406 <__aeabi_dmul+0x7a>
    6510:	2501      	movs	r5, #1
    6512:	9b01      	ldr	r3, [sp, #4]
    6514:	4c14      	ldr	r4, [pc, #80]	; (6568 <__aeabi_dmul+0x1dc>)
    6516:	401d      	ands	r5, r3
    6518:	2300      	movs	r3, #0
    651a:	2200      	movs	r2, #0
    651c:	4699      	mov	r9, r3
    651e:	e79c      	b.n	645a <__aeabi_dmul+0xce>
    6520:	2400      	movs	r4, #0
    6522:	2200      	movs	r2, #0
    6524:	2001      	movs	r0, #1
    6526:	e76e      	b.n	6406 <__aeabi_dmul+0x7a>
    6528:	4653      	mov	r3, sl
    652a:	2003      	movs	r0, #3
    652c:	e76b      	b.n	6406 <__aeabi_dmul+0x7a>
    652e:	2300      	movs	r3, #0
    6530:	469b      	mov	fp, r3
    6532:	3301      	adds	r3, #1
    6534:	2704      	movs	r7, #4
    6536:	2600      	movs	r6, #0
    6538:	9302      	str	r3, [sp, #8]
    653a:	e74c      	b.n	63d6 <__aeabi_dmul+0x4a>
    653c:	2303      	movs	r3, #3
    653e:	4681      	mov	r9, r0
    6540:	270c      	movs	r7, #12
    6542:	9302      	str	r3, [sp, #8]
    6544:	e747      	b.n	63d6 <__aeabi_dmul+0x4a>
    6546:	2280      	movs	r2, #128	; 0x80
    6548:	2300      	movs	r3, #0
    654a:	2500      	movs	r5, #0
    654c:	0312      	lsls	r2, r2, #12
    654e:	4699      	mov	r9, r3
    6550:	4c05      	ldr	r4, [pc, #20]	; (6568 <__aeabi_dmul+0x1dc>)
    6552:	e782      	b.n	645a <__aeabi_dmul+0xce>
    6554:	465c      	mov	r4, fp
    6556:	464b      	mov	r3, r9
    6558:	9802      	ldr	r0, [sp, #8]
    655a:	e76f      	b.n	643c <__aeabi_dmul+0xb0>
    655c:	465c      	mov	r4, fp
    655e:	464b      	mov	r3, r9
    6560:	9501      	str	r5, [sp, #4]
    6562:	9802      	ldr	r0, [sp, #8]
    6564:	e76a      	b.n	643c <__aeabi_dmul+0xb0>
    6566:	46c0      	nop			; (mov r8, r8)
    6568:	000007ff 	.word	0x000007ff
    656c:	fffffc01 	.word	0xfffffc01
    6570:	00007e70 	.word	0x00007e70
    6574:	800fffff 	.word	0x800fffff
    6578:	fffffc0d 	.word	0xfffffc0d
    657c:	464a      	mov	r2, r9
    657e:	4649      	mov	r1, r9
    6580:	0c17      	lsrs	r7, r2, #16
    6582:	0c1a      	lsrs	r2, r3, #16
    6584:	041b      	lsls	r3, r3, #16
    6586:	0c1b      	lsrs	r3, r3, #16
    6588:	0408      	lsls	r0, r1, #16
    658a:	0019      	movs	r1, r3
    658c:	0c00      	lsrs	r0, r0, #16
    658e:	4341      	muls	r1, r0
    6590:	0015      	movs	r5, r2
    6592:	4688      	mov	r8, r1
    6594:	0019      	movs	r1, r3
    6596:	437d      	muls	r5, r7
    6598:	4379      	muls	r1, r7
    659a:	9503      	str	r5, [sp, #12]
    659c:	4689      	mov	r9, r1
    659e:	0029      	movs	r1, r5
    65a0:	0015      	movs	r5, r2
    65a2:	4345      	muls	r5, r0
    65a4:	444d      	add	r5, r9
    65a6:	9502      	str	r5, [sp, #8]
    65a8:	4645      	mov	r5, r8
    65aa:	0c2d      	lsrs	r5, r5, #16
    65ac:	46aa      	mov	sl, r5
    65ae:	9d02      	ldr	r5, [sp, #8]
    65b0:	4455      	add	r5, sl
    65b2:	45a9      	cmp	r9, r5
    65b4:	d906      	bls.n	65c4 <__aeabi_dmul+0x238>
    65b6:	468a      	mov	sl, r1
    65b8:	2180      	movs	r1, #128	; 0x80
    65ba:	0249      	lsls	r1, r1, #9
    65bc:	4689      	mov	r9, r1
    65be:	44ca      	add	sl, r9
    65c0:	4651      	mov	r1, sl
    65c2:	9103      	str	r1, [sp, #12]
    65c4:	0c29      	lsrs	r1, r5, #16
    65c6:	9104      	str	r1, [sp, #16]
    65c8:	4641      	mov	r1, r8
    65ca:	0409      	lsls	r1, r1, #16
    65cc:	042d      	lsls	r5, r5, #16
    65ce:	0c09      	lsrs	r1, r1, #16
    65d0:	4688      	mov	r8, r1
    65d2:	0029      	movs	r1, r5
    65d4:	0c25      	lsrs	r5, r4, #16
    65d6:	0424      	lsls	r4, r4, #16
    65d8:	4441      	add	r1, r8
    65da:	0c24      	lsrs	r4, r4, #16
    65dc:	9105      	str	r1, [sp, #20]
    65de:	0021      	movs	r1, r4
    65e0:	4341      	muls	r1, r0
    65e2:	4688      	mov	r8, r1
    65e4:	0021      	movs	r1, r4
    65e6:	4379      	muls	r1, r7
    65e8:	468a      	mov	sl, r1
    65ea:	4368      	muls	r0, r5
    65ec:	4641      	mov	r1, r8
    65ee:	4450      	add	r0, sl
    65f0:	4681      	mov	r9, r0
    65f2:	0c08      	lsrs	r0, r1, #16
    65f4:	4448      	add	r0, r9
    65f6:	436f      	muls	r7, r5
    65f8:	4582      	cmp	sl, r0
    65fa:	d903      	bls.n	6604 <__aeabi_dmul+0x278>
    65fc:	2180      	movs	r1, #128	; 0x80
    65fe:	0249      	lsls	r1, r1, #9
    6600:	4689      	mov	r9, r1
    6602:	444f      	add	r7, r9
    6604:	0c01      	lsrs	r1, r0, #16
    6606:	4689      	mov	r9, r1
    6608:	0039      	movs	r1, r7
    660a:	4449      	add	r1, r9
    660c:	9102      	str	r1, [sp, #8]
    660e:	4641      	mov	r1, r8
    6610:	040f      	lsls	r7, r1, #16
    6612:	9904      	ldr	r1, [sp, #16]
    6614:	0c3f      	lsrs	r7, r7, #16
    6616:	4688      	mov	r8, r1
    6618:	0400      	lsls	r0, r0, #16
    661a:	19c0      	adds	r0, r0, r7
    661c:	4480      	add	r8, r0
    661e:	4641      	mov	r1, r8
    6620:	9104      	str	r1, [sp, #16]
    6622:	4659      	mov	r1, fp
    6624:	0c0f      	lsrs	r7, r1, #16
    6626:	0409      	lsls	r1, r1, #16
    6628:	0c09      	lsrs	r1, r1, #16
    662a:	4688      	mov	r8, r1
    662c:	4359      	muls	r1, r3
    662e:	468a      	mov	sl, r1
    6630:	0039      	movs	r1, r7
    6632:	4351      	muls	r1, r2
    6634:	4689      	mov	r9, r1
    6636:	4641      	mov	r1, r8
    6638:	434a      	muls	r2, r1
    663a:	4651      	mov	r1, sl
    663c:	0c09      	lsrs	r1, r1, #16
    663e:	468b      	mov	fp, r1
    6640:	437b      	muls	r3, r7
    6642:	18d2      	adds	r2, r2, r3
    6644:	445a      	add	r2, fp
    6646:	4293      	cmp	r3, r2
    6648:	d903      	bls.n	6652 <__aeabi_dmul+0x2c6>
    664a:	2380      	movs	r3, #128	; 0x80
    664c:	025b      	lsls	r3, r3, #9
    664e:	469b      	mov	fp, r3
    6650:	44d9      	add	r9, fp
    6652:	4651      	mov	r1, sl
    6654:	0409      	lsls	r1, r1, #16
    6656:	0c09      	lsrs	r1, r1, #16
    6658:	468a      	mov	sl, r1
    665a:	4641      	mov	r1, r8
    665c:	4361      	muls	r1, r4
    665e:	437c      	muls	r4, r7
    6660:	0c13      	lsrs	r3, r2, #16
    6662:	0412      	lsls	r2, r2, #16
    6664:	444b      	add	r3, r9
    6666:	4452      	add	r2, sl
    6668:	46a1      	mov	r9, r4
    666a:	468a      	mov	sl, r1
    666c:	003c      	movs	r4, r7
    666e:	4641      	mov	r1, r8
    6670:	436c      	muls	r4, r5
    6672:	434d      	muls	r5, r1
    6674:	4651      	mov	r1, sl
    6676:	444d      	add	r5, r9
    6678:	0c0f      	lsrs	r7, r1, #16
    667a:	197d      	adds	r5, r7, r5
    667c:	45a9      	cmp	r9, r5
    667e:	d903      	bls.n	6688 <__aeabi_dmul+0x2fc>
    6680:	2180      	movs	r1, #128	; 0x80
    6682:	0249      	lsls	r1, r1, #9
    6684:	4688      	mov	r8, r1
    6686:	4444      	add	r4, r8
    6688:	9f04      	ldr	r7, [sp, #16]
    668a:	9903      	ldr	r1, [sp, #12]
    668c:	46b8      	mov	r8, r7
    668e:	4441      	add	r1, r8
    6690:	468b      	mov	fp, r1
    6692:	4583      	cmp	fp, r0
    6694:	4180      	sbcs	r0, r0
    6696:	4241      	negs	r1, r0
    6698:	4688      	mov	r8, r1
    669a:	4651      	mov	r1, sl
    669c:	0408      	lsls	r0, r1, #16
    669e:	042f      	lsls	r7, r5, #16
    66a0:	0c00      	lsrs	r0, r0, #16
    66a2:	183f      	adds	r7, r7, r0
    66a4:	4658      	mov	r0, fp
    66a6:	9902      	ldr	r1, [sp, #8]
    66a8:	1810      	adds	r0, r2, r0
    66aa:	4689      	mov	r9, r1
    66ac:	4290      	cmp	r0, r2
    66ae:	4192      	sbcs	r2, r2
    66b0:	444f      	add	r7, r9
    66b2:	46ba      	mov	sl, r7
    66b4:	4252      	negs	r2, r2
    66b6:	4699      	mov	r9, r3
    66b8:	4693      	mov	fp, r2
    66ba:	44c2      	add	sl, r8
    66bc:	44d1      	add	r9, sl
    66be:	44cb      	add	fp, r9
    66c0:	428f      	cmp	r7, r1
    66c2:	41bf      	sbcs	r7, r7
    66c4:	45c2      	cmp	sl, r8
    66c6:	4189      	sbcs	r1, r1
    66c8:	4599      	cmp	r9, r3
    66ca:	419b      	sbcs	r3, r3
    66cc:	4593      	cmp	fp, r2
    66ce:	4192      	sbcs	r2, r2
    66d0:	427f      	negs	r7, r7
    66d2:	4249      	negs	r1, r1
    66d4:	0c2d      	lsrs	r5, r5, #16
    66d6:	4252      	negs	r2, r2
    66d8:	430f      	orrs	r7, r1
    66da:	425b      	negs	r3, r3
    66dc:	4313      	orrs	r3, r2
    66de:	197f      	adds	r7, r7, r5
    66e0:	18ff      	adds	r7, r7, r3
    66e2:	465b      	mov	r3, fp
    66e4:	193c      	adds	r4, r7, r4
    66e6:	0ddb      	lsrs	r3, r3, #23
    66e8:	9a05      	ldr	r2, [sp, #20]
    66ea:	0264      	lsls	r4, r4, #9
    66ec:	431c      	orrs	r4, r3
    66ee:	0243      	lsls	r3, r0, #9
    66f0:	4313      	orrs	r3, r2
    66f2:	1e5d      	subs	r5, r3, #1
    66f4:	41ab      	sbcs	r3, r5
    66f6:	465a      	mov	r2, fp
    66f8:	0dc0      	lsrs	r0, r0, #23
    66fa:	4303      	orrs	r3, r0
    66fc:	0252      	lsls	r2, r2, #9
    66fe:	4313      	orrs	r3, r2
    6700:	01e2      	lsls	r2, r4, #7
    6702:	d556      	bpl.n	67b2 <__aeabi_dmul+0x426>
    6704:	2001      	movs	r0, #1
    6706:	085a      	lsrs	r2, r3, #1
    6708:	4003      	ands	r3, r0
    670a:	4313      	orrs	r3, r2
    670c:	07e2      	lsls	r2, r4, #31
    670e:	4313      	orrs	r3, r2
    6710:	0864      	lsrs	r4, r4, #1
    6712:	485a      	ldr	r0, [pc, #360]	; (687c <__aeabi_dmul+0x4f0>)
    6714:	4460      	add	r0, ip
    6716:	2800      	cmp	r0, #0
    6718:	dd4d      	ble.n	67b6 <__aeabi_dmul+0x42a>
    671a:	075a      	lsls	r2, r3, #29
    671c:	d009      	beq.n	6732 <__aeabi_dmul+0x3a6>
    671e:	220f      	movs	r2, #15
    6720:	401a      	ands	r2, r3
    6722:	2a04      	cmp	r2, #4
    6724:	d005      	beq.n	6732 <__aeabi_dmul+0x3a6>
    6726:	1d1a      	adds	r2, r3, #4
    6728:	429a      	cmp	r2, r3
    672a:	419b      	sbcs	r3, r3
    672c:	425b      	negs	r3, r3
    672e:	18e4      	adds	r4, r4, r3
    6730:	0013      	movs	r3, r2
    6732:	01e2      	lsls	r2, r4, #7
    6734:	d504      	bpl.n	6740 <__aeabi_dmul+0x3b4>
    6736:	2080      	movs	r0, #128	; 0x80
    6738:	4a51      	ldr	r2, [pc, #324]	; (6880 <__aeabi_dmul+0x4f4>)
    673a:	00c0      	lsls	r0, r0, #3
    673c:	4014      	ands	r4, r2
    673e:	4460      	add	r0, ip
    6740:	4a50      	ldr	r2, [pc, #320]	; (6884 <__aeabi_dmul+0x4f8>)
    6742:	4290      	cmp	r0, r2
    6744:	dd00      	ble.n	6748 <__aeabi_dmul+0x3bc>
    6746:	e6e3      	b.n	6510 <__aeabi_dmul+0x184>
    6748:	2501      	movs	r5, #1
    674a:	08db      	lsrs	r3, r3, #3
    674c:	0762      	lsls	r2, r4, #29
    674e:	431a      	orrs	r2, r3
    6750:	0264      	lsls	r4, r4, #9
    6752:	9b01      	ldr	r3, [sp, #4]
    6754:	4691      	mov	r9, r2
    6756:	0b22      	lsrs	r2, r4, #12
    6758:	0544      	lsls	r4, r0, #21
    675a:	0d64      	lsrs	r4, r4, #21
    675c:	401d      	ands	r5, r3
    675e:	e67c      	b.n	645a <__aeabi_dmul+0xce>
    6760:	2280      	movs	r2, #128	; 0x80
    6762:	4659      	mov	r1, fp
    6764:	0312      	lsls	r2, r2, #12
    6766:	4211      	tst	r1, r2
    6768:	d008      	beq.n	677c <__aeabi_dmul+0x3f0>
    676a:	4214      	tst	r4, r2
    676c:	d106      	bne.n	677c <__aeabi_dmul+0x3f0>
    676e:	4322      	orrs	r2, r4
    6770:	0312      	lsls	r2, r2, #12
    6772:	0b12      	lsrs	r2, r2, #12
    6774:	4645      	mov	r5, r8
    6776:	4699      	mov	r9, r3
    6778:	4c43      	ldr	r4, [pc, #268]	; (6888 <__aeabi_dmul+0x4fc>)
    677a:	e66e      	b.n	645a <__aeabi_dmul+0xce>
    677c:	465b      	mov	r3, fp
    677e:	431a      	orrs	r2, r3
    6780:	0312      	lsls	r2, r2, #12
    6782:	0b12      	lsrs	r2, r2, #12
    6784:	4c40      	ldr	r4, [pc, #256]	; (6888 <__aeabi_dmul+0x4fc>)
    6786:	e668      	b.n	645a <__aeabi_dmul+0xce>
    6788:	0003      	movs	r3, r0
    678a:	4654      	mov	r4, sl
    678c:	3b28      	subs	r3, #40	; 0x28
    678e:	409c      	lsls	r4, r3
    6790:	2300      	movs	r3, #0
    6792:	e6b9      	b.n	6508 <__aeabi_dmul+0x17c>
    6794:	f000 fca4 	bl	70e0 <__clzsi2>
    6798:	3020      	adds	r0, #32
    679a:	e6a6      	b.n	64ea <__aeabi_dmul+0x15e>
    679c:	0003      	movs	r3, r0
    679e:	3b28      	subs	r3, #40	; 0x28
    67a0:	409f      	lsls	r7, r3
    67a2:	2300      	movs	r3, #0
    67a4:	46bb      	mov	fp, r7
    67a6:	4699      	mov	r9, r3
    67a8:	e68a      	b.n	64c0 <__aeabi_dmul+0x134>
    67aa:	f000 fc99 	bl	70e0 <__clzsi2>
    67ae:	3020      	adds	r0, #32
    67b0:	e674      	b.n	649c <__aeabi_dmul+0x110>
    67b2:	46b4      	mov	ip, r6
    67b4:	e7ad      	b.n	6712 <__aeabi_dmul+0x386>
    67b6:	2501      	movs	r5, #1
    67b8:	1a2a      	subs	r2, r5, r0
    67ba:	2a38      	cmp	r2, #56	; 0x38
    67bc:	dd06      	ble.n	67cc <__aeabi_dmul+0x440>
    67be:	9b01      	ldr	r3, [sp, #4]
    67c0:	2400      	movs	r4, #0
    67c2:	401d      	ands	r5, r3
    67c4:	2300      	movs	r3, #0
    67c6:	2200      	movs	r2, #0
    67c8:	4699      	mov	r9, r3
    67ca:	e646      	b.n	645a <__aeabi_dmul+0xce>
    67cc:	2a1f      	cmp	r2, #31
    67ce:	dc21      	bgt.n	6814 <__aeabi_dmul+0x488>
    67d0:	2520      	movs	r5, #32
    67d2:	0020      	movs	r0, r4
    67d4:	1aad      	subs	r5, r5, r2
    67d6:	001e      	movs	r6, r3
    67d8:	40ab      	lsls	r3, r5
    67da:	40a8      	lsls	r0, r5
    67dc:	40d6      	lsrs	r6, r2
    67de:	1e5d      	subs	r5, r3, #1
    67e0:	41ab      	sbcs	r3, r5
    67e2:	4330      	orrs	r0, r6
    67e4:	4318      	orrs	r0, r3
    67e6:	40d4      	lsrs	r4, r2
    67e8:	0743      	lsls	r3, r0, #29
    67ea:	d009      	beq.n	6800 <__aeabi_dmul+0x474>
    67ec:	230f      	movs	r3, #15
    67ee:	4003      	ands	r3, r0
    67f0:	2b04      	cmp	r3, #4
    67f2:	d005      	beq.n	6800 <__aeabi_dmul+0x474>
    67f4:	0003      	movs	r3, r0
    67f6:	1d18      	adds	r0, r3, #4
    67f8:	4298      	cmp	r0, r3
    67fa:	419b      	sbcs	r3, r3
    67fc:	425b      	negs	r3, r3
    67fe:	18e4      	adds	r4, r4, r3
    6800:	0223      	lsls	r3, r4, #8
    6802:	d521      	bpl.n	6848 <__aeabi_dmul+0x4bc>
    6804:	2501      	movs	r5, #1
    6806:	9b01      	ldr	r3, [sp, #4]
    6808:	2401      	movs	r4, #1
    680a:	401d      	ands	r5, r3
    680c:	2300      	movs	r3, #0
    680e:	2200      	movs	r2, #0
    6810:	4699      	mov	r9, r3
    6812:	e622      	b.n	645a <__aeabi_dmul+0xce>
    6814:	251f      	movs	r5, #31
    6816:	0021      	movs	r1, r4
    6818:	426d      	negs	r5, r5
    681a:	1a28      	subs	r0, r5, r0
    681c:	40c1      	lsrs	r1, r0
    681e:	0008      	movs	r0, r1
    6820:	2a20      	cmp	r2, #32
    6822:	d01d      	beq.n	6860 <__aeabi_dmul+0x4d4>
    6824:	355f      	adds	r5, #95	; 0x5f
    6826:	1aaa      	subs	r2, r5, r2
    6828:	4094      	lsls	r4, r2
    682a:	4323      	orrs	r3, r4
    682c:	1e5c      	subs	r4, r3, #1
    682e:	41a3      	sbcs	r3, r4
    6830:	2507      	movs	r5, #7
    6832:	4303      	orrs	r3, r0
    6834:	401d      	ands	r5, r3
    6836:	2200      	movs	r2, #0
    6838:	2d00      	cmp	r5, #0
    683a:	d009      	beq.n	6850 <__aeabi_dmul+0x4c4>
    683c:	220f      	movs	r2, #15
    683e:	2400      	movs	r4, #0
    6840:	401a      	ands	r2, r3
    6842:	0018      	movs	r0, r3
    6844:	2a04      	cmp	r2, #4
    6846:	d1d6      	bne.n	67f6 <__aeabi_dmul+0x46a>
    6848:	0003      	movs	r3, r0
    684a:	0765      	lsls	r5, r4, #29
    684c:	0264      	lsls	r4, r4, #9
    684e:	0b22      	lsrs	r2, r4, #12
    6850:	08db      	lsrs	r3, r3, #3
    6852:	432b      	orrs	r3, r5
    6854:	2501      	movs	r5, #1
    6856:	4699      	mov	r9, r3
    6858:	9b01      	ldr	r3, [sp, #4]
    685a:	2400      	movs	r4, #0
    685c:	401d      	ands	r5, r3
    685e:	e5fc      	b.n	645a <__aeabi_dmul+0xce>
    6860:	2400      	movs	r4, #0
    6862:	e7e2      	b.n	682a <__aeabi_dmul+0x49e>
    6864:	2280      	movs	r2, #128	; 0x80
    6866:	2501      	movs	r5, #1
    6868:	0312      	lsls	r2, r2, #12
    686a:	4322      	orrs	r2, r4
    686c:	9901      	ldr	r1, [sp, #4]
    686e:	0312      	lsls	r2, r2, #12
    6870:	0b12      	lsrs	r2, r2, #12
    6872:	400d      	ands	r5, r1
    6874:	4699      	mov	r9, r3
    6876:	4c04      	ldr	r4, [pc, #16]	; (6888 <__aeabi_dmul+0x4fc>)
    6878:	e5ef      	b.n	645a <__aeabi_dmul+0xce>
    687a:	46c0      	nop			; (mov r8, r8)
    687c:	000003ff 	.word	0x000003ff
    6880:	feffffff 	.word	0xfeffffff
    6884:	000007fe 	.word	0x000007fe
    6888:	000007ff 	.word	0x000007ff

0000688c <__aeabi_dsub>:
    688c:	b5f0      	push	{r4, r5, r6, r7, lr}
    688e:	4646      	mov	r6, r8
    6890:	46d6      	mov	lr, sl
    6892:	464f      	mov	r7, r9
    6894:	030c      	lsls	r4, r1, #12
    6896:	b5c0      	push	{r6, r7, lr}
    6898:	0fcd      	lsrs	r5, r1, #31
    689a:	004e      	lsls	r6, r1, #1
    689c:	0a61      	lsrs	r1, r4, #9
    689e:	0f44      	lsrs	r4, r0, #29
    68a0:	430c      	orrs	r4, r1
    68a2:	00c1      	lsls	r1, r0, #3
    68a4:	0058      	lsls	r0, r3, #1
    68a6:	0d40      	lsrs	r0, r0, #21
    68a8:	4684      	mov	ip, r0
    68aa:	468a      	mov	sl, r1
    68ac:	000f      	movs	r7, r1
    68ae:	0319      	lsls	r1, r3, #12
    68b0:	0f50      	lsrs	r0, r2, #29
    68b2:	0a49      	lsrs	r1, r1, #9
    68b4:	4301      	orrs	r1, r0
    68b6:	48c6      	ldr	r0, [pc, #792]	; (6bd0 <__aeabi_dsub+0x344>)
    68b8:	0d76      	lsrs	r6, r6, #21
    68ba:	46a8      	mov	r8, r5
    68bc:	0fdb      	lsrs	r3, r3, #31
    68be:	00d2      	lsls	r2, r2, #3
    68c0:	4584      	cmp	ip, r0
    68c2:	d100      	bne.n	68c6 <__aeabi_dsub+0x3a>
    68c4:	e0d8      	b.n	6a78 <__aeabi_dsub+0x1ec>
    68c6:	2001      	movs	r0, #1
    68c8:	4043      	eors	r3, r0
    68ca:	42ab      	cmp	r3, r5
    68cc:	d100      	bne.n	68d0 <__aeabi_dsub+0x44>
    68ce:	e0a6      	b.n	6a1e <__aeabi_dsub+0x192>
    68d0:	4660      	mov	r0, ip
    68d2:	1a35      	subs	r5, r6, r0
    68d4:	2d00      	cmp	r5, #0
    68d6:	dc00      	bgt.n	68da <__aeabi_dsub+0x4e>
    68d8:	e105      	b.n	6ae6 <__aeabi_dsub+0x25a>
    68da:	2800      	cmp	r0, #0
    68dc:	d110      	bne.n	6900 <__aeabi_dsub+0x74>
    68de:	000b      	movs	r3, r1
    68e0:	4313      	orrs	r3, r2
    68e2:	d100      	bne.n	68e6 <__aeabi_dsub+0x5a>
    68e4:	e0d7      	b.n	6a96 <__aeabi_dsub+0x20a>
    68e6:	1e6b      	subs	r3, r5, #1
    68e8:	2b00      	cmp	r3, #0
    68ea:	d000      	beq.n	68ee <__aeabi_dsub+0x62>
    68ec:	e14b      	b.n	6b86 <__aeabi_dsub+0x2fa>
    68ee:	4653      	mov	r3, sl
    68f0:	1a9f      	subs	r7, r3, r2
    68f2:	45ba      	cmp	sl, r7
    68f4:	4180      	sbcs	r0, r0
    68f6:	1a64      	subs	r4, r4, r1
    68f8:	4240      	negs	r0, r0
    68fa:	1a24      	subs	r4, r4, r0
    68fc:	2601      	movs	r6, #1
    68fe:	e01e      	b.n	693e <__aeabi_dsub+0xb2>
    6900:	4bb3      	ldr	r3, [pc, #716]	; (6bd0 <__aeabi_dsub+0x344>)
    6902:	429e      	cmp	r6, r3
    6904:	d048      	beq.n	6998 <__aeabi_dsub+0x10c>
    6906:	2380      	movs	r3, #128	; 0x80
    6908:	041b      	lsls	r3, r3, #16
    690a:	4319      	orrs	r1, r3
    690c:	2d38      	cmp	r5, #56	; 0x38
    690e:	dd00      	ble.n	6912 <__aeabi_dsub+0x86>
    6910:	e119      	b.n	6b46 <__aeabi_dsub+0x2ba>
    6912:	2d1f      	cmp	r5, #31
    6914:	dd00      	ble.n	6918 <__aeabi_dsub+0x8c>
    6916:	e14c      	b.n	6bb2 <__aeabi_dsub+0x326>
    6918:	2320      	movs	r3, #32
    691a:	000f      	movs	r7, r1
    691c:	1b5b      	subs	r3, r3, r5
    691e:	0010      	movs	r0, r2
    6920:	409a      	lsls	r2, r3
    6922:	409f      	lsls	r7, r3
    6924:	40e8      	lsrs	r0, r5
    6926:	1e53      	subs	r3, r2, #1
    6928:	419a      	sbcs	r2, r3
    692a:	40e9      	lsrs	r1, r5
    692c:	4307      	orrs	r7, r0
    692e:	4317      	orrs	r7, r2
    6930:	4653      	mov	r3, sl
    6932:	1bdf      	subs	r7, r3, r7
    6934:	1a61      	subs	r1, r4, r1
    6936:	45ba      	cmp	sl, r7
    6938:	41a4      	sbcs	r4, r4
    693a:	4264      	negs	r4, r4
    693c:	1b0c      	subs	r4, r1, r4
    693e:	0223      	lsls	r3, r4, #8
    6940:	d400      	bmi.n	6944 <__aeabi_dsub+0xb8>
    6942:	e0c5      	b.n	6ad0 <__aeabi_dsub+0x244>
    6944:	0264      	lsls	r4, r4, #9
    6946:	0a65      	lsrs	r5, r4, #9
    6948:	2d00      	cmp	r5, #0
    694a:	d100      	bne.n	694e <__aeabi_dsub+0xc2>
    694c:	e0f6      	b.n	6b3c <__aeabi_dsub+0x2b0>
    694e:	0028      	movs	r0, r5
    6950:	f000 fbc6 	bl	70e0 <__clzsi2>
    6954:	0003      	movs	r3, r0
    6956:	3b08      	subs	r3, #8
    6958:	2b1f      	cmp	r3, #31
    695a:	dd00      	ble.n	695e <__aeabi_dsub+0xd2>
    695c:	e0e9      	b.n	6b32 <__aeabi_dsub+0x2a6>
    695e:	2220      	movs	r2, #32
    6960:	003c      	movs	r4, r7
    6962:	1ad2      	subs	r2, r2, r3
    6964:	409d      	lsls	r5, r3
    6966:	40d4      	lsrs	r4, r2
    6968:	409f      	lsls	r7, r3
    696a:	4325      	orrs	r5, r4
    696c:	429e      	cmp	r6, r3
    696e:	dd00      	ble.n	6972 <__aeabi_dsub+0xe6>
    6970:	e0db      	b.n	6b2a <__aeabi_dsub+0x29e>
    6972:	1b9e      	subs	r6, r3, r6
    6974:	1c73      	adds	r3, r6, #1
    6976:	2b1f      	cmp	r3, #31
    6978:	dd00      	ble.n	697c <__aeabi_dsub+0xf0>
    697a:	e10a      	b.n	6b92 <__aeabi_dsub+0x306>
    697c:	2220      	movs	r2, #32
    697e:	0038      	movs	r0, r7
    6980:	1ad2      	subs	r2, r2, r3
    6982:	0029      	movs	r1, r5
    6984:	4097      	lsls	r7, r2
    6986:	002c      	movs	r4, r5
    6988:	4091      	lsls	r1, r2
    698a:	40d8      	lsrs	r0, r3
    698c:	1e7a      	subs	r2, r7, #1
    698e:	4197      	sbcs	r7, r2
    6990:	40dc      	lsrs	r4, r3
    6992:	2600      	movs	r6, #0
    6994:	4301      	orrs	r1, r0
    6996:	430f      	orrs	r7, r1
    6998:	077b      	lsls	r3, r7, #29
    699a:	d009      	beq.n	69b0 <__aeabi_dsub+0x124>
    699c:	230f      	movs	r3, #15
    699e:	403b      	ands	r3, r7
    69a0:	2b04      	cmp	r3, #4
    69a2:	d005      	beq.n	69b0 <__aeabi_dsub+0x124>
    69a4:	1d3b      	adds	r3, r7, #4
    69a6:	42bb      	cmp	r3, r7
    69a8:	41bf      	sbcs	r7, r7
    69aa:	427f      	negs	r7, r7
    69ac:	19e4      	adds	r4, r4, r7
    69ae:	001f      	movs	r7, r3
    69b0:	0223      	lsls	r3, r4, #8
    69b2:	d525      	bpl.n	6a00 <__aeabi_dsub+0x174>
    69b4:	4b86      	ldr	r3, [pc, #536]	; (6bd0 <__aeabi_dsub+0x344>)
    69b6:	3601      	adds	r6, #1
    69b8:	429e      	cmp	r6, r3
    69ba:	d100      	bne.n	69be <__aeabi_dsub+0x132>
    69bc:	e0af      	b.n	6b1e <__aeabi_dsub+0x292>
    69be:	4b85      	ldr	r3, [pc, #532]	; (6bd4 <__aeabi_dsub+0x348>)
    69c0:	2501      	movs	r5, #1
    69c2:	401c      	ands	r4, r3
    69c4:	4643      	mov	r3, r8
    69c6:	0762      	lsls	r2, r4, #29
    69c8:	08ff      	lsrs	r7, r7, #3
    69ca:	0264      	lsls	r4, r4, #9
    69cc:	0576      	lsls	r6, r6, #21
    69ce:	4317      	orrs	r7, r2
    69d0:	0b24      	lsrs	r4, r4, #12
    69d2:	0d76      	lsrs	r6, r6, #21
    69d4:	401d      	ands	r5, r3
    69d6:	2100      	movs	r1, #0
    69d8:	0324      	lsls	r4, r4, #12
    69da:	0b23      	lsrs	r3, r4, #12
    69dc:	0d0c      	lsrs	r4, r1, #20
    69de:	4a7e      	ldr	r2, [pc, #504]	; (6bd8 <__aeabi_dsub+0x34c>)
    69e0:	0524      	lsls	r4, r4, #20
    69e2:	431c      	orrs	r4, r3
    69e4:	4014      	ands	r4, r2
    69e6:	0533      	lsls	r3, r6, #20
    69e8:	4323      	orrs	r3, r4
    69ea:	005b      	lsls	r3, r3, #1
    69ec:	07ed      	lsls	r5, r5, #31
    69ee:	085b      	lsrs	r3, r3, #1
    69f0:	432b      	orrs	r3, r5
    69f2:	0038      	movs	r0, r7
    69f4:	0019      	movs	r1, r3
    69f6:	bc1c      	pop	{r2, r3, r4}
    69f8:	4690      	mov	r8, r2
    69fa:	4699      	mov	r9, r3
    69fc:	46a2      	mov	sl, r4
    69fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a00:	2501      	movs	r5, #1
    6a02:	4643      	mov	r3, r8
    6a04:	0762      	lsls	r2, r4, #29
    6a06:	08ff      	lsrs	r7, r7, #3
    6a08:	4317      	orrs	r7, r2
    6a0a:	08e4      	lsrs	r4, r4, #3
    6a0c:	401d      	ands	r5, r3
    6a0e:	4b70      	ldr	r3, [pc, #448]	; (6bd0 <__aeabi_dsub+0x344>)
    6a10:	429e      	cmp	r6, r3
    6a12:	d036      	beq.n	6a82 <__aeabi_dsub+0x1f6>
    6a14:	0324      	lsls	r4, r4, #12
    6a16:	0576      	lsls	r6, r6, #21
    6a18:	0b24      	lsrs	r4, r4, #12
    6a1a:	0d76      	lsrs	r6, r6, #21
    6a1c:	e7db      	b.n	69d6 <__aeabi_dsub+0x14a>
    6a1e:	4663      	mov	r3, ip
    6a20:	1af3      	subs	r3, r6, r3
    6a22:	2b00      	cmp	r3, #0
    6a24:	dc00      	bgt.n	6a28 <__aeabi_dsub+0x19c>
    6a26:	e094      	b.n	6b52 <__aeabi_dsub+0x2c6>
    6a28:	4660      	mov	r0, ip
    6a2a:	2800      	cmp	r0, #0
    6a2c:	d035      	beq.n	6a9a <__aeabi_dsub+0x20e>
    6a2e:	4868      	ldr	r0, [pc, #416]	; (6bd0 <__aeabi_dsub+0x344>)
    6a30:	4286      	cmp	r6, r0
    6a32:	d0b1      	beq.n	6998 <__aeabi_dsub+0x10c>
    6a34:	2780      	movs	r7, #128	; 0x80
    6a36:	043f      	lsls	r7, r7, #16
    6a38:	4339      	orrs	r1, r7
    6a3a:	2b38      	cmp	r3, #56	; 0x38
    6a3c:	dc00      	bgt.n	6a40 <__aeabi_dsub+0x1b4>
    6a3e:	e0fd      	b.n	6c3c <__aeabi_dsub+0x3b0>
    6a40:	430a      	orrs	r2, r1
    6a42:	0017      	movs	r7, r2
    6a44:	2100      	movs	r1, #0
    6a46:	1e7a      	subs	r2, r7, #1
    6a48:	4197      	sbcs	r7, r2
    6a4a:	4457      	add	r7, sl
    6a4c:	4557      	cmp	r7, sl
    6a4e:	4180      	sbcs	r0, r0
    6a50:	1909      	adds	r1, r1, r4
    6a52:	4244      	negs	r4, r0
    6a54:	190c      	adds	r4, r1, r4
    6a56:	0223      	lsls	r3, r4, #8
    6a58:	d53a      	bpl.n	6ad0 <__aeabi_dsub+0x244>
    6a5a:	4b5d      	ldr	r3, [pc, #372]	; (6bd0 <__aeabi_dsub+0x344>)
    6a5c:	3601      	adds	r6, #1
    6a5e:	429e      	cmp	r6, r3
    6a60:	d100      	bne.n	6a64 <__aeabi_dsub+0x1d8>
    6a62:	e14b      	b.n	6cfc <__aeabi_dsub+0x470>
    6a64:	2201      	movs	r2, #1
    6a66:	4b5b      	ldr	r3, [pc, #364]	; (6bd4 <__aeabi_dsub+0x348>)
    6a68:	401c      	ands	r4, r3
    6a6a:	087b      	lsrs	r3, r7, #1
    6a6c:	4017      	ands	r7, r2
    6a6e:	431f      	orrs	r7, r3
    6a70:	07e2      	lsls	r2, r4, #31
    6a72:	4317      	orrs	r7, r2
    6a74:	0864      	lsrs	r4, r4, #1
    6a76:	e78f      	b.n	6998 <__aeabi_dsub+0x10c>
    6a78:	0008      	movs	r0, r1
    6a7a:	4310      	orrs	r0, r2
    6a7c:	d000      	beq.n	6a80 <__aeabi_dsub+0x1f4>
    6a7e:	e724      	b.n	68ca <__aeabi_dsub+0x3e>
    6a80:	e721      	b.n	68c6 <__aeabi_dsub+0x3a>
    6a82:	0023      	movs	r3, r4
    6a84:	433b      	orrs	r3, r7
    6a86:	d100      	bne.n	6a8a <__aeabi_dsub+0x1fe>
    6a88:	e1b9      	b.n	6dfe <__aeabi_dsub+0x572>
    6a8a:	2280      	movs	r2, #128	; 0x80
    6a8c:	0312      	lsls	r2, r2, #12
    6a8e:	4314      	orrs	r4, r2
    6a90:	0324      	lsls	r4, r4, #12
    6a92:	0b24      	lsrs	r4, r4, #12
    6a94:	e79f      	b.n	69d6 <__aeabi_dsub+0x14a>
    6a96:	002e      	movs	r6, r5
    6a98:	e77e      	b.n	6998 <__aeabi_dsub+0x10c>
    6a9a:	0008      	movs	r0, r1
    6a9c:	4310      	orrs	r0, r2
    6a9e:	d100      	bne.n	6aa2 <__aeabi_dsub+0x216>
    6aa0:	e0ca      	b.n	6c38 <__aeabi_dsub+0x3ac>
    6aa2:	1e58      	subs	r0, r3, #1
    6aa4:	4684      	mov	ip, r0
    6aa6:	2800      	cmp	r0, #0
    6aa8:	d000      	beq.n	6aac <__aeabi_dsub+0x220>
    6aaa:	e0e7      	b.n	6c7c <__aeabi_dsub+0x3f0>
    6aac:	4452      	add	r2, sl
    6aae:	4552      	cmp	r2, sl
    6ab0:	4180      	sbcs	r0, r0
    6ab2:	1864      	adds	r4, r4, r1
    6ab4:	4240      	negs	r0, r0
    6ab6:	1824      	adds	r4, r4, r0
    6ab8:	0017      	movs	r7, r2
    6aba:	2601      	movs	r6, #1
    6abc:	0223      	lsls	r3, r4, #8
    6abe:	d507      	bpl.n	6ad0 <__aeabi_dsub+0x244>
    6ac0:	2602      	movs	r6, #2
    6ac2:	e7cf      	b.n	6a64 <__aeabi_dsub+0x1d8>
    6ac4:	4664      	mov	r4, ip
    6ac6:	432c      	orrs	r4, r5
    6ac8:	d100      	bne.n	6acc <__aeabi_dsub+0x240>
    6aca:	e1b3      	b.n	6e34 <__aeabi_dsub+0x5a8>
    6acc:	002c      	movs	r4, r5
    6ace:	4667      	mov	r7, ip
    6ad0:	077b      	lsls	r3, r7, #29
    6ad2:	d000      	beq.n	6ad6 <__aeabi_dsub+0x24a>
    6ad4:	e762      	b.n	699c <__aeabi_dsub+0x110>
    6ad6:	0763      	lsls	r3, r4, #29
    6ad8:	08ff      	lsrs	r7, r7, #3
    6ada:	431f      	orrs	r7, r3
    6adc:	2501      	movs	r5, #1
    6ade:	4643      	mov	r3, r8
    6ae0:	08e4      	lsrs	r4, r4, #3
    6ae2:	401d      	ands	r5, r3
    6ae4:	e793      	b.n	6a0e <__aeabi_dsub+0x182>
    6ae6:	2d00      	cmp	r5, #0
    6ae8:	d178      	bne.n	6bdc <__aeabi_dsub+0x350>
    6aea:	1c75      	adds	r5, r6, #1
    6aec:	056d      	lsls	r5, r5, #21
    6aee:	0d6d      	lsrs	r5, r5, #21
    6af0:	2d01      	cmp	r5, #1
    6af2:	dc00      	bgt.n	6af6 <__aeabi_dsub+0x26a>
    6af4:	e0f2      	b.n	6cdc <__aeabi_dsub+0x450>
    6af6:	4650      	mov	r0, sl
    6af8:	1a80      	subs	r0, r0, r2
    6afa:	4582      	cmp	sl, r0
    6afc:	41bf      	sbcs	r7, r7
    6afe:	1a65      	subs	r5, r4, r1
    6b00:	427f      	negs	r7, r7
    6b02:	1bed      	subs	r5, r5, r7
    6b04:	4684      	mov	ip, r0
    6b06:	0228      	lsls	r0, r5, #8
    6b08:	d400      	bmi.n	6b0c <__aeabi_dsub+0x280>
    6b0a:	e08c      	b.n	6c26 <__aeabi_dsub+0x39a>
    6b0c:	4650      	mov	r0, sl
    6b0e:	1a17      	subs	r7, r2, r0
    6b10:	42ba      	cmp	r2, r7
    6b12:	4192      	sbcs	r2, r2
    6b14:	1b0c      	subs	r4, r1, r4
    6b16:	4255      	negs	r5, r2
    6b18:	1b65      	subs	r5, r4, r5
    6b1a:	4698      	mov	r8, r3
    6b1c:	e714      	b.n	6948 <__aeabi_dsub+0xbc>
    6b1e:	2501      	movs	r5, #1
    6b20:	4643      	mov	r3, r8
    6b22:	2400      	movs	r4, #0
    6b24:	401d      	ands	r5, r3
    6b26:	2700      	movs	r7, #0
    6b28:	e755      	b.n	69d6 <__aeabi_dsub+0x14a>
    6b2a:	4c2a      	ldr	r4, [pc, #168]	; (6bd4 <__aeabi_dsub+0x348>)
    6b2c:	1af6      	subs	r6, r6, r3
    6b2e:	402c      	ands	r4, r5
    6b30:	e732      	b.n	6998 <__aeabi_dsub+0x10c>
    6b32:	003d      	movs	r5, r7
    6b34:	3828      	subs	r0, #40	; 0x28
    6b36:	4085      	lsls	r5, r0
    6b38:	2700      	movs	r7, #0
    6b3a:	e717      	b.n	696c <__aeabi_dsub+0xe0>
    6b3c:	0038      	movs	r0, r7
    6b3e:	f000 facf 	bl	70e0 <__clzsi2>
    6b42:	3020      	adds	r0, #32
    6b44:	e706      	b.n	6954 <__aeabi_dsub+0xc8>
    6b46:	430a      	orrs	r2, r1
    6b48:	0017      	movs	r7, r2
    6b4a:	2100      	movs	r1, #0
    6b4c:	1e7a      	subs	r2, r7, #1
    6b4e:	4197      	sbcs	r7, r2
    6b50:	e6ee      	b.n	6930 <__aeabi_dsub+0xa4>
    6b52:	2b00      	cmp	r3, #0
    6b54:	d000      	beq.n	6b58 <__aeabi_dsub+0x2cc>
    6b56:	e0e5      	b.n	6d24 <__aeabi_dsub+0x498>
    6b58:	1c73      	adds	r3, r6, #1
    6b5a:	469c      	mov	ip, r3
    6b5c:	055b      	lsls	r3, r3, #21
    6b5e:	0d5b      	lsrs	r3, r3, #21
    6b60:	2b01      	cmp	r3, #1
    6b62:	dc00      	bgt.n	6b66 <__aeabi_dsub+0x2da>
    6b64:	e09f      	b.n	6ca6 <__aeabi_dsub+0x41a>
    6b66:	4b1a      	ldr	r3, [pc, #104]	; (6bd0 <__aeabi_dsub+0x344>)
    6b68:	459c      	cmp	ip, r3
    6b6a:	d100      	bne.n	6b6e <__aeabi_dsub+0x2e2>
    6b6c:	e0c5      	b.n	6cfa <__aeabi_dsub+0x46e>
    6b6e:	4452      	add	r2, sl
    6b70:	4552      	cmp	r2, sl
    6b72:	4180      	sbcs	r0, r0
    6b74:	1864      	adds	r4, r4, r1
    6b76:	4240      	negs	r0, r0
    6b78:	1824      	adds	r4, r4, r0
    6b7a:	07e7      	lsls	r7, r4, #31
    6b7c:	0852      	lsrs	r2, r2, #1
    6b7e:	4317      	orrs	r7, r2
    6b80:	0864      	lsrs	r4, r4, #1
    6b82:	4666      	mov	r6, ip
    6b84:	e708      	b.n	6998 <__aeabi_dsub+0x10c>
    6b86:	4812      	ldr	r0, [pc, #72]	; (6bd0 <__aeabi_dsub+0x344>)
    6b88:	4285      	cmp	r5, r0
    6b8a:	d100      	bne.n	6b8e <__aeabi_dsub+0x302>
    6b8c:	e085      	b.n	6c9a <__aeabi_dsub+0x40e>
    6b8e:	001d      	movs	r5, r3
    6b90:	e6bc      	b.n	690c <__aeabi_dsub+0x80>
    6b92:	0029      	movs	r1, r5
    6b94:	3e1f      	subs	r6, #31
    6b96:	40f1      	lsrs	r1, r6
    6b98:	2b20      	cmp	r3, #32
    6b9a:	d100      	bne.n	6b9e <__aeabi_dsub+0x312>
    6b9c:	e07f      	b.n	6c9e <__aeabi_dsub+0x412>
    6b9e:	2240      	movs	r2, #64	; 0x40
    6ba0:	1ad3      	subs	r3, r2, r3
    6ba2:	409d      	lsls	r5, r3
    6ba4:	432f      	orrs	r7, r5
    6ba6:	1e7d      	subs	r5, r7, #1
    6ba8:	41af      	sbcs	r7, r5
    6baa:	2400      	movs	r4, #0
    6bac:	430f      	orrs	r7, r1
    6bae:	2600      	movs	r6, #0
    6bb0:	e78e      	b.n	6ad0 <__aeabi_dsub+0x244>
    6bb2:	002b      	movs	r3, r5
    6bb4:	000f      	movs	r7, r1
    6bb6:	3b20      	subs	r3, #32
    6bb8:	40df      	lsrs	r7, r3
    6bba:	2d20      	cmp	r5, #32
    6bbc:	d071      	beq.n	6ca2 <__aeabi_dsub+0x416>
    6bbe:	2340      	movs	r3, #64	; 0x40
    6bc0:	1b5d      	subs	r5, r3, r5
    6bc2:	40a9      	lsls	r1, r5
    6bc4:	430a      	orrs	r2, r1
    6bc6:	1e51      	subs	r1, r2, #1
    6bc8:	418a      	sbcs	r2, r1
    6bca:	2100      	movs	r1, #0
    6bcc:	4317      	orrs	r7, r2
    6bce:	e6af      	b.n	6930 <__aeabi_dsub+0xa4>
    6bd0:	000007ff 	.word	0x000007ff
    6bd4:	ff7fffff 	.word	0xff7fffff
    6bd8:	800fffff 	.word	0x800fffff
    6bdc:	2e00      	cmp	r6, #0
    6bde:	d03e      	beq.n	6c5e <__aeabi_dsub+0x3d2>
    6be0:	4eb3      	ldr	r6, [pc, #716]	; (6eb0 <__aeabi_dsub+0x624>)
    6be2:	45b4      	cmp	ip, r6
    6be4:	d045      	beq.n	6c72 <__aeabi_dsub+0x3e6>
    6be6:	2680      	movs	r6, #128	; 0x80
    6be8:	0436      	lsls	r6, r6, #16
    6bea:	426d      	negs	r5, r5
    6bec:	4334      	orrs	r4, r6
    6bee:	2d38      	cmp	r5, #56	; 0x38
    6bf0:	dd00      	ble.n	6bf4 <__aeabi_dsub+0x368>
    6bf2:	e0a8      	b.n	6d46 <__aeabi_dsub+0x4ba>
    6bf4:	2d1f      	cmp	r5, #31
    6bf6:	dd00      	ble.n	6bfa <__aeabi_dsub+0x36e>
    6bf8:	e11f      	b.n	6e3a <__aeabi_dsub+0x5ae>
    6bfa:	2620      	movs	r6, #32
    6bfc:	0027      	movs	r7, r4
    6bfe:	4650      	mov	r0, sl
    6c00:	1b76      	subs	r6, r6, r5
    6c02:	40b7      	lsls	r7, r6
    6c04:	40e8      	lsrs	r0, r5
    6c06:	4307      	orrs	r7, r0
    6c08:	4650      	mov	r0, sl
    6c0a:	40b0      	lsls	r0, r6
    6c0c:	1e46      	subs	r6, r0, #1
    6c0e:	41b0      	sbcs	r0, r6
    6c10:	40ec      	lsrs	r4, r5
    6c12:	4338      	orrs	r0, r7
    6c14:	1a17      	subs	r7, r2, r0
    6c16:	42ba      	cmp	r2, r7
    6c18:	4192      	sbcs	r2, r2
    6c1a:	1b0c      	subs	r4, r1, r4
    6c1c:	4252      	negs	r2, r2
    6c1e:	1aa4      	subs	r4, r4, r2
    6c20:	4666      	mov	r6, ip
    6c22:	4698      	mov	r8, r3
    6c24:	e68b      	b.n	693e <__aeabi_dsub+0xb2>
    6c26:	4664      	mov	r4, ip
    6c28:	4667      	mov	r7, ip
    6c2a:	432c      	orrs	r4, r5
    6c2c:	d000      	beq.n	6c30 <__aeabi_dsub+0x3a4>
    6c2e:	e68b      	b.n	6948 <__aeabi_dsub+0xbc>
    6c30:	2500      	movs	r5, #0
    6c32:	2600      	movs	r6, #0
    6c34:	2700      	movs	r7, #0
    6c36:	e6ea      	b.n	6a0e <__aeabi_dsub+0x182>
    6c38:	001e      	movs	r6, r3
    6c3a:	e6ad      	b.n	6998 <__aeabi_dsub+0x10c>
    6c3c:	2b1f      	cmp	r3, #31
    6c3e:	dc60      	bgt.n	6d02 <__aeabi_dsub+0x476>
    6c40:	2720      	movs	r7, #32
    6c42:	1af8      	subs	r0, r7, r3
    6c44:	000f      	movs	r7, r1
    6c46:	4684      	mov	ip, r0
    6c48:	4087      	lsls	r7, r0
    6c4a:	0010      	movs	r0, r2
    6c4c:	40d8      	lsrs	r0, r3
    6c4e:	4307      	orrs	r7, r0
    6c50:	4660      	mov	r0, ip
    6c52:	4082      	lsls	r2, r0
    6c54:	1e50      	subs	r0, r2, #1
    6c56:	4182      	sbcs	r2, r0
    6c58:	40d9      	lsrs	r1, r3
    6c5a:	4317      	orrs	r7, r2
    6c5c:	e6f5      	b.n	6a4a <__aeabi_dsub+0x1be>
    6c5e:	0026      	movs	r6, r4
    6c60:	4650      	mov	r0, sl
    6c62:	4306      	orrs	r6, r0
    6c64:	d005      	beq.n	6c72 <__aeabi_dsub+0x3e6>
    6c66:	43ed      	mvns	r5, r5
    6c68:	2d00      	cmp	r5, #0
    6c6a:	d0d3      	beq.n	6c14 <__aeabi_dsub+0x388>
    6c6c:	4e90      	ldr	r6, [pc, #576]	; (6eb0 <__aeabi_dsub+0x624>)
    6c6e:	45b4      	cmp	ip, r6
    6c70:	d1bd      	bne.n	6bee <__aeabi_dsub+0x362>
    6c72:	000c      	movs	r4, r1
    6c74:	0017      	movs	r7, r2
    6c76:	4666      	mov	r6, ip
    6c78:	4698      	mov	r8, r3
    6c7a:	e68d      	b.n	6998 <__aeabi_dsub+0x10c>
    6c7c:	488c      	ldr	r0, [pc, #560]	; (6eb0 <__aeabi_dsub+0x624>)
    6c7e:	4283      	cmp	r3, r0
    6c80:	d00b      	beq.n	6c9a <__aeabi_dsub+0x40e>
    6c82:	4663      	mov	r3, ip
    6c84:	e6d9      	b.n	6a3a <__aeabi_dsub+0x1ae>
    6c86:	2d00      	cmp	r5, #0
    6c88:	d000      	beq.n	6c8c <__aeabi_dsub+0x400>
    6c8a:	e096      	b.n	6dba <__aeabi_dsub+0x52e>
    6c8c:	0008      	movs	r0, r1
    6c8e:	4310      	orrs	r0, r2
    6c90:	d100      	bne.n	6c94 <__aeabi_dsub+0x408>
    6c92:	e0e2      	b.n	6e5a <__aeabi_dsub+0x5ce>
    6c94:	000c      	movs	r4, r1
    6c96:	0017      	movs	r7, r2
    6c98:	4698      	mov	r8, r3
    6c9a:	4e85      	ldr	r6, [pc, #532]	; (6eb0 <__aeabi_dsub+0x624>)
    6c9c:	e67c      	b.n	6998 <__aeabi_dsub+0x10c>
    6c9e:	2500      	movs	r5, #0
    6ca0:	e780      	b.n	6ba4 <__aeabi_dsub+0x318>
    6ca2:	2100      	movs	r1, #0
    6ca4:	e78e      	b.n	6bc4 <__aeabi_dsub+0x338>
    6ca6:	0023      	movs	r3, r4
    6ca8:	4650      	mov	r0, sl
    6caa:	4303      	orrs	r3, r0
    6cac:	2e00      	cmp	r6, #0
    6cae:	d000      	beq.n	6cb2 <__aeabi_dsub+0x426>
    6cb0:	e0a8      	b.n	6e04 <__aeabi_dsub+0x578>
    6cb2:	2b00      	cmp	r3, #0
    6cb4:	d100      	bne.n	6cb8 <__aeabi_dsub+0x42c>
    6cb6:	e0de      	b.n	6e76 <__aeabi_dsub+0x5ea>
    6cb8:	000b      	movs	r3, r1
    6cba:	4313      	orrs	r3, r2
    6cbc:	d100      	bne.n	6cc0 <__aeabi_dsub+0x434>
    6cbe:	e66b      	b.n	6998 <__aeabi_dsub+0x10c>
    6cc0:	4452      	add	r2, sl
    6cc2:	4552      	cmp	r2, sl
    6cc4:	4180      	sbcs	r0, r0
    6cc6:	1864      	adds	r4, r4, r1
    6cc8:	4240      	negs	r0, r0
    6cca:	1824      	adds	r4, r4, r0
    6ccc:	0017      	movs	r7, r2
    6cce:	0223      	lsls	r3, r4, #8
    6cd0:	d400      	bmi.n	6cd4 <__aeabi_dsub+0x448>
    6cd2:	e6fd      	b.n	6ad0 <__aeabi_dsub+0x244>
    6cd4:	4b77      	ldr	r3, [pc, #476]	; (6eb4 <__aeabi_dsub+0x628>)
    6cd6:	4666      	mov	r6, ip
    6cd8:	401c      	ands	r4, r3
    6cda:	e65d      	b.n	6998 <__aeabi_dsub+0x10c>
    6cdc:	0025      	movs	r5, r4
    6cde:	4650      	mov	r0, sl
    6ce0:	4305      	orrs	r5, r0
    6ce2:	2e00      	cmp	r6, #0
    6ce4:	d1cf      	bne.n	6c86 <__aeabi_dsub+0x3fa>
    6ce6:	2d00      	cmp	r5, #0
    6ce8:	d14f      	bne.n	6d8a <__aeabi_dsub+0x4fe>
    6cea:	000c      	movs	r4, r1
    6cec:	4314      	orrs	r4, r2
    6cee:	d100      	bne.n	6cf2 <__aeabi_dsub+0x466>
    6cf0:	e0a0      	b.n	6e34 <__aeabi_dsub+0x5a8>
    6cf2:	000c      	movs	r4, r1
    6cf4:	0017      	movs	r7, r2
    6cf6:	4698      	mov	r8, r3
    6cf8:	e64e      	b.n	6998 <__aeabi_dsub+0x10c>
    6cfa:	4666      	mov	r6, ip
    6cfc:	2400      	movs	r4, #0
    6cfe:	2700      	movs	r7, #0
    6d00:	e685      	b.n	6a0e <__aeabi_dsub+0x182>
    6d02:	001f      	movs	r7, r3
    6d04:	0008      	movs	r0, r1
    6d06:	3f20      	subs	r7, #32
    6d08:	40f8      	lsrs	r0, r7
    6d0a:	0007      	movs	r7, r0
    6d0c:	2b20      	cmp	r3, #32
    6d0e:	d100      	bne.n	6d12 <__aeabi_dsub+0x486>
    6d10:	e08e      	b.n	6e30 <__aeabi_dsub+0x5a4>
    6d12:	2040      	movs	r0, #64	; 0x40
    6d14:	1ac3      	subs	r3, r0, r3
    6d16:	4099      	lsls	r1, r3
    6d18:	430a      	orrs	r2, r1
    6d1a:	1e51      	subs	r1, r2, #1
    6d1c:	418a      	sbcs	r2, r1
    6d1e:	2100      	movs	r1, #0
    6d20:	4317      	orrs	r7, r2
    6d22:	e692      	b.n	6a4a <__aeabi_dsub+0x1be>
    6d24:	2e00      	cmp	r6, #0
    6d26:	d114      	bne.n	6d52 <__aeabi_dsub+0x4c6>
    6d28:	0026      	movs	r6, r4
    6d2a:	4650      	mov	r0, sl
    6d2c:	4306      	orrs	r6, r0
    6d2e:	d062      	beq.n	6df6 <__aeabi_dsub+0x56a>
    6d30:	43db      	mvns	r3, r3
    6d32:	2b00      	cmp	r3, #0
    6d34:	d15c      	bne.n	6df0 <__aeabi_dsub+0x564>
    6d36:	1887      	adds	r7, r0, r2
    6d38:	4297      	cmp	r7, r2
    6d3a:	4192      	sbcs	r2, r2
    6d3c:	1864      	adds	r4, r4, r1
    6d3e:	4252      	negs	r2, r2
    6d40:	18a4      	adds	r4, r4, r2
    6d42:	4666      	mov	r6, ip
    6d44:	e687      	b.n	6a56 <__aeabi_dsub+0x1ca>
    6d46:	4650      	mov	r0, sl
    6d48:	4320      	orrs	r0, r4
    6d4a:	1e44      	subs	r4, r0, #1
    6d4c:	41a0      	sbcs	r0, r4
    6d4e:	2400      	movs	r4, #0
    6d50:	e760      	b.n	6c14 <__aeabi_dsub+0x388>
    6d52:	4e57      	ldr	r6, [pc, #348]	; (6eb0 <__aeabi_dsub+0x624>)
    6d54:	45b4      	cmp	ip, r6
    6d56:	d04e      	beq.n	6df6 <__aeabi_dsub+0x56a>
    6d58:	2680      	movs	r6, #128	; 0x80
    6d5a:	0436      	lsls	r6, r6, #16
    6d5c:	425b      	negs	r3, r3
    6d5e:	4334      	orrs	r4, r6
    6d60:	2b38      	cmp	r3, #56	; 0x38
    6d62:	dd00      	ble.n	6d66 <__aeabi_dsub+0x4da>
    6d64:	e07f      	b.n	6e66 <__aeabi_dsub+0x5da>
    6d66:	2b1f      	cmp	r3, #31
    6d68:	dd00      	ble.n	6d6c <__aeabi_dsub+0x4e0>
    6d6a:	e08b      	b.n	6e84 <__aeabi_dsub+0x5f8>
    6d6c:	2620      	movs	r6, #32
    6d6e:	0027      	movs	r7, r4
    6d70:	4650      	mov	r0, sl
    6d72:	1af6      	subs	r6, r6, r3
    6d74:	40b7      	lsls	r7, r6
    6d76:	40d8      	lsrs	r0, r3
    6d78:	4307      	orrs	r7, r0
    6d7a:	4650      	mov	r0, sl
    6d7c:	40b0      	lsls	r0, r6
    6d7e:	1e46      	subs	r6, r0, #1
    6d80:	41b0      	sbcs	r0, r6
    6d82:	4307      	orrs	r7, r0
    6d84:	40dc      	lsrs	r4, r3
    6d86:	18bf      	adds	r7, r7, r2
    6d88:	e7d6      	b.n	6d38 <__aeabi_dsub+0x4ac>
    6d8a:	000d      	movs	r5, r1
    6d8c:	4315      	orrs	r5, r2
    6d8e:	d100      	bne.n	6d92 <__aeabi_dsub+0x506>
    6d90:	e602      	b.n	6998 <__aeabi_dsub+0x10c>
    6d92:	4650      	mov	r0, sl
    6d94:	1a80      	subs	r0, r0, r2
    6d96:	4582      	cmp	sl, r0
    6d98:	41bf      	sbcs	r7, r7
    6d9a:	1a65      	subs	r5, r4, r1
    6d9c:	427f      	negs	r7, r7
    6d9e:	1bed      	subs	r5, r5, r7
    6da0:	4684      	mov	ip, r0
    6da2:	0228      	lsls	r0, r5, #8
    6da4:	d400      	bmi.n	6da8 <__aeabi_dsub+0x51c>
    6da6:	e68d      	b.n	6ac4 <__aeabi_dsub+0x238>
    6da8:	4650      	mov	r0, sl
    6daa:	1a17      	subs	r7, r2, r0
    6dac:	42ba      	cmp	r2, r7
    6dae:	4192      	sbcs	r2, r2
    6db0:	1b0c      	subs	r4, r1, r4
    6db2:	4252      	negs	r2, r2
    6db4:	1aa4      	subs	r4, r4, r2
    6db6:	4698      	mov	r8, r3
    6db8:	e5ee      	b.n	6998 <__aeabi_dsub+0x10c>
    6dba:	000d      	movs	r5, r1
    6dbc:	4315      	orrs	r5, r2
    6dbe:	d100      	bne.n	6dc2 <__aeabi_dsub+0x536>
    6dc0:	e76b      	b.n	6c9a <__aeabi_dsub+0x40e>
    6dc2:	4650      	mov	r0, sl
    6dc4:	0767      	lsls	r7, r4, #29
    6dc6:	08c0      	lsrs	r0, r0, #3
    6dc8:	4307      	orrs	r7, r0
    6dca:	2080      	movs	r0, #128	; 0x80
    6dcc:	08e4      	lsrs	r4, r4, #3
    6dce:	0300      	lsls	r0, r0, #12
    6dd0:	4204      	tst	r4, r0
    6dd2:	d007      	beq.n	6de4 <__aeabi_dsub+0x558>
    6dd4:	08cd      	lsrs	r5, r1, #3
    6dd6:	4205      	tst	r5, r0
    6dd8:	d104      	bne.n	6de4 <__aeabi_dsub+0x558>
    6dda:	002c      	movs	r4, r5
    6ddc:	4698      	mov	r8, r3
    6dde:	08d7      	lsrs	r7, r2, #3
    6de0:	0749      	lsls	r1, r1, #29
    6de2:	430f      	orrs	r7, r1
    6de4:	0f7b      	lsrs	r3, r7, #29
    6de6:	00e4      	lsls	r4, r4, #3
    6de8:	431c      	orrs	r4, r3
    6dea:	00ff      	lsls	r7, r7, #3
    6dec:	4e30      	ldr	r6, [pc, #192]	; (6eb0 <__aeabi_dsub+0x624>)
    6dee:	e5d3      	b.n	6998 <__aeabi_dsub+0x10c>
    6df0:	4e2f      	ldr	r6, [pc, #188]	; (6eb0 <__aeabi_dsub+0x624>)
    6df2:	45b4      	cmp	ip, r6
    6df4:	d1b4      	bne.n	6d60 <__aeabi_dsub+0x4d4>
    6df6:	000c      	movs	r4, r1
    6df8:	0017      	movs	r7, r2
    6dfa:	4666      	mov	r6, ip
    6dfc:	e5cc      	b.n	6998 <__aeabi_dsub+0x10c>
    6dfe:	2700      	movs	r7, #0
    6e00:	2400      	movs	r4, #0
    6e02:	e5e8      	b.n	69d6 <__aeabi_dsub+0x14a>
    6e04:	2b00      	cmp	r3, #0
    6e06:	d039      	beq.n	6e7c <__aeabi_dsub+0x5f0>
    6e08:	000b      	movs	r3, r1
    6e0a:	4313      	orrs	r3, r2
    6e0c:	d100      	bne.n	6e10 <__aeabi_dsub+0x584>
    6e0e:	e744      	b.n	6c9a <__aeabi_dsub+0x40e>
    6e10:	08c0      	lsrs	r0, r0, #3
    6e12:	0767      	lsls	r7, r4, #29
    6e14:	4307      	orrs	r7, r0
    6e16:	2080      	movs	r0, #128	; 0x80
    6e18:	08e4      	lsrs	r4, r4, #3
    6e1a:	0300      	lsls	r0, r0, #12
    6e1c:	4204      	tst	r4, r0
    6e1e:	d0e1      	beq.n	6de4 <__aeabi_dsub+0x558>
    6e20:	08cb      	lsrs	r3, r1, #3
    6e22:	4203      	tst	r3, r0
    6e24:	d1de      	bne.n	6de4 <__aeabi_dsub+0x558>
    6e26:	08d7      	lsrs	r7, r2, #3
    6e28:	0749      	lsls	r1, r1, #29
    6e2a:	430f      	orrs	r7, r1
    6e2c:	001c      	movs	r4, r3
    6e2e:	e7d9      	b.n	6de4 <__aeabi_dsub+0x558>
    6e30:	2100      	movs	r1, #0
    6e32:	e771      	b.n	6d18 <__aeabi_dsub+0x48c>
    6e34:	2500      	movs	r5, #0
    6e36:	2700      	movs	r7, #0
    6e38:	e5e9      	b.n	6a0e <__aeabi_dsub+0x182>
    6e3a:	002e      	movs	r6, r5
    6e3c:	0027      	movs	r7, r4
    6e3e:	3e20      	subs	r6, #32
    6e40:	40f7      	lsrs	r7, r6
    6e42:	2d20      	cmp	r5, #32
    6e44:	d02f      	beq.n	6ea6 <__aeabi_dsub+0x61a>
    6e46:	2640      	movs	r6, #64	; 0x40
    6e48:	1b75      	subs	r5, r6, r5
    6e4a:	40ac      	lsls	r4, r5
    6e4c:	4650      	mov	r0, sl
    6e4e:	4320      	orrs	r0, r4
    6e50:	1e44      	subs	r4, r0, #1
    6e52:	41a0      	sbcs	r0, r4
    6e54:	2400      	movs	r4, #0
    6e56:	4338      	orrs	r0, r7
    6e58:	e6dc      	b.n	6c14 <__aeabi_dsub+0x388>
    6e5a:	2480      	movs	r4, #128	; 0x80
    6e5c:	2500      	movs	r5, #0
    6e5e:	0324      	lsls	r4, r4, #12
    6e60:	4e13      	ldr	r6, [pc, #76]	; (6eb0 <__aeabi_dsub+0x624>)
    6e62:	2700      	movs	r7, #0
    6e64:	e5d3      	b.n	6a0e <__aeabi_dsub+0x182>
    6e66:	4650      	mov	r0, sl
    6e68:	4320      	orrs	r0, r4
    6e6a:	0007      	movs	r7, r0
    6e6c:	1e78      	subs	r0, r7, #1
    6e6e:	4187      	sbcs	r7, r0
    6e70:	2400      	movs	r4, #0
    6e72:	18bf      	adds	r7, r7, r2
    6e74:	e760      	b.n	6d38 <__aeabi_dsub+0x4ac>
    6e76:	000c      	movs	r4, r1
    6e78:	0017      	movs	r7, r2
    6e7a:	e58d      	b.n	6998 <__aeabi_dsub+0x10c>
    6e7c:	000c      	movs	r4, r1
    6e7e:	0017      	movs	r7, r2
    6e80:	4e0b      	ldr	r6, [pc, #44]	; (6eb0 <__aeabi_dsub+0x624>)
    6e82:	e589      	b.n	6998 <__aeabi_dsub+0x10c>
    6e84:	001e      	movs	r6, r3
    6e86:	0027      	movs	r7, r4
    6e88:	3e20      	subs	r6, #32
    6e8a:	40f7      	lsrs	r7, r6
    6e8c:	2b20      	cmp	r3, #32
    6e8e:	d00c      	beq.n	6eaa <__aeabi_dsub+0x61e>
    6e90:	2640      	movs	r6, #64	; 0x40
    6e92:	1af3      	subs	r3, r6, r3
    6e94:	409c      	lsls	r4, r3
    6e96:	4650      	mov	r0, sl
    6e98:	4320      	orrs	r0, r4
    6e9a:	1e44      	subs	r4, r0, #1
    6e9c:	41a0      	sbcs	r0, r4
    6e9e:	4307      	orrs	r7, r0
    6ea0:	2400      	movs	r4, #0
    6ea2:	18bf      	adds	r7, r7, r2
    6ea4:	e748      	b.n	6d38 <__aeabi_dsub+0x4ac>
    6ea6:	2400      	movs	r4, #0
    6ea8:	e7d0      	b.n	6e4c <__aeabi_dsub+0x5c0>
    6eaa:	2400      	movs	r4, #0
    6eac:	e7f3      	b.n	6e96 <__aeabi_dsub+0x60a>
    6eae:	46c0      	nop			; (mov r8, r8)
    6eb0:	000007ff 	.word	0x000007ff
    6eb4:	ff7fffff 	.word	0xff7fffff

00006eb8 <__aeabi_ui2d>:
    6eb8:	b510      	push	{r4, lr}
    6eba:	1e04      	subs	r4, r0, #0
    6ebc:	d028      	beq.n	6f10 <__aeabi_ui2d+0x58>
    6ebe:	f000 f90f 	bl	70e0 <__clzsi2>
    6ec2:	4b15      	ldr	r3, [pc, #84]	; (6f18 <__aeabi_ui2d+0x60>)
    6ec4:	4a15      	ldr	r2, [pc, #84]	; (6f1c <__aeabi_ui2d+0x64>)
    6ec6:	1a1b      	subs	r3, r3, r0
    6ec8:	1ad2      	subs	r2, r2, r3
    6eca:	2a1f      	cmp	r2, #31
    6ecc:	dd15      	ble.n	6efa <__aeabi_ui2d+0x42>
    6ece:	4a14      	ldr	r2, [pc, #80]	; (6f20 <__aeabi_ui2d+0x68>)
    6ed0:	1ad2      	subs	r2, r2, r3
    6ed2:	4094      	lsls	r4, r2
    6ed4:	2200      	movs	r2, #0
    6ed6:	0324      	lsls	r4, r4, #12
    6ed8:	055b      	lsls	r3, r3, #21
    6eda:	0b24      	lsrs	r4, r4, #12
    6edc:	0d5b      	lsrs	r3, r3, #21
    6ede:	2100      	movs	r1, #0
    6ee0:	0010      	movs	r0, r2
    6ee2:	0324      	lsls	r4, r4, #12
    6ee4:	0d0a      	lsrs	r2, r1, #20
    6ee6:	0b24      	lsrs	r4, r4, #12
    6ee8:	0512      	lsls	r2, r2, #20
    6eea:	4322      	orrs	r2, r4
    6eec:	4c0d      	ldr	r4, [pc, #52]	; (6f24 <__aeabi_ui2d+0x6c>)
    6eee:	051b      	lsls	r3, r3, #20
    6ef0:	4022      	ands	r2, r4
    6ef2:	4313      	orrs	r3, r2
    6ef4:	005b      	lsls	r3, r3, #1
    6ef6:	0859      	lsrs	r1, r3, #1
    6ef8:	bd10      	pop	{r4, pc}
    6efa:	0021      	movs	r1, r4
    6efc:	4091      	lsls	r1, r2
    6efe:	000a      	movs	r2, r1
    6f00:	210b      	movs	r1, #11
    6f02:	1a08      	subs	r0, r1, r0
    6f04:	40c4      	lsrs	r4, r0
    6f06:	055b      	lsls	r3, r3, #21
    6f08:	0324      	lsls	r4, r4, #12
    6f0a:	0b24      	lsrs	r4, r4, #12
    6f0c:	0d5b      	lsrs	r3, r3, #21
    6f0e:	e7e6      	b.n	6ede <__aeabi_ui2d+0x26>
    6f10:	2300      	movs	r3, #0
    6f12:	2400      	movs	r4, #0
    6f14:	2200      	movs	r2, #0
    6f16:	e7e2      	b.n	6ede <__aeabi_ui2d+0x26>
    6f18:	0000041e 	.word	0x0000041e
    6f1c:	00000433 	.word	0x00000433
    6f20:	00000413 	.word	0x00000413
    6f24:	800fffff 	.word	0x800fffff

00006f28 <__aeabi_f2d>:
    6f28:	0041      	lsls	r1, r0, #1
    6f2a:	0e09      	lsrs	r1, r1, #24
    6f2c:	1c4b      	adds	r3, r1, #1
    6f2e:	b570      	push	{r4, r5, r6, lr}
    6f30:	b2db      	uxtb	r3, r3
    6f32:	0246      	lsls	r6, r0, #9
    6f34:	0a75      	lsrs	r5, r6, #9
    6f36:	0fc4      	lsrs	r4, r0, #31
    6f38:	2b01      	cmp	r3, #1
    6f3a:	dd14      	ble.n	6f66 <__aeabi_f2d+0x3e>
    6f3c:	23e0      	movs	r3, #224	; 0xe0
    6f3e:	009b      	lsls	r3, r3, #2
    6f40:	076d      	lsls	r5, r5, #29
    6f42:	0b36      	lsrs	r6, r6, #12
    6f44:	18cb      	adds	r3, r1, r3
    6f46:	2100      	movs	r1, #0
    6f48:	0d0a      	lsrs	r2, r1, #20
    6f4a:	0028      	movs	r0, r5
    6f4c:	0512      	lsls	r2, r2, #20
    6f4e:	4d1c      	ldr	r5, [pc, #112]	; (6fc0 <__aeabi_f2d+0x98>)
    6f50:	4332      	orrs	r2, r6
    6f52:	055b      	lsls	r3, r3, #21
    6f54:	402a      	ands	r2, r5
    6f56:	085b      	lsrs	r3, r3, #1
    6f58:	4313      	orrs	r3, r2
    6f5a:	005b      	lsls	r3, r3, #1
    6f5c:	07e4      	lsls	r4, r4, #31
    6f5e:	085b      	lsrs	r3, r3, #1
    6f60:	4323      	orrs	r3, r4
    6f62:	0019      	movs	r1, r3
    6f64:	bd70      	pop	{r4, r5, r6, pc}
    6f66:	2900      	cmp	r1, #0
    6f68:	d114      	bne.n	6f94 <__aeabi_f2d+0x6c>
    6f6a:	2d00      	cmp	r5, #0
    6f6c:	d01e      	beq.n	6fac <__aeabi_f2d+0x84>
    6f6e:	0028      	movs	r0, r5
    6f70:	f000 f8b6 	bl	70e0 <__clzsi2>
    6f74:	280a      	cmp	r0, #10
    6f76:	dc1c      	bgt.n	6fb2 <__aeabi_f2d+0x8a>
    6f78:	230b      	movs	r3, #11
    6f7a:	002a      	movs	r2, r5
    6f7c:	1a1b      	subs	r3, r3, r0
    6f7e:	40da      	lsrs	r2, r3
    6f80:	0003      	movs	r3, r0
    6f82:	3315      	adds	r3, #21
    6f84:	409d      	lsls	r5, r3
    6f86:	4b0f      	ldr	r3, [pc, #60]	; (6fc4 <__aeabi_f2d+0x9c>)
    6f88:	0312      	lsls	r2, r2, #12
    6f8a:	1a1b      	subs	r3, r3, r0
    6f8c:	055b      	lsls	r3, r3, #21
    6f8e:	0b16      	lsrs	r6, r2, #12
    6f90:	0d5b      	lsrs	r3, r3, #21
    6f92:	e7d8      	b.n	6f46 <__aeabi_f2d+0x1e>
    6f94:	2d00      	cmp	r5, #0
    6f96:	d006      	beq.n	6fa6 <__aeabi_f2d+0x7e>
    6f98:	0b32      	lsrs	r2, r6, #12
    6f9a:	2680      	movs	r6, #128	; 0x80
    6f9c:	0336      	lsls	r6, r6, #12
    6f9e:	076d      	lsls	r5, r5, #29
    6fa0:	4316      	orrs	r6, r2
    6fa2:	4b09      	ldr	r3, [pc, #36]	; (6fc8 <__aeabi_f2d+0xa0>)
    6fa4:	e7cf      	b.n	6f46 <__aeabi_f2d+0x1e>
    6fa6:	4b08      	ldr	r3, [pc, #32]	; (6fc8 <__aeabi_f2d+0xa0>)
    6fa8:	2600      	movs	r6, #0
    6faa:	e7cc      	b.n	6f46 <__aeabi_f2d+0x1e>
    6fac:	2300      	movs	r3, #0
    6fae:	2600      	movs	r6, #0
    6fb0:	e7c9      	b.n	6f46 <__aeabi_f2d+0x1e>
    6fb2:	0003      	movs	r3, r0
    6fb4:	002a      	movs	r2, r5
    6fb6:	3b0b      	subs	r3, #11
    6fb8:	409a      	lsls	r2, r3
    6fba:	2500      	movs	r5, #0
    6fbc:	e7e3      	b.n	6f86 <__aeabi_f2d+0x5e>
    6fbe:	46c0      	nop			; (mov r8, r8)
    6fc0:	800fffff 	.word	0x800fffff
    6fc4:	00000389 	.word	0x00000389
    6fc8:	000007ff 	.word	0x000007ff

00006fcc <__aeabi_d2f>:
    6fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6fce:	004c      	lsls	r4, r1, #1
    6fd0:	0d64      	lsrs	r4, r4, #21
    6fd2:	030b      	lsls	r3, r1, #12
    6fd4:	1c62      	adds	r2, r4, #1
    6fd6:	0f45      	lsrs	r5, r0, #29
    6fd8:	0a5b      	lsrs	r3, r3, #9
    6fda:	0552      	lsls	r2, r2, #21
    6fdc:	432b      	orrs	r3, r5
    6fde:	0fc9      	lsrs	r1, r1, #31
    6fe0:	00c5      	lsls	r5, r0, #3
    6fe2:	0d52      	lsrs	r2, r2, #21
    6fe4:	2a01      	cmp	r2, #1
    6fe6:	dd28      	ble.n	703a <__aeabi_d2f+0x6e>
    6fe8:	4a3a      	ldr	r2, [pc, #232]	; (70d4 <__aeabi_d2f+0x108>)
    6fea:	18a6      	adds	r6, r4, r2
    6fec:	2efe      	cmp	r6, #254	; 0xfe
    6fee:	dc1b      	bgt.n	7028 <__aeabi_d2f+0x5c>
    6ff0:	2e00      	cmp	r6, #0
    6ff2:	dd3e      	ble.n	7072 <__aeabi_d2f+0xa6>
    6ff4:	0180      	lsls	r0, r0, #6
    6ff6:	0002      	movs	r2, r0
    6ff8:	1e50      	subs	r0, r2, #1
    6ffa:	4182      	sbcs	r2, r0
    6ffc:	0f6d      	lsrs	r5, r5, #29
    6ffe:	432a      	orrs	r2, r5
    7000:	00db      	lsls	r3, r3, #3
    7002:	4313      	orrs	r3, r2
    7004:	075a      	lsls	r2, r3, #29
    7006:	d004      	beq.n	7012 <__aeabi_d2f+0x46>
    7008:	220f      	movs	r2, #15
    700a:	401a      	ands	r2, r3
    700c:	2a04      	cmp	r2, #4
    700e:	d000      	beq.n	7012 <__aeabi_d2f+0x46>
    7010:	3304      	adds	r3, #4
    7012:	2280      	movs	r2, #128	; 0x80
    7014:	04d2      	lsls	r2, r2, #19
    7016:	401a      	ands	r2, r3
    7018:	d05a      	beq.n	70d0 <__aeabi_d2f+0x104>
    701a:	3601      	adds	r6, #1
    701c:	2eff      	cmp	r6, #255	; 0xff
    701e:	d003      	beq.n	7028 <__aeabi_d2f+0x5c>
    7020:	019b      	lsls	r3, r3, #6
    7022:	0a5b      	lsrs	r3, r3, #9
    7024:	b2f4      	uxtb	r4, r6
    7026:	e001      	b.n	702c <__aeabi_d2f+0x60>
    7028:	24ff      	movs	r4, #255	; 0xff
    702a:	2300      	movs	r3, #0
    702c:	0258      	lsls	r0, r3, #9
    702e:	05e4      	lsls	r4, r4, #23
    7030:	0a40      	lsrs	r0, r0, #9
    7032:	07c9      	lsls	r1, r1, #31
    7034:	4320      	orrs	r0, r4
    7036:	4308      	orrs	r0, r1
    7038:	bdf0      	pop	{r4, r5, r6, r7, pc}
    703a:	2c00      	cmp	r4, #0
    703c:	d007      	beq.n	704e <__aeabi_d2f+0x82>
    703e:	431d      	orrs	r5, r3
    7040:	d0f2      	beq.n	7028 <__aeabi_d2f+0x5c>
    7042:	2080      	movs	r0, #128	; 0x80
    7044:	00db      	lsls	r3, r3, #3
    7046:	0480      	lsls	r0, r0, #18
    7048:	4303      	orrs	r3, r0
    704a:	26ff      	movs	r6, #255	; 0xff
    704c:	e7da      	b.n	7004 <__aeabi_d2f+0x38>
    704e:	432b      	orrs	r3, r5
    7050:	d003      	beq.n	705a <__aeabi_d2f+0x8e>
    7052:	2305      	movs	r3, #5
    7054:	08db      	lsrs	r3, r3, #3
    7056:	2cff      	cmp	r4, #255	; 0xff
    7058:	d003      	beq.n	7062 <__aeabi_d2f+0x96>
    705a:	025b      	lsls	r3, r3, #9
    705c:	0a5b      	lsrs	r3, r3, #9
    705e:	b2e4      	uxtb	r4, r4
    7060:	e7e4      	b.n	702c <__aeabi_d2f+0x60>
    7062:	2b00      	cmp	r3, #0
    7064:	d032      	beq.n	70cc <__aeabi_d2f+0x100>
    7066:	2080      	movs	r0, #128	; 0x80
    7068:	03c0      	lsls	r0, r0, #15
    706a:	4303      	orrs	r3, r0
    706c:	025b      	lsls	r3, r3, #9
    706e:	0a5b      	lsrs	r3, r3, #9
    7070:	e7dc      	b.n	702c <__aeabi_d2f+0x60>
    7072:	0032      	movs	r2, r6
    7074:	3217      	adds	r2, #23
    7076:	db14      	blt.n	70a2 <__aeabi_d2f+0xd6>
    7078:	2280      	movs	r2, #128	; 0x80
    707a:	271e      	movs	r7, #30
    707c:	0412      	lsls	r2, r2, #16
    707e:	4313      	orrs	r3, r2
    7080:	1bbf      	subs	r7, r7, r6
    7082:	2f1f      	cmp	r7, #31
    7084:	dc0f      	bgt.n	70a6 <__aeabi_d2f+0xda>
    7086:	4a14      	ldr	r2, [pc, #80]	; (70d8 <__aeabi_d2f+0x10c>)
    7088:	4694      	mov	ip, r2
    708a:	4464      	add	r4, ip
    708c:	002a      	movs	r2, r5
    708e:	40a5      	lsls	r5, r4
    7090:	002e      	movs	r6, r5
    7092:	40a3      	lsls	r3, r4
    7094:	1e75      	subs	r5, r6, #1
    7096:	41ae      	sbcs	r6, r5
    7098:	40fa      	lsrs	r2, r7
    709a:	4333      	orrs	r3, r6
    709c:	4313      	orrs	r3, r2
    709e:	2600      	movs	r6, #0
    70a0:	e7b0      	b.n	7004 <__aeabi_d2f+0x38>
    70a2:	2400      	movs	r4, #0
    70a4:	e7d5      	b.n	7052 <__aeabi_d2f+0x86>
    70a6:	2202      	movs	r2, #2
    70a8:	4252      	negs	r2, r2
    70aa:	1b96      	subs	r6, r2, r6
    70ac:	001a      	movs	r2, r3
    70ae:	40f2      	lsrs	r2, r6
    70b0:	2f20      	cmp	r7, #32
    70b2:	d009      	beq.n	70c8 <__aeabi_d2f+0xfc>
    70b4:	4809      	ldr	r0, [pc, #36]	; (70dc <__aeabi_d2f+0x110>)
    70b6:	4684      	mov	ip, r0
    70b8:	4464      	add	r4, ip
    70ba:	40a3      	lsls	r3, r4
    70bc:	432b      	orrs	r3, r5
    70be:	1e5d      	subs	r5, r3, #1
    70c0:	41ab      	sbcs	r3, r5
    70c2:	2600      	movs	r6, #0
    70c4:	4313      	orrs	r3, r2
    70c6:	e79d      	b.n	7004 <__aeabi_d2f+0x38>
    70c8:	2300      	movs	r3, #0
    70ca:	e7f7      	b.n	70bc <__aeabi_d2f+0xf0>
    70cc:	2300      	movs	r3, #0
    70ce:	e7ad      	b.n	702c <__aeabi_d2f+0x60>
    70d0:	0034      	movs	r4, r6
    70d2:	e7bf      	b.n	7054 <__aeabi_d2f+0x88>
    70d4:	fffffc80 	.word	0xfffffc80
    70d8:	fffffc82 	.word	0xfffffc82
    70dc:	fffffca2 	.word	0xfffffca2

000070e0 <__clzsi2>:
    70e0:	211c      	movs	r1, #28
    70e2:	2301      	movs	r3, #1
    70e4:	041b      	lsls	r3, r3, #16
    70e6:	4298      	cmp	r0, r3
    70e8:	d301      	bcc.n	70ee <__clzsi2+0xe>
    70ea:	0c00      	lsrs	r0, r0, #16
    70ec:	3910      	subs	r1, #16
    70ee:	0a1b      	lsrs	r3, r3, #8
    70f0:	4298      	cmp	r0, r3
    70f2:	d301      	bcc.n	70f8 <__clzsi2+0x18>
    70f4:	0a00      	lsrs	r0, r0, #8
    70f6:	3908      	subs	r1, #8
    70f8:	091b      	lsrs	r3, r3, #4
    70fa:	4298      	cmp	r0, r3
    70fc:	d301      	bcc.n	7102 <__clzsi2+0x22>
    70fe:	0900      	lsrs	r0, r0, #4
    7100:	3904      	subs	r1, #4
    7102:	a202      	add	r2, pc, #8	; (adr r2, 710c <__clzsi2+0x2c>)
    7104:	5c10      	ldrb	r0, [r2, r0]
    7106:	1840      	adds	r0, r0, r1
    7108:	4770      	bx	lr
    710a:	46c0      	nop			; (mov r8, r8)
    710c:	02020304 	.word	0x02020304
    7110:	01010101 	.word	0x01010101
	...

0000711c <__clzdi2>:
    711c:	b510      	push	{r4, lr}
    711e:	2900      	cmp	r1, #0
    7120:	d103      	bne.n	712a <__clzdi2+0xe>
    7122:	f7ff ffdd 	bl	70e0 <__clzsi2>
    7126:	3020      	adds	r0, #32
    7128:	e002      	b.n	7130 <__clzdi2+0x14>
    712a:	1c08      	adds	r0, r1, #0
    712c:	f7ff ffd8 	bl	70e0 <__clzsi2>
    7130:	bd10      	pop	{r4, pc}
    7132:	46c0      	nop			; (mov r8, r8)

00007134 <__libc_init_array>:
    7134:	b570      	push	{r4, r5, r6, lr}
    7136:	2600      	movs	r6, #0
    7138:	4d0c      	ldr	r5, [pc, #48]	; (716c <__libc_init_array+0x38>)
    713a:	4c0d      	ldr	r4, [pc, #52]	; (7170 <__libc_init_array+0x3c>)
    713c:	1b64      	subs	r4, r4, r5
    713e:	10a4      	asrs	r4, r4, #2
    7140:	42a6      	cmp	r6, r4
    7142:	d109      	bne.n	7158 <__libc_init_array+0x24>
    7144:	2600      	movs	r6, #0
    7146:	f000 fecd 	bl	7ee4 <_init>
    714a:	4d0a      	ldr	r5, [pc, #40]	; (7174 <__libc_init_array+0x40>)
    714c:	4c0a      	ldr	r4, [pc, #40]	; (7178 <__libc_init_array+0x44>)
    714e:	1b64      	subs	r4, r4, r5
    7150:	10a4      	asrs	r4, r4, #2
    7152:	42a6      	cmp	r6, r4
    7154:	d105      	bne.n	7162 <__libc_init_array+0x2e>
    7156:	bd70      	pop	{r4, r5, r6, pc}
    7158:	00b3      	lsls	r3, r6, #2
    715a:	58eb      	ldr	r3, [r5, r3]
    715c:	4798      	blx	r3
    715e:	3601      	adds	r6, #1
    7160:	e7ee      	b.n	7140 <__libc_init_array+0xc>
    7162:	00b3      	lsls	r3, r6, #2
    7164:	58eb      	ldr	r3, [r5, r3]
    7166:	4798      	blx	r3
    7168:	3601      	adds	r6, #1
    716a:	e7f2      	b.n	7152 <__libc_init_array+0x1e>
    716c:	00007ef0 	.word	0x00007ef0
    7170:	00007ef0 	.word	0x00007ef0
    7174:	00007ef0 	.word	0x00007ef0
    7178:	00007ef4 	.word	0x00007ef4

0000717c <malloc>:
    717c:	b510      	push	{r4, lr}
    717e:	4b03      	ldr	r3, [pc, #12]	; (718c <malloc+0x10>)
    7180:	0001      	movs	r1, r0
    7182:	6818      	ldr	r0, [r3, #0]
    7184:	f000 f858 	bl	7238 <_malloc_r>
    7188:	bd10      	pop	{r4, pc}
    718a:	46c0      	nop			; (mov r8, r8)
    718c:	20000024 	.word	0x20000024

00007190 <memcpy>:
    7190:	2300      	movs	r3, #0
    7192:	b510      	push	{r4, lr}
    7194:	429a      	cmp	r2, r3
    7196:	d100      	bne.n	719a <memcpy+0xa>
    7198:	bd10      	pop	{r4, pc}
    719a:	5ccc      	ldrb	r4, [r1, r3]
    719c:	54c4      	strb	r4, [r0, r3]
    719e:	3301      	adds	r3, #1
    71a0:	e7f8      	b.n	7194 <memcpy+0x4>
	...

000071a4 <_free_r>:
    71a4:	b570      	push	{r4, r5, r6, lr}
    71a6:	0005      	movs	r5, r0
    71a8:	2900      	cmp	r1, #0
    71aa:	d010      	beq.n	71ce <_free_r+0x2a>
    71ac:	1f0c      	subs	r4, r1, #4
    71ae:	6823      	ldr	r3, [r4, #0]
    71b0:	2b00      	cmp	r3, #0
    71b2:	da00      	bge.n	71b6 <_free_r+0x12>
    71b4:	18e4      	adds	r4, r4, r3
    71b6:	0028      	movs	r0, r5
    71b8:	f000 f8df 	bl	737a <__malloc_lock>
    71bc:	4a1d      	ldr	r2, [pc, #116]	; (7234 <_free_r+0x90>)
    71be:	6813      	ldr	r3, [r2, #0]
    71c0:	2b00      	cmp	r3, #0
    71c2:	d105      	bne.n	71d0 <_free_r+0x2c>
    71c4:	6063      	str	r3, [r4, #4]
    71c6:	6014      	str	r4, [r2, #0]
    71c8:	0028      	movs	r0, r5
    71ca:	f000 f8d7 	bl	737c <__malloc_unlock>
    71ce:	bd70      	pop	{r4, r5, r6, pc}
    71d0:	42a3      	cmp	r3, r4
    71d2:	d909      	bls.n	71e8 <_free_r+0x44>
    71d4:	6821      	ldr	r1, [r4, #0]
    71d6:	1860      	adds	r0, r4, r1
    71d8:	4283      	cmp	r3, r0
    71da:	d1f3      	bne.n	71c4 <_free_r+0x20>
    71dc:	6818      	ldr	r0, [r3, #0]
    71de:	685b      	ldr	r3, [r3, #4]
    71e0:	1841      	adds	r1, r0, r1
    71e2:	6021      	str	r1, [r4, #0]
    71e4:	e7ee      	b.n	71c4 <_free_r+0x20>
    71e6:	0013      	movs	r3, r2
    71e8:	685a      	ldr	r2, [r3, #4]
    71ea:	2a00      	cmp	r2, #0
    71ec:	d001      	beq.n	71f2 <_free_r+0x4e>
    71ee:	42a2      	cmp	r2, r4
    71f0:	d9f9      	bls.n	71e6 <_free_r+0x42>
    71f2:	6819      	ldr	r1, [r3, #0]
    71f4:	1858      	adds	r0, r3, r1
    71f6:	42a0      	cmp	r0, r4
    71f8:	d10b      	bne.n	7212 <_free_r+0x6e>
    71fa:	6820      	ldr	r0, [r4, #0]
    71fc:	1809      	adds	r1, r1, r0
    71fe:	1858      	adds	r0, r3, r1
    7200:	6019      	str	r1, [r3, #0]
    7202:	4282      	cmp	r2, r0
    7204:	d1e0      	bne.n	71c8 <_free_r+0x24>
    7206:	6810      	ldr	r0, [r2, #0]
    7208:	6852      	ldr	r2, [r2, #4]
    720a:	1841      	adds	r1, r0, r1
    720c:	6019      	str	r1, [r3, #0]
    720e:	605a      	str	r2, [r3, #4]
    7210:	e7da      	b.n	71c8 <_free_r+0x24>
    7212:	42a0      	cmp	r0, r4
    7214:	d902      	bls.n	721c <_free_r+0x78>
    7216:	230c      	movs	r3, #12
    7218:	602b      	str	r3, [r5, #0]
    721a:	e7d5      	b.n	71c8 <_free_r+0x24>
    721c:	6821      	ldr	r1, [r4, #0]
    721e:	1860      	adds	r0, r4, r1
    7220:	4282      	cmp	r2, r0
    7222:	d103      	bne.n	722c <_free_r+0x88>
    7224:	6810      	ldr	r0, [r2, #0]
    7226:	6852      	ldr	r2, [r2, #4]
    7228:	1841      	adds	r1, r0, r1
    722a:	6021      	str	r1, [r4, #0]
    722c:	6062      	str	r2, [r4, #4]
    722e:	605c      	str	r4, [r3, #4]
    7230:	e7ca      	b.n	71c8 <_free_r+0x24>
    7232:	46c0      	nop			; (mov r8, r8)
    7234:	20001434 	.word	0x20001434

00007238 <_malloc_r>:
    7238:	2303      	movs	r3, #3
    723a:	b570      	push	{r4, r5, r6, lr}
    723c:	1ccd      	adds	r5, r1, #3
    723e:	439d      	bics	r5, r3
    7240:	3508      	adds	r5, #8
    7242:	0006      	movs	r6, r0
    7244:	2d0c      	cmp	r5, #12
    7246:	d21e      	bcs.n	7286 <_malloc_r+0x4e>
    7248:	250c      	movs	r5, #12
    724a:	42a9      	cmp	r1, r5
    724c:	d81d      	bhi.n	728a <_malloc_r+0x52>
    724e:	0030      	movs	r0, r6
    7250:	f000 f893 	bl	737a <__malloc_lock>
    7254:	4a25      	ldr	r2, [pc, #148]	; (72ec <_malloc_r+0xb4>)
    7256:	6814      	ldr	r4, [r2, #0]
    7258:	0021      	movs	r1, r4
    725a:	2900      	cmp	r1, #0
    725c:	d119      	bne.n	7292 <_malloc_r+0x5a>
    725e:	4c24      	ldr	r4, [pc, #144]	; (72f0 <_malloc_r+0xb8>)
    7260:	6823      	ldr	r3, [r4, #0]
    7262:	2b00      	cmp	r3, #0
    7264:	d103      	bne.n	726e <_malloc_r+0x36>
    7266:	0030      	movs	r0, r6
    7268:	f000 f844 	bl	72f4 <_sbrk_r>
    726c:	6020      	str	r0, [r4, #0]
    726e:	0029      	movs	r1, r5
    7270:	0030      	movs	r0, r6
    7272:	f000 f83f 	bl	72f4 <_sbrk_r>
    7276:	1c43      	adds	r3, r0, #1
    7278:	d12c      	bne.n	72d4 <_malloc_r+0x9c>
    727a:	230c      	movs	r3, #12
    727c:	0030      	movs	r0, r6
    727e:	6033      	str	r3, [r6, #0]
    7280:	f000 f87c 	bl	737c <__malloc_unlock>
    7284:	e003      	b.n	728e <_malloc_r+0x56>
    7286:	2d00      	cmp	r5, #0
    7288:	dadf      	bge.n	724a <_malloc_r+0x12>
    728a:	230c      	movs	r3, #12
    728c:	6033      	str	r3, [r6, #0]
    728e:	2000      	movs	r0, #0
    7290:	bd70      	pop	{r4, r5, r6, pc}
    7292:	680b      	ldr	r3, [r1, #0]
    7294:	1b5b      	subs	r3, r3, r5
    7296:	d41a      	bmi.n	72ce <_malloc_r+0x96>
    7298:	2b0b      	cmp	r3, #11
    729a:	d903      	bls.n	72a4 <_malloc_r+0x6c>
    729c:	600b      	str	r3, [r1, #0]
    729e:	18cc      	adds	r4, r1, r3
    72a0:	6025      	str	r5, [r4, #0]
    72a2:	e003      	b.n	72ac <_malloc_r+0x74>
    72a4:	428c      	cmp	r4, r1
    72a6:	d10e      	bne.n	72c6 <_malloc_r+0x8e>
    72a8:	6863      	ldr	r3, [r4, #4]
    72aa:	6013      	str	r3, [r2, #0]
    72ac:	0030      	movs	r0, r6
    72ae:	f000 f865 	bl	737c <__malloc_unlock>
    72b2:	0020      	movs	r0, r4
    72b4:	2207      	movs	r2, #7
    72b6:	300b      	adds	r0, #11
    72b8:	1d23      	adds	r3, r4, #4
    72ba:	4390      	bics	r0, r2
    72bc:	1ac3      	subs	r3, r0, r3
    72be:	d0e7      	beq.n	7290 <_malloc_r+0x58>
    72c0:	425a      	negs	r2, r3
    72c2:	50e2      	str	r2, [r4, r3]
    72c4:	e7e4      	b.n	7290 <_malloc_r+0x58>
    72c6:	684b      	ldr	r3, [r1, #4]
    72c8:	6063      	str	r3, [r4, #4]
    72ca:	000c      	movs	r4, r1
    72cc:	e7ee      	b.n	72ac <_malloc_r+0x74>
    72ce:	000c      	movs	r4, r1
    72d0:	6849      	ldr	r1, [r1, #4]
    72d2:	e7c2      	b.n	725a <_malloc_r+0x22>
    72d4:	2303      	movs	r3, #3
    72d6:	1cc4      	adds	r4, r0, #3
    72d8:	439c      	bics	r4, r3
    72da:	42a0      	cmp	r0, r4
    72dc:	d0e0      	beq.n	72a0 <_malloc_r+0x68>
    72de:	1a21      	subs	r1, r4, r0
    72e0:	0030      	movs	r0, r6
    72e2:	f000 f807 	bl	72f4 <_sbrk_r>
    72e6:	1c43      	adds	r3, r0, #1
    72e8:	d1da      	bne.n	72a0 <_malloc_r+0x68>
    72ea:	e7c6      	b.n	727a <_malloc_r+0x42>
    72ec:	20001434 	.word	0x20001434
    72f0:	20001438 	.word	0x20001438

000072f4 <_sbrk_r>:
    72f4:	2300      	movs	r3, #0
    72f6:	b570      	push	{r4, r5, r6, lr}
    72f8:	4c06      	ldr	r4, [pc, #24]	; (7314 <_sbrk_r+0x20>)
    72fa:	0005      	movs	r5, r0
    72fc:	0008      	movs	r0, r1
    72fe:	6023      	str	r3, [r4, #0]
    7300:	f7fc fe28 	bl	3f54 <_sbrk>
    7304:	1c43      	adds	r3, r0, #1
    7306:	d103      	bne.n	7310 <_sbrk_r+0x1c>
    7308:	6823      	ldr	r3, [r4, #0]
    730a:	2b00      	cmp	r3, #0
    730c:	d000      	beq.n	7310 <_sbrk_r+0x1c>
    730e:	602b      	str	r3, [r5, #0]
    7310:	bd70      	pop	{r4, r5, r6, pc}
    7312:	46c0      	nop			; (mov r8, r8)
    7314:	2000207c 	.word	0x2000207c

00007318 <siprintf>:
    7318:	b40e      	push	{r1, r2, r3}
    731a:	b510      	push	{r4, lr}
    731c:	b09d      	sub	sp, #116	; 0x74
    731e:	a902      	add	r1, sp, #8
    7320:	9002      	str	r0, [sp, #8]
    7322:	6108      	str	r0, [r1, #16]
    7324:	480b      	ldr	r0, [pc, #44]	; (7354 <siprintf+0x3c>)
    7326:	2482      	movs	r4, #130	; 0x82
    7328:	6088      	str	r0, [r1, #8]
    732a:	6148      	str	r0, [r1, #20]
    732c:	2001      	movs	r0, #1
    732e:	4240      	negs	r0, r0
    7330:	ab1f      	add	r3, sp, #124	; 0x7c
    7332:	81c8      	strh	r0, [r1, #14]
    7334:	4808      	ldr	r0, [pc, #32]	; (7358 <siprintf+0x40>)
    7336:	cb04      	ldmia	r3!, {r2}
    7338:	00a4      	lsls	r4, r4, #2
    733a:	6800      	ldr	r0, [r0, #0]
    733c:	9301      	str	r3, [sp, #4]
    733e:	818c      	strh	r4, [r1, #12]
    7340:	f000 f880 	bl	7444 <_svfiprintf_r>
    7344:	2300      	movs	r3, #0
    7346:	9a02      	ldr	r2, [sp, #8]
    7348:	7013      	strb	r3, [r2, #0]
    734a:	b01d      	add	sp, #116	; 0x74
    734c:	bc10      	pop	{r4}
    734e:	bc08      	pop	{r3}
    7350:	b003      	add	sp, #12
    7352:	4718      	bx	r3
    7354:	7fffffff 	.word	0x7fffffff
    7358:	20000024 	.word	0x20000024

0000735c <strcpy>:
    735c:	1c03      	adds	r3, r0, #0
    735e:	780a      	ldrb	r2, [r1, #0]
    7360:	3101      	adds	r1, #1
    7362:	701a      	strb	r2, [r3, #0]
    7364:	3301      	adds	r3, #1
    7366:	2a00      	cmp	r2, #0
    7368:	d1f9      	bne.n	735e <strcpy+0x2>
    736a:	4770      	bx	lr

0000736c <strlen>:
    736c:	2300      	movs	r3, #0
    736e:	5cc2      	ldrb	r2, [r0, r3]
    7370:	3301      	adds	r3, #1
    7372:	2a00      	cmp	r2, #0
    7374:	d1fb      	bne.n	736e <strlen+0x2>
    7376:	1e58      	subs	r0, r3, #1
    7378:	4770      	bx	lr

0000737a <__malloc_lock>:
    737a:	4770      	bx	lr

0000737c <__malloc_unlock>:
    737c:	4770      	bx	lr
	...

00007380 <__ssputs_r>:
    7380:	b5f0      	push	{r4, r5, r6, r7, lr}
    7382:	688e      	ldr	r6, [r1, #8]
    7384:	b085      	sub	sp, #20
    7386:	0007      	movs	r7, r0
    7388:	000c      	movs	r4, r1
    738a:	9203      	str	r2, [sp, #12]
    738c:	9301      	str	r3, [sp, #4]
    738e:	429e      	cmp	r6, r3
    7390:	d839      	bhi.n	7406 <__ssputs_r+0x86>
    7392:	2390      	movs	r3, #144	; 0x90
    7394:	898a      	ldrh	r2, [r1, #12]
    7396:	00db      	lsls	r3, r3, #3
    7398:	421a      	tst	r2, r3
    739a:	d034      	beq.n	7406 <__ssputs_r+0x86>
    739c:	2503      	movs	r5, #3
    739e:	6909      	ldr	r1, [r1, #16]
    73a0:	6823      	ldr	r3, [r4, #0]
    73a2:	1a5b      	subs	r3, r3, r1
    73a4:	9302      	str	r3, [sp, #8]
    73a6:	6963      	ldr	r3, [r4, #20]
    73a8:	9802      	ldr	r0, [sp, #8]
    73aa:	435d      	muls	r5, r3
    73ac:	0feb      	lsrs	r3, r5, #31
    73ae:	195d      	adds	r5, r3, r5
    73b0:	9b01      	ldr	r3, [sp, #4]
    73b2:	106d      	asrs	r5, r5, #1
    73b4:	3301      	adds	r3, #1
    73b6:	181b      	adds	r3, r3, r0
    73b8:	42ab      	cmp	r3, r5
    73ba:	d900      	bls.n	73be <__ssputs_r+0x3e>
    73bc:	001d      	movs	r5, r3
    73be:	0553      	lsls	r3, r2, #21
    73c0:	d532      	bpl.n	7428 <__ssputs_r+0xa8>
    73c2:	0029      	movs	r1, r5
    73c4:	0038      	movs	r0, r7
    73c6:	f7ff ff37 	bl	7238 <_malloc_r>
    73ca:	1e06      	subs	r6, r0, #0
    73cc:	d109      	bne.n	73e2 <__ssputs_r+0x62>
    73ce:	230c      	movs	r3, #12
    73d0:	603b      	str	r3, [r7, #0]
    73d2:	2340      	movs	r3, #64	; 0x40
    73d4:	2001      	movs	r0, #1
    73d6:	89a2      	ldrh	r2, [r4, #12]
    73d8:	4240      	negs	r0, r0
    73da:	4313      	orrs	r3, r2
    73dc:	81a3      	strh	r3, [r4, #12]
    73de:	b005      	add	sp, #20
    73e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73e2:	9a02      	ldr	r2, [sp, #8]
    73e4:	6921      	ldr	r1, [r4, #16]
    73e6:	f7ff fed3 	bl	7190 <memcpy>
    73ea:	89a3      	ldrh	r3, [r4, #12]
    73ec:	4a14      	ldr	r2, [pc, #80]	; (7440 <__ssputs_r+0xc0>)
    73ee:	401a      	ands	r2, r3
    73f0:	2380      	movs	r3, #128	; 0x80
    73f2:	4313      	orrs	r3, r2
    73f4:	81a3      	strh	r3, [r4, #12]
    73f6:	9b02      	ldr	r3, [sp, #8]
    73f8:	6126      	str	r6, [r4, #16]
    73fa:	18f6      	adds	r6, r6, r3
    73fc:	6026      	str	r6, [r4, #0]
    73fe:	6165      	str	r5, [r4, #20]
    7400:	9e01      	ldr	r6, [sp, #4]
    7402:	1aed      	subs	r5, r5, r3
    7404:	60a5      	str	r5, [r4, #8]
    7406:	9b01      	ldr	r3, [sp, #4]
    7408:	42b3      	cmp	r3, r6
    740a:	d200      	bcs.n	740e <__ssputs_r+0x8e>
    740c:	001e      	movs	r6, r3
    740e:	0032      	movs	r2, r6
    7410:	9903      	ldr	r1, [sp, #12]
    7412:	6820      	ldr	r0, [r4, #0]
    7414:	f000 faad 	bl	7972 <memmove>
    7418:	68a3      	ldr	r3, [r4, #8]
    741a:	2000      	movs	r0, #0
    741c:	1b9b      	subs	r3, r3, r6
    741e:	60a3      	str	r3, [r4, #8]
    7420:	6823      	ldr	r3, [r4, #0]
    7422:	199e      	adds	r6, r3, r6
    7424:	6026      	str	r6, [r4, #0]
    7426:	e7da      	b.n	73de <__ssputs_r+0x5e>
    7428:	002a      	movs	r2, r5
    742a:	0038      	movs	r0, r7
    742c:	f000 fab3 	bl	7996 <_realloc_r>
    7430:	1e06      	subs	r6, r0, #0
    7432:	d1e0      	bne.n	73f6 <__ssputs_r+0x76>
    7434:	6921      	ldr	r1, [r4, #16]
    7436:	0038      	movs	r0, r7
    7438:	f7ff feb4 	bl	71a4 <_free_r>
    743c:	e7c7      	b.n	73ce <__ssputs_r+0x4e>
    743e:	46c0      	nop			; (mov r8, r8)
    7440:	fffffb7f 	.word	0xfffffb7f

00007444 <_svfiprintf_r>:
    7444:	b5f0      	push	{r4, r5, r6, r7, lr}
    7446:	b09f      	sub	sp, #124	; 0x7c
    7448:	9002      	str	r0, [sp, #8]
    744a:	9305      	str	r3, [sp, #20]
    744c:	898b      	ldrh	r3, [r1, #12]
    744e:	000f      	movs	r7, r1
    7450:	0016      	movs	r6, r2
    7452:	061b      	lsls	r3, r3, #24
    7454:	d511      	bpl.n	747a <_svfiprintf_r+0x36>
    7456:	690b      	ldr	r3, [r1, #16]
    7458:	2b00      	cmp	r3, #0
    745a:	d10e      	bne.n	747a <_svfiprintf_r+0x36>
    745c:	2140      	movs	r1, #64	; 0x40
    745e:	f7ff feeb 	bl	7238 <_malloc_r>
    7462:	6038      	str	r0, [r7, #0]
    7464:	6138      	str	r0, [r7, #16]
    7466:	2800      	cmp	r0, #0
    7468:	d105      	bne.n	7476 <_svfiprintf_r+0x32>
    746a:	230c      	movs	r3, #12
    746c:	9a02      	ldr	r2, [sp, #8]
    746e:	3801      	subs	r0, #1
    7470:	6013      	str	r3, [r2, #0]
    7472:	b01f      	add	sp, #124	; 0x7c
    7474:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7476:	2340      	movs	r3, #64	; 0x40
    7478:	617b      	str	r3, [r7, #20]
    747a:	2300      	movs	r3, #0
    747c:	ad06      	add	r5, sp, #24
    747e:	616b      	str	r3, [r5, #20]
    7480:	3320      	adds	r3, #32
    7482:	766b      	strb	r3, [r5, #25]
    7484:	3310      	adds	r3, #16
    7486:	76ab      	strb	r3, [r5, #26]
    7488:	0034      	movs	r4, r6
    748a:	7823      	ldrb	r3, [r4, #0]
    748c:	2b00      	cmp	r3, #0
    748e:	d147      	bne.n	7520 <_svfiprintf_r+0xdc>
    7490:	1ba3      	subs	r3, r4, r6
    7492:	9304      	str	r3, [sp, #16]
    7494:	d00d      	beq.n	74b2 <_svfiprintf_r+0x6e>
    7496:	1ba3      	subs	r3, r4, r6
    7498:	0032      	movs	r2, r6
    749a:	0039      	movs	r1, r7
    749c:	9802      	ldr	r0, [sp, #8]
    749e:	f7ff ff6f 	bl	7380 <__ssputs_r>
    74a2:	1c43      	adds	r3, r0, #1
    74a4:	d100      	bne.n	74a8 <_svfiprintf_r+0x64>
    74a6:	e0b5      	b.n	7614 <_svfiprintf_r+0x1d0>
    74a8:	696a      	ldr	r2, [r5, #20]
    74aa:	9b04      	ldr	r3, [sp, #16]
    74ac:	4694      	mov	ip, r2
    74ae:	4463      	add	r3, ip
    74b0:	616b      	str	r3, [r5, #20]
    74b2:	7823      	ldrb	r3, [r4, #0]
    74b4:	2b00      	cmp	r3, #0
    74b6:	d100      	bne.n	74ba <_svfiprintf_r+0x76>
    74b8:	e0ac      	b.n	7614 <_svfiprintf_r+0x1d0>
    74ba:	2201      	movs	r2, #1
    74bc:	2300      	movs	r3, #0
    74be:	4252      	negs	r2, r2
    74c0:	606a      	str	r2, [r5, #4]
    74c2:	a902      	add	r1, sp, #8
    74c4:	3254      	adds	r2, #84	; 0x54
    74c6:	1852      	adds	r2, r2, r1
    74c8:	3401      	adds	r4, #1
    74ca:	602b      	str	r3, [r5, #0]
    74cc:	60eb      	str	r3, [r5, #12]
    74ce:	60ab      	str	r3, [r5, #8]
    74d0:	7013      	strb	r3, [r2, #0]
    74d2:	65ab      	str	r3, [r5, #88]	; 0x58
    74d4:	4e58      	ldr	r6, [pc, #352]	; (7638 <_svfiprintf_r+0x1f4>)
    74d6:	2205      	movs	r2, #5
    74d8:	7821      	ldrb	r1, [r4, #0]
    74da:	0030      	movs	r0, r6
    74dc:	f000 fa3e 	bl	795c <memchr>
    74e0:	1c62      	adds	r2, r4, #1
    74e2:	2800      	cmp	r0, #0
    74e4:	d120      	bne.n	7528 <_svfiprintf_r+0xe4>
    74e6:	6829      	ldr	r1, [r5, #0]
    74e8:	06cb      	lsls	r3, r1, #27
    74ea:	d504      	bpl.n	74f6 <_svfiprintf_r+0xb2>
    74ec:	2353      	movs	r3, #83	; 0x53
    74ee:	ae02      	add	r6, sp, #8
    74f0:	3020      	adds	r0, #32
    74f2:	199b      	adds	r3, r3, r6
    74f4:	7018      	strb	r0, [r3, #0]
    74f6:	070b      	lsls	r3, r1, #28
    74f8:	d504      	bpl.n	7504 <_svfiprintf_r+0xc0>
    74fa:	2353      	movs	r3, #83	; 0x53
    74fc:	202b      	movs	r0, #43	; 0x2b
    74fe:	ae02      	add	r6, sp, #8
    7500:	199b      	adds	r3, r3, r6
    7502:	7018      	strb	r0, [r3, #0]
    7504:	7823      	ldrb	r3, [r4, #0]
    7506:	2b2a      	cmp	r3, #42	; 0x2a
    7508:	d016      	beq.n	7538 <_svfiprintf_r+0xf4>
    750a:	2000      	movs	r0, #0
    750c:	210a      	movs	r1, #10
    750e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7510:	7822      	ldrb	r2, [r4, #0]
    7512:	3a30      	subs	r2, #48	; 0x30
    7514:	2a09      	cmp	r2, #9
    7516:	d955      	bls.n	75c4 <_svfiprintf_r+0x180>
    7518:	2800      	cmp	r0, #0
    751a:	d015      	beq.n	7548 <_svfiprintf_r+0x104>
    751c:	9309      	str	r3, [sp, #36]	; 0x24
    751e:	e013      	b.n	7548 <_svfiprintf_r+0x104>
    7520:	2b25      	cmp	r3, #37	; 0x25
    7522:	d0b5      	beq.n	7490 <_svfiprintf_r+0x4c>
    7524:	3401      	adds	r4, #1
    7526:	e7b0      	b.n	748a <_svfiprintf_r+0x46>
    7528:	2301      	movs	r3, #1
    752a:	1b80      	subs	r0, r0, r6
    752c:	4083      	lsls	r3, r0
    752e:	6829      	ldr	r1, [r5, #0]
    7530:	0014      	movs	r4, r2
    7532:	430b      	orrs	r3, r1
    7534:	602b      	str	r3, [r5, #0]
    7536:	e7cd      	b.n	74d4 <_svfiprintf_r+0x90>
    7538:	9b05      	ldr	r3, [sp, #20]
    753a:	1d18      	adds	r0, r3, #4
    753c:	681b      	ldr	r3, [r3, #0]
    753e:	9005      	str	r0, [sp, #20]
    7540:	2b00      	cmp	r3, #0
    7542:	db39      	blt.n	75b8 <_svfiprintf_r+0x174>
    7544:	9309      	str	r3, [sp, #36]	; 0x24
    7546:	0014      	movs	r4, r2
    7548:	7823      	ldrb	r3, [r4, #0]
    754a:	2b2e      	cmp	r3, #46	; 0x2e
    754c:	d10b      	bne.n	7566 <_svfiprintf_r+0x122>
    754e:	7863      	ldrb	r3, [r4, #1]
    7550:	1c62      	adds	r2, r4, #1
    7552:	2b2a      	cmp	r3, #42	; 0x2a
    7554:	d13e      	bne.n	75d4 <_svfiprintf_r+0x190>
    7556:	9b05      	ldr	r3, [sp, #20]
    7558:	3402      	adds	r4, #2
    755a:	1d1a      	adds	r2, r3, #4
    755c:	681b      	ldr	r3, [r3, #0]
    755e:	9205      	str	r2, [sp, #20]
    7560:	2b00      	cmp	r3, #0
    7562:	db34      	blt.n	75ce <_svfiprintf_r+0x18a>
    7564:	9307      	str	r3, [sp, #28]
    7566:	4e35      	ldr	r6, [pc, #212]	; (763c <_svfiprintf_r+0x1f8>)
    7568:	7821      	ldrb	r1, [r4, #0]
    756a:	2203      	movs	r2, #3
    756c:	0030      	movs	r0, r6
    756e:	f000 f9f5 	bl	795c <memchr>
    7572:	2800      	cmp	r0, #0
    7574:	d006      	beq.n	7584 <_svfiprintf_r+0x140>
    7576:	2340      	movs	r3, #64	; 0x40
    7578:	1b80      	subs	r0, r0, r6
    757a:	4083      	lsls	r3, r0
    757c:	682a      	ldr	r2, [r5, #0]
    757e:	3401      	adds	r4, #1
    7580:	4313      	orrs	r3, r2
    7582:	602b      	str	r3, [r5, #0]
    7584:	7821      	ldrb	r1, [r4, #0]
    7586:	2206      	movs	r2, #6
    7588:	482d      	ldr	r0, [pc, #180]	; (7640 <_svfiprintf_r+0x1fc>)
    758a:	1c66      	adds	r6, r4, #1
    758c:	7629      	strb	r1, [r5, #24]
    758e:	f000 f9e5 	bl	795c <memchr>
    7592:	2800      	cmp	r0, #0
    7594:	d046      	beq.n	7624 <_svfiprintf_r+0x1e0>
    7596:	4b2b      	ldr	r3, [pc, #172]	; (7644 <_svfiprintf_r+0x200>)
    7598:	2b00      	cmp	r3, #0
    759a:	d12f      	bne.n	75fc <_svfiprintf_r+0x1b8>
    759c:	6829      	ldr	r1, [r5, #0]
    759e:	9b05      	ldr	r3, [sp, #20]
    75a0:	2207      	movs	r2, #7
    75a2:	05c9      	lsls	r1, r1, #23
    75a4:	d528      	bpl.n	75f8 <_svfiprintf_r+0x1b4>
    75a6:	189b      	adds	r3, r3, r2
    75a8:	4393      	bics	r3, r2
    75aa:	3308      	adds	r3, #8
    75ac:	9305      	str	r3, [sp, #20]
    75ae:	696b      	ldr	r3, [r5, #20]
    75b0:	9a03      	ldr	r2, [sp, #12]
    75b2:	189b      	adds	r3, r3, r2
    75b4:	616b      	str	r3, [r5, #20]
    75b6:	e767      	b.n	7488 <_svfiprintf_r+0x44>
    75b8:	425b      	negs	r3, r3
    75ba:	60eb      	str	r3, [r5, #12]
    75bc:	2302      	movs	r3, #2
    75be:	430b      	orrs	r3, r1
    75c0:	602b      	str	r3, [r5, #0]
    75c2:	e7c0      	b.n	7546 <_svfiprintf_r+0x102>
    75c4:	434b      	muls	r3, r1
    75c6:	3401      	adds	r4, #1
    75c8:	189b      	adds	r3, r3, r2
    75ca:	2001      	movs	r0, #1
    75cc:	e7a0      	b.n	7510 <_svfiprintf_r+0xcc>
    75ce:	2301      	movs	r3, #1
    75d0:	425b      	negs	r3, r3
    75d2:	e7c7      	b.n	7564 <_svfiprintf_r+0x120>
    75d4:	2300      	movs	r3, #0
    75d6:	0014      	movs	r4, r2
    75d8:	200a      	movs	r0, #10
    75da:	001a      	movs	r2, r3
    75dc:	606b      	str	r3, [r5, #4]
    75de:	7821      	ldrb	r1, [r4, #0]
    75e0:	3930      	subs	r1, #48	; 0x30
    75e2:	2909      	cmp	r1, #9
    75e4:	d903      	bls.n	75ee <_svfiprintf_r+0x1aa>
    75e6:	2b00      	cmp	r3, #0
    75e8:	d0bd      	beq.n	7566 <_svfiprintf_r+0x122>
    75ea:	9207      	str	r2, [sp, #28]
    75ec:	e7bb      	b.n	7566 <_svfiprintf_r+0x122>
    75ee:	4342      	muls	r2, r0
    75f0:	3401      	adds	r4, #1
    75f2:	1852      	adds	r2, r2, r1
    75f4:	2301      	movs	r3, #1
    75f6:	e7f2      	b.n	75de <_svfiprintf_r+0x19a>
    75f8:	3307      	adds	r3, #7
    75fa:	e7d5      	b.n	75a8 <_svfiprintf_r+0x164>
    75fc:	ab05      	add	r3, sp, #20
    75fe:	9300      	str	r3, [sp, #0]
    7600:	003a      	movs	r2, r7
    7602:	4b11      	ldr	r3, [pc, #68]	; (7648 <_svfiprintf_r+0x204>)
    7604:	0029      	movs	r1, r5
    7606:	9802      	ldr	r0, [sp, #8]
    7608:	e000      	b.n	760c <_svfiprintf_r+0x1c8>
    760a:	bf00      	nop
    760c:	9003      	str	r0, [sp, #12]
    760e:	9b03      	ldr	r3, [sp, #12]
    7610:	3301      	adds	r3, #1
    7612:	d1cc      	bne.n	75ae <_svfiprintf_r+0x16a>
    7614:	89bb      	ldrh	r3, [r7, #12]
    7616:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7618:	065b      	lsls	r3, r3, #25
    761a:	d400      	bmi.n	761e <_svfiprintf_r+0x1da>
    761c:	e729      	b.n	7472 <_svfiprintf_r+0x2e>
    761e:	2001      	movs	r0, #1
    7620:	4240      	negs	r0, r0
    7622:	e726      	b.n	7472 <_svfiprintf_r+0x2e>
    7624:	ab05      	add	r3, sp, #20
    7626:	9300      	str	r3, [sp, #0]
    7628:	003a      	movs	r2, r7
    762a:	4b07      	ldr	r3, [pc, #28]	; (7648 <_svfiprintf_r+0x204>)
    762c:	0029      	movs	r1, r5
    762e:	9802      	ldr	r0, [sp, #8]
    7630:	f000 f87a 	bl	7728 <_printf_i>
    7634:	e7ea      	b.n	760c <_svfiprintf_r+0x1c8>
    7636:	46c0      	nop			; (mov r8, r8)
    7638:	00007eb0 	.word	0x00007eb0
    763c:	00007eb6 	.word	0x00007eb6
    7640:	00007eba 	.word	0x00007eba
    7644:	00000000 	.word	0x00000000
    7648:	00007381 	.word	0x00007381

0000764c <_printf_common>:
    764c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    764e:	0015      	movs	r5, r2
    7650:	9301      	str	r3, [sp, #4]
    7652:	688a      	ldr	r2, [r1, #8]
    7654:	690b      	ldr	r3, [r1, #16]
    7656:	9000      	str	r0, [sp, #0]
    7658:	000c      	movs	r4, r1
    765a:	4293      	cmp	r3, r2
    765c:	da00      	bge.n	7660 <_printf_common+0x14>
    765e:	0013      	movs	r3, r2
    7660:	0022      	movs	r2, r4
    7662:	602b      	str	r3, [r5, #0]
    7664:	3243      	adds	r2, #67	; 0x43
    7666:	7812      	ldrb	r2, [r2, #0]
    7668:	2a00      	cmp	r2, #0
    766a:	d001      	beq.n	7670 <_printf_common+0x24>
    766c:	3301      	adds	r3, #1
    766e:	602b      	str	r3, [r5, #0]
    7670:	6823      	ldr	r3, [r4, #0]
    7672:	069b      	lsls	r3, r3, #26
    7674:	d502      	bpl.n	767c <_printf_common+0x30>
    7676:	682b      	ldr	r3, [r5, #0]
    7678:	3302      	adds	r3, #2
    767a:	602b      	str	r3, [r5, #0]
    767c:	2706      	movs	r7, #6
    767e:	6823      	ldr	r3, [r4, #0]
    7680:	401f      	ands	r7, r3
    7682:	d027      	beq.n	76d4 <_printf_common+0x88>
    7684:	0023      	movs	r3, r4
    7686:	3343      	adds	r3, #67	; 0x43
    7688:	781b      	ldrb	r3, [r3, #0]
    768a:	1e5a      	subs	r2, r3, #1
    768c:	4193      	sbcs	r3, r2
    768e:	6822      	ldr	r2, [r4, #0]
    7690:	0692      	lsls	r2, r2, #26
    7692:	d430      	bmi.n	76f6 <_printf_common+0xaa>
    7694:	0022      	movs	r2, r4
    7696:	9901      	ldr	r1, [sp, #4]
    7698:	3243      	adds	r2, #67	; 0x43
    769a:	9800      	ldr	r0, [sp, #0]
    769c:	9e08      	ldr	r6, [sp, #32]
    769e:	47b0      	blx	r6
    76a0:	1c43      	adds	r3, r0, #1
    76a2:	d025      	beq.n	76f0 <_printf_common+0xa4>
    76a4:	2306      	movs	r3, #6
    76a6:	6820      	ldr	r0, [r4, #0]
    76a8:	682a      	ldr	r2, [r5, #0]
    76aa:	68e1      	ldr	r1, [r4, #12]
    76ac:	4003      	ands	r3, r0
    76ae:	2500      	movs	r5, #0
    76b0:	2b04      	cmp	r3, #4
    76b2:	d103      	bne.n	76bc <_printf_common+0x70>
    76b4:	1a8d      	subs	r5, r1, r2
    76b6:	43eb      	mvns	r3, r5
    76b8:	17db      	asrs	r3, r3, #31
    76ba:	401d      	ands	r5, r3
    76bc:	68a3      	ldr	r3, [r4, #8]
    76be:	6922      	ldr	r2, [r4, #16]
    76c0:	4293      	cmp	r3, r2
    76c2:	dd01      	ble.n	76c8 <_printf_common+0x7c>
    76c4:	1a9b      	subs	r3, r3, r2
    76c6:	18ed      	adds	r5, r5, r3
    76c8:	2700      	movs	r7, #0
    76ca:	42bd      	cmp	r5, r7
    76cc:	d120      	bne.n	7710 <_printf_common+0xc4>
    76ce:	2000      	movs	r0, #0
    76d0:	e010      	b.n	76f4 <_printf_common+0xa8>
    76d2:	3701      	adds	r7, #1
    76d4:	68e3      	ldr	r3, [r4, #12]
    76d6:	682a      	ldr	r2, [r5, #0]
    76d8:	1a9b      	subs	r3, r3, r2
    76da:	429f      	cmp	r7, r3
    76dc:	dad2      	bge.n	7684 <_printf_common+0x38>
    76de:	0022      	movs	r2, r4
    76e0:	2301      	movs	r3, #1
    76e2:	3219      	adds	r2, #25
    76e4:	9901      	ldr	r1, [sp, #4]
    76e6:	9800      	ldr	r0, [sp, #0]
    76e8:	9e08      	ldr	r6, [sp, #32]
    76ea:	47b0      	blx	r6
    76ec:	1c43      	adds	r3, r0, #1
    76ee:	d1f0      	bne.n	76d2 <_printf_common+0x86>
    76f0:	2001      	movs	r0, #1
    76f2:	4240      	negs	r0, r0
    76f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    76f6:	2030      	movs	r0, #48	; 0x30
    76f8:	18e1      	adds	r1, r4, r3
    76fa:	3143      	adds	r1, #67	; 0x43
    76fc:	7008      	strb	r0, [r1, #0]
    76fe:	0021      	movs	r1, r4
    7700:	1c5a      	adds	r2, r3, #1
    7702:	3145      	adds	r1, #69	; 0x45
    7704:	7809      	ldrb	r1, [r1, #0]
    7706:	18a2      	adds	r2, r4, r2
    7708:	3243      	adds	r2, #67	; 0x43
    770a:	3302      	adds	r3, #2
    770c:	7011      	strb	r1, [r2, #0]
    770e:	e7c1      	b.n	7694 <_printf_common+0x48>
    7710:	0022      	movs	r2, r4
    7712:	2301      	movs	r3, #1
    7714:	321a      	adds	r2, #26
    7716:	9901      	ldr	r1, [sp, #4]
    7718:	9800      	ldr	r0, [sp, #0]
    771a:	9e08      	ldr	r6, [sp, #32]
    771c:	47b0      	blx	r6
    771e:	1c43      	adds	r3, r0, #1
    7720:	d0e6      	beq.n	76f0 <_printf_common+0xa4>
    7722:	3701      	adds	r7, #1
    7724:	e7d1      	b.n	76ca <_printf_common+0x7e>
	...

00007728 <_printf_i>:
    7728:	b5f0      	push	{r4, r5, r6, r7, lr}
    772a:	b08b      	sub	sp, #44	; 0x2c
    772c:	9206      	str	r2, [sp, #24]
    772e:	000a      	movs	r2, r1
    7730:	3243      	adds	r2, #67	; 0x43
    7732:	9307      	str	r3, [sp, #28]
    7734:	9005      	str	r0, [sp, #20]
    7736:	9204      	str	r2, [sp, #16]
    7738:	7e0a      	ldrb	r2, [r1, #24]
    773a:	000c      	movs	r4, r1
    773c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    773e:	2a6e      	cmp	r2, #110	; 0x6e
    7740:	d100      	bne.n	7744 <_printf_i+0x1c>
    7742:	e08f      	b.n	7864 <_printf_i+0x13c>
    7744:	d817      	bhi.n	7776 <_printf_i+0x4e>
    7746:	2a63      	cmp	r2, #99	; 0x63
    7748:	d02c      	beq.n	77a4 <_printf_i+0x7c>
    774a:	d808      	bhi.n	775e <_printf_i+0x36>
    774c:	2a00      	cmp	r2, #0
    774e:	d100      	bne.n	7752 <_printf_i+0x2a>
    7750:	e099      	b.n	7886 <_printf_i+0x15e>
    7752:	2a58      	cmp	r2, #88	; 0x58
    7754:	d054      	beq.n	7800 <_printf_i+0xd8>
    7756:	0026      	movs	r6, r4
    7758:	3642      	adds	r6, #66	; 0x42
    775a:	7032      	strb	r2, [r6, #0]
    775c:	e029      	b.n	77b2 <_printf_i+0x8a>
    775e:	2a64      	cmp	r2, #100	; 0x64
    7760:	d001      	beq.n	7766 <_printf_i+0x3e>
    7762:	2a69      	cmp	r2, #105	; 0x69
    7764:	d1f7      	bne.n	7756 <_printf_i+0x2e>
    7766:	6821      	ldr	r1, [r4, #0]
    7768:	681a      	ldr	r2, [r3, #0]
    776a:	0608      	lsls	r0, r1, #24
    776c:	d523      	bpl.n	77b6 <_printf_i+0x8e>
    776e:	1d11      	adds	r1, r2, #4
    7770:	6019      	str	r1, [r3, #0]
    7772:	6815      	ldr	r5, [r2, #0]
    7774:	e025      	b.n	77c2 <_printf_i+0x9a>
    7776:	2a73      	cmp	r2, #115	; 0x73
    7778:	d100      	bne.n	777c <_printf_i+0x54>
    777a:	e088      	b.n	788e <_printf_i+0x166>
    777c:	d808      	bhi.n	7790 <_printf_i+0x68>
    777e:	2a6f      	cmp	r2, #111	; 0x6f
    7780:	d029      	beq.n	77d6 <_printf_i+0xae>
    7782:	2a70      	cmp	r2, #112	; 0x70
    7784:	d1e7      	bne.n	7756 <_printf_i+0x2e>
    7786:	2220      	movs	r2, #32
    7788:	6809      	ldr	r1, [r1, #0]
    778a:	430a      	orrs	r2, r1
    778c:	6022      	str	r2, [r4, #0]
    778e:	e003      	b.n	7798 <_printf_i+0x70>
    7790:	2a75      	cmp	r2, #117	; 0x75
    7792:	d020      	beq.n	77d6 <_printf_i+0xae>
    7794:	2a78      	cmp	r2, #120	; 0x78
    7796:	d1de      	bne.n	7756 <_printf_i+0x2e>
    7798:	0022      	movs	r2, r4
    779a:	2178      	movs	r1, #120	; 0x78
    779c:	3245      	adds	r2, #69	; 0x45
    779e:	7011      	strb	r1, [r2, #0]
    77a0:	4a6c      	ldr	r2, [pc, #432]	; (7954 <_printf_i+0x22c>)
    77a2:	e030      	b.n	7806 <_printf_i+0xde>
    77a4:	000e      	movs	r6, r1
    77a6:	681a      	ldr	r2, [r3, #0]
    77a8:	3642      	adds	r6, #66	; 0x42
    77aa:	1d11      	adds	r1, r2, #4
    77ac:	6019      	str	r1, [r3, #0]
    77ae:	6813      	ldr	r3, [r2, #0]
    77b0:	7033      	strb	r3, [r6, #0]
    77b2:	2301      	movs	r3, #1
    77b4:	e079      	b.n	78aa <_printf_i+0x182>
    77b6:	0649      	lsls	r1, r1, #25
    77b8:	d5d9      	bpl.n	776e <_printf_i+0x46>
    77ba:	1d11      	adds	r1, r2, #4
    77bc:	6019      	str	r1, [r3, #0]
    77be:	2300      	movs	r3, #0
    77c0:	5ed5      	ldrsh	r5, [r2, r3]
    77c2:	2d00      	cmp	r5, #0
    77c4:	da03      	bge.n	77ce <_printf_i+0xa6>
    77c6:	232d      	movs	r3, #45	; 0x2d
    77c8:	9a04      	ldr	r2, [sp, #16]
    77ca:	426d      	negs	r5, r5
    77cc:	7013      	strb	r3, [r2, #0]
    77ce:	4b62      	ldr	r3, [pc, #392]	; (7958 <_printf_i+0x230>)
    77d0:	270a      	movs	r7, #10
    77d2:	9303      	str	r3, [sp, #12]
    77d4:	e02f      	b.n	7836 <_printf_i+0x10e>
    77d6:	6820      	ldr	r0, [r4, #0]
    77d8:	6819      	ldr	r1, [r3, #0]
    77da:	0605      	lsls	r5, r0, #24
    77dc:	d503      	bpl.n	77e6 <_printf_i+0xbe>
    77de:	1d08      	adds	r0, r1, #4
    77e0:	6018      	str	r0, [r3, #0]
    77e2:	680d      	ldr	r5, [r1, #0]
    77e4:	e005      	b.n	77f2 <_printf_i+0xca>
    77e6:	0640      	lsls	r0, r0, #25
    77e8:	d5f9      	bpl.n	77de <_printf_i+0xb6>
    77ea:	680d      	ldr	r5, [r1, #0]
    77ec:	1d08      	adds	r0, r1, #4
    77ee:	6018      	str	r0, [r3, #0]
    77f0:	b2ad      	uxth	r5, r5
    77f2:	4b59      	ldr	r3, [pc, #356]	; (7958 <_printf_i+0x230>)
    77f4:	2708      	movs	r7, #8
    77f6:	9303      	str	r3, [sp, #12]
    77f8:	2a6f      	cmp	r2, #111	; 0x6f
    77fa:	d018      	beq.n	782e <_printf_i+0x106>
    77fc:	270a      	movs	r7, #10
    77fe:	e016      	b.n	782e <_printf_i+0x106>
    7800:	3145      	adds	r1, #69	; 0x45
    7802:	700a      	strb	r2, [r1, #0]
    7804:	4a54      	ldr	r2, [pc, #336]	; (7958 <_printf_i+0x230>)
    7806:	9203      	str	r2, [sp, #12]
    7808:	681a      	ldr	r2, [r3, #0]
    780a:	6821      	ldr	r1, [r4, #0]
    780c:	1d10      	adds	r0, r2, #4
    780e:	6018      	str	r0, [r3, #0]
    7810:	6815      	ldr	r5, [r2, #0]
    7812:	0608      	lsls	r0, r1, #24
    7814:	d522      	bpl.n	785c <_printf_i+0x134>
    7816:	07cb      	lsls	r3, r1, #31
    7818:	d502      	bpl.n	7820 <_printf_i+0xf8>
    781a:	2320      	movs	r3, #32
    781c:	4319      	orrs	r1, r3
    781e:	6021      	str	r1, [r4, #0]
    7820:	2710      	movs	r7, #16
    7822:	2d00      	cmp	r5, #0
    7824:	d103      	bne.n	782e <_printf_i+0x106>
    7826:	2320      	movs	r3, #32
    7828:	6822      	ldr	r2, [r4, #0]
    782a:	439a      	bics	r2, r3
    782c:	6022      	str	r2, [r4, #0]
    782e:	0023      	movs	r3, r4
    7830:	2200      	movs	r2, #0
    7832:	3343      	adds	r3, #67	; 0x43
    7834:	701a      	strb	r2, [r3, #0]
    7836:	6863      	ldr	r3, [r4, #4]
    7838:	60a3      	str	r3, [r4, #8]
    783a:	2b00      	cmp	r3, #0
    783c:	db5c      	blt.n	78f8 <_printf_i+0x1d0>
    783e:	2204      	movs	r2, #4
    7840:	6821      	ldr	r1, [r4, #0]
    7842:	4391      	bics	r1, r2
    7844:	6021      	str	r1, [r4, #0]
    7846:	2d00      	cmp	r5, #0
    7848:	d158      	bne.n	78fc <_printf_i+0x1d4>
    784a:	9e04      	ldr	r6, [sp, #16]
    784c:	2b00      	cmp	r3, #0
    784e:	d064      	beq.n	791a <_printf_i+0x1f2>
    7850:	0026      	movs	r6, r4
    7852:	9b03      	ldr	r3, [sp, #12]
    7854:	3642      	adds	r6, #66	; 0x42
    7856:	781b      	ldrb	r3, [r3, #0]
    7858:	7033      	strb	r3, [r6, #0]
    785a:	e05e      	b.n	791a <_printf_i+0x1f2>
    785c:	0648      	lsls	r0, r1, #25
    785e:	d5da      	bpl.n	7816 <_printf_i+0xee>
    7860:	b2ad      	uxth	r5, r5
    7862:	e7d8      	b.n	7816 <_printf_i+0xee>
    7864:	6809      	ldr	r1, [r1, #0]
    7866:	681a      	ldr	r2, [r3, #0]
    7868:	0608      	lsls	r0, r1, #24
    786a:	d505      	bpl.n	7878 <_printf_i+0x150>
    786c:	1d11      	adds	r1, r2, #4
    786e:	6019      	str	r1, [r3, #0]
    7870:	6813      	ldr	r3, [r2, #0]
    7872:	6962      	ldr	r2, [r4, #20]
    7874:	601a      	str	r2, [r3, #0]
    7876:	e006      	b.n	7886 <_printf_i+0x15e>
    7878:	0649      	lsls	r1, r1, #25
    787a:	d5f7      	bpl.n	786c <_printf_i+0x144>
    787c:	1d11      	adds	r1, r2, #4
    787e:	6019      	str	r1, [r3, #0]
    7880:	6813      	ldr	r3, [r2, #0]
    7882:	8aa2      	ldrh	r2, [r4, #20]
    7884:	801a      	strh	r2, [r3, #0]
    7886:	2300      	movs	r3, #0
    7888:	9e04      	ldr	r6, [sp, #16]
    788a:	6123      	str	r3, [r4, #16]
    788c:	e054      	b.n	7938 <_printf_i+0x210>
    788e:	681a      	ldr	r2, [r3, #0]
    7890:	1d11      	adds	r1, r2, #4
    7892:	6019      	str	r1, [r3, #0]
    7894:	6816      	ldr	r6, [r2, #0]
    7896:	2100      	movs	r1, #0
    7898:	6862      	ldr	r2, [r4, #4]
    789a:	0030      	movs	r0, r6
    789c:	f000 f85e 	bl	795c <memchr>
    78a0:	2800      	cmp	r0, #0
    78a2:	d001      	beq.n	78a8 <_printf_i+0x180>
    78a4:	1b80      	subs	r0, r0, r6
    78a6:	6060      	str	r0, [r4, #4]
    78a8:	6863      	ldr	r3, [r4, #4]
    78aa:	6123      	str	r3, [r4, #16]
    78ac:	2300      	movs	r3, #0
    78ae:	9a04      	ldr	r2, [sp, #16]
    78b0:	7013      	strb	r3, [r2, #0]
    78b2:	e041      	b.n	7938 <_printf_i+0x210>
    78b4:	6923      	ldr	r3, [r4, #16]
    78b6:	0032      	movs	r2, r6
    78b8:	9906      	ldr	r1, [sp, #24]
    78ba:	9805      	ldr	r0, [sp, #20]
    78bc:	9d07      	ldr	r5, [sp, #28]
    78be:	47a8      	blx	r5
    78c0:	1c43      	adds	r3, r0, #1
    78c2:	d043      	beq.n	794c <_printf_i+0x224>
    78c4:	6823      	ldr	r3, [r4, #0]
    78c6:	2500      	movs	r5, #0
    78c8:	079b      	lsls	r3, r3, #30
    78ca:	d40f      	bmi.n	78ec <_printf_i+0x1c4>
    78cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    78ce:	68e0      	ldr	r0, [r4, #12]
    78d0:	4298      	cmp	r0, r3
    78d2:	da3d      	bge.n	7950 <_printf_i+0x228>
    78d4:	0018      	movs	r0, r3
    78d6:	e03b      	b.n	7950 <_printf_i+0x228>
    78d8:	0022      	movs	r2, r4
    78da:	2301      	movs	r3, #1
    78dc:	3219      	adds	r2, #25
    78de:	9906      	ldr	r1, [sp, #24]
    78e0:	9805      	ldr	r0, [sp, #20]
    78e2:	9e07      	ldr	r6, [sp, #28]
    78e4:	47b0      	blx	r6
    78e6:	1c43      	adds	r3, r0, #1
    78e8:	d030      	beq.n	794c <_printf_i+0x224>
    78ea:	3501      	adds	r5, #1
    78ec:	68e3      	ldr	r3, [r4, #12]
    78ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
    78f0:	1a9b      	subs	r3, r3, r2
    78f2:	429d      	cmp	r5, r3
    78f4:	dbf0      	blt.n	78d8 <_printf_i+0x1b0>
    78f6:	e7e9      	b.n	78cc <_printf_i+0x1a4>
    78f8:	2d00      	cmp	r5, #0
    78fa:	d0a9      	beq.n	7850 <_printf_i+0x128>
    78fc:	9e04      	ldr	r6, [sp, #16]
    78fe:	0028      	movs	r0, r5
    7900:	0039      	movs	r1, r7
    7902:	f7fd f983 	bl	4c0c <__aeabi_uidivmod>
    7906:	9b03      	ldr	r3, [sp, #12]
    7908:	3e01      	subs	r6, #1
    790a:	5c5b      	ldrb	r3, [r3, r1]
    790c:	0028      	movs	r0, r5
    790e:	7033      	strb	r3, [r6, #0]
    7910:	0039      	movs	r1, r7
    7912:	f7fd f8f5 	bl	4b00 <__udivsi3>
    7916:	1e05      	subs	r5, r0, #0
    7918:	d1f1      	bne.n	78fe <_printf_i+0x1d6>
    791a:	2f08      	cmp	r7, #8
    791c:	d109      	bne.n	7932 <_printf_i+0x20a>
    791e:	6823      	ldr	r3, [r4, #0]
    7920:	07db      	lsls	r3, r3, #31
    7922:	d506      	bpl.n	7932 <_printf_i+0x20a>
    7924:	6863      	ldr	r3, [r4, #4]
    7926:	6922      	ldr	r2, [r4, #16]
    7928:	4293      	cmp	r3, r2
    792a:	dc02      	bgt.n	7932 <_printf_i+0x20a>
    792c:	2330      	movs	r3, #48	; 0x30
    792e:	3e01      	subs	r6, #1
    7930:	7033      	strb	r3, [r6, #0]
    7932:	9b04      	ldr	r3, [sp, #16]
    7934:	1b9b      	subs	r3, r3, r6
    7936:	6123      	str	r3, [r4, #16]
    7938:	9b07      	ldr	r3, [sp, #28]
    793a:	aa09      	add	r2, sp, #36	; 0x24
    793c:	9300      	str	r3, [sp, #0]
    793e:	0021      	movs	r1, r4
    7940:	9b06      	ldr	r3, [sp, #24]
    7942:	9805      	ldr	r0, [sp, #20]
    7944:	f7ff fe82 	bl	764c <_printf_common>
    7948:	1c43      	adds	r3, r0, #1
    794a:	d1b3      	bne.n	78b4 <_printf_i+0x18c>
    794c:	2001      	movs	r0, #1
    794e:	4240      	negs	r0, r0
    7950:	b00b      	add	sp, #44	; 0x2c
    7952:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7954:	00007ed2 	.word	0x00007ed2
    7958:	00007ec1 	.word	0x00007ec1

0000795c <memchr>:
    795c:	b2c9      	uxtb	r1, r1
    795e:	1882      	adds	r2, r0, r2
    7960:	4290      	cmp	r0, r2
    7962:	d101      	bne.n	7968 <memchr+0xc>
    7964:	2000      	movs	r0, #0
    7966:	4770      	bx	lr
    7968:	7803      	ldrb	r3, [r0, #0]
    796a:	428b      	cmp	r3, r1
    796c:	d0fb      	beq.n	7966 <memchr+0xa>
    796e:	3001      	adds	r0, #1
    7970:	e7f6      	b.n	7960 <memchr+0x4>

00007972 <memmove>:
    7972:	b510      	push	{r4, lr}
    7974:	4288      	cmp	r0, r1
    7976:	d902      	bls.n	797e <memmove+0xc>
    7978:	188b      	adds	r3, r1, r2
    797a:	4298      	cmp	r0, r3
    797c:	d308      	bcc.n	7990 <memmove+0x1e>
    797e:	2300      	movs	r3, #0
    7980:	429a      	cmp	r2, r3
    7982:	d007      	beq.n	7994 <memmove+0x22>
    7984:	5ccc      	ldrb	r4, [r1, r3]
    7986:	54c4      	strb	r4, [r0, r3]
    7988:	3301      	adds	r3, #1
    798a:	e7f9      	b.n	7980 <memmove+0xe>
    798c:	5c8b      	ldrb	r3, [r1, r2]
    798e:	5483      	strb	r3, [r0, r2]
    7990:	3a01      	subs	r2, #1
    7992:	d2fb      	bcs.n	798c <memmove+0x1a>
    7994:	bd10      	pop	{r4, pc}

00007996 <_realloc_r>:
    7996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7998:	0007      	movs	r7, r0
    799a:	000d      	movs	r5, r1
    799c:	0016      	movs	r6, r2
    799e:	2900      	cmp	r1, #0
    79a0:	d105      	bne.n	79ae <_realloc_r+0x18>
    79a2:	0011      	movs	r1, r2
    79a4:	f7ff fc48 	bl	7238 <_malloc_r>
    79a8:	0004      	movs	r4, r0
    79aa:	0020      	movs	r0, r4
    79ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    79ae:	2a00      	cmp	r2, #0
    79b0:	d103      	bne.n	79ba <_realloc_r+0x24>
    79b2:	f7ff fbf7 	bl	71a4 <_free_r>
    79b6:	0034      	movs	r4, r6
    79b8:	e7f7      	b.n	79aa <_realloc_r+0x14>
    79ba:	f000 f812 	bl	79e2 <_malloc_usable_size_r>
    79be:	002c      	movs	r4, r5
    79c0:	4286      	cmp	r6, r0
    79c2:	d9f2      	bls.n	79aa <_realloc_r+0x14>
    79c4:	0031      	movs	r1, r6
    79c6:	0038      	movs	r0, r7
    79c8:	f7ff fc36 	bl	7238 <_malloc_r>
    79cc:	1e04      	subs	r4, r0, #0
    79ce:	d0ec      	beq.n	79aa <_realloc_r+0x14>
    79d0:	0029      	movs	r1, r5
    79d2:	0032      	movs	r2, r6
    79d4:	f7ff fbdc 	bl	7190 <memcpy>
    79d8:	0029      	movs	r1, r5
    79da:	0038      	movs	r0, r7
    79dc:	f7ff fbe2 	bl	71a4 <_free_r>
    79e0:	e7e3      	b.n	79aa <_realloc_r+0x14>

000079e2 <_malloc_usable_size_r>:
    79e2:	1f0b      	subs	r3, r1, #4
    79e4:	681b      	ldr	r3, [r3, #0]
    79e6:	1f18      	subs	r0, r3, #4
    79e8:	2b00      	cmp	r3, #0
    79ea:	da01      	bge.n	79f0 <_malloc_usable_size_r+0xe>
    79ec:	580b      	ldr	r3, [r1, r0]
    79ee:	18c0      	adds	r0, r0, r3
    79f0:	4770      	bx	lr
    79f2:	0000      	movs	r0, r0
    79f4:	00000000 	.word	0x00000000
    79f8:	00000040 	.word	0x00000040
    79fc:	00000014 	.word	0x00000014
    7a00:	00000054 	.word	0x00000054
    7a04:	00000590 	.word	0x00000590
    7a08:	000005a4 	.word	0x000005a4
    7a0c:	000005e6 	.word	0x000005e6
    7a10:	00000626 	.word	0x00000626
    7a14:	00000654 	.word	0x00000654
    7a18:	00000692 	.word	0x00000692
    7a1c:	42003000 	.word	0x42003000
    7a20:	42003400 	.word	0x42003400
    7a24:	42003800 	.word	0x42003800
    7a28:	42003c00 	.word	0x42003c00
    7a2c:	42004000 	.word	0x42004000
    7a30:	00000002 	.word	0x00000002
    7a34:	00001000 	.word	0x00001000
    7a38:	00000002 	.word	0x00000002
    7a3c:	00002000 	.word	0x00002000
    7a40:	00000002 	.word	0x00000002
    7a44:	00004000 	.word	0x00004000
    7a48:	00000002 	.word	0x00000002
    7a4c:	00008000 	.word	0x00008000
    7a50:	00000002 	.word	0x00000002
    7a54:	00010000 	.word	0x00010000
    7a58:	00000f08 	.word	0x00000f08
    7a5c:	00001170 	.word	0x00001170
    7a60:	00001170 	.word	0x00001170
    7a64:	00001170 	.word	0x00001170
    7a68:	00001170 	.word	0x00001170
    7a6c:	00001170 	.word	0x00001170
    7a70:	00001170 	.word	0x00001170
    7a74:	00001170 	.word	0x00001170
    7a78:	00001170 	.word	0x00001170
    7a7c:	00001170 	.word	0x00001170
    7a80:	00001170 	.word	0x00001170
    7a84:	00001170 	.word	0x00001170
    7a88:	00001170 	.word	0x00001170
    7a8c:	00001170 	.word	0x00001170
    7a90:	00001170 	.word	0x00001170
    7a94:	00001170 	.word	0x00001170
    7a98:	00000ef0 	.word	0x00000ef0
    7a9c:	00001170 	.word	0x00001170
    7aa0:	00001170 	.word	0x00001170
    7aa4:	00001170 	.word	0x00001170
    7aa8:	00001170 	.word	0x00001170
    7aac:	00001170 	.word	0x00001170
    7ab0:	00001170 	.word	0x00001170
    7ab4:	00001170 	.word	0x00001170
    7ab8:	00001170 	.word	0x00001170
    7abc:	00001170 	.word	0x00001170
    7ac0:	00001170 	.word	0x00001170
    7ac4:	00001170 	.word	0x00001170
    7ac8:	00001170 	.word	0x00001170
    7acc:	00001170 	.word	0x00001170
    7ad0:	00001170 	.word	0x00001170
    7ad4:	00001170 	.word	0x00001170
    7ad8:	00000f00 	.word	0x00000f00
    7adc:	00001170 	.word	0x00001170
    7ae0:	00001170 	.word	0x00001170
    7ae4:	00001170 	.word	0x00001170
    7ae8:	00001170 	.word	0x00001170
    7aec:	00001170 	.word	0x00001170
    7af0:	00001170 	.word	0x00001170
    7af4:	00001170 	.word	0x00001170
    7af8:	00001170 	.word	0x00001170
    7afc:	00001170 	.word	0x00001170
    7b00:	00001170 	.word	0x00001170
    7b04:	00001170 	.word	0x00001170
    7b08:	00001170 	.word	0x00001170
    7b0c:	00001170 	.word	0x00001170
    7b10:	00001170 	.word	0x00001170
    7b14:	00001170 	.word	0x00001170
    7b18:	00000ef8 	.word	0x00000ef8
    7b1c:	00000f40 	.word	0x00000f40
    7b20:	00000ed8 	.word	0x00000ed8
    7b24:	00000ee8 	.word	0x00000ee8
    7b28:	00000ee0 	.word	0x00000ee0
    7b2c:	00000002 	.word	0x00000002
    7b30:	00000003 	.word	0x00000003
    7b34:	00000028 	.word	0x00000028
    7b38:	00000029 	.word	0x00000029
    7b3c:	00000004 	.word	0x00000004
    7b40:	00000005 	.word	0x00000005
    7b44:	00000006 	.word	0x00000006
    7b48:	00000007 	.word	0x00000007
    7b4c:	00000008 	.word	0x00000008
    7b50:	00000009 	.word	0x00000009
    7b54:	0000000a 	.word	0x0000000a
    7b58:	0000000b 	.word	0x0000000b
    7b5c:	00000020 	.word	0x00000020
    7b60:	00000021 	.word	0x00000021
    7b64:	00000022 	.word	0x00000022
    7b68:	00000023 	.word	0x00000023
    7b6c:	00000028 	.word	0x00000028
    7b70:	00000029 	.word	0x00000029
    7b74:	00000024 	.word	0x00000024
    7b78:	00000025 	.word	0x00000025
    7b7c:	00000026 	.word	0x00000026
    7b80:	00000027 	.word	0x00000027
    7b84:	00000008 	.word	0x00000008
    7b88:	00000009 	.word	0x00000009

00007b8c <_adc_apbcmasks>:
    7b8c:	00020000 00040000                       ........

00007b94 <_adc_biascomp_addr>:
    7b94:	00806020 00806020                        `.. `..

00007b9c <_adc_biascomp_pos>:
    7b9c:	00000903                                ....

00007ba0 <_adc_biasrefbuf_addr>:
    7ba0:	00806020 00806020                        `.. `..

00007ba8 <_adc_biasrefbuf_pos>:
    7ba8:	00000600                                ....

00007bac <_adc_extchannel_msb>:
    7bac:	0000000b 0000000b                       ........

00007bb4 <_adc_gclk_ids>:
    7bb4:	00002221 42000400 42000800 42000c00     !".....B...B...B
    7bc4:	42001000 42001400 42001800              ...B...B...B

00007bd0 <_tcc_apbcmasks>:
    7bd0:	00000200 00000400 00000800              ............

00007bdc <_tcc_cc_nums>:
    7bdc:	00020204                                ....

00007be0 <_tcc_gclk_ids>:
    7be0:	001d1c1c                                ....

00007be4 <_tcc_maxs>:
    7be4:	00ffffff 00ffffff 0000ffff              ............

00007bf0 <_tcc_ow_nums>:
    7bf0:	00020408                                ....

00007bf4 <_tcc_intflag>:
    7bf4:	00000001 00000002 00000004 00000008     ................
    7c04:	00001000 00002000 00004000 00008000     ..... ...@......
    7c14:	00010000 00020000 00040000 00080000     ................

00007c24 <tcc_interrupt_vectors.14047>:
    7c24:	00131211 000029c0 000029ca 000029d4     .....)...)...)..
    7c34:	000029de 000029e8                       .)...)..

00007c3c <adc_interrupt_vectors.14143>:
    7c3c:	00001a19 00002d26 00002d60 00002d70     ....&-..`-..p-..
    7c4c:	00002d8e 00002d80 756c3325 3330252e     .-...-..%3lu.%03
    7c5c:	0000756c 20202020 20202020 00000020     lu..         ...
    7c6c:	20202020 00000000 00643625 756c3625         ....%6d.%6lu
    7c7c:	00000000 20202020 00202020 4f525245     ....       .ERRO
    7c8c:	00393952 2d256325 36257339 73342573     R99.%c%-9s%6s%4s
    7c9c:	00000000 73392d25 25733725 00007334     ....%-9s%7s%4s..
    7cac:	00003722 0000371e 0000371e 00003750     "7...7...7..P7..
    7cbc:	00003750 0000373a 00003728 00003740     P7..:7..(7..@7..
    7ccc:	00003974 00003954 00003954 000039aa     t9..T9..T9...9..
    7cdc:	00003966 00003982 00003958 00003990     f9...9..X9...9..
    7cec:	2000202c 20001e88 2000206c 20001fec     , . ... l . ... 
    7cfc:	20001e48 200000f0 20000358 200005c0     H.. ... X.. ... 
    7d0c:	20000828 20000a90 54544553 53474e49     (.. ... SETTINGS
    7d1c:	00000000 4e414843 204c454e 00000031     ....CHANNEL 1...
    7d2c:	4e414843 204c454e 00000032 4e414843     CHANNEL 2...CHAN
    7d3c:	204c454e 00000033 4e414843 204c454e     NEL 3...CHANNEL 
    7d4c:	00000034 4e414843 204c454e 00000035     4...CHANNEL 5...
    7d5c:	544e4f43 54534152 00000000 47495242     CONTRAST....BRIG
    7d6c:	454e5448 00000053 45444f4d 00000000     HTNES...MODE....
    7d7c:	5f584946 455a4953 00000000 4b434142     FIX_SIZE....BACK
    7d8c:	00000000 25584d44 00000064 25584d44     ....DMX%d...DMX%
    7d9c:	64252d64 00000000 54415453 435f4349     d-%d....STATIC_C
    7dac:	00000048 20584d44 00004843 00000056     H...DMX CH..V...
    7dbc:	4556454c 0000004c 0000736d 41545441     LEVEL...ms..ATTA
    7dcc:	00004b43 41434544 00000059 54535553     CK..DECAY...SUST
    7ddc:	004e4941 454c5f53 004c4556 454c4552     AIN.S_LEVEL.RELE
    7dec:	00455341 0000514c 0000509c 0000509c     ASE.LQ...P...P..
    7dfc:	0000509a 0000513e 0000513e 00005134     .P..>Q..>Q..4Q..
    7e0c:	0000509a 0000513e 00005134 0000513e     .P..>Q..4Q..>Q..
    7e1c:	0000509a 00005144 00005144 00005144     .P..DQ..DQ..DQ..
    7e2c:	000051d4 00005f1c 00005efe 00005eb8     .Q..._...^...^..
    7e3c:	00005dd6 00005eb8 00005ef0 00005eb8     .]...^...^...^..
    7e4c:	00005dd6 00005efe 00005efe 00005ef0     .]...^...^...^..
    7e5c:	00005dd6 00005dce 00005dce 00005dce     .]...]...]...]..
    7e6c:	00006134 0000657c 0000643c 0000643c     4a..|e..<d..<d..
    7e7c:	00006438 00006554 00006554 00006546     8d..Te..Te..Fe..
    7e8c:	00006438 00006554 00006546 00006554     8d..Te..Fe..Te..
    7e9c:	00006438 0000655c 0000655c 0000655c     8d..\e..\e..\e..
    7eac:	00006760 2b302d23 6c680020 6665004c     `g..#-0+ .hlL.ef
    7ebc:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    7ecc:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    7edc:	64636261 00006665                       abcdef..

00007ee4 <_init>:
    7ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ee6:	46c0      	nop			; (mov r8, r8)
    7ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7eea:	bc08      	pop	{r3}
    7eec:	469e      	mov	lr, r3
    7eee:	4770      	bx	lr

00007ef0 <__init_array_start>:
    7ef0:	000000e5 	.word	0x000000e5

00007ef4 <_fini>:
    7ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ef6:	46c0      	nop			; (mov r8, r8)
    7ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7efa:	bc08      	pop	{r3}
    7efc:	469e      	mov	lr, r3
    7efe:	4770      	bx	lr

00007f00 <__fini_array_start>:
    7f00:	000000bd 	.word	0x000000bd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
    UNUSED(n);

    __asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
        "SUB r0, r0, #1 \n"
#endif
        "CMP r0, #0  \n"
        "BNE loop         "
    );
}
2000000a:	4770      	bx	lr

2000000c <cycles_per_ms>:
2000000c:	1f40 0000                                   @...

20000010 <cycles_per_us>:
20000010:	0008 0000                                   ....

20000014 <g_interrupt_enabled>:
20000014:	0001 0000                                   ....

20000018 <device_settings>:
20000018:	0008 0000                                   ....

2000001c <key_pressed>:
2000001c:	0001 0000                                   ....

20000020 <selected_menu>:
20000020:	0cf8 2000                                   ... 

20000024 <_impure_ptr>:
20000024:	0028 2000                                   (.. 

20000028 <impure_data>:
	...
